/lib/ld-linux-aarch64.so.1
libpthread.so.0
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
pthread_rwlockattr_init
pthread_getspecific
pthread_getschedparam
sigaction
pthread_condattr_init
recvfrom
pthread_mutex_unlock
pthread_rwlock_rdlock
pthread_join
pthread_create
sendto
pthread_once
pthread_rwlockattr_setpshared
pthread_rwlock_wrlock
__errno_location
pthread_sigmask
lseek
pthread_rwlockattr_destroy
pread
connect
send
nanosleep
pthread_cond_signal
pthread_setaffinity_np
pwrite
pthread_mutex_lock
pthread_mutex_trylock
pthread_rwlock_init
pthread_condattr_setclock
pthread_mutex_destroy
pthread_cond_wait
accept
pthread_mutexattr_init
pthread_cond_destroy
pthread_rwlock_unlock
pthread_cond_timedwait
pthread_detach
pthread_attr_getdetachstate
pthread_rwlock_tryrdlock
recv
__pthread_key_create
pthread_mutexattr_settype
pthread_rwlock_trywrlock
pthread_setspecific
pthread_condattr_setpshared
pthread_setschedparam
pthread_condattr_destroy
pthread_cond_init
pthread_rwlock_destroy
pthread_cond_broadcast
fsync
fcntl
pthread_yield
pthread_mutexattr_destroy
pthread_mutexattr_setpshared
pthread_mutex_init
lseek64
pthread_key_delete
libm.so.6
__gmon_start__
log2f
ceil
libgcc_s.so.1
_Unwind_Resume
__eqtf2
_Unwind_GetLanguageSpecificData
_Unwind_GetIPInfo
_Unwind_GetDataRelBase
_Unwind_GetRegionStart
_Unwind_SetIP
_Unwind_DeleteException
_Unwind_RaiseException
_Unwind_Resume_or_Rethrow
_Unwind_SetGR
_Unwind_GetTextRelBase
libc.so.6
rmdir
vsnprintf
free
system
bind_textdomain_codeset
poll
__wcscoll_l
putwc
wcsnrtombs
getifaddrs
strncpy
fdopen
bindtextdomain
strncasecmp
__nl_langinfo_l
readv
wmemmove
__strtod_l
perror
chdir
sprintf
dgettext
strtold_l
btowc
inet_ntoa
strsep
strerror_r
if_nametoindex
inet_addr
fflush_unlocked
strchr
readdir
getpid
writev
ftruncate
timerfd_settime
if_indextoname
strtoul
shmctl
fwrite_unlocked
mkdtemp
ftell
__strtof_l
ungetc
sigfillset
prctl
__wcsftime_l
freeaddrinfo
__wctype_l
fork
__freelocale
wmemset
fchmod
__printf_chk
unlink
pathconf
strnlen
freeifaddrs
__memcpy_chk
wmemchr
__assert_fail
__strcat_chk
get_nprocs
sched_yield
strcmp
fflush
readdir64
fclose
__fxstat
geteuid
wcscmp
__cxa_atexit
__isoc99_sscanf
readlink
statvfs64
usleep
listen
strftime
sysconf
getegid
syscall
gettimeofday
strcpy
__iswctype_l
closedir
epoll_create1
__chk_fail
ftello64
strpbrk
fread_unlocked
utime
putchar
opendir
realloc
fread
wmemcmp
getpwuid
getrlimit
isalpha
strspn
getpeername
posix_memalign
__towlower_l
feof
epoll_ctl
srand
atoi
getuid
__strftime_l
strtol
mbsnrtowcs
mbrtowc
__xstat64
getsockname
localtime
__snprintf_chk
wmemcpy
getgid
fseeko64
__vfprintf_chk
shutdown
getnameinfo
__strcoll_l
getsockopt
calloc
setsockopt
__uselocale
strtoull
strrchr
strcasecmp
__strxfrm_l
__towupper_l
getprotobynumber
stdout
symlink
strstr
pthread_self
munmap
getenv
socketpair
sigemptyset
timerfd_create
fopen64
isspace
access
strdup
__newlocale
strlen
getservbyname
ferror
__cxa_finalize
__ctype_get_mb_cur_max
sendfile
wcslen
__memset_chk
__xstat
fileno
setsid
qsort
mlock
umask
fwrite
accept4
fopen
fputc
tolower
getcwd
fputs
__lxstat64
pipe
ctime_r
isalnum
isxdigit
pipe2
getgrgid
__ctype_tolower_loc
truncate64
__libc_start_main
munlock
fseek
eventfd
gmtime_r
__sprintf_chk
mbsrtowcs
setpriority
epoll_wait
stderr
epoll_create
freopen
abort
__vsnprintf_chk
fgetc
ungetwc
shmat
strtoll
gai_strerror
fgets
ispunct
__stack_chk_fail
ctime
bind
strcat
wctob
stdin
getaddrinfo
in6addr_any
ioctl
nice
__ctype_b_loc
setenv
setlocale
__wcsxfrm_l
clock_gettime
strncmp
__duplocale
mmap
setbuf
wcrtomb
localtime_r
setvbuf
__fxstat64
socket
mkdir
fprintf
ntohl
__fprintf_chk
setrlimit
shmget
ntohs
rename
fdatasync
readdir64_r
shmdt
htonl
select
malloc
htons
posix_fallocate
ld-linux-aarch64.so.1
__stack_chk_guard
GLIBC_2.17
GCC_3.3
GCC_3.0
GCC_4.2.0
_ZGTtnam
_ITM_memcpyRtWn
_ITM_RU1
_ZGTtdlPv
_ITM_RU8
_ITM_addUserCommitAction
_ITM_memcpyRnWt
``'	
DP	y
_h 9
_($9
_h%9
_()9
_h*9
_(.9
_h/9
_(39
_h49
_(89
_h99
_(=9
_h>9
_p y
Rc8@
DP"y
C0$y
RcHA
Dp%y
Rc`A
RcLD
DP'y
Rc$F
RcPB
D0)y
Rc\C
Dp*y
Rcd@
Rc\B
DP,y
Rc,C
RcDD
D0.y
Dp/y
DP1y
D03y
RcxB
Dp4y
Rc8C
RcpA
DP6y
RclF
D08y
19TB
Dp9y
DP;y
RclE
D0=y
Rc\C
Dp>y
RcLC
RcpD
RcHD
Rc(B
RcXF
RchB
RcxF
RcTG
RctA
RcPC
Rc,C
Rc\E
RcDG
Rc @
Rc@E
RcLG
RchA
Rc<E
Rc|E
6sB2
6sB=
6s" 
@9`B
?h 8
G9 >
G9 9
"w9s2
RB  
`b@9
T`Z@
T`Z@
T [@
TaZ@
T`Z@
T`Z@
6``9
T`Z@
T`Z@
T@[@
T [@
AHa8b
 K`8a
4a*@
4b*@
@9@	
4 (@
@9a"@
4`*@
ab@9
A9D6
4E(@
A9b1
@9D)
4D(@
T #@
A9`%
@9 %
4aJ@
4`J@
4 (@
 H`8a
 X`xa
@c@9
@c@9`
4%(@
@9!2
A9D*
4$(@
T`#@
A9 &
#B9a
J`8a
4 (@
9!4F
(A9"
"A9!
R!(F
@9!"
cC9@
@9#+
T  @
4ZOF
(9Z]
Tb|}
9!pC
dA9s
Tu"@
fA9 
T!|@
 X`xa
TA @
T`Z@
Tun@
Tu"@
T!@$
j#8c
9!4F
T`&@
T`6@
*@y"
 "kb
"@y`
 #kb
? "k
 @yb
_ &k"'
@)d~@
q!|@
Zc|%
@)d~@
R!|@
5`R@9
T`R@9@
5`V@9
R#h`8
T$h 8
`V@9
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
Tv"@
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9
5`V@9
#h`8c	
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9
5`V@9
#h`8c	
R#h`8
T$h 8
`V@9
@9`x
R@9`
V@9 
@9`x
#h`8
T$h 8
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
AHa8b
J`8a
K`8a
J`8a
J`8a
J`8a
J`8a
J`8a
J`8a
b@9-
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
4a*@
4a*@
J`8a
 c@9@
4 K@
 c@9
4a*@
J`8a
 c@9@
4 K@
 c@9
4a*@
J`8a
 c@9@
4 K@
 c@9
 H`8a
 H`8a
 H`8a
 X`xa
@c@9
`@9"
@c@9
 H`8a
 X`xa
@c@9
`@9"
@c@9
7`"@
T`"@
Tbj@
TuZA
7@;A
R!|@
r!|@
CA9`
Ta @
Ta.@
Ta"@
T@@@
CA93
T t@
"J9"
T@x@
CB9@8
Cyar
9!4F
T"cD
R!@8
CA9`
B9 	
Tu6@
Ta"@
R x@
7 @@
U)e"
Ta@!
4`B@
Ta#@
T@Hc
T@Hc
Ta @
T  @
TA @
T@ @
9WHB
G9XHB
4Ap@
TAt@
$T9"
TcZ@
T @ 
T @ 
Tt:@
cB9v
T`"@
T`@ 
T`@ 
R!$@
cJ9`
T@x@
@#@yC
He8"
abT9`
4  B9
Az@2
 B9 
I9tB
F9 =
T`rB
R!XA
T #@
TA @
RaB@
Q`#	
'FmG
'FmC
T4_@
CB9`
4#hA
CB9 
S?`Fk	
S_PAk
R!@8
RaB@
@9 0
D9`	
T#|@
C	9B
T` @
Tb @
T#|@
*jt	
Ta @
qb.@
R`2@
qb.@
Tab@y
@9_(
9a2@
(T9`
RaB@
Ta"@
T  @
6 D@
cD9@
@D9 
Q) 	
T`z@
 6`F@
Txs@
QB @
/%4@
CA9 
T@ @
K!|@
T`f@
T@ @
T  @
T`C@
T3sD
TA @
T[$@
@h`8
Z)bn
R!@@
R`*D
I9@E
TA @
I9EpC9
#G9 :
T@ @
T`*D
`!9'
C)}"
G9 w
T` @
CF9 
#G9@D
#G9 
CF9`
@u.6
@C9x
#G9`4
4ab)
#G9!
CF9 
a^jk
T!@$
Tuz@
T@ @
TE|@
Tt"@
CA9@
CA9`
aj`8
TtVD
Tu"@
TxfG
T`VG
bb	9
fJ9af
bbI9af	
afJ9
9`RA
T`V@
@99C5
h78`^@
h48@
h58w
h78`V@
h78t
T3T@
2BD@
T@ @
T`Z@
Tun@
TaB@
TaB@
TeD@
Cha8
h!8!
jb8dh"8B
j`8bj 8
kb8$k"8B
h!8!
j`8aj 8
h:8s
TaN@
9!4F
k`8Ak 8
ka8`h!8!
CB9`
9!4F
7e"@
e"@y
T@ @
TaB@
TvR@
T`R@
c"@y
fb@9a
ef@9
E)b2@
df@9
eb@9
E)b2@
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9
T`R@9
5`V@9 
`V@9
R#h`8
T$h 8
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
_8`B
`R@y
4aBD9`
5`bD9`
8#,@
B9|BD9
uBD9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
T@Hd
T@H`
T@H`
hexg
Tt*@
Tt*@
5`R@9
T`R@9
5`V@9
`V@9
#h`8
T$h 8
AHa8b
aHa8c
b@9M5
b@9}4
4a*@
4a*@
4a*@
4a*@
4a*@
T @ 
T @ 
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
T3k@
 H`8a
 H`8a
 H`8a
 H`8a
 H`8a
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@9a"@
4`*@
@K`8a
K`8a
 H`8a
b@9!
@K`8a
K`8a
 H`8a
b@9!
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
?7|2
@zA	
D9A 
D9  
9!4F
r@9`
z@9 
B9@ 
r@9`"
v@9 $
#C9@
9arC
T`rC
cB9`
9aJC
5sJC
T  @
T@;@
*!t@
T@;@
F9@M
cF9 #
T` @
CE9`
TvRD
Tt"@
4	xd
`"@9
V G9
Tb*@y
#@y@#
#B9`
CA9`
9{.@
5 y9`
 99A
bha8
J`h!8
A9sB5
h`8ah 8
T`Z@
h68u
h58`
@ G9"
@D9d
A9{j
"@y"
TS8A
bja8
h!8!
4"dA9 
bja8
h!8!
5`b@
	9s"
TujA
`"J9`
4`BA
T`*@
	9v"
C9 @C
a"J9`BA
"J9 
cA9`
cA9 
5 C5
9@c@
CC9`
5Bc@
5 C5
5 C5
T C5
c @y
T C5
`"J9@
D9@`
D99M
Td.B
R($A
cJ9"
I9AP
@9@P
 H`8a
4`"A
 H`8a
J!k 
(@yF
@)s~@
E9@)
5`b@
TaB@
TcB@
T`B@
CA9`
@9@k98a
j`8Bk 8
j`8bk 8
j`8aj 8
Cha8
h!8!
"h`8
j`8aj 8
T`^@
@ha8
h!8!
jb8eh"8B
jc8bj#8c
k"8B
h!8!
j`8aj 8
5`R@9
Ta<@
T`R@9
5`V@9
`V@9
Ta<@
#h`8
T$h 8
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
Ha8a
T  @
T  @
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
T  @
B9`@
T`"@
"@yB
SAyzb
`bA9`
5`V@
@K`8a
T K`8a
b@9a	
`@9b
@K`8a
T K`8a
b@9a	
`@9b
@K`8a
T K`8a
b@9a	
`@9b
@K`8a
T K`8a
b@9a	
`@9b
@K`8a
T K`8a
b@9a	
`@9b
5`~_
5`~_
4"gA9 
J`8a
J`8a
J`8a
 H`8a
b@9'
K @"
_8bju8
cjt8
cjt8
9dj58"
Tz"@
9!pC
#D9 
#D9`
TF|@
aj`8ah 8
9arC
9srC
R h`8
C9  
 hc8U
* h#8
ha8K
h78`^@
h48@
h68w
h78`Z@
h78t
T` @
T` @
bja8
h!8!
T`VD
@9 	
fA9 
5tz@
cL9A
cL9@
cL9A
h"8U
cL9@
h$8?
Q!|@
9X<@
B9A @
4sJC
TaB@
T#|@
TaB@
R!,F
7@KC
q!HC
Ta"@
T@ @
gA9 
fA9 
TeZ@
CC9 
CC9 
9!4F
C9 	
C98/F
dh`8Dh 8
j`8ah 8
j`8Ah 8
 H`8a
bja8
h!8!
H9 ?
7!c/
R9c/
R$c/
h78`^@
h48@
h68w
h78`Z@
h78t
TtVB
TaB@
T`"@
h"8B
T {t
TgD@
TaB@
T@ @
TaB@
T {t
5`R@9
T`R@9
5`V@9
`V@9
R#h`8
T$h 8
@9 	
fA9 
5tz@
T@@ 
T Hb
T@@ 
bHb8c
Ta"@
9 L@
J`8a
J`8a
J`8a
J`8a
@9a"@
4`*@
 H`8a
c@9`
 H`8a
 X`xa
@c@9
`@9B
@c@9
B9 +
7zZD
5abA9`b
bbA9
5`bA9
bbA9#
4vVA
bA9B
bbA9
@9`b
*`xF
h!8!
T!@#
4"gA9 
gA9 
gA9 
RB|!
T`F@
T`F@
Tu:@
(7a3
h583
h583
R4hs8
h78s
4hs8
4hs8
T#ht8
T7ht88C
7h68
7h68
T7h68s
7hs8x
7h68
ht8?p
hv8?
hd8?
7`.@
T`:@
_8bju8
cjt8
cjt8
9dj58"
A9 	
h#8e
5|RB
@9a"@
4`*@
4`*@
J`8a
ac@9
4((@
`c@9
TBT@
4%(@
4`K@
 H`8a
 X`xa
@c@9@%
@c@9@
FB8C
j`8ah 8
j`8ah 8
k`8ah 8
j`8ah 8
5BK@
j`8ah 8
j`8ah 8
j`8Ah 8
TaF@
6aJ@
 7a~@
6aB@
 7en@
'6aN@
j`8"h 8
T!@#
j`8"h 8
j`8ah 8
j`8ah 8
h!8!
T H`
T H`
T!|@
  A9 
T`R@
TaR@
h!8!
T@ @
5`R@9 
`V@9
T`R@9
5`V@9
#h`8
T$h 8
T`n@
T`"@
T`r@
T`"@
TCHc8_
TCHc8
TCHc8_
TCHc8
TCHc8_
TCHc8
Ha8e
T@H`
T@H`
TTK@
TaB@
CA9`
5a2@
Tab@
T`&@
T@ @
4y"@
B9B7@
T`"@
Ta"@
CA9`
CA9`
T`"@
Ta"@
T  @
TtVD
Tu"@
T`Z@
T3k@
TaB@
Tu^D
Tw"@
TvVA
TaR@
TaR@
Taj`
TaB@
TB	@
T)}I
T0 c
T0 `
T0 c
T`h`
4"gA9 
Ttn@
`b@9`
J`8a
b@9Xt
J`8a
J`8a
J`8a
b@9Br
J`8a
J`8a
@9a"@
4`*@
@9a"@
4`*@
 H`8a
c@9`
 H`8a
c@9`
 H`8a
 X`xa
@c@9
`@9"
@c@9
9!4F
TA#@
T!#@
#Dyab
bja8
h!8!
*@| 
T#|@
Ta"$
T@ @
G!9s
C`9af	
`b	9b
A9df
9#h@
&0B9
%4B9#8B9!<B9
Cha8
h!8!
j`8aj 8
kb8$k"8B
jb8dh"8B
cj`8
h!8!
aj`8
j`8aj 8
af	9
ah`8
T#xw
TyB@
Tc6@
T@ @
T #@
T #@
T" @
Rs~z
Ta @
4"dA9 
9wjO
j`8ah 8
5  @
9 @)
4"gA9 
4`*@
J`8a
ac@9A
A9`%
4`K@
`c@9
TBT@
4`K@
 H`8a
 X`xa
@c@9 %
@c@9@
T`"@
S@H`8
CH`8!
*AH 8
`@9D
f@9`
Hd8jHd8
h$8D
ha8A
h!8!
h!8!
`@9C
@8_8
T4@4
f@9 
T6@6
b@9A
h!8!
C9a2
4"dA9 
C9a2
C9 2
C9a2
gA9 
4BgA9 
gA9 
Tsx 
T3T@
c`R9
!`R9b
F9U/
ha8c
ic8B
4`:@
 @9#
"@9@
B@yQ
`B@9c
aC@y
 @@y?@
"@9@
Ta#$
*`wA
R!@@
*`wA
*`wA
@9`$
fA9 
BzMi
cT9\C
cT9`"
cC9`
@9@e
@9 3
 h:8
T:h88
:h88
T`2@
T`6@
T`:@
T`>@
T`2@
T`6@
T`:@
T`>@
R!@P
aj`8ah 8
"@yB
4"gA9 
3B9`
fA9 
"A9a
"A9`
A9` 
T`&@
T`VI
B@yz"
7`n@
B@y{"
7`j@
r | 
9BHC
TtrD
T|"@
T@ @
9!pC
I9 =
T@sC
T@ @
96T@
 h98
T9h78
9h78
9!pC
cC9@	
#L9 
T  @
T  @
I9  
T#D@
9arC
9 GC
T9GC
 X`xa
h78`^@
h48@
h68w
h78`Z@
h78t
 h98
T9h88
9h88
3B9`
gA9 
3B9`
gA9 
9!pC
&Ema#$
9!sC
9!sC
_x!H
99sC
9{sC
RsrC
9!|@
@9 	
fA9 
5tz@
T`"@
"@ya
T!#@
T`6@
T`:@
T`>@
7[wA
RF#@y%
#C9 
RZKC
9AsC
C#@y
T9GC
H#@y
T GC
T`VH
hRAy
	9n<@
D9L4
T C@
T` @
T` @
ah`8
Tu"@
Tur@
TuB@
CB9`
@z!	
9!4F
9 XA
CB9`
46W@
Ta"@
Ta"@
T`B@
T`"@
T`B@
T`j@
T@Hc
T@Hc
Ha8a
T:o@
T4o@
9!pC
`bC9
abC9A
D9`'
@9@4
!PAy
H9`N
cC9 
cC9 
T`"@
8a:@
Ta_B
T`_B
Tu"@
Tur@
Tvf@
TuB@
Tv6@
TtbN
Txr@
Txf@
TxB@
Tx6@
T`"@
T`"@
A9!k
a"C9v
T`&@
Tb"@
9aB@
Tb"@
Tu^N
Twr@
TwB@
7s#@
8U$	
@9 !
SD,	
*}'	
gA9 
CB9!
q"`+
c	9~
C9 %
R|.	
gA9 
RB /
fA9 
fA9 
Rc@/
#C9 
3C9 	
gA9 
R($@
)s~@
j`8bj 8
CB9{
CB9`
!k`8
A9@O@
k`8Ak 8
cB9@
Taj`8
`ja8`h!8!
fA9 
fA9 
T8h68
fA9 
4`*@
 H`8a
c@9 
TBT@
 H`8a
 X`xa
@c@9
@c@9@
9!4F
9!4F
T@/@
Cha8
j!8!
T`"@
Ta"@
T!#@
T`&@
ah`8
'Fm]
9!pC
Tb"@
TvVA
TtB@
Tv6@
 H`8a
 X`xa
@c@9
`@9"
@c@9
T`"@
T`F@
Ay@#
"#@ybR
RAyd
RAyd
9!pC
RAyd
9!4F
?  k
78wA
aRAy
9!pC
T`2@
T`6@
T`:@
T`>@
#@y%
/Gmb
T` @
T`:@
T`z@
T  @
bja8
h!8!
T`F@
TP)"T
TwRB
T!G@
Ref@
TsR@
Ts:@
TwRB
CB9`
CB9`
9!4F
9!4F
#hb8
j"8B
9!4F
#hb8
j"8B
RaB@
4`Z@
TaZ@
T`F@
Ts:@
TbB@
*`tA
CB9 
T WB
Ts~@
5`r@
TAh`
Tb~z
Ta^@
CC9@
r`~ 
C9@:
CB9`
Q | 
R!XA
TA@!
C)Dl
j`8aj 8
T|RB
Tu2@
T`j@
Tu2@
Tu2@
T`V@
@99C
h78`^@
h48@
h58w
h78`V@
h78t
A9a"
9aj`
Tar@
9aj`
9aj`
T`G@
Rev@
RbB@
RbR@
Rej@
Rb>@
Tar@
T`zt
TxZB
TzBB
TaB@y
TaB@y
#B9c
T`"@
9!pC
5b"@
CA9`
cB9@
9!4F
5arC
RsrC
CB9 
9!4F
Cha8
j!8!
TaC@
*v|@
T@'@
CB9@
CB9 
T@'@
T`"@
T` @
CB9@
5a&@
CA9sN
T`"@
T`B@
T@ @
T" @
T|Z@
T H`
T Hc
T!he
5@@9 
9!HC
9!sC
TwJ@
TwR@
3C9 	
gA9 
TaZ@
TaB@
TaB@
CA9`
#D9`
TaZ@
TvbA
Ta @
G9Ri
CGy"
cM9 
cM9@
aj`8
T33@
"@yB
T33@
T`"@
T`B@
RAyaRAy
9l4@
Tu2@
TaB@
%#@y
T@ @
T`*@
TaB@
T`b@
T`*@
T`b@
T`*@
M9j,M
y($@
T`&@
T`&@
TdBH
{)`B^8hR^8
gQ9k
T|ZC
T@#@
T|ZC
T@#@
Ch`8
AH`8
@Hc8!|
9!4F
cB9@
cB9`
TsFC
a8"T
CB9`
i"A)
i"A)
_8bju8
cjt8
cjt8
9dj58"
cM9`.
CD9 '
D9@&
gA9 
4$gA9 
ybhb8
ybhb8
5hb8
y"C@y
y"C@y
5hc8
Tf|@
5hb8
AXaxb
SCy_
 k58
T x`
9!4F
9!4F
R!DC
E9A6
E9A6
CB9@
E9!6
5`FC
CC9`
E9!6
CC9@
5`FC
E9a.
qs"$
CB9`
E9!6
CC9@
C9@&
B9`%
ah`8
TA @
T  @
CC9 1
CC9@6
CC9!
r@9@
C9@>
c	9T
CC9`
E9 2
cB9`
T@ @
fA9 
cJ9 
lG)#
Dz #
#E9 
R!DC
R!DC
R!DC
T@ @
R!DC
h;8Z
h98_
R!DC
cB9`
E9a5
R!DC
cC9`
E9a5
yA#$
TA#$
TA#$
T@ @
"A9`
T5oF
T@GC
R!DC
CB9@
R!DC
CB9@
E9A5
CD9@
T@ @
E9!5
T@#@
T@ @
T@ @
TanH
cC9`
T`&@
T`&@
T`&@
T '@
 H`8a
Tu"@
T`B@
Tu"@
9!4F
T"(O
@9`B
Ta.@
@9@k98u
`hu8`h48
@9@k98
@hc8
j48b
`hu8`h48
@9@k98
`kd8@k98u
`ht8`h58u
RBT7
RB$;
T`B@
Tt"@
4"dA9 
Tb @
T  @
T`"@
C9A-
fA9 
Ta[@
T`&@
Tb~@
T {t
Rf|$
R!|$
*avA
CA93
A9sb
CA9_
T`R@
T`R@
TA @
?h38
!hs8
CA9`
CA9 
CA9 
CA9@
T S@
T!#@
T`S@
T`S@
R`S@
T`R@
Ta"@
T`S@
T`S@
R`S@
Ty#@
T xs
4 xs
Tb|J
T`h`
cB9@
CA9`
RB @
CB9`
?h38
G)]P
Tb"@
cB9`
5(!`
'Fma
/(A`
cB9`
T O@
4{'A
C	9#4A
r#@=
@9@I
bB9@
T`|I
_8aC
Ra*@
@@9a
TuB@9
RF @
4Z'A
cC9 
7	mM
D9 '
cD9!
#C9@
CB9d
T`B@9
aBA9
h@93
#D9 +
B9g#
#D9`
T`"@
c@@9C@
CE9 
TVo@
#D9 
`rB9
R | 
5H9i
E9 +
S)$HC
TvB@9
Ta/@
Ra/@
5`KC
T`KC
I9@+
q`~B
 H`8a
Ta*@
T`&@
T`&@
h`8ah 8
T!|@
TB|@
T #@
T3T@
@@9d@
rB9`
TaB@
dhb8
h"8B
TvVA
Ta"@
TvVA
TaR@
Tb*@
Tb*@
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
c@@9C@
@@9`B
TD|O
T"@@9$
Ta|T
c@@9C@
T`|T
^)aB
T`n@
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
T`&@
aB@9
!C@9aB
B9`B
@@9aB
aC@9 
@C@9
Te|Q
@@9?
CA9)
Te|Q
TC|Y
T |Y
_8B|
T@|Y
T"|Z
T-|Z
T"|Z
*j/@
gC@9
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
4a*@
 H`8a
@K`8a
K`8a
 H`8a
b@9!
 H`8a
 X`xa
 c@9
`@9B
 c@9
 H`8a
 X`xa
@c@9
`@9b
@c@9
 H`8a
 X`xa
 c@9
`@9B
 c@9
#B9 
9!4F
j`8ah 8
@9 	
j`8ah 8
T  @
Rh&B
A9h&@
h!8!
Ta.@
j`8ah 8
7`C@
T@Hc
T@Hc
@7@9
T` @
3By9
cD99
Rc@/
h!8!
h!8!
T` @
T` @
T! @
@ha8
h!8!
jb8eh"8B
jc8bj#8c
k"8B
h!8!
j`8aj 8
Bka8
h!8!
T`*@
T`"@
T`B@
Tt"@
j`8"h 8
?h"8
Ta*@
?h 8
5`R@9
T`R@9
5`V@9
`V@9
R#h`8
T$h 8
J`8a
Twn@
Tw"@
B	9a
Tu"@
T$O@
4`*@
J`8a
ac@9
A9E/
4((@
A9a'
`c@9
TBT@
4%(@
4`K@
 H`8a
 X`xa
@c@9@%
@c@9@
RBo@
T Hb
T Hb
T`@ 
T Hb
T Hb
*a^@
T`B@
Tt"@
dA9 
5tz@
gA9 
gA9 
h78s
4"gA9 
5`R@9
T`R@9@
5`V@9
R#h`8
T$h 8
`V@9
T" @
T#|@
k4\C
T  @
T6$@
T@ @
T` @
Tv$@
T@ @
k C@
Ta*@
T`*@
T  @
RZKC
Ra"@
Qd|$
rBHC
7SmB
h2@yC
Xz 	
R4@V
q"L@
ra~!
Xz 	
R4@V
5`R@9@
T`R@9 
5`V@9
R#h`8
T$h 8
`V@9
T` @
TA @
gA9 
3C9 	
gA9 
aBA9
aBA9z~
4cgA9 
5tz@
9!4F
R`GC
Ta"@
T`2@
0B9 
<B9e2
T` @
T`$@
aDH8
:B9@
2B97
>B9$0
6B9 
@zA	
`2B9
a2B9
A9`2
5`.F
T` @
T`$@
9#h@
&0B9
%4B9#8B9!<B9
r@| 
T`B@
R!@@
9!4F
Ak`8Ah 8
Bk`8bh 8
CD9 
Tu*@
f@9`
4`*@
@9 	
fA9 
5tz@
fb@9a
ef@9
E)b2@
gA9 
9@sC
5`:@
RuJ@
RB05
5v"@
TA @
T  @
TA @
TA @
TA @
TA @
T`rB9
T`z@
T` @
 0B9`
5 h@
T` @
T` @
T` @
Ta @
Ta @
Ta @
Ta @
Ta @
T` @
T` @
Ta @
T` @
Ta @
T` @
T@ @
D9`!
4"gA9 
4"dA9
T  @
T`"@
4"dA9 
4bgA9 
RB('
T`"@
T@ @
T@ @
T@ @
T` @
T` @
T` @
@9 	
fA9 
5tz@
@9 	
fA9 
5tz@
5xz@
:h|88
h88A
k78a
"k`8
j"8B
D#@y
Tu^@
Tu^@
Tu^@
Tu^@
Tu"@
T {t
TgD@
TbF@
TbF@
TcF@
h"8ar
T#D@
T#D@
	9s+
aB@9C
aB@9C
$@@9e
@@9a
`bA9
bbA9
B@9"
 A9g
"A9@0
T"7@
y +@
T [@
T!7@
T!7@
@9f&@
A9gR@
T@ @
T  @
T@S@
T!#@
T@ @
B@9Vs
T"7@
SBy +@
R [@
T!7@
R [@
T"7@
#A9 
@9`'
fA9!
T`B@
4"dA9 
gA9 
sC9@ 
4"dA9 
4"dA9 
ebI9
afI9 
R`b	9
3C9 	
gA9 
_8bju8
cjt8
cjt8
9dj58"
_8 *87
ak`8
T@Hc
T@Hc
h!8!
h!8!
T @ 
@9@H
4"dA9 
4bgA9 
h:8`j@
@9`n@
9!|@
T  @
RB|@
@@JBV
@9B<
@9B 
TaB@
TEhe8
R? %
TAhd8?
,@9#
"`@9!
h"8{
5w"@
5v"@
@9`$
CA9s
CA9 
CA93
CA9s
CA9`
CA9`
CA9`
CA9`
CA9`
CA9`
T`X@
0@9"
0@9_
0@9"
B @9
@9_4
c@y 
 @y"
 @y  @y
 @y  @y
"@y?
"@y!
"@y!
#hb8
jb8djb8c
"ks8
B3@9
B7@9
ha8bh!8!
_8_t
@@9!
d@@9
bha8
j!8!
@9?l
@9_l
#hb8
hb8A
"@yE 
fA9 
Tb>@9
c:@9
d6@9
Re2@9
T`J@9@
bh`8
Ti"@y
h&@y
g*@y)
Zf.@y
Ze2@y
Zd6@y
Zc:@y
Zb>@y
_xcH
ja8@k!8!
@ha8
j!8!
ja8@k!8!
@ha8
j!8!
@9aB
! @y
gA9 
 	87
jc8?
ja8"
jy8?
ja89
jc8`
jy8`
jy89
,@9"
5`~F
A9 #
`B@9
9`B@9@
TfHf8
bHb8_
R`H`8 
Tdhg8
 X`xa
 X`xa
`3I7 
@8?8
T {`
T@{`
@897
@8?8
T k@
TAK`8a
_8aP87
_8A=87TZ
T k@
@8?8
T@@ 
H`8A
ha8'p
T@h@
@X`xb
@8_8
T!@$
T`X@9
@8_8
@9?P
TAX@9?
T5@ 
TuB5
bj`8
 h78
T7h68s
Te @
`2Yz
"0@y!
_h!8
CF9 
! @y
_h!8
_h!8
_h!8
T`bB
TsC3
TwB7
N) |
T) |
@H`8b
CG9@
9!4F
Cha8
j!8!
CB9`
T  @
T" @
T4$@
Ch`8ck 8
*!@5
TB @
T" @
@9?4
_8?4
Tu"@
m	@`
R?h78
h98	(
R h;8:
R h;8:
h:8A
8h 8[
R h;8:
R h;8:
h:8_
R h;8:
h:8L
R h;8:
h:89
R h;8:
h:8&
R h;8:
@9 {
T9h;8
h:8)&
h98	
h;8e
h;8AGL
h;8A/F
h;8B
R h98
h:8i
;h:89
?h98)
h88[
h888
44N 6
T6h78s
T3h68
T6h78v.F
T6h78vFL
:h`8
h;8t
j'8z
`"@9s"
"A9"
BB9"
`#A9"
`CB9"
gA9 
gA9 
3C9`
gA9 
T +@
T +@
T +@
5`R@9 
T`R@9
5`V@9
#h`8
T$h 8
`V@9
bI9?
AcI9`B
`I9"
fI9 
T!@#
c"@9"
cBA9"
cbB9"
AHa8
"@9"
BA9"
bB9"
/Gm{
D9a"
D9a"
D9a"
4"dA9 
4"dA9 
jB95|@
R 8	
@9 	
fA9 
5tz@
RBx-
T@CD
TWoD
*aj 
&,A)
) @)
J*0B)
4+|@
4I|@
4I|@
T@@`
T@@`
7`&@
R`&@
 `B9
_8?(
Tu*@
Tu*@
T`j@
Tu*@
T`j@
Tu*@
Tv"@
4bgA9 
Q"|@
TB|@
!hs8
;hs8 
@9`z`
N@8uza
@9`z`
*zza
*zza
@9`z`
@8uza
@9`z`
@8X#4
<h;8
h98I	
@9`n@
?h98I
@9`n@
h;89
9kx8
h58`n@
?h58
_8an@
<h;8y
R`Z@
h68t
h48`V@
h58t
T`V@
h58t
@8WC5
<h;8
h98	
@9`n@
h;8!
h48`R@
?h;8
@9`n@
?h98I
@9`n@
h;8!
h48`R@
?h;8
@9`n@
h;89
9kw8
h48`n@
?h48
_8an@
<h;8y
h98H
?h;8h
R`^@
?h48
T`V@
?h98
?h;8
dA9s
K?!$kc|
y@<@
y <p
T {t
T`"@
9`&@
C9`U
R3he
RD|$
T x`
C9`	
SYH	
TA @
T{"@
TeZ@
@@)!
	Juo
	Jk	
G(B)
rP C)
N0@)
4d@)k
J <@
EJy4
+VJR
JR*UJ1
J1*TJR
\Jk)^J
Jk)QJ
Jk)OJ{
BJ9+PJZ
+\J+
)[Jk
)EJ*4
TJk)WJ
SJJ)VJ
^J))UJ
)TJc5
)SJC5
OJ#5
[Jc(OJ
+NJa4
EJ[4
!(MJ
+KJcX
(JJcX
+IJc
JZ+VJ
J{+UJ
J{+TJ
J{+SJ
{+^J
(RJ!X
J!(QJ
*GJ/7
)VJ!
r6(VJ)
3N)v
@9cj`8
Sh@ 
iH`8
Sb{`
R`B;
;x@)
<XC)
J1$@
+*Z[
$*BL
,*BX
)*kY
**)Y
&*9[
&*9g
)*9[
	Jka
-*J]
	JBP
	Jc`
"*1n
A)!h
NC)!
kX)W
*fz@
k%8`~@
TCw@
j%8@
@z`z@
R.$@
D)4(@
)80@
*  @
SJ)v
)	QJ
WJL}
	XJ!
FJwt
	JIl
	DJJa
#L)r
CJe$
ZJkE
J)	\JJ
[Ja	KJ)
EJ't
	HJL
GJ@]
SD<H
%.9{h
%.a{w
S9zw
!.:\P
".Azq
S%zn
S,zn
SK]P
9cF@
".Z\P
!.i\P
".azz
&.9zy
".;zb
S|zd
Sm<H
%.'zb
".8=H
Skxb
SYzn
Swxj
 .Tzp
SMxm
 .Axq
S!yk
SKxk
S.yh
 .@xa
S$yy
S#yn
S@z`
S!yw
S0yl
!.L=H
S1^P
?h 8
h!8!
h!8!
h!8!
h!8!
T@D@
RvJ@
RvJ@
RvJ@
RwJ@
5|_D
Te @y
TBd@
B@9`
4@C@9
?h38
?h38
`BB9
4`&@
`FB9
'FmA
QmA+
'FmZC
TuJ@
Tu&@
PB9"
APB9
PB9a+
PB9B*
PB9!)
PB9a)
PB9a#
PB9A"
PB9!!
Tb"@
5`*@
T`*@
9b*@
PB9@
PB9"
TB @
T PB9
Tb.@
PB9a
T PB9@
PB9uB
5`*@
PB9@
PB9!D
Ta"@
5b*@
PB9@
PB9a.
T PB9`
PB9B
PB9!
Tb.@
PB9a
PB9"
T PB9`"
Tb.@
T PB9 
T PB9
T PB9
T PB9
T PB9
T PB9`
PB9b
PB9A
5b*@
T" @9_
@9_P
"ka8
?h<8
4`B@9
RB@@
Q%|@
Q%|@
Td|@
TB|@
h48 
A9A"
?h48
?h48
T3xt
h78v
?h68
h88v
?h68
T`^@
4PA9`
q#@`
TTxs
!(@9
T7xb
TWx`
T xb
aBD9bz@
4Cx`
T@x`
T x|
T!xs
TBd@
T3xu
T@#@
4!#@
Tbkv
'Fmv
q!'@
'Fm@8
Ta'@
4`'@
9b/@
T`"@
Ra'@
TAxa
aha8?
4`B@
4`B@
RB@0
T`zt
R h68u
_h58E"
T?h68
"@9c
`"@9@
A @9A
`"@9
"@9c
A @9
 @9!
 @9A
T`:@
@ @9`
T`:@
A @9
@#@9
T`#@
T`#@
 @9a
 @9!
T`;@
 @9A
 @9A
T`:@
 @9a
`BG9
`BG9
5`j@
`BG9
5`j@
4`v@
`BG9
9a.@
A@G9
9!,@
T!#@
5!'@
T!$@
T:+@
T[+@
T`+@
T`+@
T[+@
T`+@
T@+@
T:+@
T[+@
T`+@
T@+@
T:+@
T@+@
T:+@
T@+@
T:+@
T[+@
T`+@
T@+@
T:+@
T@+@
T +@
T:+@
T@+@
T:+@
T@+@
A9`"
A9AJ
T@+@
T:+@
T@+@
TaJ@
4`*@
`bA9`
4`*@
4`:@
4`:@
A9vB
4`*@
4`:@
4`*@
`bA9`
4`*@
4`:@
4`:@
A9vB
4`*@
4`:@
A9vB
4`*@
4`:@
4`*@
 @9d
Ja8!(
Ja8!(
T<h:8
h78w
jb8c
4 <@
4`>@
R`w@
T`w@
5`>@
R`n@
T`n@
2%8G
2&TN
2'pU
`ha8`
a2@)k
Sl<H
S+<H
  @JA
  @JA
5`F@
4aF@
T9`?
T`>@
'	m)
B@BJI
@9B@
@9B 
B`BJ
T5h;8s
hd8B
R`J;8
R`J48
9!@@
h`8`
!D@9
P@9D
Tahb8
86ahb8!
Td:@
G)bF@
Te:@
Td:@
#M)eF@
Td:@
*gB@
QcH%
T`&@
#M)cF@
Td:@
Tc:@
Te:@
Te:@
*"H;
T`&@
Te:@
T`>@
Te:@
O)bF@
Te:@
6e:@
4c:@
TAHd8
86AHd8
G)bF@
Te:@
Tb&@
*a2@
R h78
j{8`
T{VA
TcbB
Ts+@
7\#@
Ts*@
Ts*@
Ts*@
Ts*@
7V#@
7|#@
T|2@
#t@9
&l@9"x@9%p@9c
'|@9
$h@9b 
#d@9
)d@9%X@9#`@9'\@9)
&P@9
$T@9#
%L@9
#@@9$D@9)8@9'<@9c
*H@9c 
&4@9)}`
$0@9'a
+0@9&$@9$,@9*(@9k
' @9d
@9)m\
@9A}`
9"$@
#,@yc
*	}@
"|@9
9"<@y
9"\@9
9",@y
9"<@9
*+<@
G(B)
rP C)
N0@)E
J4d@)k
J <@
*IJn
EJy4
+VJR
JR*UJ1
J1*TJR
Jk)RJ
J{+OJ
BJ9+PJZ
*9+\J
+[Jl4
@JJ)ZJN4
WJ))YJ
)EJ*4
TJk)WJ
SJJ)VJ
^J))UJ
)TJc5
)SJC5
OJ#5
[Jc(OJ
+NJa4
EJ[4
!(MJ
+KJcX
(JJcX
+IJc
JZ+VJ
J{+UJ
J{+TJ
J{+SJ
J{+^J!
J!(QJ
*GJ/7
)VJ!
J6(VJ 
aD*c
!TAO
!TAO
TAOw
=aTAO
@TAO!
!TAO
TAOB
!TAO
TAOc
4`{@
n`{@
TBOcTBO
TBOBTBO!TBO
@L`B
*M0@
A9j,A
@9`B
Xtxa
?h68
?h<8
?h<8
?h:8
@9`B
@9aB
@9`B
?h;8
@9`B
h58V
#D9`B
@9aB
?h78
@9`B
T? @q
T?0@q 
? @q
T?(@q
T?0@q
_h 8
?h88
?h48
?h58
? @q
h48`
h48`
 @q 
?h38
h"8i
?h68
?h68
R h38
Cha8
_h!8
`hs8
bha8_
Tbhs8_
bha8_
`hs8
`hs8
?h"8
?h58
 hs8
"h`8_
T@hs8
?h38
Bha8_
?h 8
TFh`8%
h`8%
$hb8
T!hb8
ha8?
ht8?
T|V@
T kx8
R h58t
?h88
@9`B
A9`B
?h98
?h98
@9@C
h48}
D9AC
Tahv8?
Tahs8?
Tbha8_
_h38P|
Tah`8?
bhv8_
dhb8
dhw8
dhb8
?h:8
?h 8
h38M
T!hv8
@9_l
_8_t
?h38
h686C
?h38
T"hb8
?h38
Tu"@
Tu"@
TafB
TaRB
h58z"
h58`
h58`
h78`
h78!
h58`
h58!
h78`
h58`
@9`"
_h!8`N
<`b@
<`b@
h58`
@9`"
_h!8`N
h58`
Ta*@
9`"@
_h!8
T"#@
TBh`8
TBh`8
9! (
js8x
j38s
R!@?
R!@?
c"@9
6`6@
6`2@
6`2@
6`6@
js8^
j38s
R!@?
_h!8
q!|}
h489#
?h88
?h;8
T?@4
=uN@
T|kD
Tz#@
Tz#@
h38?
h38?
cA94
h48s
`og6
Tu"@
Tu"@
$A9"
 A9	
9B`@
TaOB
Ta.@
Ta.@
Ta.@
T`&@
T`&@
?h98
?h58
T@h`8
?h58
R!<C
4A7@
T`Z@
Tdxb
<S`A
c	9@
#M9!:
?h38
@9# 
T% @9#$
T%$@9#(
T%(@9#,
T%,@9#0
T%0@9#4
T%4@9#8
T!8@9?$
#M9!
aJ`8?
Tg"@
Tc"@
Tg"@
Tv6@
Tt:@
T`&@
Tu^@
Tu^@
Tu^@
Tu^@
Tu^@
Tu^@
Tu^@
Tu^@
=c <
=!@=
h68`b@
h68`b@
TuP@
?h48T
T6S@
h$8?
_8bju8
cjk8q
cjk8k
9cj58d
"DE9
`FG9
@E9s
HE9a
DE99
HE9a
5$|_
	9F0
@9 1
_8F$
"@9`
 DG9
Ra"@
T`&@
Ra"@
Ta&@
T`&@
5hb8
4X#06
@d@9
06cf@9C
cf@9
cf@9
cf@9
f@9A
*@yA0
f@9&
r;x`
j@9S
R%@@
5`;@
TbWE
4a;@
@@y:
7hbx
T kwx
5@d@9
 +@ys>
T`WE
9C<@
Rj#@
"4@x
?h 8
4@y:
5c;@
?h 83
@9`3
7 C@
5a;@
H6`%
5 C@
TC4@
9"\P
9"<H
4!C@
R!`#
*! +
*!@*
!(@y
qcP@
R! (
?Jmi
06 	
T)hhx
4&=@
Fidx$
!hfx
*#=@
TA<@
TB @
EhcxU
@9cx
TAhex
5a"@
5`f@9
5`*@y
*'hcxf
@9!x
c.@y
 $k`
*c<@
R`*@y{
RAx)
R! 8
?6`f@9
df@9
Qcjgx
df@9
Rdf@9
`f@9
`f@9
7df@9
@9!x
4#H;
cjgx
RA<@
6@<@
R@<@
f@9<
jaxu
hux?
TAWE
f@9_
R@<@
5`g@9
Rag@9
Tb+@y?
5`g@9
b+@yk
hc8I
Tcy|x
b+@y
R	hax
)dki
R)b+@y
*!`0
b+@y
c/@y
 (k`
SB9`R
aRA9
TaRA9
% 7cR@
T <@
6U<H7
 +@y
5 g@9
"0@y
!hcx
"0@y_
k(4@y
!+@y
4 g@9
 g@9
@)OM
/HmO
/HmJ
/Hm 
rC$@
<h`x
*hsx
R!@*
*hsx
qs>@
qs>@
@(@y
f@9_
P6BD3
*@ys>
mH#@
Ad@9
4@hax@h`
@hax@
"d@9_$
T"X@
5@WE
7b:@
re:@
6a:@
5`VE
53	 7`c@
5xC@
g6b.@
Ta~@
5`c@
5w{@
5`c@
Rb"@
*aVE
T`VE
@za 
*aVE
5aN@
`6aNE
5an@
5`"@
5an@
4bVE
4tVE
5az@
5v~@
5aZO)
~)sB
7!\@
5 ;@
T!WE
T`"@
*bVE
T`"@
5`"@
5a.@
*cFA
*GH@yI
E)D0@
Ral@
Rfn@
R:#@
* WE
@q E
@q@'
bK@y
#d@9
qbJ@yd
R!@0
4`FA
 6!x
5"WE
!!(7
T`"@
7!\@
T`#@
R!@2
T WE
7`\@
Rfn@
Rfn@
Ran@
Rfn@
5 #@
T`"@
T`"@
Tz@"
T`"@
Rc;@
T TE
Ha8a
p7y.K
 	@6`2@
5`n@
R! *
@6`2@
5`n@
R! ,
R! +
R! +
RB`/
R!@-
@6`2@
5`n@
R! ;
T?$@
@6`2@
5`n@
RB`/
R!@.
5@#@
@6`2@
5`n@
R!`	
@6`2@
5`n@
Rc0L
`&@6`2@
5`n@
6`WE
Rab@
7Ag@
p6@_@
5`WE
5`WE
5`z@
@6`2@
5`n@
'075
R` @
T!7@
h48 
*6hs
*6hs
RAl@
6@h@9
R@d@9c
T@,@y
5@	@
R$+@
T#+@
T X`
T@(@y`
4J,@y
4$+@
T H 
SBh|
*7G@
R!  
R!` 
6Bp\
R!@!
T S@
T?@@q
R!@"
R!`$
5cVE
R!@&
2JEC
@6`2@
6@HE
6@HE
6@HE
P6`VE
R`"@
5`VE
5@c@
TbF@
5`VE
6@_@
6`VE
R!@*
R! +
*@h@9"
j@9?
S"\P
6"8@
'FmK
,@ye
Kc*@
h7Bl@
	,@y
@(@y
,@y?
hb8c
h`8?
@9cx
`h`x
mcf@9
4`f@9
cb@9
af@9 
`f@9
6P6w
A)C#4
`f@9
qd*@y
c.@y
`f@9
`*@ya
`f@9
bf@9
`*@y
h`x?
T?@7
TbZ@
c*@y
h`xC#4
`f@9
@)B`
@@yx
h`xC#4
h`xC#4
h`xc
c.@y
4@yx
C4@x
*{?@
0@yA
 h`x
(6bS@
Te'@
5fVE
5aVE
5`VE
R`"@
5`z@
5`2@
5`n@
Re:@
`	(6
5`z@
5`2@
5`n@
P6gD"
hgx*=@
hj8_
Q`D"
P6bD"
@9cx
hgxB
5aVE
R!@%
R!@)
5b:@
d@9F{`
5a>@
* 0@
5a:@
5a:@
07B,@
TaJ@
6aJ@
5aN@
TaV@
)aN@
5aN@
*`2@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9sb
9bJc8
A<@9
9A8@9
9A4@9
9A0@9
6cJc
 6|#
R |@
RBTF
5`r@
6`z@
T`*@
4`&@
5b~@
N)g&O)c&@
5`r@
T"x@
5@p@
4@|@
T@WE
TCT@
T @C
T$D@
*dTE
*  @
*dTE
5@h`
06bT@
Rg0@
`	06
T`"@9
T`&@9
`&@9
 qD$
_8?`
* c@
5 o@
5`z@
5`2@
5`n@
	X7@
qAG@
4E'@
`0p6 '@
^)A$
TS(@
T#'@
@zA&
9s~@
[)A$
A)AD@
*dg@
"@9D`
U)<P
A)A$
TaF@
5`z@
06!7@
 7B$
	 7a
T`c@9
ac@9
`@9?
! 7 
T`c@9
6A8v
(6!$
5`z@
5`2@
5`n@
A)!$
 707
!06U$@
V@y <|
V@y <|
Ta^@
[Q)`J@
5uJ@
6`b@
5`^@
5`f@
5`n@
5`r@
5`j@
5uJ@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJb8
6bJb
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9!Hc8
6cJc
6!Hc
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9!Hb8
6bJc
6!Hb
R@/@
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJb8
7"L@9!P
9!Hb8
"<@9
9"8@9
9"4@9
9"0@9
6!Hb
6bJb
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9BHc8
7"L@9!P
9!Hb8
"<@9
9"8@9
9"4@9
9"0@9
6!Hb
6cJc
6BHc
R@/@
5!/@9
9!+@9
9!'@9
9!#@9
5a/@9
9a+@9
9a'@9
9a#@9
5a.@9
9a*@9
9a&@9
9a"@9
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9BHd8
9!Hb8
6dJc
6BHd
6!Hb
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9BHd8
9BHd8
9!Hb8
6dJc
6DHd
6BHd
6!Hb
5a/@9
9a+@9
9a'@9
9a#@9
5A/@9
9A+@9
9A'@9
9A#@9
5a.@9
9a*@9
9a&@9
9a"@9
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9BHd8
9!Hc8
6dJc
6CHd
6!Hc
 6<#
5A/@9
9A+@9
9A'@9
9A#@9
R |@
R! @
RBG@
T`"@
T`VE
5`"@
4aVE
4`VE
5aVE
TaVE
5`VE
T`VE
5`VE
%p6TD07
T2X6a
 7p7
T`7`7
 X6a
5`VE
`5`7
2`VE
w7`VE
t'07
`#p6
`6`"@
5`VE
87`VE
5`^@
4aN@
5`VE
76`^@
g6`"@
5`VE
5`VE
5bN@
4`VE
?7bN@
5`VE
'	mh
*dTE
5`^@
+86"
5`VE
4`VE
5`Z@
T`Z@
ahax
Gz  
Rdn@
Tan@
* ,@
07!,@
5!7A
* ,@
T`V@
T@h`
R)DL
znL)
Tab@
_8k5
j:8Z
'Fm 
'Fm?
k)x{
k?h5
T(hu
*#x`
5`z@
@6`2@
5`n@
5`b@
07l4@
@6`2@
5`n@
T@c@
*B`'
5e @9
Tar@
5`r@
*B`(
5`z@
@6`2@
@6`2@
5`n@
T`R@
R! *
@6`2@
5`n@
T`b@
T`b@
T`b@
)cZ@
qyc@
7a[@
T`b@
5aZ@
:d@)
R!`(
R!@0
@6`2@
5`b@
5`b@
@6`2@
5`b@
5`b@
@6`2@
5`b@
5`b@
R!`1
R!@2
R!@3
R!@5
@6`2@
5`b@
5`b@
*B`7
TaZ@
5bZ@
87eZ@
 @9"
5`"@
5dB@
T`z@
4xv@
4`v@
Ra"@
*`^@
Rar@
5`z@
wrI)
5`f@
Rav@
4ar@
Rbz@
5`z@
Tar@
5aF@
4aB@
4`^@
4b"@
5`jH)
h6!,@
5cZ@
5fb@
5cb@
O)x0@
7 S@
R`n@
h7`b@
*`b@
R!`2
T`n@
7az@
5a2@
5`n@
RDx@
@6`2@
5`n@
5`z@
5`2@
5`n@
*`b@
4`"@
i"A)
H)cz@
5`z@
@6`2@
T_$@
6yb@
5`z@
@6`2@
`6 @@
@z!#
07a$@
07c$@
@y`G07
 k(6
5#|@
@y!t
5`Z@
T@yV{@
@y Q(7 O07
07b$@
5 #@
07b$@
@K06
 "(6
07!$@
4a.@
T@y_
5bz@
R!` 
7aZ@
T`R@
5`R@
5`R@
Rxb@
4`R@
87@g@
 7`2A
'7!@
+86 
5@g@
5`2A
5a6@
5`2A
@6`2@
5`n@
T`R@
H7`f@
rd|$
R!`+
R!`+
!W@y
R <|
5!W@y <|
T`B^
07c$@
(6dd@
Tdd@
R!@.
@6`2@
5`f@
5`f@
@6`2@
5`f@
5`f@
(6!	
@6`2@
5`f@
5`f@
@6`2@
5`f@
5`f@
@6`2@
5`f@
5af@
@6`2@
5`f@
5`f@
(6Cd@
(6Cd@
R!`2
TAh`
T`R@
5`f@
T`R@
5`f@
5`f@
5`f@
R!`3
qU|~
07 $@
*B@5
5@#@
TA'@
Taxd
TC'@
5@kv
5Akv
b	06
5@kv
5`f@
	06a
T S@
`	06
@6`2@
7 #@
T '@
T`f@
R! 9
R!@8
R! :
qaj@
Tax`
@yc|@
07!$@
I)B#
@yc2
	#L)
)#\)c
) S@
4`f@
R(3@
5`f@
5`z@
@6`2@
5`z@
@6`2@
\z`b@
6`! 6
k{h"
5`f@
7 $@
@6`2@
5`n@
R!`(
R!`(
4#d@
5#P@
5`b@
@6`2@
5`n@
R!`)
TS|@
R@9 
a	H6
R! 1
	@6W
*B`9
	@6W
r@,@
5 WE
T@/@
5@/@
T`3@
6 0@
6 0@
RatE
4 0@
6 0@
TTS@
TAS@
RCh`
@);x{
Ta3@
7ak@9?
7AWE
T@WE
6  @
)c'@
T#{s
`@9  @
Sc(@
@mC(c
)+(B)
)$pC)
);dD)8hE)7XF)5PG)
n2A)
Rc6@)
	J53
Sazc
7B(@
TAx@
T@x@
TA|@
6@+@
06jA
5`2@
5`r@
*`r@
5aN@
5`.@
6|	S
5`.@
5`.@
* {@
5a>@
4|	S
5 '@
@6`2@
*`n@
TB,@
Raj 
5cb@
5ar@
R'(@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7an@9
9aj@9
9af@9
9ab@9
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
6a*@
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
R`.@
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9
9aZ@9
9aV@9
9aR@9
7",@9
9"(@9
9"$@9
9" @9
7"<@9
9"8@9
9"4@9
9"0@9
7"L@9
9"H@9
9"D@9
9"@@9
7"\@9
9"X@9
9"T@9
9"P@9
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9sb
9bJb8
7",@9
9"(@9
9"$@9
9" @9
6bJb
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a^@9
9aZ@9
9aV@9
9aR@9
R |@
5aN@
5aN@
5`b@
h7bf@
5`b@
h6!,@
7BX@
5ACA
06@+@
5ar@
5`b@
5`r@
*`r@
7`z@
@6`2@
5ar@
5`r@
Az`	
07 '@
5`N@
4`B@
T`z@
q`~@
Ta~@
Ta~@
T`z@
 	@6`2@
5`n@
*B #
R!@%
5aN@
5 T@
5`V@
5`~@
9`B@
Tb'@
5`z@
@6`2@
R!$@
6ur@
5`z@
@6`2@
T`*@
TA+@
07@/@
(6w	
	 77
ha8!
bha8
Fd@9
HhcxF
HhcxC
TFhhxc
Fhhx
TaNA
TaFA
TdNA
5dNA
5aVA
5aVA
TazA
TazA
5`zA
RbJA
TazA
5`zA
TazA
5`zA
O7aRA
TazA
5`zA
RfTE
)aOA
5bOA
5cNA
5cRA
TbNA
5cNA
5cRA
TazA
5`zA
7 OA
5#GA
*!@(
>) &
T#OA
07`WE
5`FA
5cJA
5czA
T`NA
TazA
TazA
5azA
7!\@
J@yX	
5$(@y
$(@yb#
P6Gd@9
ChcxB
7!\@
%d@9
"hbx!
 (@y
7!\@
%(@y
#hcx h`x
H@ydTE
 d@9
 h`x 
A@yD
Cd@9
@hsxB
J@y"(@y
d@9aH@y
RaH@y
RB8N
RaH@y
5`WE
d@9?
(@y<
TAX@
(@y7}
T8	@7
(@yB
h`xc
!h`x`
!h`x@
@h`x!
dd@9
!H@y
ahaxc
@9!x
@d@9
J@y`D 
@h`x@
@9!`
7c*@
8(@y
 d@9
Rd*@
J@y d@9
	@7`
eJ@y
@z!	
bJ@y
R`GA
@(@y
 (@y
(@y?
d@9aH@y
"K@y#(@y
$d@9
"hbx!
#K@y
*h#@
*!`>
@X`xb
H@y6D6
Ahvx@h`x
d@9aH@y
H@y#D6
Ahcx@h`x
H@y#D6
Ahcx@h`x
d@9aH@y
@(@y
B@@y
B4@y
R!@6
@d@9
TA(@y
4e@@y
Q!hbx?
e4@y
Ad@9I
G(@yJ
@@y!
!hdx?
AhaxA
!*c|A
D(@y
hax!
 *c|@
5aVE
J@y"
f@9*
T!gA
*@y?
f@9aVE
y DA
SK@yC
Dh`x
jexZ
Dhax
@9!x
*@y_
*@ys
TBgA
*@yI
jhx_
TSK@yT
5SK@y"
5c*@
Rc8N
5d*@
(@yc*@
R"d@9_
5"(@y
K@yB
Ed@9#H@y
ChcxB
@@yA
 h`x
K@yA(@y
K@yB
K@y%(@y
@@ya
 h`x
h7`l@
wZxx_
wj6x
`f@9
!h`xc
cjaxa
tjcx
7e*@yC
T#Xcx%h`x
Q&h`x%Xcx
cjcxc<
cjaxc
Tc*@
Tc*@
Tc*@
Tc*@
 `@9
 (@y 
 (@y
!(@y?
@y $
(@yEl
@(@y
T@d@9
P6@h`xBh`
6"`@9
d@9b
@h`xZ
"`@9_
5a:@
5a:@
5bVE
06`VE
T`VE
h@9!
rB A9
Sa\P
R! 	
 &kc
ye:@
5`VE
'Imq
yf:@
5!;@
cf@9
4!D9
ajaxt
ijax
ic8_
ib8B
cf@9
Ta.@y[
c*@y
jbx?
j"xc*@y
@y`.@y
af@9
4!D9
Rajaxz
Tijax)%
,$X6A
Fz`'
T[W@
!5X7
By _
(@yB<@
!(@6
@d@9
Ad@9?
EhaxE
@9!x
@d@9
Ah`xH
T d@9
"d@9d
R h`x 
 d@9
Bd@9_
5@GA
Ybx?
RG<@
Ymx_
R*ijx
)	@9)y
Q"X`x#Xtx
Q#Xtx"X`x
@9$x
jbxc
*C+@
@@y 
R!`;
4@y 
tk`xt
\zA8
T 8@
%d@9
(`@9H`
&d@9
y%`@9e`
D(@yc4@
y#`@9Dd
 h`x#h`xc<
T 8@
T!8@
RBP@
@yG|
)`@9I`
&d@9
)%`@9e`
Sz!,
5 8@
%d@9
@yH|
*`@9J`
'd@9
)%`@9e`
D(@yc4@
y"`@9
T!8@
)`@9I`
'd@9
y%`@9e`
Cz@&
Rc(@
d@9A
(@y_
 `@9
Rc(@
LzhL@
5 d@9
Lz`TE
"hbx"
R d@9CTE
E)f0@
 h`x 
E)f0@
 h`x 
"hbx"
%d@9
qdTE
 h`x 
@9B`
"d@9_
R%hex!
Rc(@
#d@9
"hbx9
:hbx
d@9?
4 `@9
"hbx9
:hbxZ'
hax{'
 h`x 
@9c`
5@$@
T!$@
T!0@
5@0@
AzA*
Rz @
"(@y
@@y 
T d@9
d@9?
E(@yB,@y
d@9dh@
qa0@
f(@yc,@y
hdx 
T#hdxc
4@y*
hdx#h`xc<
y"`@9
9!d@9
,@yc
(@y(
S'E@
h!x!
T!i@
,@yA0@
$(@y
 ,@y'(
Rz @
d@9dh@
qa0@
f(@yc,@y
d@9?
5 d@9
"(@y
@@y 
T d@9
hdx 
T#hdxc
hdx#h`xc<
y"`@9
9!d@9
,@yc
$(@y
 ,@ys
h"xB
T (@y
",@y`
,@yA0@
$(@y
(@y 
bh`xs
(@y_
#(@y ,@ys
T d@9
 h`x 
6h`x6
<h`x<
*!0@
T!4@
5`2@
aJ@yAD!
*`2@
5 WE
`H"8
@H!8
 h`x 
$(@y
(@ya
5`fA
4`2@
@h`x@
RafA
T`fA
5`2@
cJ@yb
G6`fA
TafA
G7`!
@6_7
RfgA
RgkA
5`3@
@7Z{
*`3@
T`gA
o7Bl@
RfgA
RgkA
RfgA
RgkA
5fgA
o7Bl@
RgkA
5`WE
d@9 
(@y?
u,x6
4!D%
"d@9
 h`x!
4!D%
!(@y
 h`x"h`
Rd+@
Ta2@
Ad@9 
TC(@y?
#d@9
"(@y
chdx
chdx
chdx
k#hcx#
7 \@
@`@9
!(@y
5`2@
5a3@
T`/@
+@y"
Ta/@
yCTE
5b/@
*	TE
c@9#
hbxB
!(@y!
!(@y
TE+@y 
D`@9
4`3@
+@y?
Tb7@
c@9 
+@y?
Ta7@
*)TE
D+@y"
5`3@
t:P74)p7
*`3@
*c*@
d@9G
#hcx
!hbx
(@y?
hbxc
5`3@
6b/@
TA(@y
haxa
(@yc
##k"
#hcx
@`@9
5d3@
*`3@
6a/@
Ta7@
B(@y
5d3@
5d3@
qc*@
5`3@
5`3@
5`3@
`f@9
|jbxz
@99{
|jbxz
@99{
|jbxz
@99{
Tdj|x
5bj|xA
`c@9bf
dj|x
5bj|xA3
`j|x
C`@9
g@9S
T!WE
k`xs>
T WE
P6"D"
+@ya
T+WE
"	@9Bx
T"WE
/@yb
5@GA
@y@D 
+@ya
kjxM
md@9N
qm(@yB
nhaxm
	@9!x
+@y!<@
@y@D 
chnx_
kjxl
`.@y
@@y`
!h{x
`*@y
4AO@y
hex`
@9Bx
@z`.@y(
z`x?
@O@y
@9Bx
4@y`
y k%xp
BO@y
&d@9
53(@yI
4",@y
((@y
ikx)
)	@9)y
ikx)
)	@9)y
ikx)
)	@9)y
bibx"hbxB<
bibx"hbxB
bibx)hbx)
K/(@y
""ki
hkx_
"hbx"
@9Bx
K-(@y
T*hjx*
J	@9Jy
T'hrx'
"hbx"
@9Bx
5x2@
A,@y
C(@yc8
TDGA
d@9a
y[A!
`@9Aa
`@9`c
!d@98s
"d@9@
`i`xd
T`i`x
T`@9U
Ad@9 
B`@9_
!d@95r
!d@9
Dd@9
yA`@9a`
9Fd@9
B`@9
b"P7
@@yC
hcxDGA
))@y
CBy"
c+@y
b/@y@<@
#(@yB$#
",@y@<@
#(@y
$d@9
TD,@
 ,@yA4@
TD$@
 ,@yA,@
5@<@
 ,@yA0@
 ,@y`
5D<@
',@y
TD,@
T%iex
idx$
)D0@
T (@y
@@y 
@9Bx
 (@y9?
@9Bx
P6&(@y 
fD@y&
&(@y
`h`x 
dh`x#
6fD@y&
f8@y&
Tf8@y&
RcXC
I)cT@
d@9A
(@y_
R ,@
R 0@
R 4@
R 8@
Cc@9
hux@
c(@y
*c*@
Cc@9
hux@k`
q!TE
!d@9e
d@9?
h7Bl@
 d@9
)@d@9
4$3@
5$3@
 /@y
 +@y
(@ycD 
 /@ys
`h!x!
T +@y`
!/@yZ?
6"g@9a~
@`@9
3`@9
*@yx(@ya
P7-5
*kd@9@
Rqinxn
T`hqx
4kE@yk
n	@9
,klx+
TKibx
@91z
kibxkhkxk
T-UE
n	@9
k9@y
4 (@y5
BibxBibxB<
@)@yB-@y
bh~xb
@6 2
K [ux$
K$[ux 
KJk`xB
kh`xj
@	@9
chkx
@h`x@h`x
bh~x
K [ux
"g@9
@@yb
4@yb
d@9?
h7Bl@
@9!x
"(@y
+@ys
`*@y
mI#@
&h`xf
5@WE
haxf
`*@y
`@9:
@7 TE
(@y 
5`3@
RdgA
c(@y
y!(@
c(@y
5a3@
(@y!<@
%(@y
 ,@y
qa3@
@y`3
5a/@
5`3@
T`3@
 ,@y
!(@y
Ta3@
T`/@
`@9x
KC0@
3(@yb
T"d@9
(@y_
%(@y!,@y
hbx!D%
 ,@y
$(@y
(@y 
%(@y
C(@y
GhcxZ
hbxc
Bhcx
Rb,@
"d@9_
T&,@y
#(@y
hbxB<
Bhfx
hbxB<
hcxc<
,@yBx
5b2@
5`3@
5a3@
#(@y
T%(@y9
5b3@
 (@y
R@,@
T`3@
Rb,@
A(@yA
4`@9
@`@9
A`@9?
TaWE
P6A(@y
@h`xS
Uh`x
T`@9
T`@9#
A(@y
@h`xS
@h`x
@(@y
Ah`x@
Uhax
@9!x
T #@
R##@
4 #@
T@(@y 
QfWE
hax!
9b"@
*cJ@
@@y`
@9Bx
@9Bx
h|x`
d+@ys
d+@y
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
6a2@
7b.A9
9b*A9
9b&A9
9b"A9
7b>A9sB
@9  
@9 $
@9 (
9`jz8 ,
Jc8"
@9$@
@9$D
@9#H
Hb8 L
6bF@
6bJ@
6zN@
6a:@
6a*@
6a.@
an@9
9aj@9
9af@9
9ab@9
* 7@WE
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9``
@9`d
@9`h
@9`l
@9`p
@9`t
@9`x
@9`|
.@9`0
*@9`4
&@9`8
"@9`<
.@9`
*@9`
&@9`
"@9`
.@9`
*@9`
&@9`
"@9`
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
6a2@
9aJa8
6a:@
6aB@
6aJa
6a*@
6a.@
an@9
9aj@9
9af@9
9ab@9
7`.@9 @
9`*@9 D
9`&@9 H
9`"@9 L
7`>@9 P
9`:@9 T
9`6@9 X
9`2@9 \
7`n@9 
9`j@9 
9`f@9 
9`b@9 
9:(@
4`jz
_8 d
_8 h
_8 l
Jb8"
 7 WE
S#\P
R |@
R`/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
6a"@
6a&@
6a*@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@c
@9@g
@9@k
@9@o
@9@s
@9@w
@9@{
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a&@
an@9
9aj@9
9af@9
9ab@9
6a"@
x7y%
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@c
@9@g
@9@k
@9@o
@9@s
@9@w
@9@{
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
6a"@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@c
@9@g
@9@k
@9@o
@9@s
@9@w
@9@{
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
9bJc8
9!Hc8
an@9
9aj@9
9af@9
9ab@9
6a"@
6a&@
6c*@
6cJc
6!Hc
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9``
@9`d
@9`h
@9`l
@9`p
@9`t
@9`x
@9`|
5@/@9`
9@+@9`
9@'@9`
9@#@9`
.@9`
*@9`
&@9`
"@9`
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
a~@9
9az@9
9av@9
9ar@9
6a"@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@s
@9@w
@9@{
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
6a*@
6a.@
T`[@
S#\P
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
T`[@
S#\P
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
6a.@
6a6@
6a*@
an@9
9aj@9
9af@9
9ab@9
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
6a*@
6a2@
6a&@
 7 WE
x7<+
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
9bJc8
9!Hd8
an@9
9aj@9
9af@9
9ab@9
7a"@
6a*@
6c.@
6dJc
6!Hd
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
9%He8
4`jy
an@9
9aj@9
9af@9
9ab@9
7a"@
6a*@
6e.@
x7;6
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9``
@9`d
@9`h
@9`l
@9`p
@9`t
@9`x
@9`|
5@/@9`
9@+@9`
9@'@9`
9@#@9`
.@9`
*@9`
&@9`
"@9`
R |@
R`/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
7a&@
an@9
9aj@9
9af@9
9ab@9
6a"@
6a&@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@c
@9@g
@9@k
@9@o
@9@s
@9@w
@9@{
R |@
RbD"
Rd*@
R!8N
K@y@
!hdxc
aja8?
T|.@yR
4!UE
a$P6`
`j`8
*a"<
K"UE
|.@y
Rchdx%hdx
%hdxc
`je8
4f.@y
*a"&
@y" 
g.@y
<@yc
Qchdx
`*@y
T"UE
8@ya
`j`8
`j`x
:hdx
D@ya
`j`8
<@yw
kd9Rz
|@y7
0@y3
T|@yM
bje8_
*<@ya
R!hdxJ
*|@y
*0@y
7!\@
cJ@y'
D<@yZ
jb8_
D|@y
D0@y
J@y@(@y
Ch`x`<@
Ah`8?
*c*@
Chax
TAP@
*z:@
5aJ@y
*#,@y
%(@yc<@
5`"@
T`J@y`2
5b"@
bJ@ybD"
"hbx#
!hb8?
*!@'
TaK@
T`FA
T`FA
T@H@y
@H@y_(
AK@y
yAK@y?
EK@y
Ah`x <@
Eh`8
Chcx!
ehex
Ak)	
P7#<
`D@y
Chc8
Chc8
Ahax
`8@y
Chc8
R!`;
K!@%
Vz!5
@7 #@
y@#@
5a:@
9hI)"
RdK@
5{:@
5`:@
5`:@
5d:@
R{:@
TaK@
4aK@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
9bJc8
a~@9
9az@9
9av@9
9ar@9
6a"@
6a&@
6c*@
6bJc
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
5 /@9`
9 +@9`
9 '@9`
9 #@9`
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
6a&@
6a2@
6a:@
6a.@
a~@9
9az@9
9av@9
9ar@9
6a"@
x7\1
T@[@
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`r
@9`v
@9`z
@9`~
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7b~@9
9bz@9
9bv@9
9br@9
@9 @
@9 D
@9 H
9`jz8 L
@9 P
@9 T
@9 X
@9 \
4`jz
 7 WE
S#\P
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
9bJc8
9!Hb8
an@9
9aj@9
9af@9
9ab@9
6a"@
6c*@
6bJc
6!Hb
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9`p
@9`t
@9`x
@9`|
5`/@9`
9`+@9`
9`'@9`
9`#@9`
.@9`
*@9`
&@9`
"@9`
R |@
R@/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
6a.@
6a6@
6b:@
6a*@
an@9
9aj@9
9af@9
9ab@9
 7@WE
x7;6
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9``
@9`d
@9`h
@9`l
@9`p
@9`t
@9`x
@9`|
.@9`
*@9`
&@9`
"@9`
R |@
R`/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
6a&@
6a2@
6a:@
6a>@
6a.@
a~@9
9az@9
9av@9
9ar@9
6a"@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
6a&@
6a2@
7aB@
a~@9
9az@9
9av@9
9ar@9
6a"@
7a&@
6a.@
7a2@
6a:@
6a>@
6aB@
T@[@
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`r
@9`v
@9`z
@9`~
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
7a&@
6a&@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
7a&@
6a&@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@S
@9@W
@9@[
@9@_
@9@c
@9@g
@9@k
@9@o
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a&@
an@9
9aj@9
9af@9
9ab@9
6a"@
S#\P
R |@
R`/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
6a&@
T`[@
S#\P
R |@
"K@y!
!K@y'
h`xZ
u&@x
'K@yF
 K@y
h7Bl@
7CWE
h7!l@
'K@y
.@yB
*@y`>
TcG 
jcxA
*@y?
TAWE
6@y[
@y! @
x`"@
th x`
6cWE
Ahax
y&@x
cJ@y
ha8"
qj:@
*hkxL
,@y,@,
Bhix
@,@y
D(@y
ha8"
D@y#<@
!*j:@
hbxB
(@y <@
 5P6`J@yC
R D 
@h`xCh 8
(@yJ=@
ciix
ha8"
 ,@y
#(@y
eJ@y
haxA<@
aJ@y
8@y#<@
bJ@y
cJ@y
TaK@
T@DA
7` @
`H@y
Ay`H
aJ@y
P7B	
<@yAD!
chaxA
h`xR
R hcx
he8_
RX @
Rc:@
6aj@9!
P6a[@
r! A9ab
@)!`#
)zj	)
@6a2@
6`2@
6`j@9
`j@9
5@;@
q!P@
Sa\P
5iVE
Rc2@
5 c@
T`FA
5`H@y
hax_
_ $k
x*@y"
y`.@y
`.@y
y`.@y
hdx 
gj!8b
hdx 
fj!8
a*@y
@hdx
K @(
Ta.@y ?
j$xy.@y9
y`.@y
hdx`
'Ay5
`k`x
x+@y
$@@y
hexs
6(@@y
dkd8
hex`k`8
*Y?@
@ydkd8
hexs
`k`8
6 8@y!@@y`
(4@y
$4@y
6 @@y`
 x@y!
6!8@y
 ,@y!4@y`
 4@y`
!x@y
!,@y@
QBD#
"*B<@
RY 9
*@yb>
4@WE
hd8i=@
ikx(=@
(hpx
!hpx+
ikx(=@
!hkx)
y (@y
 (@y
yc*@
 d@9
B"h6 
 (@y
@,@y
C(@y
 (@y
@,@y
AyB 
o7Bl@
4@yD
*c*@
h7Bl@
5`"@
 (@y
q#,@y
Tc<@
ka2Ay6
f2AyD
a2Ay
a2Ayc
5`:@
!(@y
5a:@
Ra2Ay
5u:@
hdxd
(@y_
(@yA
Ta"@
yaJ@y?
7`J@y"x
(@y`J
bJ@y
dhbxbhd8_
Qc "
(@y`J
 "ka
QeD"
1cD!
@h`x
j`8_
j`8?
*c*@
MK@y$
P7A%
@ie8
@i`x
BK@yA
BK@y
Ta,@79
BK@yB
EK@yG#@
h7Bl@
R@K@y
@ie8
5@;@
BK@yA
@ie8
5@;@
*@-@y
A)@y
d	h7
*D	@
5MK@y
T@+@
T@/@
*! @
T!,@
5 8@
T!8@
T! @
4c4@
*c,@
R D 
@h`x
4Ch 8
RAh 8
T (@
Cz@8
T 4@
T!4@
4C4@
Ri @
@z!,
k H@
Td(@
T@D@
Td(@
Td(@
@(@y 
yc*@
5e,@
qe4@
T@$@
T@$@
J@y@,@
T#K@yB,@
KA @
K! @
5C @
TD @
T#(@
AzC(@
5 H@
Td(@
T$(@
4c*@
yc*@
"d@9_
 ,@y	
*(@yBD*
Ch`x`<@
 h`8
!,@y
*(@yBD*
Fhfxe
hbxB
5x:@
 d@9
4 (@y"
@h`x"
 h`8
4 (@y
Tx:@
R  @
R 0@
R @@
R P@
*"4@
TAWE
*@ys
7|^@
R!`#
T`J@
J)A,
6A<@
6@<@
J)A,
J)A,
*@ys
hlx <@
j`xM=@
bhax! "
T`=@
Q@D 
Tb?@
dhbx
5 C@
Bza$
7@<@
4 C@
T@0@y`
*a0@y
5cVE
T!<@
ka8?
hdx{
Q D 
Q D 
hdx{
 +@y
@@yB
@@y{
5`?@
7k`x
4@yB
4@y{
@d@9
!he8!
dJ@y
5b"@
4a"@
7dV@
@ybJ
4a"@
@ycJ
T L@
4`WE
4AH@
qAL@
TBL@
TCL@
5@H@
TCH@
T  @
5`"@
5`"@
5:K@y 
4 W@
TBH@
R!#@
TCH@
Q!W@
R!#@
fB)$
ks8b
6"A9
R!@2
*d*@
TCH@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
S#\P
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7a2@
6a.@
6a2@
 7 WE
T`[@
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
7a&@
6a&@
T`[@
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@S
@9@W
@9@[
@9@_
@9@c
@9@g
@9@k
@9@o
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
9bJb8
6b*@
6bJb
x78,
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9`P
@9`T
@9`X
@9`\
@9``
@9`d
@9`h
@9`l
5@/@9`
9@+@9`
9@'@9`
9@#@9`
5!/@9
9!+@9
9!'@9
9!#@9
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
6a*@
x7x'
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9`P
@9`T
@9`X
@9`\
@9``
@9`d
@9`h
@9`l
5 /@9`
9 +@9`
9 '@9`
9 #@9`
R |@
R!K@
q  @
Wz` 
Q h3
@6`2@
5Ukw8Z
`hux
R&hx
a	@6
6bh@9B
 A9g`
T@\@
Sd\P
TCL@
5X\@
4AX@
4AL@
6% @
6$(@
R!$@
R!$@
TBL@
hb8c
hb8cx
h"8 
R!$@
R!$@
TDL@
hb8cx
T#h@
Ch`8cx
Ch 8
I)!,@
R!$@
h#83
XI)@
7 (@
qD\@
4dS@
T`W@
)`O@
K!|~
Aha83t
5`B@
5`B@
gSM)
T`?@
Qsg@
*! $
*@ya4
4@<@
5@8@
4`B@
4`B@
4`B@
5@d@9
E,@y
4`B@
6#H@
4`N@
R$(@
5cJ@
T`^@
5Tk@
T"'@
T@<@
06C`
TCk@
T`_@
T`_@
Rd.@
Rc.@
@6`2@
5`n@
@607
T@<@
5A8@
53k@
R#(@
4@<@
5bN@
5`z@
@6`2@
5`n@
Ta'@
5`^@
*a'@
4`k@
4`^@
Rb.@
TCh`
5`'@
2`>@
5b>@
5`N@
5a>@
q`"@
T`N@
T`>@
R! 3
5`z@
@	@6`2@
5`^@
R! 3
$	07
k@0Az
R@0@zh
4|^@
R4X7
Ta&@
7cj@
TaO@
5a&@
5`j@
Ra&@
*ay,
*by!
TA<@
THK@
TBK@
5`r@
5a"@
T`z@
5`2@
5`n@
6`7@
R!`7
T`&@
*D,@
@6`2@
5`n@
@6`2@
5`n@
5w^@
5`^@
R! 8
5a&@
5`6@
Tk@@
7!<H
7!<H
SD\P
2@9! 
.@9!
*@9 
"@93L
@6`2@
5`^@
5`^@
(6a^@
T`z@
5`2@
5a^@
Ta^@
T`^@
R!@<
R!`>
R!@?
"	(6!
@6`2@
5`^@
5`^@
@6`2@
5`^@
5`^@
K(D)I
E)++
5!g@
5"g@
5"k@
5!c@
4l3@
Rl/@
J$D)
8F)J
5`z@
@6`2@
@)" 
T`k@
5cg@
5bc@
7a:@
T`6@
5 K@
4`&@
Tbc@
5bc@
5`z@
@6`2@
*`^@
G)b&@
kbr@
6c?@
5`j@
Rar@
5`r@
6ab@
Rd;@
5ab@
R! 1
5`j@
 H`8a
@6`2@
5`n@
6ab@
4`j@
6xj@
@6`2@
5`n@
5s"@
5a.@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7bn@9
9bj@9
9bf@9
9bb@9
@9  
@9 $
@9 (
9`jz8 ,
@9 0
@9 4
@9 8
@9 <
4`jz
 7`WE
S#\P
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9sb
9bJc8
9!Hb8
6bJc
6!Hb
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
9!Hd8
6dJc
6!Hd
 6z 
R@/@
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9sR
9bJc8
6bJc
R@/@
R |@
`6!p
*dTE
AzX4@
RD @
R! @
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
9bJc8
9!Hc8
a~@9
9az@9
9av@9
9ar@9
6a"@
6c&@
6cJc
6!Hc
S#\P
5!/@9
9!+@9
9!'@9
9!#@9
R |@
R`/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
9bJb8
7",@9
9"(@9
9"$@9
9" @9
7"<@9
9"8@9
9"4@9
9"0@9
7"L@9
9"H@9
9"D@9
9"@@9
7"\@9
9"X@9
9"T@9
9!P@9
6b&@
6bJb
 7 WE
S&\P
9"<H
5a.@9
9a*@9
9a&@9
9a"@9
@9@#
@9@'
@9@+
@9@/
@9@3
@9@7
@9@;
@9@?
@9@C
@9@G
@9@K
@9@O
@9@S
@9@W
@9@[
@9@_
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
a~@9
9az@9
9av@9
9ar@9
6a"@
x7y#
T@[@
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`r
@9`v
@9`z
@9`~
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
6a&@
6a2@
6a:@
6a.@
a~@9
9az@9
9av@9
9ar@9
6a"@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7aN@9
9aJ@9
9aF@9
9aB@9
7cJb
@9! 
9!Hd8
9AHa8
6!Hd
6AHa
 6:#
7!?H
S"_P
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
T@[@
@9 #
@9 '
@9 +
@9 /
@9 3
@9 7
@9 ;
@9 ?
@9 c
@9 g
@9 k
@9 o
@9 s
@9 w
@9 {
R |@
R`.@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
6a*@
7a2@
6a&@
7a*@
6a2@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a^@9
9aZ@9
9aV@9
9aR@9
7an@9
9aj@9
9af@9
9ab@9
6a*@
7a2@
6a&@
7a*@
6a2@
T@[@
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`R
@9`V
@9`Z
@9`^
@9`b
@9`f
@9`j
@9`n
R |@
R /@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
6a&@
7`.@9 @
9`*@9 D
9`&@9 H
9`"@9 L
7`>@9 P
9`:@9 T
9`6@9 X
9`2@9 \
7`~@9 
9`z@9 
9`v@9 
9`r@9 
998@
4`jy
`n@9 
9`j@9 
9`f@9 
9`b@9 
6y&@
 7`WE
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`b
@9`f
@9`j
@9`n
@9`r
@9`v
@9`z
@9`~
5 /@9`
9 +@9`
9 '@9`
9 #@9`
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
R`.@
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
7cJb
an@9
9aj@9
9af@9
9ab@9
6b&@
6cJb
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
an@9
9aj@9
9af@9
9ab@9
6c&@
@9` 
@9`$
@9`(
@9`,
@9`0
@9`4
@9`8
@9`<
@9``
@9`d
@9`h
@9`l
@9`p
@9`t
@9`x
@9`|
/@9y
+@9`
'@9`
#@9`
.@9a 
*@9a$
&@9a(
"@9a,
R |@
R@/@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7an@9
9aj@9
9af@9
9ab@9
9%He8
S#\P
5a/@9
9a+@9
9a'@9
9a#@9
5!/@9
9!+@9
9!'@9
9!#@9
R |@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
an@9
9aj@9
9af@9
9ab@9
7a"@
6a*@
6a2@
@9"`
@9"d
@9"h
@9"l
7a.@9
9a*@9
9a&@9
9a"@9
7a>@9
9a:@9
9a6@9
9a2@9
7a~@9
9az@9
9av@9
9ar@9
6a"@
7a.@
an@9
9aj@9
9af@9
9ab@9
7a"@
6a*@
6a.@
6a6@
@9`"
@9`&
@9`*
@9`.
@9`2
@9`6
@9`:
@9`>
@9`b
@9`f
@9`j
@9`n
@9`r
@9`v
@9`z
@9`~
5 /@9`
9 +@9`
9 '@9`
9 #@9`
R |@
6`z@
@6`2@
Sf^P
Sc^P
Se^P
P6Dd@9
`f@9
T`j@9@
6db@9 
5`f@9
Ad@9! 
`f@9
B)k	
C)J	
D))	
4L,@)J$A)
ZF(@yk	
ZE,@yJ	
TFd@9
T@(@y
h`x!
&h`xA
TGhf
ZGh&
h`x!
h x@(@y
ZA(@y
Z@,@y
TF(@y
TFhf8
ZGh&
F(@yJ=
hcx!
h#xA(@y?
F(@y
h&xGd@9
hfxJ
TG	@9
@)k	
h&xc
F(@yc<
5Jd@9
C(@y
hlxc
fhlxC
TGhfx
ZGh&xj
@9J	
hlxc
h,xk
C(@yk=
Ghkx
ZGh+x
hgxk
ZGh&
hfx_
 d@9
5`"@
R.,@
4&@@
R6x5
T?x 
5  @
Z |@
!8@9
!4@9
!0@9
5b.@
Rb.@
$(@y
",@y
cjwx @6
KB|@
*@y 
ygjwx
cjdx&
Tfj$x
*&,@y
`*@y
R!D 
j7xa*@y!
hwxs
f.@y
T!|@
R`zd
qd"@
TCo@
5! @
TEo@
TCo@
5" @
5b:@
qb$@
T! @
T!$@
`,@y
",@y
D)&(@
$(@y#
 (@yB@B
R`4@
4 d@9
"d@9?(
*!$@
Az"H@
5 (@
Az @@
5 (@
4!,@
4!8@
#(@y
3d@9
haxA=@
ha8?
(@y!
!hdx
!hdx
'<@y
'|@y
hdxG
Didx
'0@y
 (@y
T`z@
@6`2@
T`z@
@6`2@
 @qa
(@yc
`d@9H
Tfhdxe
@9!x
TA/@yI+@y'<@
y'<@
i$xY
k (@y
4Bxy
A+@y@/@y
A/@y
QaVE
`h`xAk 
9aX%
ghdxE/@yI+@yf
`hgx!D)
i!xE
9`hgx
bhgx
ahfx@/@yJ+@y!<
i$xY
9`hfx
bhfxf
_8?4
`h`x@
R!@9
?C@q3
RbS@
ra[@
4`W@
R @ 
7`_@
Tb{A
*3(@
5`~@
5`c@
5a[@
H7`f@
5cZ@
4a"@
5 s@
6Dd@9
6Dd@9
TAK@
T K@y
BH@y_
R!{@
Ed@9
6Dd@9
6Ad@9?(
RB@>
'hd8_
&hf8_
'hg8_
&hf8_
'hg8_
&hf8_
'hg8_
&hf8_
'hg8_
&hf8_
'hg8_
&hf8_
'hg8_
&hf8_
T!hd8
hd8!
r@;@
AJO	
(PJT
WJdL
DJcX
h(HJ
(HJc
TJC*CJB
$@9	,@9
D@9?
H@9J=
\@9J=
d@9?
RLyl
)hyh
)	<H
Rhyh
)aya
)hyh
Jn<H
So\P
)Cyo
)hyh
Rmym
	JD<
JG8	)
S#<H
@)U\P
N"yb
J!ya
@9r<
$@9p"
@)Cb
(@91
@9n"
*Eyq
*1yz
JWyw
J0yx
JCy~
J$yt
JNyn
J y`
SXyx
SDyd
JRyr
J-y`
J.yt
JQye
*Fyz
*k}{
JKyx
JFyt
J@y`
@9RP@)q<
 @9P"
@9#b
@9-"
J4yt
J/yz
J0yp
J%yv
AC)c
GIy8HIv8FIx8KIw8
SIIt8
*GIs8
*HI~8
JKIr8
JIIq8FIp8
JKId8
ZHIo8$=
*FIc8G
J@I`8DIe8c
JGIn8c
h#8E
Ta*@
Ta.@
Ta.@
T`"@
Td|@
Tc|@
7`n@
7`r@
7`v@
7`z@
7`~@
SB  
k!8A
k!8A
k!8A
7`n@
7`r@
7`v@
7`z@
7`~@
7`n@
7`r@
7`v@
7`z@
7`~@
TB|@
TA|@
T`zd
R`z!
Ta:@
QaB 
" B9_
! B9?
Q (Nz
k! B9
J 8m
k! B9
a"B9
4`>@
RA8@
Tu:@
Rdh@
Ra>@
!@X9?
ykA)
J`8#
7B|@
hc8B
hc8B
h#8B
hc8B
hc8B
hc8B
hc8B
h#8B
ha8B
hd8!
RbP@
a2Dx!
7B|@
5`FA
4tFA
4B|@
KB|@
K!|@
QB3A
(Nz)
Tao|
CK`8
`8 h
Q 0Z
`8 h
Ak`8Ah 8
Ak`8ah 8
`R@)
`R@)
`R@)
`R@)
!*"|@
!*"|@
@9 1
Azm,
R5T 
ak 8
QB0A
(Nzi
x8!`
ak`8
Tak`8
aj`8?
$8c|
R`rF
T`rF
T!O8T!O_
>OZ[
N&T!O
#nAD
 nB>
	kG}
	kG}
	kG}
	kG}
	kG}
	kG}
	kG}
	kG}
	kG}
	kG}
4@|@
R	(A)
1,@)#
	Jk	
(@C)7
5PD)w
J3(@
 @9c
$@9c
(@9c
,@9c
0@9c
4@9c
8@9c
<@9c
h`8_
Jaj 8#
cj!8_@
cj"8?@
cj!8_@
cj"8?@
cj!8_@
hb8aj"8`
<@9`>
dj"8
dj#8_@
dj"8
dj#8_@
dj"8
dj#8_@
dj"8
hc8?@
bj#8
R_8B
r_8!
#@9B
'@9!
7@9B
;@9!
Tb"@9
Tb&@9
Tb*@9
Tb.@9
Tb2@9
Tb6@9
Te:@9
[B9c>
cj!8_@
cj"8?@
cj!8_@
cj"8?@
cj!8_@
cj"8?@
cj!8_@
aj"8
bj#8?@
cj!8_@
aj"8
bj#8?@
cj"8?@
cj!8_@
cj"8?@
cj!8_@
cj"8?@
bj!8
>@9`>
#B9!
'B9b
+B9b
J!#_8
/B9b
J!3_8
3B9b
J!C_8
7B9b
J!S_8
;B9"c_8c
?B9!
@9!s_8
CB9b"@9a
GB9b&@9a"
KB9b*@9a&
OB9b.@9a*
SB9b2@9a.
9b6@9
WB9!
[B9b:@9a6
_B9b>@9a:
Js8s
Js8s
jt8s
J`k48
Js8`
Js8D
JaK38
J`8_
J`8b
JaK 8 
Jb8_
Jb8c
JaK"8@
Jc8_
Jc8a
JbK#8`	
Ja8_
Ja8c
JbK!8
Jc8_
Jc8b
JaK#8
Jb8_
Jb8a
JcK"8
Ja8_#
Ja8c"
JbK!8
Jc8_'
Jc8b&
JaK#8
Jb8_+
Jb8a*
JcK"8 
Ja8_/
Ja8c.
JbK!8@
Jc8_3
Jc8b2
JaK#8`
Jb8_7
Jb8a6
JcK"8
Ja8s:
Ja8_;
JbK!8
Js8!
JaK38
J!K68
J!K 8 
J!K"8@
J!K#8`	
J!K"8
J!K#8
J!K"8
J"K#8
J"K!8
J!K#8 
J!K"8@
J"K#8`
J"K!8
J!K#8
Kv8!
J!K68
Js8a
J383
jz8b
Js8 
J38Z
Js8a
Js8a
j:8Z
j:8Z
@Ks8a
T@Ka8
Ja8b
J!8`
T@Kb8
Jb8d
J"8@
T@Kd8
Jd8b
J$8 
T@Kb8
Jb8d
T@Kd8
Jd8e
T@Ke8
Je8b
T@Kb8
Jb8d"
T@Kd8
Jd8e&
T@Ke8
Je8b*
J%8`
T@Kb8
Jb8d.
J"8@
T@Kd8
Jd8e2
J$8 
T@Ke8
Je8b6
T@Kb8s:
T@Ks8
J383
BKs8`
TCK`8
J`8a
TDKa8
Ja8b
TDKb8
Jb8a
TDKa8
Ja8b
TDKb8
Jb8c
TDKc8
Jc8a
TDKa8
Ja8c"
TDKc8
Jc8b&
TDKb8
Jb8a*
TDKa8
Ja8c.
TDKc8
Jc8b2
TDKb8
Jb8a6
TCKa8s:
TBKs8
Js8A
jw8 
j98D
jy8a
Js8s
Js8s
jt8s
J@k48
J@k48
Js8`
JAK38
J`8b
JAK 8 
Jb8c
JAK"8@
Jc8a
JBK#8`	
Ja8c
JBK!8
Jc8b
JAK#8
Jb8a
JCK"8
Ja8c"
JBK!8
Jc8b&
JAK#8
Jb8a*
JCK"8 
Ja8c.
JBK!8@
Jc8b2
JAK#8`
Jb8a6
JCK"8
Ja8s:
JBK!8
Js8!
JAK38
D<@9
Hhg8
9) @9
	Ji"
9($@9
9$(@9D
9$,@9B
9#0@9#
9"4@9
9 8@9@
9 <@9
Ta	@9
Ta!@9
b"@9!
Ta%@9
b&@9!
Ta)@9
b*@9!
Ta-@9
b.@9!
Ta1@9
b2@9!
Ta5@9
`6@9 
T`9@9a:@9
t"@9~&@9r*@9b.@9q2@9p6@9j:@9f>@9
TB"@9
TB&@9
TB*@9
TB.@9
TB2@9
TB6@9
TB:@9
T@>@9
B@9`j|8
 k<8
4bj|8
"k<8
rC@@9
Z (F
T`"@9
T`&@9
T`*@9
T`.@9
T`2@9
T`6@9
Tb:@9
B@9`j|8
J!k<8
4bj|8
J$k<8
rC@@9
Z (F
T`"@9
T`&@9
T`*@9
T`.@9
T`2@9
T`6@9
T`:@9
rC@@9d
rC@@9d
SbB@9h
T`F@9!
`F@9fJ@9B
ScN@9
SmR@9lV@9
TnZ@9
e^@9
ob@9
Jnf@9
T@Kb8
R_K"8!
TCKa8"
R_K!8A
TCKa8B
R_K!8A
TCKa8b
R_K!8A
TCKa8
R_K!8A
TBKa8
q_K!8@
TA;@9_;
A?@9"
+@m"
@?@9
5@;@9
5@7@9
5@3@9
5@/@9
5@+@9
5@'@9
5@#@9
R@C 
#B9A
@C@9
@G@9
@K@9
@O@9
@S@9
@W@9
@[@9
@_@9
@c@9
@g@9
@k@9
@o@9
@s@9
@w@9
:@9@{@9
K:8!
Ka8"
K!8A
Ka8B
K!8A
Ka8b
K!8A
K!8A
K!8@
?@9"
@9?#
"@9?'
&@9?+
*@9?/
.@9?3
2@9?7
6@9??
T`Jy8
J98!
TcJa8"
J!8A
TcJa8B
J!8A
TcJa8b
J!8A
TcJa8
J!8A
TbJa8
J!8@
Ta:@9
a>@9"
Ta>@9
d:@9
d6@9
d2@9
d.@9
d*@9
`&@9
`"@9
R`B9
`B@9
`F@9
`J@9
`N@9
`R@9
`V@9
`Z@9
`^@9
TA#@9
`b@9
TA'@9
`f@9
TA+@9
`j@9
TA/@9
`n@9
TA3@9
`r@9
TA7@9
`v@9
TA;@9`z@9
4@?@9
a~@9
TA#@9
TA'@9
TA+@9
TA/@9
TA3@9
TA7@9
TA;@9
4@?@9
T`Jy8
J98!
TcJa8"
J!8A
TcJa8B
J!8A
TcJa8b
J!8A
TcJa8
J!8A
TbJa8
J!8@
Ta:@9
a>@9"
Ta>@9
d:@9
d6@9
d2@9
d.@9
d*@9
`&@9
`"@9
D(@z
9aB@9
9aF@9
9aJ@9
9aN@9
9aR@9
9aV@9
9aZ@9
9a^@9
TA#@9
9ab@9
TA'@9
9af@9
TA+@9
9aj@9
TA/@9
9an@9
TA3@9
9ar@9
TA7@9
9av@9
TA;@9
9az@9
4@?@9
9a~@9
 h`8
 h`8
 h`8
 h`8
 h`8
 h`8
 h`8
TA|@
Tb|@
Ta|@
Q!|@
Tc|@
 (Az
T!|@
T$|@
h8	$
@xax`
Axax
TCy'
@9@xax
@xax
aj`8
Axax
@9@xax@
R!@+
Zb~@
7a|@
`(CzI
7f|@
Te~@
q#xe
Ts~}
Tc|@
Tbxa
Th|@
Tg|@
@za	
RzA	
Rc !
T`*@
4`2@
5`2@
Rc`!
Rc`!
Rc`!
Rc`!
Rc`!
Rc`!
Rc`!
T%h`8
8@9` 
ha8$
h!8I
@9  
TF @9 $
TF$@9 (
dp_8
TF(@9 ,
d`_8
TF,@9 0
dP_8
TF0@9 4
d@_8
TD4@9!8
`0_8
TA8@9` _8a 
%h`8
eh$8a
*!|@
Rc`*
jaic8A
3831
Xaxa
Xaxa
AXaxb
#8@|J
 hi8
K#|@
@9 E
bh`8
Xaxa
Xaxa
Xaxa
Xaxa
Xaxa
Xaxa
Xaxa
5c@C
R Xt
f2D)!
Qd*@
RuB+
5uB+
4aB+
r"@+
fkz8
J`k:8?
TB(h
KB|@
Akt8`
JAk48l
=b>B
Fh{8
J@h;8
/B(`
*B|@
R"hb8!hc8
&he8"hb8%hc8
%id8
!8m	
<!d@
4D|@
!h`8
hb8?
_8? 
_8?$
p_8?(
 *`p
`_8?,
 *``
P_8?0
 *`P
@_8?4
 *`@
0_8?8
 *`0
 *` 
h!8!
Tcha8
#*Ch!8
_k48C
`ha8
 *@h!8!
TB|@
@9? 
@9  
T`*@
KB|@
gB9`
oB9`
gB9 
R?h"8
'Hms
B9`1
@9"0
'HmP
'Hm;
'Hm	
T`jt
T`ju
T h`
Rc`&
Rc`&
Rc`&
Rc@'
Rc@'
'Fm 
'Fm]
 hsx
 xbx`
_8 x`x
h!8!
a8ak 8
Rc 4
b8bh!8!
R!`4
ha8!
R4c3
R!`3
QB0C
(Iz	
T!x`
5`.@
5`*@
K!|@
RB|}
RB|}
Ra:@
7 |@
R h68
@)cJ
=a"@
<a.@
R!`(
qsR@
T!|{
T!|{
*B|@
*B|@
Rc .
Rc .
Rc .
Rc 0
Rc 0
Rc 0
Rc 0
Rc 0
*c 0
7CH@
T@ @
Rs~@
"hs8
 ku8
8k58
Rc`0
Q!|@
@ha8
R#c0
R!c0
T hc8
TtZ@
TtZ@
@9a6
@9! 
R!`5
Q@0@
"hvx
@8"xbx
_k48
5b"@
Rc >
Rc >
Rc >
h`8E
h`8E
h`8a
Rc ?
Rc`?
'7$&
zaxa
@{{x
*@{{x
RB|@
RB|@
@8Dx
b&@x
@9! 
@9Lv
R!`!
*!@ 
*!`!
4a##
6$,@
6 0@
6!0@
6!0@
6$(@
6!0@
6$,@
6$(@
6!0@
6 0@
6!(@
6$,@
6$(@
6!0@
6 0@
6!(@
6`.@
6`2@
6%,@
6 (@
6$(@
6!0@
6%,@
6!(@
6$(@
6!0@
Q@8@
Rc@'
Rc@'
5`&@
@9b*
T`.@
T`.@
T`.@
T`.@
T`.@
@9a&@
T`B@
T`&@
T`&@
7`&@
T`&@
7`&@
6c*@
6a2@
@6`&@
@6a:@
5a&@
Rc ,
Rc ,
Rc 1
Rc 1
Tb|@
5b"@
`&@9`
5`"@9@
Rc 4
Rc 4
R!`:
Rc@;
Rc@;
Rc@;
Rc@;
Rc@;
Rc@;
Rc@;
@8c @
Ch`xC
Ahax
Ch`x
Dhcx
Dhcx
@h%8
Dhcx
TChcx
@h`x?
@h`x?
Ch`x
Chcx
@h$8
Chcx
Ch`xj
*Ch`xb
ah 8
h`8A
Ch`x
Ch`x	
h`x?
h`x?
Rc`=
_8?4
ha8!
 i`8@x`x
_8@x`x@
Gh`xG=X7g= 6
Ahax
Gh`x
Gh`x
@h`x
@h`x@
@h`x`
 i`8@x`x
"(7;
Ahax
Ahax
@h`x
@h`x
Ah`x
AXdx
AXdx
Ah`xA
Ahax*
Ahax*
Ahax
_8Axax
@9Axax
*AhdxK
GhaxG
Ghaxg
Ghax
Ahax!
Exax
@8Axax!
Dxdx
Ghax
Ghax
Rc`=
GhaxG
Ghax
Rc`=
Rc`=
="P"
<!T	OD
TE|@
 8@ 
 8@$
 8@(
 8@,
 8@0
 8@4
 8@8
 8@<
!T	O
T	O@i
TE|@
 8@ 
 8@$
 8@(
 8@,
 8@0
 8@4
 8@8
 8@<
k!T	O
T	OJ	
 h"8d
R"h`8B
J"h 8
RB|@
k# C9! D9!
 D9!
 D9!
 D9!
 D9!
 D9!
 D9!
 D9!
k$ C9! D9!
k$ C9! D9!
k$ C9! D9!
k$ C9! D9!
k$ C9! D9!
k# C9! D9!
" C9! D9!
Q (Nz
B9B D9b
J!8J
 D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9B D9B
B9@ D9
h`8Ch`8!
ha8eha8B
j!8!
Gz		
!@SJ
 SJB`SJ
@SJc SJ
Bh`8
Bh`8
Ch!8!
"h 8
Bh`8
Bh`8
k38s
 ks8
k38s
F)Z{
SHt{
j:8a
T@{w
TA{w
4`"@
4`"@
R`"@
4a"@
4`v@
4a*@
4`v@
<cH@
Qb3A
(NzI
T@o|
!n`k
!8m	
Tbka8
k`8bk`8!
Jak 8
ja8c
j!8-
!n h
kA@ 
TcK`8
EH`8
JCH 8*
$ @9
$$@9
$(@9
$,@9
$0@9
#4@9
`8"8@9
ak`8Ch`8!
JAh 8
RB|@
s8_0
!8j	
CD9"
T`>@
RAP@
RA0@
5`B@
<c0@
T`B@
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
Rc@ 
5#C 
*! !
*!`!
*! !
*!`!
*! !
*!`!
R! !
R!`!
k!|@
uO@)
Rc@'
Rc@'
KB|@
Rc@(
Rc@(
Rc@(
Rc@(
Rc`(
@9? 
@9  
Rc@)
Rc@)
Rc@)
Rc@)
Rc@)
Rc@)
Rc@)
Rc@)
'@xc
Zc<@
'@xc
Zc<@
R! $
'FmR
&@xc
Zc<@
&@xc
Zc<@
5CT87
gE9#S87
gE9cR87
sE9#T87
C687
gE9c587
gE9#987
kE9c987
wE9c!87
R! -
oE9c
sE9c
wE9C
'Fm0
R! -
?7U8(7
&@xc
Zc<@
#<87
&@xc
Zc<@
5#Z87
E9CL87
:87`
E9#;87`
E9c;87`
:87`
:87`
c%87`
#87`
E9C#87`
E9c"87`
!87`
 87`
 87`
 87`
"87`
E9C"87`
R! -
R! -
R! -
R! -
R! -
R! -
TB|@
j"8s
j"8s
j"8s
@9_ 
@9_ 
hbx 
hbx 
idx$
Rc@3
Rc@3
*c@3
Rc@3
R!@4
js89
T" @9B
T"$@9B
T"(@9B
T",@9B
@9?5
q$ @9%(@9c
Q'$@9&,@9c
&0@9
T'4@9
T*8@9
T'<@9
ik8k
T" @9B
T"$@9B
R% @9c
@9)$@9c
T)(@9)
*,@9&		
 H6 
R!@7
R!@8
*!@9
R!`;
Rc@4
chu8
js8s
*c $
*c $
hx8c
chz8
hx8c
chz8
Ta|6
R!@+
_8?+
_8?7
hx8c
chz8
hx8c
chz8
Ta|5
"8F|@
"8F|@
T |@
*B|@
t%87
Lz!x
Bht8r
Bht8:
R!@+
R!@+
Bhc8
*!PB
Rc"@
_6b"@
T`R@
RC$@
_6c"@
Kc|@
*`R@
T`R@
Tb"@
Tb"@
T`R@
Tb"@
Tb"@
4`2@
T*A`
06`6@
 7a'@
)`6@
7`s@
4b7@
5bG@
Q S@
T S@
T#+@
4#+@
T S@
T S@
4"#@
T S@
R!S@
R!S@
T#'@
Q S@
T S@
86!?@
Q S@
R!$@
4 S@
Tb"@
Tb"@
87b"@
6b"@
k`R@
5b"@
Rb"@
7b"@
7b"@
Ra&@
Q@d@
1`j@
 xbx
@8 x`x
Tc&@
 xbx
@8 x`x
 xbx
@8 x`x
Rc@&
R!4@
R!4@
R!4@
qBC8
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
Rc`(
rD|D
A)jU
Tc@@
J<H@)
+LA)BP
J-TB)
/\C)T
1(D)
r,,@
.Q)U
`htxB
/Gmo
hc8`
`8 $
j388
RcN@
RdZ@
RcN@
RcZ@
5a*@
7@|}
5 S@
5 S@
'Fme
'Fm|
RAt@
7c"@
4`v@
4`v@
4`v@
4b.@
4`v@
4b"@
4`v@
B)bx
6`v@
6`v@
xu~@
TDp_8
RB|@
*NzI
!8m	
j`8!
OB9!
!n`j
cJ`8?
JbJ 8
!8m	
`jc8
k`8bj`8!
Jaj 8
38 |
Rb~@
T@ @9
TD$@9
T@(@9
TD,@9
T@0@9A
@)`| 
a0@9?h
T`4@9?
qd8@9
Qa<@9b@@9
S"|@
TA @9C$@9!
TA(@9B,@9!
S"|@
TCya
#i`8
cha8!
TBG@
B'@x{
ZB<@
T`&@x
T`F@
b'@x
ZB<@
4`~@
@9?(
 xsx 
 xsx@
 xsx 
@6im
RAhax?
Mz`	
Jz '
@9s4
T Xsx`
 hsx
 hsx@
 hsx
 hsx@
 hsx
 hsx@
 hsx
 hsx@
 hsx
T Xsx`
 hsx
*`n@
Rbj!8
5`.@9
T`2@9
5`6@9
S!|@
#D9?(
'Fm^
6cxb
6cx`
T#}@
T)}@
7%yh
!n`j
T`zc
Rc@;
b8_(
b8_(
b8_(
b8_(
b8_(
b8_(
b8_(
"h`8
Ta.@
TaV@
4bR@
TaV@
Q@0@
R!|{
Q@0@
Q@0@
5`*@
*c )
x	q`
`8_t
TS|@
`J`8
R`J`8
`J`8
R`J`8
`J`8
R`J`8
js8`
jv8`
j{8@
`K<8
K"8J
hbx_
*B|@
Tz@	
@8$$
Tf"@
*B|@
@y m
@y"m
RS|@
T`"@
7`B@9
T`B@9@
6c"@
5@K@
5a"@
5a#@
5a @
5a"@
5a#@
a	86
Tb"@
C 7`&@
5a @
A	86
5a @
A	86
5a"@
5!!@
5A!@
5a"@
5a#@
5! @
5a#@
a	86
5a"@
@za	
5a#@
5!#@
5A#@
aB@9a
`*Cy
`*Cya
`.Cy
`.Cya
*bBF9
`BF9 
`BF9 
bBF9
`BF9
`BF9
`BF9a
b*Cy
qb.Cy!
$Cy!
`BF9
`BF9t
bBF9
`BF9t
6`.Cy
`A9!x
`A9!x
T) @
`*Cy`
7`.Cy 
T`.Cy
`bA9
`bA9
6`.Cy
6`*Cy
Rb"@
4aB@
`bA9
`.Cy
`*Cy
T`BF9
`.Cy
aBF9
6`.Cy5
`.Cy
 *?|Bj
5`.Cy
`*Cy
T`BF9
5`BF9
aBF9
  @y
 H@9"
  @y
( @y
fH@9e8@
) @y
`"@y
TaRA
Qf8@
*`8@
5Ax 
SaRA
T <@
*DX%
*e8@
Te<@
*CX!
5aBA
 @y!x
T@ @
5`"@y
*`"@
07u"@
4`2@
`"@ya
7d:@
*`"@
" @y
J@9 
5`"@y
yaJ@9
R`"@y
5`"@y
# @y
A @y
`"@y
*t"@
)07X
Ta"@yB
RaN@9?
Bz`'
4`2@
Td:@
`"@ya>@
*e:@
5`*@
`"@y
Td:@
b"Dy
T`BA
Td>@
Td>@
*`"@
*  @y
4`"@y
06aN@9?
`N@9
5`"A
Rb~@
T`~@
*ax 
@y`;@
!06a
#@y|
`$06a
Te"A
@y`;@
H@9!
H@9A
T`;@
'Fm4
  @y
`"@y
`"@y
  @y
& @y
Tb~@
 @yA
  @y
6"<@
H@9?
Tc$@
 @y 
Tc$@
SB|@
SB|@
T?C@q
ya&@
87? 
RB(F
C@@9
 @9C
",@x"
4&<@9
%8@9B
$4@9
#0@9B
T'<@9
&8@9
*%4@9
$0@9B
 $@x
@9?l
RB|@
RB|@
R!`,
js8s
js8s
KB|@
@9 h
c"@9
h"@9
Sa~|
Tczb
RB@=
T`^@
br@y
*Bxw
h48"
5`R@
A9! #
R@k;8
T"|@
pAy@
QaN@
`BB9
`BB9 
T!|@
`BB9
T`v@
QaN@
`BB9
Tsk48
TSku8
Tsk48
@ku8
4@Ka8
HKa8
T"|@
T`R@
7`R@
aRAy
TdrAy
@y x
aBB9
7aF@
TaBB9
7aF@
T`B@
 7`F@
TbF@
TaB@
	) 0@
4`J@
T`BB9
T!|@
5aN@
5`BB9
5`F@
T`F@
4b^@
7`J@
T`v@
QaN@
aBB9
rAy!
aBB9!
`BB9
T`BB9
h38P
T`J@
4`>@
@9_L
@9_8
@9_<
@9_$
@9_P
@9? 
@9_P
@9_L
@9_P
@9_0
@9?@
@9_8
@9_8
@9_P
!0Ay?
@9_l
X@y!
`Z@ya
Tc2@
`Z@ya
?@yi
'@yK
?@y 0
'@y 0
_A9G
?A9s
cAy!(
@9z_
@9C_
@9C_
@9J_
;A9.L
@y4K
 @9?
 @9?
 @9@
 @9@
! @9
! @9
! @9
 @9 
! @9
 @9 
B @9
! @9
! @9
 @9 
! @9
 @9 
B @9
! @9
*@h`8 
 h`8
@y0@
@y+@
r | 
B @9
 @9@
 @9@
 @9@
 @9@
7A9?
B @9
B @9
7A9?
_A9"
_A9QR
w@yB
_A9[/
?@9?
"h 8
Aha8
@9aja8
@9% 
B@q!
qB|@
j`x@
 ka8
ja8!
@9`z
TAxt
TUx4
Rj,A
Th(@
h!8!
Tbx`
@8c|
Tc"@
TA{u
T5xv
TA{`
TA{x
TA{s
Ta{s
TA{s
Tazc
TAx`
TAx`
TAx`
TA{`
TA{w
TA{w
T`{z
Ta{z
Ta{t
Tax`
T3xu
Tazy
TA{`
T!{s
TA{s
TAx`
TA{t
TA{e
T {b
Tbjc
Tcj|
Ta{`
TAx`
TAx`
T!y`
TB{`
Tb{`
Q"|@
Tu{t
Q"|@
Q"|@
TAx`
TAx`
T {u
66|@
:|@LB
6|@L
n |@L
n |@
#hbx
RB@0
Tbxa
Tbxa
Tbxa
Tbxa
Tbxa
4w~@
R_k&
LZ[ n
TZ[ n
66|@
T'xe
Sax"
T`zy
T`zy
@9aL@
3D9!
TAx`
T#xb
TAxd
Taxb
Ttx5
S!|@
,@J"
H@J 
,@J!
H@Ja
,@J!
H@Ja
	q,	
c,CJ@
qc,CJ@
,DJb
J!HAJ!
T! @
T! @
H`8d
TfH@
J`8a
uj 8u"
uj 8
@9_|
@9_P
7a	E)?
Td @9
Td$@9
@9_L
@9_|
	G)?
@9?|
@9?|
@9_|
@9_|
h!8`
@9?0
@9?0
@9?$
@9?|
@9?P
@9?$
@9?|
@9?$
TuN@
@9!$
@9?L
@X`xb
@9?$
T`R@
@9!$
@9?$
TuN@
@9?$
@9?|
TaJ@
TaJ@
@9_(
@9_d
R!|"
@9?$
@9_P
@9_P
@9?L
@9?|
@9?L
ia8$
@9?|
!X`xb
xj 8x"
vj 8
R`j!8`"
yj 8y"
`"D9
R`j!8
`"D9
R`j!8`"
xj 8
R`j!8`"
R`j!8`"
xj 8x"
xj 8x"
xj 8?
xj 8?
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
xj 8x"
vj 8
xj 8x"
xj 8x"
xj 8x"
vj 8
R`j!8`"
xj 8x"
wj 8w"
wj 8w"
xj 8x"
xj 8x"
uj 8u"
xj 8x"
"@9 
uj!8u"
vj 8
xj 8x"
R`j!8
R`j!8`"
vj 8?
xj 8?
xj 8
R`j!8`"
R`j!8`"
R`j!8`"
R`j!8`"
vj 8
Rbj 8b"
vj 8
xj 8x"
vj 8
R`j!8`"
R`j!8`"
vj 8
R`j!8`"
R`j!8`"
vj 8v"
vj 8
R`j!8`"
xj 8?
R`j!8`"
xj 8x"
vj 8
wj!8w"
vj 8
vj 8
vj 8
vj 8
R`j!8`"
b"D9
Rbj 8
`"D9
Raj 8a"
R`j!8`"
R`j!8`"
vj 8v"
xj 8x"
Rbj 8b"
Rbj 8b"
R`j!8`"
R`j!8`"
`j!8`"
uj 8u"
vj 8?
vj 8?
R`j!8`"
R`j!8`"
vj 8v"
Ta^A
Ta>A
R`j!8`"
vj 8
R`j!8`"
Rbj!8b"
Rbj!8b"
R`j!8`"
vj 8
R`j!8`"
XzaN
wj!8
R`j!8`"
R`j!8`"
R`j!8`"
Xcxd
R`j!8`"
uj 8
Rbj 8b"
R`j!8`"
Rbj 8b"
tj 8t"
Raj 8a"
Raj 8a"
uj 8
uj 8u"
wj 8w"
uj 8u"
wj 8
wj 8
uj 8
uj 8
uj 8
R`j!8`"
R`j!8`"
Rbj!8b"
Raj 8
T`"D9a
R`j!8
Rxj!8
Rbj 8b"
`"D9a
j 8_
j 8_
R`j48`"
Rbj!8b"
Raj 8a"
uj 8u"
uj 8
R`j!8`"
uj"8u"
uj"8
R`j!8
R`j!8`"
*u>A
R`j!8
vj 8v"
vj 8
R`j!8`"
vj!8v"
vj!8
R`j!8`"
vj!8v"
vj!8?
5`"@9
T`&@9!	
Ta*@9?
`.@9
`j`8
`2@9
T"(@
$@xD
2dhd
h58t
h<8{
h<8{
T`r@
5BpC
T3{:
T xs
4ab#
R! @
R!t@
R!L@
R!`B
R!TA
R!lC
R!tB
R!XF
R! D
5s~G
 H`8a
T`"@9
T ht8
h:8`
h:8`
T@hw8
T7h58
h:8`
Tz^A
T6xv
R h<8
?h:8
R h<8
h:8@
R h:8
?h98
R h98
R h98
?h78
R h98
R h98
?h"8H
T"{s
bh`8!
@9 X
bh`8!
@9 X
bh`8!
@9 `
bh`8!
@9 `
abB9
abB9
bh`8!
@9 X
bh`8!
@9 X
bh`8!
@9 `
bh`8!
@9 `
26LA
$A9A
bh`8!
bh`8!
Ah`8ax 
Ah`8ax 
a"B9
a"E9
$A9A
bh`8!
bh`8!
Ah`8ax 
Ah`8ax 
fA9!
fA9!
fA9 
5wz@
RB(@
RB(@
RB(@
5`z@
RB(@
?h<8
T`^@
@x`x`
@9Axax
9`Z@
B9Ah 8
B9"h 8
h!8v
T`^@
@x`x`
@9Axax
9`Z@
B9Ah 8
B9"h 8
h!8v
Rcb2
@zAE
"A9?
&A9?
&A9?
"A9?
R!(@
@zaE
"A9?
&A9?
&A9?
"A9?
R!(@
@zaD
"A9?
&A9?
&A9?
"A9?
R!(@
@zAD
"A9?
&A9?
&A9?
"A9?
R!(@
@zAE
"A9?
&A9?
&A9?
"A9?
R!(@
@zAD
"A9?
&A9?
&A9?
"A9?
R!(@
@z!	
Ttju8
!hu8?
Tt{3
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
5Ak{8D
TAkx8
Akx8
Zbxa
 h`x
 h`x@
 x`x
 ka4
 xbx
@9 x`x
 h`x`
!xbx
@zA;
kv8_
\h`8!
T|h68s
T3h68
@zA#
A:`#
hax@
Bxcx
@9Bhv8
TVh58
Bxcx
@zA;
kv8_
\h`8!
T|h68s
T3h68
@zA#
A:`#
hax@
Bxcx
@9Bhv8
TVh58
Bxcx
R!hB
#h"8b
h!8a
h!8a
T`@@
 	@z!
 	@z`
Tc*@
Tc*@
TZh88
_h98
h"8c&@
`bA9`
2B@A
Tc2@
y#C"
Tc2@
y"C"
h"8c.@
Tc2@
2B@A
Tc.@
y#C%
Tc.@
y"C%
9a*@
h"8c*@
Tc.@
Tc6@
Tc6@
C9_w
h"8c2@
Tc6@
 	@z!
 	@z`
Tc*@
Tc*@
2BLE
Tc2@
Tc2@
Tc2@
2BLE
Tc.@
Tc.@
C9!@:
9b*@
Tc.@
Tc6@
Tc6@
Tc6@
T x`
4`"A
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
Ihg8+
Chg8c
T`f@
Ts|@
T`f@
Ts|@
@9s>
TAG@
@9s>
TAG@
A:chx
T`{t
TT{3
 X`xa
RB(@
3h"8
@z@	
R!(@
R!(@
R!(@
R!(@
R!(@
R!(@
R!(@
wh`8
7h"8
wh`8
7h"8
T D@
T D@
R?@ 
9$DL
Q#,F
9#,F
RdpJy
T_A!
RB`Jyb
@$@x
*)|@
(B:a
!pJy
TL-@
k(|@
T$	@
*)|@
 H`8a
`b@9
?k88
?k88
?k88
?k88
?k88
?k88
?k88
?k88
?k88
?k88
B@9`
_h!8
k48`
`hd8`h!8c
B@9`
@9`B
T6h58
?h48
T6h58t
6h58t
B@9`
?h58
7h68
?h58
`hb8`h48a
?h68
`kt8`k$8D
`kt8`k$8
`kd8`k48
`hz8
`hb8
h`8_
Ta"@
*a"@
Ta"@
*a"@
T`v@
*B4@
*B4@
47gA9
*B4@
C9tv@
4dgA9 
T!<@
C9tv@
4dgA9 
C9tv@
4dgA9 
C9tv@
4dgA9 
C9tv@
4dgA9 
C9tv@
4DgA9 
C9tv@
4DgA9 
C9tv@
4dgA9 
T`v@
*B4@
RB(@
5`z@
RB(@
T`v@
*B4@
TA @
5Ct@
Ta"@
T`"@
T`v@
*B4@
RB(@
*B(@
C9tv@
RB(@
T!<@
C9tv@
RB(@
C9tv@
RB(@
C9tv@
RB(@
C9tv@
RB(@
C9tv@
5`z@
RB(@
C9tv@
5`z@
RB(@
C9tv@
RB(@
`6Ut@
TVx@
 h`x`
#A9@
CA9 
CA9 
*b,@
 h`x
 h`x
Rc(@
	`6tt@
#A9@
T D@
T"D@
CA9 
T D@
Rc(@
CA9`
T D@
RB(@
T"D@
*b,@
T D@
T"D@
T D@
5`z@
RB(@
T`xb
Tbx`
Tc,@
T x`
@z!	
T x`
T x`
T x`
 A9`"
$A9`&
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
Jhg8I
hc8	h#8c
h#8c
8Fhg8f
h#8c
KB|@
T`^@
`x`x`
@9axax
T`^@
`x`x`
@9axax
Rcc2
=cc2
@9@	
 k@	
T GB9
Chc8
Chc8
/A9"
/A9"
#A9@
Bk!8
'A9 
#A9@
Bk!8
T`zt
TT{<
cht8
vjt8 
!hu8?
)c$@
T`{t
TT{3
Xbxa
 h`x@
@9A%
 h`x
 x`x
@z!#
 ka/
 xbx
@9 x`x
 h`x
!xbx
3h"8
&A9_
"A9_
R!(@
R!(@
&A9?
&A9?
RA @
!hs8?
4@ @
4A @
!hs8?
4@ @
!hs8?
&A9?
&A9?
R!(@
&A9?
&A9?
R!(@
&A9?
&A9?
R!(@
R!(@
&A9?
&A9?
&A9?
&A9?
R!(@
wh`8
7h"8
@9Bhv8
hax@
Bxcx
 h`x
wh`8
7h"8
@9Bhv8
hax@
Bxcx
 h`x
k78x^
k78x
j58w
k68xZ
k78x^
k78x
k78x
k78x
k78x^
k78x
k78x
k78x
k68xZ
k68xZ
4 {sx
Tu{4x
%hd8
`@9b
4d@9
 c@9
j38s
j38a
j38s
T!\H
T`f@
T`f@
Rcc2
@zaH
@zaG
@zaH
@zaG
4`"A
T3{4
Tuzv
Tt{3
T x`
T x`
T x`
T x`
T x`
T x`
T x`
T x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
R@x`
Raz|
 X`xa
RB(@
RB(@
A:@I
TVh58
|h`8!
T\h;8s
T3h;8
A:`!
A:@I
TVh58
|h`8!
T\h;8s
T3h;8
A:`!
TaRA
TaRA
5`"C9a
Tv"C9`R@
5`"C9a
Tv"C9`R@
5a"C9
TaV@
Twn@
R`n@
Taj@
5az@
Ta"C9`R@
9a^@
4`R@
9aR@
Twn@
5a"C9
TaV@
Twn@
R`n@
Taj@
5bz@
Ta"C9`R@
9a^@
9aR@
4`R@
Twn@
5cV@
6bV@
5cV@
6bV@
 C9!
 C9a
A9a:@
9`^@
`"C9
9`j@
9an@
B9`z
9a^@
b"C9ab
4`R@
9`n@
4`j@
4`"C9`
9`^@
"C9`
T`"C9
9`^@
4`j@
4`j@
Tan@
9B<B
9B<E
 C9!
A9a:@
`"C9
9`j@
9an@
B9`z
9a^@
b"C9ab
4`R@
9`n@
4`j@
4`"C9
9a^@
6aV@
T`"C9
9c^@
4`j@
4`j@
Tan@
9an@
9a^@
a"C9
9an@
9a^@
a"C9
bh`8_
T`hb8
Tbh`8_
_k68
@h{8
j#8a
@k{8
@k#8
6h58
@9 h58
`hd8`h68
`b@9
@9@h#8
?h68
hu8@h#8
?h78
@9 h"8
?h58
6h"8
?h58
6h"8b
6h"8b
@hw8@h68
Fhc8c
ha8!
@hc8c
T D@
T`h`8
T`x`
T`D@
N5boost16exception_detail20error_info_containerE
N5boost9exceptionE
N5boost16exception_detail10clone_baseE
N5boost6system12system_errorE
N5boost12bad_weak_ptrE
N5boost6detail15sp_counted_baseE
N5boost17bad_function_callE
N5boost8signals212expired_slotE
N5boost16exception_detail25error_info_container_implE
N5boost16exception_detail10bad_alloc_E
N5boost16exception_detail14bad_exception_E
N5boost16exception_detail10clone_implINS0_10bad_alloc_EEE
N5boost16exception_detail10clone_implINS0_14bad_exception_EEE
N5boost16exception_detail19error_info_injectorINS_17bad_function_callEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_17bad_function_callEEEEE
N5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_10bad_alloc_EEEEE
N5boost6detail17sp_counted_impl_pINS_16exception_detail10clone_implINS2_14bad_exception_EEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcENS_8functionISN_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcENS2_19optional_last_valueISA_EEiSt4lessIiENS_8functionISD_EENSI_IFSA_RKNS2_10connectionESC_EEENS2_5mutexEE16invocation_stateEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/exception/detail/exception_ptr.hpp
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/variant/detail/forced_return.hpp
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/signals2/detail/lwm_pthreads.hpp
pthread_mutex_unlock(&m_) == 0
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/signals2/detail/auto_buffer.hpp
is_valid()
call to empty boost::function
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/signals2/connection.hpp
m_slot_refcount != 0
members_.capacity_ >= N
!full()
size_ <= members_.capacity_
members_.capacity_ >= n
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/exception/info.hpp
*::boost::exception_detail::type_info_(typeid(*p)).type_==*ti.type_
basic_string::append
pthread_mutex_lock(&m_) == 0
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/signals2/detail/slot_groups.hpp
this_map_it != _group_map.end()
p == 0 || p != px
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/signals2/detail/signal_template.hpp
_shared_state.unique()
map_it != _group_map.end()
weakly_equivalent(map_it->first, key)
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/smart_ptr/scoped_ptr.hpp
basic_string::_M_construct null not valid
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/optional/optional.hpp
this->is_initialized()
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/smart_ptr/shared_ptr.hpp
px != 0
giant:
-help
-version
Giant Core Daemon
Usage:
  giantd [options]                     
Start Giant Core Daemon
-datadir
Error: Specified data directory "%s" does not exist.
Error: Invalid combination of -regtest and -testnet.
Error reading masternode configuration file: %s
Error: There is no RPC client functionality in giantd anymore. Use the giant-cli utility instead.
-daemon
GIANT server starting
Error: fork() returned %d errno %d
Error: setsid() returned %d errno %d
-server
Error reading configuration file: %s
AppInit()
N5boost8signals26detail19std_functional_baseIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_jEEE
N5boost8signals26detail19std_functional_baseIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE
N5boost8signals26detail19std_functional_baseIJPKcEEE
N5boost8signals26detail19std_functional_baseIJRK7uint25610ChangeTypeEEE
N5boost8signals26detail19std_functional_baseIJP7CWalletEEE
N5boost8signals26detail19std_functional_baseIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE
N5boost8signals26detail19std_functional_baseIJRK7uint256EEE
N5boost8signals26detail19std_functional_baseIJiRK7uint256EEE
N5boost8signals26detail19std_functional_baseIJEEE
FvRK11CRPCCommandE
N5boost8signals26detail19std_functional_baseIJP7CWalletRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_10ChangeTypeEEE
N5boost8signals26detail19std_functional_baseIJP7CWalletRKNS_7variantI14CNoDestinationJ6CKeyID9CScriptIDEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbSJ_10ChangeTypeEEE
N5boost12noncopyable_11noncopyableE
N5boost8signals26detail19std_functional_baseIJP7CWalletRK7uint25610ChangeTypeEEE
N5boost8signals26detail19std_functional_baseIJbEEE
N5boost8signals26detail19std_functional_baseIJRKbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE
FvRK7uint256E
N5boost8signals26detail19std_functional_baseIJiEEE
FviRK7uint256E
FvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
Fv7uint256E
FvvE
N5boost8signals26detail19std_functional_baseIJP15CCryptoKeyStoreEEE
N5boost16thread_exceptionE
N5boost15condition_errorE
N5boost10lock_errorE
N5boost21thread_resource_errorE
N5boost9gregorian16bad_day_of_monthE
N5boost9gregorian8bad_yearE
N5boost9gregorian9bad_monthE
N5boost18thread_interruptedE
N5boost8signals211signal_baseE
N5boost8signals26detail20connection_body_baseE
N5boost8signals26signalIFviENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS2_EENS7_IFvRKNS0_10connectionEiEEENS0_5mutexEEE
N5boost8signals26signalIFvP15CCryptoKeyStoreENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS4_EENS9_IFvRKNS0_10connectionES3_EEENS0_5mutexEEE
N5boost8signals214no_slots_errorE
N5boost8signals26signalIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_jENS0_10last_valueIbEEiSt4lessIiENS_8functionISA_EENSF_IFbRKNS0_10connectionES9_S9_jEEENS0_5mutexEEE
N5boost8signals26signalIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionISA_EENSF_IFvRKNS0_10connectionES9_EEENS0_5mutexEEE
N5boost8signals26signalIFNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcENS0_19optional_last_valueIS7_EEiSt4lessIiENS_8functionISA_EENSF_IFS7_RKNS0_10connectionES9_EEENS0_5mutexEEE
N5boost8signals26signalIFvRK7uint25610ChangeTypeENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS6_EENSB_IFvRKNS0_10connectionES4_S5_EEENS0_5mutexEEE
N5boost8signals26signalIFvP7CWalletENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS4_EENS9_IFvRKNS0_10connectionES3_EEENS0_5mutexEEE
N5boost8signals26signalIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionISA_EENSF_IFvRKNS0_10connectionES9_iEEENS0_5mutexEEE
N5boost8signals26signalIFvRK7uint256ENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26signalIFviRK7uint256ENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionEiS4_EEENS0_5mutexEEE
N5boost8signals26signalIFvvENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS2_EENS7_IFvRKNS0_10connectionEEEENS0_5mutexEEE
N5boost8signals26signalIFvP7CWalletRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_10ChangeTypeENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionISD_EENSI_IFvRKNS0_10connectionES3_SB_SB_SC_EEENS0_5mutexEEE
N5boost8signals26signalIFvP7CWalletRKNS_7variantI14CNoDestinationJ6CKeyID9CScriptIDEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbSI_10ChangeTypeENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionISK_EENSP_IFvRKNS0_10connectionES3_SA_SI_bSI_SJ_EEENS0_5mutexEEE
N5boost8signals26signalIFvP7CWalletRK7uint25610ChangeTypeENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS0_10connectionES3_S6_S7_EEENS0_5mutexEEE
N5boost8signals26signalIFvbENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS2_EENS7_IFvRKNS0_10connectionEbEEENS0_5mutexEEE
N5boost8signals26signalIFvRKbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionISC_EENSH_IFvRKNS0_10connectionES3_SB_EEENS0_5mutexEEE
N5boost10filesystem16filesystem_errorE
N5boost12interprocess22interprocess_exceptionE
22CCoinsViewErrorCatcher
8UniValue
N5boost16exception_detail19error_info_injectorISt13runtime_errorEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEEE
N5boost16exception_detail19error_info_injectorINS_9gregorian16bad_day_of_monthEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian16bad_day_of_monthEEEEE
N5boost16exception_detail19error_info_injectorINS_21thread_resource_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_21thread_resource_errorEEEEE
N5boost16exception_detail19error_info_injectorINS_10lock_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEEE
N5boost16exception_detail19error_info_injectorINS_15condition_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15condition_errorEEEEE
N5boost6detail11thread_dataIPFvvEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS_8functionISH_EEEENS0_5mutexEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataIPFvvEEEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvNS_4_mfi3mf0Iv12CLightWorkerEENS2_5list1INS2_5valueIPS6_EEEEEEEE
N5boost6detail17sp_counted_impl_pINS_10filesystem6detail11dir_itr_impEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK7uint256ENS_8functionISC_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFviRK7uint256ENS_8functionISC_EEEENS0_5mutexEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_5list1INS2_5valueIS9_EEEEEEEE
N5boost16exception_detail19error_info_injectorINS_9gregorian8bad_yearEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian8bad_yearEEEEE
N5boost16exception_detail19error_info_injectorINS_9gregorian9bad_monthEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian9bad_monthEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP15CCryptoKeyStoreENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS7_EENSC_IFvRKNS2_10connectionES6_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESE_10ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISG_EENSL_IFvRKNS2_10connectionES6_SE_SE_SF_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRKNS_7variantI14CNoDestinationJ6CKeyID9CScriptIDEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbSL_10ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISN_EENSS_IFvRKNS2_10connectionES6_SD_SL_bSL_SM_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRK7uint25610ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES6_S9_SA_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISD_EENSI_IFvRKNS2_10connectionESC_iEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvbENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEbEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvvENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISF_EENSK_IFvRKNS2_10connectionES6_SE_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_jENS2_10last_valueIbEEiSt4lessIiENS_8functionISD_EENSI_IFbRKNS2_10connectionESC_SC_jEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISD_EENSI_IFvRKNS2_10connectionESC_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcENS2_19optional_last_valueISA_EEiSt4lessIiENS_8functionISD_EENSI_IFSA_RKNS2_10connectionESC_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEiEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK7uint25610ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS9_EENSE_IFvRKNS2_10connectionES7_S8_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS7_EENSC_IFvRKNS2_10connectionES6_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK7uint256ENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviRK7uint256ENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionEiS7_EEENS2_5mutexEEEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvPKcNS_8functionIFvvEEEENS2_5list2INS2_5valueIS5_EENSC_IS8_EEEEEEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvSt6vectorINS_10filesystem4pathESaIS6_EEENS2_5list1INS2_5valueIS8_EEEEEEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvvENS2_5list0EEEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_5list1INS_17reference_wrapperIS9_EEEEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvNS_4_mfi3mf0Iv12CLightWorkerEENS3_5list1INS3_5valueIPS7_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP15CCryptoKeyStoreENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS7_EENSC_IFvRKNS2_10connectionES6_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals25mutexEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESE_10ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISG_EENSL_IFvRKNS2_10connectionES6_SE_SE_SF_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRKNS_7variantI14CNoDestinationJ6CKeyID9CScriptIDEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbSL_10ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISN_EENSS_IFvRKNS2_10connectionES6_SD_SL_bSL_SM_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletRK7uint25610ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES6_S9_SA_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISD_EENSI_IFvRKNS2_10connectionESC_iEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvbENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEbEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvvENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISF_EENSK_IFvRKNS2_10connectionES6_SE_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_jENS2_10last_valueIbEEiSt4lessIiENS_8functionISD_EENSI_IFbRKNS2_10connectionESC_SC_jEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISD_EENSI_IFvRKNS2_10connectionESC_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS2_10connectionEiEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK7uint25610ChangeTypeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS9_EENSE_IFvRKNS2_10connectionES7_S8_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvP7CWalletENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS7_EENSC_IFvRKNS2_10connectionES6_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK7uint256ENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviRK7uint256ENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionEiS7_EEENS2_5mutexEE16invocation_stateEEE
N5boost16exception_detail19error_info_injectorINS_8signals214no_slots_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_8signals214no_slots_errorEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS3_5list1INS3_5valueISA_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvP15CCryptoKeyStoreENS_8functionISH_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueIvEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvP7CWalletRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESO_10ChangeTypeENS_8functionISQ_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvP7CWalletRKNS_7variantI14CNoDestinationJ6CKeyID9CScriptIDEEERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbSV_10ChangeTypeENS_8functionISX_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvP7CWalletRK7uint25610ChangeTypeENS_8functionISL_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiENS_8functionISN_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvbENS_8functionISF_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvvENS_8functionISF_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRKbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS_8functionISP_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESM_jENS_8functionISN_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals210last_valueIbEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS_8functionISN_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviENS_8functionISF_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK7uint25610ChangeTypeENS_8functionISJ_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvP7CWalletENS_8functionISH_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK7uint256ENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviRK7uint256ENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionERK7uint256EEEEE
PFvvE
PFvRK11CRPCCommandE
N5boost3_bi6bind_tIvNS_4_mfi3mf0Iv10CSchedulerEENS0_5list1INS0_5valueIPS4_EEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvPKcNS_8functionIFvvEEEENS3_5list2INS3_5valueIS6_EENSD_IS9_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvSt6vectorINS_10filesystem4pathESaIS7_EEENS3_5list1INS3_5valueIS9_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvvENS3_5list0EEEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS3_5list1INS_17reference_wrapperISA_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK7uint256ENS_8functionISE_EEEENS2_5mutexEEEEE
PFv7uint256E
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS_8functionISJ_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviRK7uint256ENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK7uint256ENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENS_8functionISC_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFviRK7uint256ENS_8functionIS7_EEEEEE
PFvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
PFvRK7uint256E
PFviRK7uint256E
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::destroy_back_n(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type, const false_type&) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int; boost::false_type = boost::integral_constant<bool, false>]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::mutex; typename boost::detail::sp_member_access<T>::type = boost::signals2::mutex*]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::mutex::~mutex()
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::mutex::~mutex()
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
boost::signals2::mutex::mutex()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
void boost::shared_mutex::state_data::assert_lock_shared() const
void boost::condition_variable::notify_all()
void boost::shared_mutex::state_data::assert_locked() const
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::detail::interruption_checker::~interruption_checker()
boost::condition_variable::condition_variable()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >&]
CImportingNow::CImportingNow()
CImportingNow::~CImportingNow()
PrepareShutdown
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
Shutdown
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const uint256&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
AppInit2
void boost::scoped_ptr<T>::reset(T*) [with T = ECCVerifyHandle]
boost::filesystem::directory_entry& boost::filesystem::directory_iterator::dereference() const
bool AppInit2()
giant-%s
%s thread start
%s thread exit
%s thread interrupt
tinyformat: Not enough conversion specifiers in format string
tinyformat: the %a and %A conversion specs are not supported
tinyformat: %n conversion spec not supported
tinyformat: Conversion spec incorrectly terminated by end of string
boost shared_lock has no mutex
boost shared_lock owns already the mutex
boost unique_lock doesn't own the mutex
boost::condition_variable::wait failed in pthread_cond_wait
boost unique_lock has no mutex
boost unique_lock owns already the mutex
boost::interprocess_exception::library_error
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/shared_mutex.hpp
! exclusive
shared_count>0
!pthread_cond_broadcast(&cond)
exclusive
shared_count==0
! upgrade
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/pthread_mutex_scoped_lock.hpp
!pthread_mutex_lock(m)
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/condition_variable.hpp
!pthread_cond_signal(&cond)
!pthread_mutex_unlock(m)
boost::condition_variable::condition_variable() constructor failed in pthread_mutex_init
!pthread_mutex_destroy(&internal_mutex)
boost::condition_variable::condition_variable() constructor failed in detail::monotonic_pthread_cond_init
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/condition_variable_fwd.hpp
!ret
res == 0
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/mutex.hpp
!res
boost:: mutex constructor failed in pthread_mutex_init
pthread_mutex_destroy(&m_) == 0
boost: mutex lock failed in pthread_mutex_lock
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/thread/pthread/thread_data.hpp
boost::thread_resource_error
pthread_mutex_init(&m_, 0) == 0
could not convert calendar time to UTC time
Day of month is not valid for year
map::at
Error reading from database, shutting down.
Error reading from database: %s
boost::signals2::no_slots_error
it != _list.end()
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/unordered/detail/implementation.hpp
buckets_
deque::_M_new_elements_at_back
deque::_M_new_elements_at_front
vector::_M_default_append
tinyformat: Cannot convert from argument type to integer for use as variable width or precision
n > 0
tinyformat: Too many conversion specifiers in format string
./allocators.h
it != histogram.end()
Method not found (disabled)
-disablesafemode
Safe mode: 
-rest
Day of month value is out of range 1..31
Year is out of valid range: 1400..10000
Month number is out of range 1..12
RPC stopped.
Current GetZerocoinSupply: %d vs %d
giant-loadblk
init.cpp
fImporting == false
Reindexing block file blk%05u.dat...
Reindexing finished
fImporting == true
bootstrap.dat
bootstrap.dat.old
Importing bootstrap.dat...
Warning: Could not open bootstrap file %s
-stopafterblockimport
Importing blocks file %s...
Warning: Could not open blocks file %s
Stopping after block import
%s: In progress...
giant-shutoff
boost thread: trying joining itself
fee_estimates.dat
%s: Failed to write fee estimates to %s
shutdown
%s: Unable to remove pidfile: %s
giant-light-thread
%s thread interrupted
%s: done
Elliptic curve cryptography sanity check failure. Aborting.
Options:
This help message
Print version and exit
-alertnotify=<cmd>
Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)
-alerts
Receive and display P2P network alerts (default: %u)
-blocknotify=<cmd>
Execute command when the best block changes (%s in cmd is replaced by block hash)
-blocksizenotify=<cmd>
Execute command when the best block changes and its size is over (%s in cmd is replaced by block hash, %d with the block size)
-checkblocks=<n>
How many blocks to check at startup (default: %u, 0 = all)
-conf=<file>
Specify configuration file (default: %s)
giant.conf
Run in the background as a daemon and accept commands
-datadir=<dir>
Specify data directory
-dbcache=<n>
Set database cache size in megabytes (%d to %d, default: %d)
-loadblock=<file>
Imports blocks from external blk000??.dat file
on startup
-maxreorg=<n>
Set the Maximum reorg depth (default: %u)
-maxorphantx=<n>
Keep at most <n> unconnectable transactions in memory (default: %u)
-par=<n>
Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)
-pid=<file>
Specify pid file (default: %s)
giantd.pid
-reindex
Rebuild block chain index from current blk000??.dat files
-reindexaccumulators
Reindex the accumulator database
-reindexmoneysupply
Reindex the GIC and zGIC money supply statistics
-resync
Delete blockchain folders and resync from scratch
-sysperms
Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)
-txindex
Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)
-forcestart
Attempt to force blockchain corruption recovery
Connection options:
-addnode=<ip>
Add a node to connect to and attempt to keep the connection open
-banscore=<n>
Threshold for disconnecting misbehaving peers (default: %u)
-bantime=<n>
Number of seconds to keep misbehaving peers from reconnecting (default: %u)
-bind=<addr>
Bind to given address and always listen on it. Use [host]:port notation for IPv6
-connect=<ip>
Connect only to the specified node(s)
-discover
Discover own IP address (default: 1 when listening and no -externalip)
-dns
Allow DNS lookups for -addnode, -seednode and -connect
(default: 1)
-dnsseed
Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)
-externalip=<ip>
Specify your own public address
-forcednsseed
Always query for peer addresses via DNS lookup (default: %u)
-listen
Accept connections from outside (default: 1 if no -proxy or -connect)
-listenonion
Automatically create Tor hidden service (default: %d)
-maxconnections=<n>
Maintain at most <n> connections to peers (default: %u)
-maxreceivebuffer=<n>
Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)
-maxsendbuffer=<n>
Maximum per-connection send buffer, <n>*1000 bytes (default: %u)
-onion=<ip:port>
Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)
-proxy
-onlynet=<net>
Only connect to nodes in network <net> (ipv4, ipv6 or onion)
-permitbaremultisig
Relay non-P2SH multisig (default: %u)
-peerbloomfilters
Support filtering of blocks and transaction with bloom filters (default: %u)
-peerbloomfilterszc
Support the zerocoin light node protocol (default: %u)
-port=<port>
Listen for connections on <port> (default: %u or testnet: %u)
-proxy=<ip:port>
Connect through SOCKS5 proxy
-proxyrandomize
Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)
-seednode=<ip>
Connect to a node to retrieve peer addresses, and disconnect
-timeout=<n>
Specify connection timeout in milliseconds (minimum: 1, default: %d)
-torcontrol=<ip>:<port>
Tor control port to use if onion listening enabled (default: %s)
-torpassword=<pass>
Tor control port password (default: empty)
-upnp
Use UPnP to map the listening port (default: %u)
-whitebind=<addr>
Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6
-whitelist=<netmask>
Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.
Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway
Wallet options:
-backuppath=<dir|file>
Specify custom backup path to add a copy of any wallet backup. If set as dir, every backup generates a timestamped file. If set as file, will rewrite to that file every backup.
-createwalletbackups=<n>
Number of automatic wallet backups (default: 10)
-custombackupthreshold=<n>
Number of custom location backups to retain (default: %d)
-disablewallet
Do not load the wallet and disable wallet RPC calls
-keypool=<n>
Set key pool size to <n> (default: %u)
-help-debug
-mintxfee=<amt>
Fees (in GIC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)
-paytxfee=<amt>
Fee (in GIC/kB) to add to transactions you send (default: %s)
-rescan
Rescan the block chain for missing wallet transactions
-salvagewallet
Attempt to recover private keys from a corrupt wallet.dat
-sendfreetransactions
Send transactions as zero-fee transactions if possible (default: %u)
-spendzeroconfchange
Spend unconfirmed change when sending transactions (default: %u)
-disablesystemnotifications
Disable OS notifications for incoming transactions (default: %u)
-txconfirmtarget=<n>
If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)
-maxtxfee=<amt>
Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)
-upgradewallet
Upgrade wallet to latest format
-wallet=<file>
Specify wallet file (within data directory)
wallet.dat
-walletnotify=<cmd>
Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)
-windowtitle=<name>
Wallet window title
-zapwallettxes=<mode>
Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup
(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)
ZeroMQ notification options:
-zmqpubhashblock=<address>
Enable publish hash block in <address>
-zmqpubhashtx=<address>
Enable publish hash transaction in <address>
-zmqpubhashtxlock=<address>
Enable publish hash transaction (locked via SwiftX) in <address>
-zmqpubrawblock=<address>
Enable publish raw block in <address>
-zmqpubrawtx=<address>
Enable publish raw transaction in <address>
-zmqpubrawtxlock=<address>
Enable publish raw transaction (locked via SwiftX) in <address>
Debugging/Testing options:
-uacomment=<cmt>
Append comment to the user agent string
-checkblockindex
Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. Also sets -checkmempool (default: %u)
-checkmempool=<n>
Run checks every <n> transactions (default: %u)
-checkpoints
Only accept block chain matching built-in checkpoints (default: %u)
-dblogsize=<n>
Flush database activity from memory pool to disk log every <n> megabytes (default: %u)
Disable safemode, override a real safe mode event (default: %u)
-testsafemode
Force safe mode (default: %u)
-dropmessagestest=<n>
Randomly drop 1 of every <n> network messages
-fuzzmessagestest=<n>
Randomly fuzz 1 of every <n> network messages
-flushwallet
Run a thread to flush wallet periodically (default: %u)
-maxreorg
Use a custom max chain reorganization depth (default: %u)
Stop running after importing blocks from disk (default: %u)
-sporkkey=<privkey>
Enable spork administration functionality with the appropriate private key.
addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, tor, mempool, net, proxy, http, libevent, giant, (obfuscation, swiftx, masternode, mnpayments, mnbudget, zero, precompute, staking)
-debug=<category>
, qt
Output debugging information (default: %u, supplying <category> is optional)
If <category> is not supplied, output all debugging information.
<category> can be:
-nodebug
Turn off debugging messages, same as -debug=0
-gen
Generate coins (default: %u)
-genproclimit=<n>
Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)
Show all debugging options (usage: --help -help-debug)
-logips
Include IP addresses in debug output (default: %u)
-logtimestamps
Prepend debug output with timestamp (default: %u)
-limitfreerelay=<n>
Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)
-relaypriority
Require high priority for relaying free or low-fee transactions (default:%u)
-maxsigcachesize=<n>
Limit size of signature cache to <n> entries (default: %u)
-minrelaytxfee=<amt>
Fees (in GIC/Kb) smaller than this are considered zero fee for relaying (default: %s)
-printtoconsole
Send trace/debug info to console instead of debug.log file (default: %u)
-printpriority
Log transaction priority and fee per kB when mining blocks (default: %u)
-privdb
Sets the DB_PRIVATE flag in the wallet db environment (default: %u)
-regtest
Enter regression test mode, which uses a special chain in which blocks can be solved instantly.
This is intended for regression testing tools and app development.
In this mode -genproclimit controls how many blocks are generated immediately.
-shrinkdebugfile
Shrink debug.log file on client startup (default: 1 when no -debug)
-testnet
Use the test network
-litemode=<n>
Disable all GIANT specific functionality (Masternodes, Zerocoin, SwiftX, Budgeting) (0-1, default: %u)
Staking options:
-staking=<n>
Enable staking functionality (0-1, default: %u)
-gicstake=<n>
Enable or disable staking functionality for GIC inputs (0-1, default: %u)
-zgicstake=<n>
Enable or disable staking functionality for zGIC inputs (0-1, default: %u)
-reservebalance=<amt>
Keep the specified amount available for spending at all times (default: 0)
-printstakemodifier
Display the stake modifier calculations in the debug.log file.
-printcoinstake
Display verbose coin stake messages in the debug.log file.
Masternode options:
-masternode=<n>
Enable the client to act as a masternode (0-1, default: %u)
-mnconf=<file>
Specify masternode configuration file (default: %s)
-mnconflock=<n>
Lock masternodes from masternode configuration file (default: %u)
-masternodeprivkey=<n>
Set the masternode private key
-masternodeaddr=<n>
Set external address:port to get to this masternode (example: %s)
128.127.106.235:40444
-budgetvotemode=<mode>
Change automatic finalized budget voting behavior. mode=auto: Vote for only exact finalized budget match to my generated budget. (string, default: auto)
Zerocoin options:
-enablezeromint=<n>
Enable automatic Zerocoin minting (0-1, default: %u)
-enableautoconvertaddress=<n>
Enable automatic Zerocoin minting from specific addresses (0-1, default: %u)
-zeromintpercentage=<n>
Percentage of automatically minted Zerocoin  (1-100, default: %u)
-preferredDenom=<n>
Preferred Denomination for automatically minted Zerocoin  (1/5/10/50/100/500/1000/5000), 0 for no preference. default: %u)
-backupzgic=<n>
Enable automatic wallet backups triggered after each zGIC minting (0-1, default: %u)
-precompute=<n>
Enable precomputation of zGIC spends and stakes (0-1, default %u)
-precomputecachelength=<n>
Set the number of included blocks to precompute per cycle. (minimum: %d) (maximum: %d) (default: %d)
-zgicbackuppath=<dir|file>
Specify custom backup path to add a copy of any automatic zGIC backup. If set as dir, every backup generates a timestamped file. If set as file, will rewrite to that file every backup. If backuppath is set as well, 4 backups will happen
-reindexzerocoin=<n>
Delete all zerocoin spends and mints that have been recorded to the blockchain database and reindex them (0-1, default: %u)
SwiftX options:
-enableswifttx=<n>
Enable SwiftX, show confirmations for locked transactions (bool, default: %s)
true
-swifttxdepth=<n>
Show N confirmations for a successfully locked transaction (0-9999, default: %u)
Node relay options:
-datacarrier
Relay and mine data carrier transactions (default: %u)
-datacarriersize
Maximum size of data in data carrier transactions we relay and mine (default: %u)
-blockversion=<n>
Override block version to test forking scenarios
Block creation options:
-blockminsize=<n>
Set minimum block size in bytes (default: %u)
-blockmaxsize=<n>
Set maximum block size in bytes (default: %d)
-blockprioritysize=<n>
Set maximum size of high-priority/low-fee transactions in bytes (default: %d)
RPC server options:
Accept command line and JSON-RPC commands
Accept public REST requests (default: %u)
-rpcbind=<addr>
Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)
-rpccookiefile=<loc>
Location of the auth cookie (default: data dir)
-rpcuser=<user>
Username for JSON-RPC connections
-rpcpassword=<pw>
Password for JSON-RPC connections
-rpcport=<port>
Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)
-rpcallowip=<ip>
Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times
-rpcthreads=<n>
Set the number of threads to service RPC calls (default: %d)
-rpcworkqueue=<n>
Set the depth of the work queue to service RPC calls (default: %d)
-rpcservertimeout=<n>
Timeout during HTTP requests (default: %d)
-blockspamfilter=<n>
Use block spam filter (default: %u)
-blockspamfiltermaxsize=<n>
Maximum size of the list of indexes in the block spam filter (default: %u)
-blockspamfiltermaxavg=<n>
Maximum average size of an index occurrence in the block spam filter (default: %u)
Copyright (C) 2009-%i The Bitcoin Core Developers
Copyright (C) 2014-%i The Dash Core Developers
Copyright (C) 2015-%i The PIVX Core Developers
Copyright (C) 2018-%i The GIANT Core Developers
This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING or <http://www.opensource.org/licenses/mit-license.php>.
This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.
Error: Initializing networking failed
Error: -sysperms is not allowed in combination with enabled wallet functionality
-bind
-whitebind
AppInit2 : parameter interaction: -bind or -whitebind set -> setting -listen=1
-connect
AppInit2 : parameter interaction: -connect set -> setting -dnsseed=0
AppInit2 : parameter interaction: -connect set -> setting -listen=0
%s: parameter interaction: -proxy set -> setting -listen=0
%s: parameter interaction: -proxy set -> setting -upnp=0
AppInit2 : parameter interaction: -proxy set -> setting -discover=0
AppInit2 : parameter interaction: -listen=0 -> setting -upnp=0
AppInit2 : parameter interaction: -listen=0 -> setting -discover=0
AppInit2 : parameter interaction: -listen=0 -> setting -listenonion=0
-externalip
AppInit2 : parameter interaction: -externalip set -> setting -discover=0
AppInit2 : parameter interaction: -salvagewallet=1 -> setting -rescan=1
-zapwallettxes
AppInit2 : parameter interaction: -zapwallettxes=<mode> -> setting -rescan=1
-enableswifttx
-swifttxdepth
AppInit2 : parameter interaction: -enableswifttx=false -> setting -nSwiftTXDepth=0
-reservebalance
Invalid amount for -reservebalance=<amount>
-maxconnections
Not enough file descriptors available.
-debug
-debugnet
Warning: Unsupported argument -debugnet ignored, use -debug=net.
-socks
Error: Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.
-tor
Error: Unsupported argument -tor found, use -onion.
-checklevel
Error: Unsupported argument -checklevel found. Checklevel must be level 4.
-benchmark
Warning: Unsupported argument -benchmark ignored, use -debug=bench.
-checkmempool
-par
-staking
AppInit2 : parameter interaction: wallet functionality not enabled -> setting -staking=0
-timeout
-minrelaytxfee
Invalid amount for -minrelaytxfee=<amount>: '%s'
-mintxfee
Invalid amount for -mintxfee=<amount>: '%s'
-paytxfee
Invalid amount for -paytxfee=<amount>: '%s'
Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.
Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)
-maxtxfee
Invalid amount for -maxtxfee=<amount>: '%s'
Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.
Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)
-txconfirmtarget
-wallet
Initialization sanity check failed. GIANT Core is shutting down.
Wallet %s resides outside data directory %s
.lock
Cannot obtain a lock on data directory %s. GIANT Core is probably already running.
GIANT version %s (%s)
Using OpenSSL version %s
Using BerkeleyDB version %s
%Y-%m-%d %H:%M:%S
Startup time: %s
Default data directory %s
Using data directory %s
Using config file %s
Using at most %i connections (%i file descriptors available)
Using %u threads for script verification
-sporkkey
Unable to sign spork message, wrong key?
scheduler
Unable to start HTTP server. See debug log for details.
backups
-createwalletbackups
.%Y-%m-%d-%H-%M
Creating backup of %s -> %s
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/filesystem/operations.hpp
(m_imp.get())&&("attempt to dereference end iterator")
Old backup deleted: %s
Preparing for resync...
blocks
chainstate
sporks
Deleting blockchain folders blocks, chainstate, sporks and zerocoin
-resync: folder deleted: %s
Using wallet %s
Verifying wallet...
database.%d.bak
Moved old %s to %s. Retrying.
Error initializing wallet database environment %s!
Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect you should restore from a backup.
wallet.dat corrupt, salvage failed
-uacomment
User Agent comment (%s) contains unsafe characters.
Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.
-onlynet
Unknown network specified in -onlynet: '%s'
-whitelist
Invalid netmask specified in -whitelist: '%s'
Lookup(): Invalid -proxy address or hostname: '%s'
isValid(): Invalid -proxy address or hostname: '%s'
-onion
Invalid -onion address or hostname: '%s'
Cannot resolve -bind address: '%s'
Cannot resolve -whitebind address: '%s'
Need to specify a port with -whitebind: '%s'
Failed to listen on any port. Use -listen=0 if you want this.
Cannot resolve -externalip address: '%s'
-seednode
AccumulatorCheckpoints::LoadCheckpoints(Params().NetworkIDString())
blk%04u.dat
blk%05u.dat
Hardlinked %s -> %s
-dbcache
Loading block index...
Loading sporks...
Error loading block database
%s : %s
Incorrect or no genesis block found. Wrong datadir for network?
Error initializing block database
You need to rebuild the database using -reindex to change -txindex
ZerocoinSupply Recalculation failed: %d vs %d
Calculating missing accumulators...
%s : finding missing checkpoints
Verifying blocks...
The block database contains a block which appears to be from the future. This may be due to your computer's date and time being set incorrectly. Only rebuild the block database if you are sure that your computer's date and time are correct
-checkblocks
Corrupted block database detected
Do you want to rebuild the block database now?
Aborted block database rebuild. Exiting.
Shutdown requested. Exiting.
 block index %15dms
Wallet disabled!
Zapping all transactions from wallet...
Error loading wallet.dat: Wallet corrupted
Loading wallet...
Warning: error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect.
Error loading wallet.dat: Wallet requires newer version of GIANT Core
Wallet needed to be rewritten: restart GIANT Core to complete
Error loading wallet.dat
Performing wallet upgrade to %i
Allowing wallet upgrade up to %i
Cannot downgrade wallet
receive
Cannot write default address
 wallet      %15dms
Rescanning...
Rescanning last %i blocks (from block %i)...
 rescan      %15dms
Syncing zGIC wallet...
-blocknotify
-blocksizenotify
Failed to connect best block
-loadblock
Waiting for genesis block to be imported...
Loading masternode cache...
Missing masternode cache file - mncache.dat, will try to recreate
Error reading mncache.dat: 
magic is ok but data has invalid format, will try to recreate
file format is unknown or invalid, please fix it manually
Loading budget cache...
Missing budget cache - budget.dat, will try to recreate
Error reading budget.dat: 
Loading masternode payment cache...
Missing masternode payment cache - mnpayments.dat, will try to recreate
Error reading mnpayments.dat: 
-masternode
Enabling Masternode support requires turning on transaction indexing.Please add txindex=1 to your configuration and start with -reindex
IS MASTER NODE
-masternodeaddr
 addr %s
Invalid -masternodeaddr address: 
-masternodeprivkey
Invalid masternodeprivkey. Please see documenation.
You must specify a masternodeprivkey in the configuration. Please see documentation for help.
-budgetvotemode
auto
-mnconflock
Locking Masternodes:
  %s %s
stoul
-zeromintpercentage
-preferredDenom
-preferredDenom: invalid denomination parameter %d. Default value used
-litemode
You can not start a masternode in litemode
fLiteMode %d
nSwiftTXDepth %d
Anonymize GIANT Amount %d
Budget Mode %s
mapBlockIndex.size() = %u
chainActive.Height() = %d
setKeyPool.size() = %u
mapWallet.size() = %u
mapAddressBook.size() = %u
-genproclimit
Done loading
-precompute
Failed to create backup %s
Failed to delete backup %s
Failed to delete blockchain folders %s
Error hardlinking blk%04u.dat : %s
Error opening block database
13leveldb_error
Database corrupted
Database I/O error
Database entry missing
Unknown database error
Wiping LevelDB in %s
Opening LevelDB in %s
Opened LevelDB successfully
FivE
FbP5CNodeE
FbP5CNodebE
FviPK5CNodeE
FviE
N11libzerocoin22InvalidSerialExceptionE
20BaseSignatureChecker
11CStakeInput
N5boost16exception_detail19error_info_injectorISt12out_of_rangeEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt12out_of_rangeEEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFivENS_8functionIS9_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFbP5CNodeENS_8functionISB_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFbP5CNodebENS_8functionISB_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFviPK5CNodeENS_8functionISC_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFviENS_8functionIS9_EEEENS0_5mutexEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFiRKNS0_10connectionEEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFbRKNS0_10connectionEP5CNodeEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFbRKNS0_10connectionEP5CNodebEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionEiPK5CNodeEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionEiEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFivENS_8functionISB_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbP5CNodeENS_8functionISD_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbP5CNodebENS_8functionISD_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviPK5CNodeENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviENS_8functionISB_EEEENS2_5mutexEEEEE
PFivE
PFbP5CNodeE
PFbP5CNodebE
PFviPK5CNodeE
PFviE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFivENS_8functionIS4_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFbP5CNodeENS_8functionIS6_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFbP5CNodebENS_8functionIS6_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFviPK5CNodeENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFviENS_8functionIS4_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbRK7uint256ENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbRK7uint256ENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS8_EENSD_IFbRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK13CBlockLocatorENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK13CBlockLocatorENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK6CBlockRK16CValidationStateENS_8functionISL_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK6CBlockRK16CValidationStateENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES7_SA_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvPK11CBlockIndexENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvPK11CBlockIndexENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFivENS_8functionISF_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFivENS2_19optional_last_valueIiEEiSt4lessIiENS_8functionIS5_EENSA_IFiRKNS2_10connectionEEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbP5CNodeENS_8functionISH_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbP5CNodeENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS7_EENSC_IFbRKNS2_10connectionES6_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbP5CNodebENS_8functionISH_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbP5CNodebENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS7_EENSC_IFbRKNS2_10connectionES6_bEEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFviPK5CNodeENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviPK5CNodeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionEiS7_EEENS2_5mutexEE16invocation_stateEEE
0123456789abcdefT* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::unordered::detail::node_constructor<NodeAlloc>::node_pointer boost::unordered::detail::node_constructor<NodeAlloc>::release() [with NodeAlloc = std::allocator<boost::unordered::detail::ptr_node<std::pair<const uint256, CBlockIndex*> > >; boost::unordered::detail::node_constructor<NodeAlloc>::node_pointer = boost::unordered::detail::ptr_node<std::pair<const uint256, CBlockIndex*> >*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
std::size_t boost::unordered::detail::table<Types>::delete_nodes(boost::unordered::detail::table<Types>::link_pointer, boost::unordered::detail::table<Types>::link_pointer) [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::link_pointer = boost::unordered::detail::ptr_bucket*]
void boost::unordered::detail::table<Types>::delete_buckets() [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::mutex; typename boost::detail::sp_member_access<T>::type = boost::signals2::mutex*]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void PruneBlockIndexCandidates()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
boost::mutex::~mutex()
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::unordered::detail::table<Types>::clear() [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void limitedmap<K, V>::erase(const key_type&) [with K = CInv; V = long int; limitedmap<K, V>::key_type = CInv]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void {anonymous}::ProcessBlockAvailability(NodeId)
void {anonymous}::UpdateBlockAvailability(NodeId, const uint256&)
void CheckBlockIndex()
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
boost::condition_variable::condition_variable()
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
CCheckQueueControl<T>::CCheckQueueControl(CCheckQueue<T>*) [with T = CScriptCheck]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::detail::interruption_checker::~interruption_checker()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<int(), boost::function<int()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<int(), boost::function<int()> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int), boost::function<void(int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int), boost::function<void(int)> >&]
ContextualCheckZerocoinSpend
ContextualCheckZerocoinStake
ContextualCheckZerocoinSpendNoSerialCheck
ProcessMessage
GetTransaction
void UpdateCoins(const CTransaction&, CValidationState&, CCoinsViewCache&, CTxUndo&, int)
void boost::condition_variable::notify_all()
ProcessNewBlock
ContextualCheckBlockHeader
ContextualCheckBlock
ReindexAccumulators
ConnectBlock
CheckWork
AcceptBlock
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
CheckZerocoinSpend
bool CheckInputs(const CTransaction&, CValidationState&, const CCoinsViewCache&, bool, unsigned int, bool, std::vector<CScriptCheck>*)
CheckBlock
UpdateZGICSupply
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
bool ContextualCheckBlockHeader(const CBlockHeader&, CValidationState&, CBlockIndex*)
AcceptBlockHeader
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
LoadBlockIndexDB
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
ReadBlockFromDisk
ReadBlockFromDisk
ContextualCheckZerocoinMint
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const uint256&)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = bool; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockLocator&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockLocator&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlock&, const CValidationState&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlock&, const CValidationState&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockIndex*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<int>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<int()>; ExtendedSlotFunction = boost::function<int(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = int; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*, bool)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*, bool)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*, bool}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const CNode*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const CNode*)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const CNode*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<int>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<int()>; ExtendedSlotFunction = boost::function<int(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = int; Args = {}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*, bool)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*, bool)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*, bool}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const CNode*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const CNode*)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const CNode*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlock&, const CValidationState&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlock&, const CValidationState&}]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockIndex*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int, const uint256&), boost::function<void(int, const uint256&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const uint256&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}]
void ProcessGetData(CNode*)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
void {anonymous}::FindNextBlocksToDownload(NodeId, unsigned int, std::vector<CBlockIndex*>&, NodeId&)
CBlockIndex* {anonymous}::LastCommonAncestor(CBlockIndex*, CBlockIndex*)
void {anonymous}::MarkBlockAsInFlight(NodeId, const uint256&, CBlockIndex*)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockLocator&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockLocator&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
std::__cxx11::string GetWarnings(std::__cxx11::string)
AddWrappedSerialsInflation
void AddWrappedSerialsInflation()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>&]
RecalculateZGICMinted
void RecalculateZGICMinted()
RecalculateZGICSpent
void RecalculateZGICSpent()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const uint256&)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = bool; Args = {const uint256&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<bool>&]
ReadFromDisk
DisconnectBlock
bool DisconnectBlock(CBlock&, CValidationState&, CBlockIndex*, CCoinsViewCache&, bool*)
RecalculateGICSupply
bool RecalculateGICSupply(int)
bool ConnectBlock(const CBlock&, CValidationState&, CBlockIndex*, CCoinsViewCache&, bool, bool)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
bool TestBlockValidity(CValidationState&, const CBlock&, CBlockIndex*, bool, bool)
AcceptToMemoryPool
bool DisconnectTip(CValidationState&)
CBlockIndex* FindMostWorkChain()
bool ConnectTip(CValidationState&, CBlockIndex*, CBlock*, bool)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const uint256&)>, boost::function<void(const boost::signals2::connection&, int, const uint256&)>, boost::signals2::mutex>&]
LoadExternalBlockFile
AcceptableInputs
non-canonical ReadCompactSize()
ReadCompactSize() : size too large
limitedmap.h
CDataStream::read() : end of data
%s not running trying to add wit work 
CBufferedFile::Fill : end of file
CBufferedFile::Fill : fread failed
Read attempted past buffer limit
Read larger than buffer size
checkqueue.h
isIdle
prev->next_ != end
!size_
mlf_ >= minimum_max_load_factor
addrman
Added %s from %s: %i tried, %i new
Added %i addresses from %s: %i tried, %i new
CAutoFile::read : end of file
CAutoFile::read : fread failed
CAutoFile::read : file handle is NULL
CAutoFile::write : file handle is NULL
CAutoFile::write : write failed
CAutoFile::operator<< : file handle is NULL
GetStakeEntropyBit: nHeight=%u hashBlock=%s nEntropyBit=%u
vector::reserve
vector::_M_range_insert
vector::_M_realloc_insert
MbP?
?node_ && node_constructed_
main.cpp
!setBlockIndexCandidates.empty()
state != NULL
mapBlockIndex.size() <= 1
forward.size() == mapBlockIndex.size()
rangeGenesis.first == rangeGenesis.second
pindex->GetBlockHash() == Params().HashGenesisBlock()
pindex == chainActive.Genesis()
!(pindex->nStatus & BLOCK_HAVE_DATA) == (pindex->nTx == 0)
((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TRANSACTIONS) == (pindex->nTx > 0)
pindex->nSequenceId == 0
(pindexFirstMissing != NULL) == (pindex->nChainTx == 0)
pindex->nHeight == nHeight
pindex->pprev == NULL || pindex->nChainWork >= pindex->pprev->nChainWork
nHeight < 2 || (pindex->pskip && (pindex->pskip->nHeight < nHeight))
pindexFirstNotTreeValid == NULL
pindexFirstNotChainValid == NULL
pindexFirstNotScriptsValid == NULL
(pindex->nStatus & BLOCK_FAILED_MASK) == 0
setBlockIndexCandidates.count(pindex)
setBlockIndexCandidates.count(pindex) == 0
rangeUnlinked.first->first == pindex->pprev
foundInUnlinked
!foundInUnlinked
rangePar.first != rangePar.second
nNodes == forward.size()
ERROR: 
CheckZerocoinMint(): TxOutToPublicCoin() failed
CheckZerocoinMint() : PubCoin does not validate
CheckBlockHeader() : proof of work failed
high-hash
-blockspamfiltermaxsize
-blockspamfiltermaxavg
non-final
tx-size
scriptsig-size
scriptsig-not-pushonly
scriptpubkey
bare-multisig
dust
multi-op-return
CScriptCheck(): %s:%d VerifySignature failed: %s
%Y-%m-%d
CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)
%s%05u.dat
Unable to open file %s
Unable to seek to position %u of %s
mempool
Erased %d orphan tx from peer %d
Misbehaving: %s (%d -> %d) BAN THRESHOLD EXCEEDED
Misbehaving: %s (%d -> %d)
-banscore
'Warning: Large-work fork detected, forking after block 
CheckForkWarningConditions: Warning: Large valid fork found
  forking the chain at height %d (%s)
  lasting to height %d (%s).
Chain state database corruption likely.
CheckForkWarningConditions: Warning: Found invalid chain at least ~6 blocks longer than our best chain.
Chain state database corruption likely.
AddToBlockIndex() : SetStakeEntropyBit() failed 
AddToBlockIndex() : hashProofOfStake not found in map 
AddToBlockIndex() : ComputeNextStakeModifier() failed 
AddToBlockIndex() : Rejected by stake modifier checkpoint height=%d, modifier=%s 
%s : zGIC spend with serial %s is already in block %d
%s: V2 zGIC spend does not have a valid signature
%s: trying to spend zGIC without the correct spend type. txid=%s
%s : zGIC spend with serial %s from tx %s is not in valid range
%s:: HasValidSerial :: Invalid serial detected within range in block %d
%s: Invalid serial detected, txid %s, in block %d
%s: Invalid serial detected within range in block %d
ignoring large orphan tx (size: %u, hash: %s)
stored orphan tx %s (mapsz %u prevsz %u)
%s: failed to get index associated with zGIC stake checksum
%s: zGIC stake does not have required confirmation depth. Current height %d,  stakeInput height %d.
%s: accumulator checksum is different than the block 200 blocks previous. stake=%d block200=%d
%s: dynamic_cast of stake ptr failed
%s: zGIC stake block is less than allowed start height
InvalidChainFound: invalid block=%s  height=%d  log2_work=%.8g  date=%s
InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s
zgic
giant-scriptch
%s : contains a non-final transaction
bad-txns-nonfinal
%s : block height mismatch in coinbase
bad-cb-height
%s : null pindexPrev for block %s
%s : incorrect proof of work (DGW pre-fork) - %f %f %f at %d
%s : incorrect proof of work at %d
CheckZerocoinSpend(): over two non-mint outputs in a zerocoinspend transaction
Zerocoinspend does not have the correct denomination
Zerocoinspend nSequence denomination does not match CoinSpend
Zerocoinspend does not use the same txout that was used in the SoK
%s: Zerocoinspend could not find accumulator associated with checksum %s
CheckZerocoinSpend(): zerocoin spend did not verify
redeemed = %s , spend = %s 
Transaction spend more than was redeemed in zerocoins
Zerocoinspend serial is used twice in the same tx
CheckTransaction() : vin empty
bad-txns-vin-empty
CheckTransaction() : vout empty
bad-txns-vout-empty
CheckTransaction() : size limits failed
bad-txns-oversize
CheckTransaction(): txout empty for user transaction
CheckTransaction() : txout.nValue negative
bad-txns-vout-negative
CheckTransaction() : txout.nValue too high
bad-txns-vout-toolarge
CheckTransaction() : txout total out of range
bad-txns-txouttotal-toolarge
CheckTransaction() : invalid zerocoin mint
bad-txns-inputs-duplicate
CheckTransaction() : there are more zerocoin spends than are allowed in one transaction
CheckTransaction() : zerocoinspend contains inputs that are not zerocoins
CheckTransaction() : invalid zerocoin spend
CheckTransaction() : coinbase script size=%d
bad-cb-length
CheckTransaction() : Zerocoin Spend has more than allowed txin's
bad-zerocoinspend
CheckTransaction() : prevout is null
bad-txns-prevout-null
CheckTransaction() : duplicate inputs
CheckInputs() : %s inputs unavailable
CheckInputs() : tried to spend coinbase at depth %d, coinstake=%d
bad-txns-premature-spend-of-coinbase
CheckInputs() : txin values out of range
bad-txns-inputvalues-outofrange
CheckInputs() : %s value in (%s) < value out (%s)
bad-txns-in-belowout
CheckInputs() : %s nTxFee < 0
bad-txns-fee-negative
CheckInputs() : nFees out of range
bad-txns-fee-outofrange
non-mandatory-script-verify-flag (%s)
mandatory-script-verify-flag-failed (%s)
CheckBlock() : CheckBlockHeader failed
bad-header
debug
%s: block=%s  is proof of stake=%d
CheckBlock() : block timestamp too far in the future
time-too-new
CheckBlock() : hashMerkleRoot mismatch
bad-txnmrklroot
CheckBlock() : duplicate transaction
bad-txns-duplicate
CheckBlock() : first tx is not coinbase
bad-cb-missing
CheckBlock() : size limits failed
bad-blk-length
CheckBlock() : more than one coinbase
bad-cb-multiple
CheckBlock() : second tx is not coinstake
CheckBlock() : coinbase output not empty for proof-of-stake block
CheckBlock() : more than one coinstake
CheckBlock() : found conflicting transaction with transaction lock %s %s
CheckBlock() : found conflicting transaction with transaction lock
conflicting-tx-ix
CheckBlock() : skipping transaction locking checks
CheckBlock() : Couldn't find masternode/budget payment
bad-cb-payee
CheckBlock(): Masternode payment check skipped on sync - skipping IsBlockPayeeValid()
CheckBlock() : CheckTransaction failed
%s : Double spending of zGIC serial %s in block
 Block: %s
CheckBlock() : out-of-bounds SigOpCount
bad-blk-sigops
CheckBlock() : stake under min. stake value
Block contains zerocoins that spend more than are in the available supply to spend
%s coins for denomination %d pubcoin %s
pindexPrev
%s : incorrect proof of work
bad-diffbits
%s: forked chain older than max reorganization depth (height %d)
Block time = %d , GetMedianTimePast = %d 
%s : block's timestamp is too early
time-too-old
%s : rejected by checkpoint lock-in at %d
checkpoint mismatch
%s : forked chain older than last checkpoint (height %d)
%s : rejected nVersion=1 block
bad-version
%s : rejected nVersion=2 block
%s : rejected nVersion=4 block
%s : block is marked invalid
%s : prev block %s not found
bad-prevblk
%s : prev block height=%d hash=%s is invalid, unable to add block %s
enabled
disabled
%s: last block file = %i
%s: last block file info: %s
Checking all blk files are present...
%s: Last shutdown was prepared: %s
txindex
LoadBlockIndexDB(): transaction index %s
LoadBlockIndexDB(): hashBestChain=%s height=%d date=%s progress=%f
WriteBlockToDisk : OpenBlockFile failed
WriteBlockToDisk : ftell failed
ReadBlockFromDisk : OpenBlockFile failed
ReadBlockFromDisk : Errors in block header
%s : Deserialize or I/O error - %s
%s : block=%s index=%s
ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index
%s: OpenBlockFile failed
CAutoFile::operator>> : file handle is NULL
%s : txid mismatch
Unable to find key in unordered_map.
%s: pubcoin %s was already accumulated in tx %s
ProcessGetData(): ignoring request from peer=%i for old block that isn't in the main chain
!"cannot load block from disk"
merkleblock
pubcoins
txlvote
spork
mvote
mprop
fbvote
dstx
notfound
ProcessMessages()
addr
Warning: not punishing whitelisted peer %s!
Warning: not banning local peer %s!
reject
getblocks
Peer=%d is stalling block download, disconnecting
Timeout downloading block %s from peer=%d, disconnecting
pa == pb
Requesting block %s (%d) peer=%d
Stall started peer=%d
Requesting %s peer=%d
getdata
UpdateTip: new best=%s  height=%d version=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u
SetBestChain: %d of last 100 blocks above version %d
Warning: This version is obsolete, upgrade required!
testsafemode enabled
Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.
Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.
statusbar
!"GetWarnings() : invalid parameter"
Adding Wrapped Serials supply...
%s : block %d...
pblocktree->WriteBlockIndex(CDiskBlockIndex(pindex))
Failed to calculate accumulator checkpoint
%s : height=%d calculated_checkpoint=%s actual=%s
Calculated accumulator checkpoint is not what is recorded by block index
*** %s
Error: A fatal internal error occured, see debug.log for details
Disk space is low!
Error: Disk space is low!
out of disk space
Failed to write to block index
Failed to write to coin database
System error while flushing: 
Leaving block file %i: %s
Pre-allocating up to position 0x%x in blk%05u.dat
Pre-allocating up to position 0x%x in rev%05u.dat
Recalculating minted ZGIC...
ReadBlockFromDisk(block, pindex)
Recalculating spent ZGIC...
CBlockUndo::WriteToDisk : OpenUndoFile failed
CBlockUndo::WriteToDisk : ftell failed
CBlockUndo::ReadFromDisk : OpenBlockFile failed
CBlockUndo::ReadFromDisk : Checksum mismatch
%s : pindex=%s view=%s
pindex->GetBlockHash() == view.GetBestBlock()
DisconnectBlock() : no undo data available
DisconnectBlock() : failure reading undo data
DisconnectBlock() : block and undo data inconsistent
failed to erase spent zerocoin in block
%s: failed to automatically reset mint
DisconnectBlock(): TxOutToPublicCoin() failed
DisconnectBlock(): Failed to erase coin mint
DisconnectBlock() : added transaction mismatch? database corrupted
DisconnectBlock() : transaction and undo data inconsistent - txundo.vprevout.siz=%d tx.vin.siz=%d
DisconnectBlock() : undo data overwriting existing transaction
DisconnectBlock() : undo data adding output to missing transaction
DisconnectBlock() : undo data overwriting existing output
DisconnectBlock(): failed to erase checkpoint
GIANT Signed Message:
Recalculating GIC supply...
GetTransaction(prevout.hash, txPrev, hashBlock, true)
%s : Original money supply=%s
%s : Adding filtered funds to supply + %s : supply=%s
%s : Removing locked from supply - %s : supply=%s
%s: hashPrev=%s view=%s
hashPrevBlock == view.GetBestBlock()
ConnectBlock() : PoS period not active
PoS-early
ConnectBlock() : PoW period ended
PoW-ended
ConnectBlock() : too many sigops
ConnectBlock() : zerocoin transactions are currently in maintenance mode
%s : txid %s already exists in block %d , trying to include it again in block %d
bad-txns-inputs-missingorspent
%s: failed to add block %s with invalid zerocoinspend
%s: failed final check of zerocoinmint for tx %s
%s: zerocoin mint failed contextual check
ConnectBlock() : inputs missing/spent
%s : tried to spend invalid input %s in tx %s
bad-txns-invalid-inputs
%s: Failed to calculate new zGIC supply for block=%s height=%d
bench
      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]
ConnectBlock() : reward pays too much (actual=%s vs limit=%s)
bad-cb-amount
%s: Failed to validate accumulator checkpoint for block=%s height=%d
bad-acc-checkpoint
%s: Failed to validate accumulator checkpoint for block=%s height=%d because wallet is shutting down
%s: CheckQueue failed
block-validation-failed
    - Verify %u txins: %.2fms (%.3fms/txin) [%.2fs]
ConnectBlock() : FindUndoPos failed
Failed to write undo data
%s: %s detected zerocoinspend in transaction %s 
Used
Failed to record coin serials to database
Failed to record new mints to database
Failed to write transaction index
    - Index writing: %.2fms [%.2fs]
    - Callbacks: %.2fms [%.2fs]
ConnectBlock() : tried to overwrite transaction
bad-txns-BIP30
pindexPrev && pindexPrev == chainActive.Tip()
state.IsValid()
Verifying last %i blocks at level %i
VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s
VerifyDB() : *** found bad block at %d, hash=%s
VerifyDB() : *** found bad undo data at %d, hash=%s
VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s
VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)
VerifyDB() : *** found unconnectable block at %d, hash=%s
No coin database inconsistencies in last %i blocks (%i transactions)
AcceptToMemoryPool : Zerocoin transactions are temporarily disabled for maintenance
bad-tx
AcceptToMemoryPool: : CheckTransaction failed
AcceptToMemoryPool: : coinbase as individual tx
coinbase
AcceptToMemoryPool: coinstake as individual tx. txid=%s
AcceptToMemoryPool : nonstandard transaction: %s
%s tx already in mempool
AcceptToMemoryPool : conflicts with existing transaction lock: %s
tx-lock-conflict
AcceptToMemoryPool : zGIC spend tx %s already in block %d
bad-txns-inputs-spent
%s: ContextualCheckZerocoinSpend failed for tx %s
bad-txns-invalid-zgic
AcceptToMemoryPool : inputs already spent
AcceptToMemoryPool: : nonstandard transaction input
AcceptToMemoryPool : too many sigops %s, %d > %d
bad-txns-too-many-sigops
AcceptToMemoryPool : not enough fees %s, %d < %d
insufficient fee
insufficient fee for zerocoinmint
insufficient priority
-limitfreerelay
AcceptToMemoryPool : free transaction rejected by rate limiter
rate limited free transaction
Rate limit dFreeCount: %g => %g
AcceptToMemoryPool: : insane fees %s, %d > %d
AcceptToMemoryPool: : ConnectInputs failed %s
AcceptToMemoryPool: : BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s
pindexDelete
Failed to read block
DisconnectTip() : DisconnectBlock %s failed
view.Flush()
- Disconnect block: %.2fms
DisconnectBlocksAndReprocess: Got command to replay %d blocks
DisconnectBlockAndInputs: Can't find a conflicting transaction to inputs
REORGANIZE: Disconnect Conflicting Blocks %lli blocks; %s..
 -- disconnect %s
pindexTest->nChainTx || pindexTest->nHeight == 0
pindexNew->pprev == chainActive.Tip()
  - Load block from disk: %.2fms [%.2fs]
ConnectTip() : ConnectBlock %s failed
  - Connect total: %.2fms [%.2fs]
  - Flush: %.2fms [%.2fs]
  - Writing chainstate: %.2fms [%.2fs]
  - Connect postprocess: %.2fms [%.2fs]
- Connect block: %.2fms [%.2fs]
%s : Reconsidering block %s height %d
%s : prev block %s is invalid, unable to add block %s
%s: proof of stake check failed
%s: null stake ptr
%s: staked zGIC fails context checks
AcceptBlock() : already have block %d %s
%s: serial double spent on the same block
%s: double spent coinstake input inside block
%s: previous block %s not on disk
%s: forked chain longer than maximum reorg limit
%s: input already spent on a previous block
%s: serial double spent on fork
%s: serial double spent on main chain
%s: forked chain ContextualCheckZerocoinSpend failed for tx %s
%s: stake zerocoinspend not ready to be spent
%s: zerocoin spend did not verify
%s: coin stake inputs not available on main chain, received height %d vs current %d
%s: coin stake inputs already spent in main chain
%s: main chain ContextualCheckZerocoinSpend failed for tx %s
AcceptBlock() : FindBlockPos failed
Failed to write block
AcceptBlock() : ReceivedBlockTransactions failed
System error: 
%s : block contains %d zGIC mints and %d zGIC spends
ProcessNewBlock() : bad proof-of-stake block signature
%s : CheckBlock FAILED for block %s
-blockspamfilter
block-spam ban node for sending spam
%s : AcceptBlock FAILED - block spam protection
%s : AcceptBlock FAILED
%s : ActivateBestChain failed
%s : ACCEPTED Block %ld in %ld milliseconds with size=%d
%s: Out of order block %s, parent %s not known
Block Import: already had block %s at height %d
%s: Processing out of order child %s of %s
Loaded %i blocks from external file in %dms
Initializing databases...
LoadBlockIndex() : FindBlockPos failed
LoadBlockIndex() : writing genesis block to disk failed
LoadBlockIndex() : genesis block not accepted
LoadBlockIndex() : genesis block cannot be activated
LoadBlockIndex() : failed to initialize block database: %s
have
received: %s (%u bytes) peer=%d
-dropmessagestest
dropmessagestest DROPPING RECV MESSAGE
Duplicate version message
asking peer for sporks
getsporks
String length limit exceeded
connected to self at %s, disconnecting
verack
ProcessMessages: advertizing address %s
getaddr
, peeraddr=
receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s
message addr size() = %u
message inv size() = %u
got inv: %s  %s peer=%d
getblocks (%d) %s to peer=%d
send buffer size() = %u
message getdata size() = %u
received getdata (%u invsz) peer=%d
received getdata for: %s peer=%d
getheaders
headers
getblocks %d to %s limit %d from peer=%d
  getblocks stopping at %d %s
  getblocks stopping at limit %d %s
getheaders %d to %s from peer=%d
dstx: Masternode sending too many transactions %s
dstx: Got bad masternode address signature %s 
dstx: Got Masternode transaction %s
AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)
   accepted orphan tx %s
   invalid orphan tx %s
   removed orphan tx %s
AcceptToMemoryPool: Zerocoinspend peer=%d %s : accepted %s (poolsz %u)
-maxorphantx
mapOrphan overflow, removed %u tx
%s from peer=%d %s was not accepted into the memory pool: %s
headers message size = %u
non-continuous headers sequence
invalid header received 
more getheaders (%d) to end to peer=%d (startheight:%d)
accvalue
received block %s peer=%d
%s : Already processed block %s, skipping ProcessNewBlock()
peer misbehaving for request an invalid acc checkpoint 
accvalueresponse
genwit
%s : add genwit request failed 
pong
Timing mishap
Nonce mismatch
Nonce zero
Unsolicited pong without ping
Short payload
pong peer=%d %s: %s, %x expected, %x received, %u bytes
alert
filterload
bloom message=%s
filteradd
filterclear
 code 
: hash 
Reject %s
Unparseable reject message received
PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d
PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d
ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x
ProcessMessage(%s, %u bytes) FAILED peer=%d
error parsing message
end of data
ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length
size too large
ProcessMessages(%s, %u bytes): Exception '%s' caught
AcceptableInputs: : CheckTransaction failed
AcceptableInputs: : coinbase as individual tx
AcceptableInputs : conflicts with existing transaction lock: %s
AcceptableInputs : inputs already spent
AcceptableInputs : too many sigops %s, %d > %d
AcceptableInputs : not enough fees %s, %d < %d
AcceptableInputs : free transaction rejected by rate limiter
AcceptableInputs: : insane fees %s, %d > %d
AcceptableInputs: : ConnectInputs failed %s
vector<bool>::_M_insert_aux
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvPvENS2_5list1INS2_5valueIP7CWalletEEEEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvPvENS3_5list1INS3_5valueIP7CWalletEEEEEEEEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void IncrementExtraNonce(CBlock*, CBlockIndex*, unsigned int&)
boost::condition_variable::condition_variable()
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
void boost::shared_mutex::state_data::assert_lock_shared() const
void boost::condition_variable::notify_all()
void boost::shared_mutex::state_data::assert_locked() const
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::detail::interruption_checker::~interruption_checker()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
CBlockTemplate* CreateNewBlock(const CScript&, CWallet*, bool)
CreateNewBlock
BitcoinMiner
miner.cpp
txCoinbase.vin[0].scriptSig.size() <= 100
generated %s
GIANTMiner : generated block is stale
GIANTMiner : ProcessNewBlock, block not accepted
-blockversion
CreateNewBlock(): stake not found
staking
-blockmaxsize
-blockprioritysize
-blockminsize
"mempool transaction missing input" == 0
%s : found invalid input %s in tx %s
priority %.1f fee %s txid %s
CreateNewBlock(): total size %u
CPUMiner : proof-of-stake block found %s 
%s: failed to find zGIC with serial %s, unable to sign block
BitcoinMiner(): Signing new block with zGIC key failed 
BitcoinMiner(): Signing new block with UTXO key failed 
CreateNewBlock() : TestBlockValidity failed
ERROR: mempool transaction missing input
GIANTMiner started
giant-miner
CPUMiner : proof-of-stake block was signed %s 
Running GIANTMiner with %u transactions in block (%u bytes)
BitcoinMiner:
proof-of-work found  
  hash: %s  
target: %s
hashmeter %6.0f khash/s
ThreadBitcoinMiner exiting
ThreadBitcoinMiner() exception
boost::condition_variable::~condition_variable()
int CNode::GetRefCount()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::mutex::~mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
void boost::mutex::unlock()
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
boost::detail::interruption_checker::~interruption_checker()
void boost::shared_mutex::state_data::assert_locked() const
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::condition_variable::notify_all()
boost::condition_variable::condition_variable()
void CNode::BeginMessage(const char*)
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
void SocketSendData(CNode*)
void limitedmap<K, V>::update(limitedmap<K, V>::const_iterator, const mapped_type&) [with K = CInv; V = long int; limitedmap<K, V>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const CInv, long int> >; limitedmap<K, V>::mapped_type = long int]
Write
Read
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
Discover
void CNode::EndMessage()
DisconnectOldProtocol
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void CAddrMan::Serialize(Stream&, int, int) const [with Stream = CDataStream]
Write
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
Read
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >&]
boost::signals2::mutex::mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<int>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<int()>; ExtendedSlotFunction = boost::function<int(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = int; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<int(), boost::function<int()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int), boost::function<void(int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*, bool)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*, bool)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*, bool}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const CNode*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const CNode*)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const CNode*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<int(), boost::function<int()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<int(), boost::function<int()> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<int>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<int()>; ExtendedSlotFunction = boost::function<int(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = int; Args = {}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<int>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<int>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = int; boost::optional<T>::reference_type = int&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<int(), boost::signals2::optional_last_value<int>, int, std::less<int>, boost::function<int()>, boost::function<int(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
SweepBanned
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int), boost::function<void(int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int), boost::function<void(int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int)>, boost::function<void(const boost::signals2::connection&, int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(CNode*), boost::function<bool(CNode*)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(CNode*, bool), boost::function<bool(CNode*, bool)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(int, const CNode*), boost::function<void(int, const CNode*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(int, const CNode*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, int, const CNode*)>; Mutex = boost::signals2::mutex; R = void; Args = {int, const CNode*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(int, const CNode*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(int, const CNode*)>, boost::function<void(const boost::signals2::connection&, int, const CNode*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*)>, boost::function<bool(const boost::signals2::connection&, CNode*)>, boost::signals2::mutex>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(CNode*, bool), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(CNode*, bool)>, boost::function<bool(const boost::signals2::connection&, CNode*, bool)>, boost::signals2::mutex>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(CNode*, bool)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, CNode*, bool)>; Mutex = boost::signals2::mutex; R = bool; Args = {CNode*, bool}]
N5boost8signals26detail19std_functional_baseIJP5CNodeEEE
N5boost8signals26detail19std_functional_baseIJP5CNodebEEE
N5boost8signals26detail19std_functional_baseIJiPK5CNodeEEE
N5boost8signals26signalIFivENS0_19optional_last_valueIiEEiSt4lessIiENS_8functionIS2_EENS7_IFiRKNS0_10connectionEEEENS0_5mutexEEE
N5boost8signals26signalIFbP5CNodeENS0_19optional_last_valueIbEEiSt4lessIiENS_8functionIS4_EENS9_IFbRKNS0_10connectionES3_EEENS0_5mutexEEE
N5boost8signals26signalIFbP5CNodebENS0_19optional_last_valueIbEEiSt4lessIiENS_8functionIS4_EENS9_IFbRKNS0_10connectionES3_bEEENS0_5mutexEEE
N5boost8signals26signalIFviPK5CNodeENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionEiS4_EEENS0_5mutexEEE
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvPKcPFvvEENS2_5list2INS2_5valueIS5_EENSB_IS7_EEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFivENS2_19optional_last_valueIiEEiSt4lessIiENS_8functionIS5_EENSA_IFiRKNS2_10connectionEEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbP5CNodeENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS7_EENSC_IFbRKNS2_10connectionES6_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbP5CNodebENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS7_EENSC_IFbRKNS2_10connectionES6_bEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFviPK5CNodeENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionEiS7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvPKcPFvvEENS3_5list2INS3_5valueIS6_EENSC_IS8_EEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueIiEEEE
N5boost6detail17sp_counted_impl_pINS_8signals219optional_last_valueIbEEEE
CloseSocket(hListenSocket) failed with error %s
Incorrect keysize in addrman deserialization
addrman lost %i new and %i tried addresses due to collisions
addrman.h
nIds != nNew
nIds != nTried
vector::_M_fill_insert
net.h
nRefCount >= 0
-port
0.0.0.0
ThreadStakeMinter started
ThreadStakeMinter exiting,
ThreadStakeMinter() exception 
ThreadStakeMinter() error 
(aborted)
-maxreceivebuffer
-maxsendbuffer
peers.dat
banlist.dat
upnp
socket closed
recv failed: %s
RemoveLocal(%s)
net.cpp
ssSend.size() == 0
sending: %s 
AdvertizeLocal: advertizing address %s
AddLocal(%s,%i)
Oversized message from peer=%i, disconnecting
disconnecting peer=%d
data.size() > pnode->nSendOffset
socket send error %s
pnode->nSendOffset == 0
pnode->nSendSize == 0
P2P peers available. Skipped DNS seeding.
Loading addresses from DNS seeds (could take a while)
%d addresses found from DNS seeds
%H:%M:%S
askfor %s  %d (%s) peer=%d
banlist.dat.%04x
%s: Failed to open file %s
%s: Rename-into-place failed
%s: Serialize or I/O error - %s
%s: Checksum mismatch, data corrupted
%s: Invalid network magic number
%s: Deserialize or I/O error - %s
dropmessages DROPPING SEND MESSAGE
-fuzzmessagestest
ssSend.size() >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum)
(%d bytes) peer=%d
%s : peer=%d using obsolete version %i; disconnecting
Version must be %d or greater
peers.dat.%04x
%s : Failed to open file %s
%s : Serialize or I/O error - %s
Flushed %d addresses to peers.dat  %dms
UPnP: GetExternalIPAddress() returned %d
UPnP: ExternalIPAddress = %s
UPnP: GetExternalIPAddress failed.
GIANT 
AddPortMapping(%s, %s, %s) failed with code %d (%s)
UPnP Port Mapping successful.
No valid UPnP IGDs found
UPNP_DeletePortMapping() returned : %d
%s : Checksum mismatch, data corrupted
%s : Invalid network magic number
send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d
send version message: version %d, blocks=%d, us=%s, peer=%d
%s: Removed banned node ip/subnet from banlist.dat: %s
Flushed %d banned node ips/subnets to banlist.dat  %dms
StopNode()
-bantime
Error: Bind address family for %s not supported
Error: Couldn't open socket for incoming connections (socket returned error %s)
Error: Couldn't create a listenable socket for incoming connections
BindListenPort: Setting listening socket to non-blocking failed, error %s
Unable to bind to %s on this computer. GIANT Core is probably already running.
Unable to bind to %s on this computer (bind returned error %s)
Bound to %s
Error: Listening for incoming connections failed (listen returned error %s)
Added connection to %s peer=%d
Added connection peer=%d
Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)
Adding fixed seed nodes as DNS doesn't seem to be available.
127.0.0.1
-addnode
socket select error %s
Warning: Unknown socket family
socket error accept failed: %s
connection from %s dropped: non-selectable socket
connection from %s dropped (full)
connection from %s dropped (banned)
socket recv error %s
socket no message in first 60 seconds, %d %d from %d
socket sending timeout: %is
socket receive timeout: %is
ping timeout: %fs
Loading addresses...
Invalid or missing peers.dat; recreating
Invalid or missing banlist.dat; recreating
Loaded %i addresses from peers.dat  %dms
%s: IPv4 %s: %s
%s: IPv6 %s: %s
DNS seeding disabled
dnsseed
addcon
opencon
msghand
stakemint
boost::condition_variable::do_wait_until failed in pthread_cond_timedwait
FbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_jE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESG_jENS_8functionISH_EEEENS0_5mutexEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESI_jENS_8functionISJ_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_jENS_8functionISC_EEEEEE
PFbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_jE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::mutex; typename boost::detail::sp_member_access<T>::type = boost::signals2::mutex*]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
init message: %s
Warning
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
CheckProofOfWork() : nBits below minimum work
CheckProofOfWork() : hash doesn't match nBits
FbP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
PFbP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE
N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE
0123456789abcdefboost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
const Block& boost::dynamic_bitset<Block, Allocator>::m_highest_block() const [with Block = unsigned char; Allocator = std::allocator<unsigned char>]
boost::dynamic_bitset<Block, Allocator>::~dynamic_bitset() [with Block = unsigned char; Allocator = std::allocator<unsigned char>]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
bool rest_getutxos(HTTPRequest*, const string&)
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/dynamic_bitset/dynamic_bitset.hpp
size() > 0 && num_blocks() > 0
m_check_invariants()
/rest/tx/
Content-Type
text/plain
Service temporarily unavailable: 
Invalid hash: 
application/octet-stream
application/json
output format not found (available: 
 not available (pruned data)
output format not found (available: json)
No header count specified. Use /rest/headers/<count>/<hash>.<ext>.
Header count out of range: 
output format not found (available: .bin, .hex)
Error: empty request
checkmempool
basic_string::substr
%s: __pos (which is %zu) > this->size() (which is %zu)
basic_string::basic_string
Parse error
Combination of URI scheme inputs and raw post data is not allowed
Error: max outpoints exceeded (max: %d, tried: %d)
vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)
rest.cpp
!coin.out.IsNull()
chainHeight
chaintipHash
bitmap
utxos
txvers
scriptPubKey
/rest/block/notxdetails/
/rest/block/
/rest/chaininfo
/rest/mempool/info
/rest/mempool/contents
/rest/headers/
/rest/getutxos
json
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
getblockcount
getblockcount
Returns the number of blocks in the longest block chain.
Result:
n    (numeric) The current block count
Examples:
getdifficulty
getdifficulty
Returns the proof-of-work difficulty as a multiple of the minimum difficulty.
Result:
n.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.
Examples:
getbestblockhash
getbestblockhash
Returns the hash of the best (tip) block in the longest block chain.
Result
"hex"      (string) the block hash hex encoded
Examples
Blockchain information not yet available
getblockhash
getblockhash index
Returns hash of block in best-block-chain at index provided.
Arguments:
1. index         (numeric, required) The block index
Result:
"hash"         (string) The block hash
Examples:
Block height out of range
verifychain
verifychain ( numblocks )
Verifies blockchain database.
Arguments:
1. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.
Result:
true|false       (boolean) Verified or not
Examples:
getaccumulatorvalues
"height"
getaccumulatorvalues "height"
Returns the accumulator values associated with a block height
Arguments:
1. height   (numeric, required) the height of the checkpoint.
Examples:
invalid block height
failed to find value in database
findserial
"serial"
findserial "serial"
Searches the zerocoin database for a zerocoin spend transaction that contains the specified serial
Arguments:
1. serial   (string, required) the serial of a zerocoin spend to search for.
Result:
  "success": true|false        (boolean) Whether the serial was found
  "txid": "xxx"              (string) The transaction that contains the spent serial
Examples:
Invalid serial
success
bytes
getmempoolinfo
getmempoolinfo
Returns details on the active state of the TX memory pool.
Result:
  "size": xxxxx                (numeric) Current tx count
  "bytes": xxxxx               (numeric) Sum of all tx sizes
Examples:
gettxoutsetinfo
gettxoutsetinfo
Returns statistics about the unspent transaction output set.
Note this call may take some time.
Result:
  "height":n,     (numeric) The current block height (index)
  "bestblock": "hex",   (string) the best block hash hex
  "transactions": n,      (numeric) The number of transactions
  "txouts": n,            (numeric) The number of output transactions
  "bytes_serialized": n,  (numeric) The serialized size
  "hash_serialized": "hash",   (string) The serialized hash
  "total_amount": x.xxx          (numeric) The total amount
Examples:
bestblock
transactions
txouts
bytes_serialized
hash_serialized
total_amount
waitfornewblock
waitfornewblock ( timeout )
Waits for a specific new block and returns useful info about it.
Returns the current block on timeout or exit.
Arguments:
1. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.
Result:
{                           (json object)
  "hash" : {       (string) The blockhash
  "height" : {     (int) Block height
Examples:
waitforblock
"0000000000079f8ef3d2c688c244eb7a4570b24c9ed7b4a8c619eb02596f8862", 1000
waitforblock blockhash ( timeout )
Waits for a specific new block and returns useful info about it.
Returns the current block on timeout or exit.
Arguments:
1. "blockhash" (required, string) Block hash to wait for.
2. timeout       (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.
Result:
{                           (json object)
  "hash" : {       (string) The blockhash
  "height" : {     (int) Block height
Examples:
waitforblockheight
"100", 1000
waitforblockheight height ( timeout )
Waits for (at least) block height and returns the height and hash
of the current tip.
Returns the current block on timeout or exit.
Arguments:
1. height  (required, int) Block height to wait for (int)
2. timeout (int, optional, default=0) Time in milliseconds to wait for a response. 0 indicates no timeout.
Result:
{                           (json object)
  "hash" : {       (string) The blockhash
  "height" : {     (int) Block height
Examples:
getmintsinblocks
1200000 1000 5
getmintsinblocks "height" "range" "coinDenomination"
Returns the number of mints of a certain denomination
occurred in blocks [height, height+1, height+2, ..., height+range-1]
Arguments:
1. height             (numeric, required) block height where the search starts.
2. range              (numeric, required) number of blocks to include.
2. coinDenomination   (numeric, required) coin denomination.
Result:
  "Starting block": "x"           (integer) First counted block
  "Ending block": "x"             (integer) Last counted block
  "Number of d-denom mints": "x"  (integer) number of mints of the required d denomination
Examples:
1200000, 1000, 5
Invalid block range. Must be strictly positive.
Invalid denomination. Must be in {1, 5, 10, 50, 100, 500, 1000, 5000}
Starting block
Ending block
Number of 
-denom mints
listunspent
gettxout "txid" n ( includemempool )
Returns details about an unspent transaction output.
Arguments:
1. "txid"       (string, required) The transaction id
2. n              (numeric, required) vout value
3. includemempool  (boolean, optional) Whether to included the mem pool
Result:
  "bestblock" : "hash",    (string) the block hash
  "confirmations" : n,       (numeric) The number of confirmations
  "value" : x.xxx,           (numeric) The transaction value in btc
  "scriptPubKey" : {         (json object)
     "asm" : "code",       (string) 
     "hex" : "hex",        (string) 
     "reqSigs" : n,          (numeric) Number of required signatures
     "type" : "pubkeyhash", (string) The type, eg pubkeyhash
     "addresses" : [          (array of string) array of giant addresses
     "giantaddress"   	 	(string) giant address
        ,...
     ]
  },
  "version" : n,            (numeric) The version
  "coinbase" : true|false   (boolean) Coinbase or not
Examples:
Get unspent transactions
View the details
gettxout
"txid" 1
As a json rpc call
"txid", 1
startingpriority
currentpriority
depends
getrawmempool
getrawmempool ( verbose )
Returns all transaction ids in memory pool as a json array of string transaction ids.
Arguments:
1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids
Result: (for verbose = false):
[                     (json array of string)
  "transactionid"     (string) The transaction id
  ,...
Result: (for verbose = true):
{                           (json object)
  "transactionid" : {       (json object)
    "size" : n,             (numeric) transaction size in bytes
    "fee" : n,              (numeric) transaction fee in giant
    "time" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT
    "height" : n,           (numeric) block height when transaction entered pool
    "startingpriority" : n, (numeric) priority when transaction entered pool
    "currentpriority" : n,  (numeric) transaction priority now
    "depends" : [           (array) unconfirmed transactions used as inputs for this transaction
        "transactionid",    (string) parent transaction id
       ... ]
  }, ...
Examples
getchaintips
getchaintips
Return information about all known tips in the block tree, including the main chain as well as orphaned branches.
Result:
    "height": xxxx,         (numeric) height of the chain tip
    "hash": "xxxx",         (string) block hash of the tip
    "branchlen": 0          (numeric) zero for main chain
    "status": "active"      (string) "active" for the main chain
  },
    "height": xxxx,
    "hash": "xxxx",
    "branchlen": 1          (numeric) length of branch connecting the tip to the main chain
    "status": "xxxx"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)
Possible values for status:
1.  "invalid"               This branch contains at least one invalid block
2.  "headers-only"          Not all blocks for this branch are available, but the headers are valid
3.  "valid-headers"         All blocks are available for this branch, but they were never fully validated
4.  "valid-fork"            This branch is not part of the active chain, but is fully validated
5.  "active"                This is the tip of the active main chain, which is certainly valid
Examples:
branchlen
invalid
headers-only
valid-fork
valid-headers
unknown
window
getblockchaininfo
getblockchaininfo
Returns an object containing various state info regarding block chain processing.
Result:
  "chain": "xxxx",        (string) current network name as defined in BIP70 (main, test, regtest)
  "blocks": xxxxxx,         (numeric) the current number of blocks processed in the server
  "headers": xxxxxx,        (numeric) the current number of headers we have validated
  "bestblockhash": "...", (string) the hash of the currently best block
  "difficulty": xxxxxx,     (numeric) the current difficulty
  "verificationprogress": xxxx, (numeric) estimate of verification progress [0..1]
  "chainwork": "xxxx"     (string) total amount of work in active chain, in hexadecimal
  "softforks": [            (array) status of softforks in progress
     {
        "id": "xxxx",        (string) name of softfork
        "version": xx,         (numeric) block version
        "enforce": {           (object) progress toward enforcing the softfork rules for new-version blocks
           "status": xx,       (boolean) true if threshold reached
           "found": xx,        (numeric) number of blocks with the new version found
           "required": xx,     (numeric) number of blocks required to trigger
           "window": xx,       (numeric) maximum size of examined window of recent blocks
        },
        "reject": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as "enforce")
     }, ...
Examples:
bestblockhash
difficulty
verificationprogress
chainwork
bip65
enforce
softforks
getfeeinfo
getfeeinfo blocks
Returns details of transaction fees over the last n blocks.
Arguments:
1. blocks     (int, required) the number of blocks to get transaction data from
Result:
  "txcount": xxxxx                (numeric) Current tx count
  "txbytes": xxxxx                (numeric) Sum of all tx sizes
  "ttlfee": xxxxx                 (numeric) Sum of all fees
  "feeperkb": xxxxx               (numeric) Average fee per kb over the block range
  "rec_highpriorityfee_perkb": xxxxx    (numeric) Recommended fee per kb to use for a high priority tx
Examples:
invalid start height
failed to read block from disk
failed to read tx from disk
txcount
txbytes
ttlfee
feeperkb
rec_highpriorityfee_perkb
invalidateblock
"blockhash"
invalidateblock "hash"
Permanently marks a block as invalid, as if it violated a consensus rule.
Arguments:
1. hash   (string, required) the hash of the block to mark as invalid
Examples:
Block not found
reconsiderblock
reconsiderblock "hash"
Removes invalidity status of a block and its descendants, reconsider them for activation.
This can be used to undo the effects of invalidateblock.
Arguments:
1. hash   (string, required) the hash of the block to reconsider
Examples:
getserials
1254000 1000
getserials "hash"
Look the inputs of any tx in a range of blocks and returns the serial numbers for any coinspend.
Arguments:
1. starting_height   (numeric, required) the height of the first block to check
2. range             (numeric, required) the amount of blocks to check
3. fVerbose          (boolean, optional, default=False) return verbose output
Examples:
1254000, 1000
Can't read block from disk
Zerocoin Mint
Zerocoin Stake
type: %d
denom
bitsize
spentTo
blocknum
blocktime
merkleroot
acc_checkpoint
mediantime
%08x
previousblockhash
nextblockhash
%016x
getchecksumblock
"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2", 5
getchecksumblock
Finds the first occurrence of a certain accumulator checksum.
Returns the block hash or, if fVerbose=true, the JSON block object
Arguments:
1. "checksum"      (string, required) The hex encoded accumulator checksum
2. "denom"         (integer, required) The denomination of the accumulator
3. fVerbose          (boolean, optional, default=false) true for a json object, false for the hex encoded hash
Result (for fVerbose = true):
  "hash" : "hash",     (string) the block hash (same as provided)
  "confirmations" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain
  "size" : n,            (numeric) The block size
  "height" : n,          (numeric) The block height or index
  "version" : n,         (numeric) The block version
  "merkleroot" : "xxxx", (string) The merkle root
  "tx" : [               (array of string) The transaction ids
     "transactionid"     (string) The transaction id
     ,...
  ],
  "time" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)
  "mediantime" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)
  "nonce" : n,           (numeric) The nonce
  "bits" : "1d00ffff", (string) The bits
  "difficulty" : x.xxx,  (numeric) The difficulty
  "previousblockhash" : "hash",  (string) The hash of the previous block
  "nextblockhash" : "hash"       (string) The hash of the next block
  "moneysupply" : "supply"       (numeric) The money supply when this block was added to the blockchain
Result (for verbose=false):
"data"             (string) A string that is serialized, hex-encoded data for block 'hash'.
Examples:
getblock
"00000000000fd08c2fb661d2fcb0d49abb3a91e5f27082ce64feed3b4dede2e2"
getblock "hash" ( verbose )
If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.
If verbose is true, returns an Object with information about block <hash>.
Arguments:
1. "hash"          (string, required) The block hash
2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data
Result (for verbose = true):
  "hash" : "hash",     (string) the block hash (same as provided)
  "confirmations" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain
  "size" : n,            (numeric) The block size
  "height" : n,          (numeric) The block height or index
  "version" : n,         (numeric) The block version
  "merkleroot" : "xxxx", (string) The merkle root
  "tx" : [               (array of string) The transaction ids
     "transactionid"     (string) The transaction id
     ,...
  ],
  "time" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)
  "mediantime" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)
  "nonce" : n,           (numeric) The nonce
  "bits" : "1d00ffff", (string) The bits
  "difficulty" : x.xxx,  (numeric) The difficulty
  "previousblockhash" : "hash",  (string) The hash of the previous block
  "nextblockhash" : "hash"       (string) The hash of the next block
  "moneysupply" : "supply"       (numeric) The money supply when this block was added to the blockchain
Result (for verbose=false):
"data"             (string) A string that is serialized, hex-encoded data for block 'hash'.
Examples:
getblockheader
getblockheader "hash" ( verbose )
If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash' header.
If verbose is true, returns an Object with information about block <hash> header.
Arguments:
1. "hash"          (string, required) The block hash
2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data
Result (for verbose = true):
  "version" : n,         (numeric) The block version
  "previousblockhash" : "hash",  (string) The hash of the previous block
  "merkleroot" : "xxxx", (string) The merkle root
  "time" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)
  "mediantime" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)
  "nonce" : n,           (numeric) The nonce
  "bits" : "1d00ffff", (string) The bits
Result (for verbose=false):
"data"             (string) A string that is serialized, hex-encoded data for block 'hash' header.
Examples:
getaccumulatorwitness
"5fb87fb7bb638e83bfc14bcf33ac6f8064c9884dc72a4e652666abcf42cc47f9da0a7aca58076b0122a19b25629a6b6e7461f188baa7c00865b862cdb270d934873648aa12dd66e3242da40e4c17c78b70fded35e2d9c72933b455fadce9684586b1d48b10570d66feebe51ccebb1d98595217d06f41e66d5a0d9246d46ec3dd" 5
getaccumulatorwitness "commitmentCoinValue, coinDenomination"
Returns the accumulator witness value associated with the coin
Arguments:
1. coinValue             (string, required) the commitment value of the coin in HEX.
2. coinDenomination      (numeric, required) the coin denomination.
Result:
  "Accumulator Value": "xxx"  (string) Accumulator hex value
  "Denomination": "d"         (integer) Accumulator denomination
  "Mints added": "d"          (integer) Number of mints added to the accumulator
  "Witness Value": "xxx"      (string) Witness hex value
Examples:
"5fb87fb7bb638e83bfc14bcf33ac6f8064c9884dc72a4e652666abcf42cc47f9da0a7aca58076b0122a19b25629a6b6e7461f188baa7c00865b862cdb270d934873648aa12dd66e3242da40e4c17c78b70fded35e2d9c72933b455fadce9684586b1d48b10570d66feebe51ccebb1d98595217d06f41e66d5a0d9246d46ec3dd", 5
Accumulator Value
Denomination
Mints added
Witness Value
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
UniValue createrawzerocoinstake(const UniValue&, bool)
T boost::detail::variant::forced_return() [with T = bool]
T boost::detail::variant::forced_return() [with T = CScriptID*]
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
UniValue listunspent(const UniValue&, bool)
34MutableTransactionSignatureChecker
N5boost7bad_getE
N5boost16exception_detail19error_info_injectorINS_7bad_getEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_7bad_getEEEEE
0123456789abcdef0123456789abcdef0123456789abcdefboost::bad_get: failed value get using boost::get
getspentzerocoinamount
78021ebf92a80dfccef1413067f1222e37535399797cce029bb40ad981131706 0
getspentzerocoinamount hexstring index
Returns value of spent zerocoin output designated by transaction hash and input index.
Arguments:
1. hash          (hexstring) Transaction hash
2. index         (int) Input index
Result:
"value"        (int) Spent output value, -1 if error
Examples:
parameter 1
Invalid parameter for transaction input
No information available about transaction
No such mempool or blockchain transaction
No such mempool transaction. Use -txindex to enable blockchain transaction queries
getrawtransaction
"mytxid"
getrawtransaction "txid" ( verbose "blockhash" )
NOTE: By default this function only works sometimes. This is when the tx is in the mempool
or there is an unspent output in the utxo for this transaction. To make it always work,
you need to maintain a transaction index, using the -txindex command line option.
Return the raw transaction data.
If verbose is 'true', returns an Object with information about 'txid'.
If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.
Arguments:
1. "txid"      (string, required) The transaction id
2. verbose     (bool, optional, default=false) If false, return a string, otherwise return a json object
3. "blockhash" (string, optional) The block in which to look for the transaction
Result (if verbose is not set or set to false):
"data"      (string) The serialized, hex-encoded data for 'txid'
Result (if verbose is set to true):
  "in_active_chain": b, (bool) Whether specified block is in the active chain or not (only present with explicit "blockhash" argument)
  "hex" : "data",       (string) The serialized, hex-encoded data for 'txid'
  "txid" : "id",        (string) The transaction id (same as provided)
  "size" : n,             (numeric) The serialized transaction size
  "version" : n,          (numeric) The version
  "locktime" : ttt,       (numeric) The lock time
  "vin" : [               (array of json objects)
     {
       "txid": "id",    (string) The transaction id
       "vout": n,         (numeric) 
       "scriptSig": {     (json object) The script
         "asm": "asm",  (string) asm
         "hex": "hex"   (string) hex
       },
       "sequence": n      (numeric) The script sequence number
     }
     ,...
  ],
  "vout" : [              (array of json objects)
     {
       "value" : x.xxx,            (numeric) The value in btc
       "n" : n,                    (numeric) index
       "scriptPubKey" : {          (json object)
         "asm" : "asm",          (string) the asm
         "hex" : "hex",          (string) the hex
         "reqSigs" : n,            (numeric) The required sigs
         "type" : "pubkeyhash",  (string) The type, eg 'pubkeyhash'
         "addresses" : [           (json array of string)
           "giantaddress"        (string) giant address
           ,...
         ]
       }
     }
     ,...
  ],
  "blockhash" : "hash",   (string) the block hash
  "confirmations" : n,      (numeric) The confirmations
  "time" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)
  "blocktime" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)
Examples:
"mytxid" true
"mytxid", true
"mytxid" false "myblockhash"
"mytxid" true "myblockhash"
parameter 3
Block not available
No such transaction found in the provided block
. Use gettransaction for wallet transactions.
in_active_chain
Block hash not found
vout
scriptSig
sequence
decoderawtransaction
"hexstring"
decoderawtransaction "hexstring"
Return a JSON object representing the serialized, hex-encoded transaction.
Arguments:
1. "hex"      (string, required) The transaction hex string
Result:
  "txid" : "id",        (string) The transaction id
  "size" : n,             (numeric) The transaction size
  "version" : n,          (numeric) The version
  "locktime" : ttt,       (numeric) The lock time
  "vin" : [               (array of json objects)
     {
       "txid": "id",    (string) The transaction id
       "vout": n,         (numeric) The output number
       "scriptSig": {     (json object) The script
         "asm": "asm",  (string) asm
         "hex": "hex"   (string) hex
       },
       "sequence": n     (numeric) The script sequence number
     }
     ,...
  ],
  "vout" : [             (array of json objects)
     {
       "value" : x.xxx,            (numeric) The value in btc
       "n" : n,                    (numeric) index
       "scriptPubKey" : {          (json object)
         "asm" : "asm",          (string) the asm
         "hex" : "hex",          (string) the hex
         "reqSigs" : n,            (numeric) The required sigs
         "type" : "pubkeyhash",  (string) The type, eg 'pubkeyhash'
         "addresses" : [           (json array of string)
           "12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc"   (string) giant address
           ,...
         ]
       }
     }
     ,...
  ],
Examples:
TX decode failed
createrawtransaction
"[{\"txid\" : \"mytxid\",\"vout\":0}]" "{\"myaddress\":0.01}"
sendrawtransaction "hexstring" ( allowhighfees )
Submits raw transaction (serialized, hex-encoded) to local node and network.
Also see createrawtransaction and signrawtransaction calls.
Arguments:
1. "hexstring"    (string, required) The hex string of the raw transaction)
2. allowhighfees    (boolean, optional, default=false) Allow high fees
3. swiftx           (boolean, optional, default=false) Use SwiftX to send this transaction
Result:
"hex"             (string) The transaction hash in hex
Examples:
Create a transaction
Sign the transaction, and get back the hex
signrawtransaction
"myhex"
Send the transaction (signed hex)
sendrawtransaction
"signedhex"
%i: %s
Missing inputs
transaction already in block chain
reqSigs
decodescript
decodescript "hex"
Decode a hex-encoded script.
Arguments:
1. "hex"     (string) the hex encoded script
Result:
  "asm":"asm",   (string) Script public key
  "hex":"hex",   (string) hex encoded public key
  "type":"type", (string) The output type
  "reqSigs": n,    (numeric) The required signatures
  "addresses": [   (json array of string)
     "address"     (string) giant address
     ,...
  ],
  "p2sh","address" (string) script address
Examples:
p2sh
createrawzerocoinstake mint_input 
Creates raw zGIC coinstakes (without MN output).
Arguments:
1. mint_input      (hex string, required) serial hash of the mint used as input
Result:
   "hex": "xxx",           (hex string) raw coinstake transaction
   "private-key": "xxx"    (hex string) private key of the input mint [needed to
                                            sign a block with this stake]}
Examples
createrawzerocoinstake
0d8c16eee7737e3cc1e4e70dc006634182b175e039700931283b202715a0818f
rpc/rawtransaction.cpp
pwalletMain != NULL
zGIC is currently disabled due to maintenance.
Invalid parameter, expected hex serial hash
Failed to fetch mint associated with serial hash 
failed to create new zgic output
failed to create zc-spend stake input
private-key
"[{\"txid\":\"myid\",\"vout\":0}]" "{\"address\":0.01}"
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...} ( locktime )
Create a transaction spending the given inputs and sending to the given addresses.
Returns hex-encoded raw transaction.
Note that the transaction's inputs are not signed, and
it is not stored in the wallet or transmitted to the network.
Arguments:
1. "transactions"        (string, required) A json array of json objects
     [
       {
         "txid":"id",  (string, required) The transaction id
         "vout":n,       (numeric, required) The output number
         "sequence":n    (numeric, optional) The sequence number
       }
       ,...
     ]
2. "addresses"           (string, required) a json object with addresses as keys and amounts as values
    {
      "address": x.xxx   (numeric, required) The key is the giant address, the value is the btc amount
      ,...
    }
3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs
Result:
"transaction"            (string) hex string of the transaction
Examples
"[{\"txid\":\"myid\",\"vout\":0}]", "{\"address\":0.01}"
Invalid parameter, arguments 1 and 2 must be non-null
Invalid parameter, locktime out of range
Invalid parameter, missing vout key
Invalid parameter, vout must be positive
Invalid parameter, sequence number is out of range
Invalid GIANT address: 
Invalid parameter, duplicated address: 
listunspent ( minconf maxconf  ["address",...] )
Returns array of unspent transaction outputs
with between minconf and maxconf (inclusive) confirmations.
Optionally filter to only include txouts paid to specified addresses.
Results are an array of Objects, each of which has:
{txid, vout, scriptPubKey, amount, confirmations}
Arguments:
1. minconf          (numeric, optional, default=1) The minimum confirmations to filter
2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter
3. "addresses"    (string) A json array of giant addresses to filter
    [
      "address"   (string) giant address
      ,...
    ]
4. watchonlyconfig  (numberic, optional, default=1) 1 = list regular unspent transactions, 2 = list only watchonly transactions,  3 = list all unspent transactions (including watchonly)
Result
[                   (array of json object)
    "txid" : "txid",        (string) the transaction id 
    "vout" : n,               (numeric) the vout value
    "address" : "address",  (string) the giant address
    "account" : "account",  (string) The associated account, or "" for the default account
    "scriptPubKey" : "key", (string) the script key
    "amount" : x.xxx,         (numeric) the transaction amount in btc
    "confirmations" : n       (numeric) The number of confirmations
  ,...
Examples
6 9999999 "[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]"
6, 9999999 "[\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\",\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\"]"
account
redeemScript
spendable
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
Sign inputs for raw transaction (serialized, hex-encoded).
The second optional argument (may be null) is an array of previous transaction outputs that
this transaction depends on but may not yet be in the block chain.
The third optional argument (may be null) is an array of base58-encoded private
keys that, if given, will be the only keys used to sign the transaction.
Arguments:
1. "hexstring"     (string, required) The transaction hex string
2. "prevtxs"       (string, optional) An json array of previous dependent transaction outputs
     [               (json array of json objects, or 'null' if none provided)
       {
         "txid":"id",             (string, required) The transaction id
         "vout":n,                  (numeric, required) The output number
         "scriptPubKey": "hex",   (string, required) script key
         "redeemScript": "hex"    (string, required for P2SH) redeem script
       }
       ,...
    ]
3. "privatekeys"     (string, optional) A json array of base58-encoded private keys for signing
    [                  (json array of strings, or 'null' if none provided)
      "privatekey"   (string) private key in base58-encoding
      ,...
    ]
4. "sighashtype"     (string, optional, default=ALL) The signature hash type. Must be one of
       "ALL"
       "NONE"
       "SINGLE"
       "ALL|ANYONECANPAY"
       "NONE|ANYONECANPAY"
       "SINGLE|ANYONECANPAY"
Result:
  "hex" : "value",           (string) The hex-encoded raw transaction with signature(s)
  "complete" : true|false,   (boolean) If the transaction has a complete set of signatures
  "errors" : [                 (json array of objects) Script verification errors (if there are any)
    {
      "txid" : "hash",           (string) The hash of the referenced, previous transaction
      "vout" : n,                (numeric) The index of the output to spent and used as input
      "scriptSig" : "hex",       (string) The hex-encoded signature script
      "sequence" : n,            (numeric) Script sequence number
      "error" : "text"           (string) Verification or signing error related to the input
    }
    ,...
Examples:
argument 1
Missing transaction
Invalid private key
Private key outside allowed range
expected object with {"txid'","vout","scriptPubKey"}
vout must be positive
Previous output scriptPubKey mismatch:
ALL|ANYONECANPAY
NONE
NONE|ANYONECANPAY
SINGLE
SINGLE|ANYONECANPAY
Input not found
Input not found or already spent
complete
errors
Invalid sighash param
N5boost8signals26detail19std_functional_baseIJRK11CRPCCommandEEE
N5boost8signals26signalIFvRK11CRPCCommandENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvvENS_8functionIS9_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK11CRPCCommandENS_8functionISC_EEEENS0_5mutexEEE
N5boost6detail17sp_counted_impl_pI12RPCTimerBaseEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK11CRPCCommandENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK11CRPCCommandENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK11CRPCCommandENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvvENS_8functionISB_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK11CRPCCommandENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvvENS_8functionIS4_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK11CRPCCommandENS_8functionIS7_EEEEEE
N5boost3_bi6bind_tINS0_11unspecifiedENS_8functionIFvRK11CRPCCommandEEENS0_5list1INS_3argILi1EEEEEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::mutex; typename boost::detail::sp_member_access<T>::type = boost::signals2::mutex*]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::mutex::~mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
void SetRPCWarmupFinished()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CRPCCommand&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CRPCCommand&)>, boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>, boost::signals2::mutex>::invocation_state]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
boost::signals2::mutex::mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> > >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CRPCCommand&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CRPCCommand&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CRPCCommand&), boost::function<void(const CRPCCommand&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CRPCCommand&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CRPCCommand&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CRPCCommand&}]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
rpc/server.cpp
fRPCInWarmup
Invalid parameter, 
is not an int
is not a bool
> giant-cli 
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "
", "params": [
] }' -H 'content-type: text/plain;' http://127.0.0.1:51473/
Amount is not a number
Invalid amount
stop
Stop GIANT server.
GIANT server stopping
Interrupting RPC
 must be hexadecimal string (not '
Invalid Request object
Missing method
Method must be a string
getblocktemplate
ThreadRPCServer method=%s
params
Params must be an array
Expected type %s, got %s
Missing %s
Expected type %s for %s, got %s
%s%d.%08d
No timer handler registered for RPC
queue run of timer %s in %i seconds (using %s)
%s must be of length %d (not %d)
label
hidden
help: unknown command: %s
help ( "command" )
List all commands, or get help for a specified command.
Arguments:
1. "command"     (string, optional) The command to get help on
Result:
"text"     (string) The help text
Method not found
Starting RPC
Stopping RPC
RPC server started
control
getinfo
help
stop
getnetworkinfo
addnode
disconnectnode
getaddednodeinfo
getconnectioncount
getnettotals
getpeerinfo
setban
listbanned
clearbanned
blockchain
mining
getmininginfo
getnetworkhashps
prioritisetransaction
submitblock
reservebalance
generating
getgenerate
gethashespersec
setgenerate
generate
rawtransactions
util
createmultisig
validateaddress
verifymessage
estimatefee
estimatepriority
setmocktime
giant
listmasternodes
getmasternodecount
masternodeconnect
createmasternodebroadcast
decodemasternodebroadcast
relaymasternodebroadcast
masternodecurrent
masternodedebug
startmasternode
createmasternodekey
getmasternodeoutputs
listmasternodeconf
getmasternodestatus
getmasternodewinners
getmasternodescores
preparebudget
submitbudget
mnbudgetvote
getbudgetvotes
getnextsuperblock
getbudgetprojection
getbudgetinfo
mnbudgetrawvote
mnfinalbudget
checkbudgets
mnsync
getpoolinfo
addmultisigaddress
autocombinerewards
backupwallet
enableautomintaddress
createautomintaddress
dumpprivkey
dumpwallet
bip38encrypt
bip38decrypt
encryptwallet
getaccountaddress
getaccount
getaddressesbyaccount
getbalance
getnewaddress
getrawchangeaddress
getreceivedbyaccount
getreceivedbyaddress
getstakingstatus
getstakesplitthreshold
gettransaction
getunconfirmedbalance
getwalletinfo
importprivkey
importwallet
importaddress
keypoolrefill
listaccounts
listaddressgroupings
listlockunspent
listreceivedbyaccount
listreceivedbyaddress
listsinceblock
listtransactions
lockunspent
multisend
sendfrom
sendmany
sendtoaddress
sendtoaddressix
setaccount
setstakesplitthreshold
settxfee
signmessage
walletlock
walletpassphrasechange
walletpassphrase
getzerocoinbalance
listmintedzerocoins
listspentzerocoins
listzerocoinamounts
mintzerocoin
spendzerocoin
spendrawzerocoin
spendzerocoinmints
resetmintzerocoin
resetspentzerocoin
getarchivedzerocoin
importzerocoins
exportzerocoins
reconsiderzerocoins
getzgicseed
setzgicseed
generatemintlist
searchdzgic
dzgicstate
clearspendcache
34CachingTransactionSignatureChecker
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
boost::detail::interruption_checker::~interruption_checker()
void boost::shared_mutex::state_data::assert_locked() const
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::condition_variable::notify_all()
void boost::shared_mutex::state_data::assert_lock_shared() const
boost::condition_variable::condition_variable()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
-maxsigcachesize
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
Wrote spork %s to database
LevelDB read failure: %s
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::destroy_back_n(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type, const false_type&) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int; boost::false_type = boost::integral_constant<bool, false>]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
T CMedianFilter<T>::median() const [with T = long int]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
Added time data, samples %d, offset %+d (%+d minutes)
timedata.h
size > 0
Warning: Please check that your computer's date and time are correct! If your clock is wrong GIANT Core will not work properly.
%+d  
nTimeOffset = %+d  (%+d minutes)
N5boost8signals26detail19std_functional_baseIJR20TorControlConnectionRK15TorControlReplyEEE
N5boost8signals26signalIFvR20TorControlConnectionRK15TorControlReplyENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS7_EENSC_IFvRKNS0_10connectionES3_S6_EEENS0_5mutexEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvR20TorControlConnectionRK15TorControlReplyENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISA_EENSF_IFvRKNS2_10connectionES6_S9_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvR20TorControlConnectionRK15TorControlReplyENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISA_EENSF_IFvRKNS2_10connectionES6_S9_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvR20TorControlConnectionRK15TorControlReplyENS_8functionISK_EEEENS2_5mutexEEEEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf1Iv13TorControllerR20TorControlConnectionEENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf2Iv13TorControllerR20TorControlConnectionRK15TorControlReplyEENS0_5list3INS0_5valueIPS4_EENS_3argILi1EEENSF_ILi2EEEEEEE
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex>&]
boost::signals2::mutex::~mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
boost::condition_variable::~condition_variable()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
boost::condition_variable::condition_variable()
void StartTorControl(boost::thread_group&)
void TorController::auth_cb(TorControlConnection&, const TorControlReply&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> > >&]
boost::signals2::mutex::mutex()
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> > >]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(TorControlConnection&, const TorControlReply&), boost::function<void(TorControlConnection&, const TorControlReply&)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(TorControlConnection&, const TorControlReply&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>; Mutex = boost::signals2::mutex; R = void; Args = {TorControlConnection&, const TorControlReply&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
static void TorControlConnection::readcb(bufferevent*, void*)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(TorControlConnection&, const TorControlReply&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(TorControlConnection&, const TorControlReply&)>, boost::function<void(const boost::signals2::connection&, TorControlConnection&, const TorControlReply&)>, boost::signals2::mutex>&]
tor: Successfully connected!
tor: Error connecting to Tor control socket
tor: End of stream
tor: Thread interrupt
PROTOCOLINFO 1
tor: Error sending initial protocolinfo command
onion_private_key
torcontrol.cpp
!gBase
tor: Unable to create event_base
torcontrol
tor: Error parsing socket address %s
tor: Error connecting to address %s
tor: Not connected to Tor control port %s, trying to reconnect
tor: Re-initiating connection to Tor control port %s failed
tor: SAFECOOKIE authentication challenge successful
AUTHCHALLENGE
tor: Error parsing AUTHCHALLENGE parameters: %s
SERVERHASH
SERVERNONCE
tor: AUTHCHALLENGE ServerHash %s ServerNonce %s
tor: ServerNonce is not 32 bytes, as required by spec
tor: ServerHash %s does not match expected ServerHash %s
AUTHENTICATE 
tor: Invalid reply to AUTHCHALLENGE
tor: SAFECOOKIE authentication challenge failed
tor: ADD_ONION successful
ServiceID
tor: Error parsing ADD_ONION parameters:
    %s
.onion
tor: Got service ID %s, advertising service %s
tor: Cached service private key to %s
tor: Error writing service private key to %s
tor: Add onion failed with unrecognized command (You probably need to upgrade Tor)
tor: Add onion failed; error code %d
tor: Authentication successful
LookupNumeric("127.0.0.1", resolved, 9050)
NEW:RSA1024
ADD_ONION %s Port=%i,127.0.0.1:%i
tor: Authentication failed
tor: Failed to create event for reconnection: out of memory?
tor: Initiating connection to Tor control port %s failed
tor: Reading cached private key from %s
-torcontrol
tor: Received unexpected sync reply %i
tor: Disconnecting because MAX_LINE_LENGTH exceeded
-torpassword
AUTH
METHODS
COOKIEFILE
VERSION
tor: Connected to Tor version %s
tor: Supported authentication method: %s
HASHEDPASSWORD
tor: Using HASHEDPASSWORD authentication
AUTHENTICATE "
tor: Password provided with -torpassword, but HASHEDPASSWORD authentication is not available
tor: Using NULL authentication
AUTHENTICATE
SAFECOOKIE
tor: Using SAFECOOKIE authentication, reading cookie authentication from %s
AUTHCHALLENGE SAFECOOKIE 
tor: Authentication cookie %s is not exactly %i bytes, as is required by the spec
tor: Authentication cookie %s could not be opened (check permissions)
tor: The only supported authentication mechanism left is password, but no password provided with -torpassword
tor: No supported authentication method
tor: Requesting protocol info failed
127.0.0.1:9051
Tor safe cookie authentication server-to-controller hash
Tor safe cookie authentication controller-to-server hash
12CCoinsViewDB
T* boost::scoped_ptr<T>::operator->() const [with T = leveldb::Iterator]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
WriteAccumulatorValue
EraseAccumulatorValue
WipeCoins
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
GetStats
LoadBlockIndexGuts
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
unsigned int CCoins::GetSerializeSize(int, int) const
void CCoins::Serialize(Stream&, int, int) const [with Stream = CDataStream]
index
Writing %u coin mints to db.
Writing %u coin spends to db.
%s : checksum:%d val:%s
%s : checksum:%d
spends
mints
%s: did not recognize type %s
%s: error failed to delete %s
CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)
LoadBlockIndex() : CheckProofOfWork failed: %s
coins.h
fFirst || fSecond || nMaskCode
coindb
Committing %u changed transactions (out of %u) to coin database...
17CCoinsViewMemPool
N5boost16exception_detail19error_info_injectorISt12length_errorEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt12length_errorEEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache*, unsigned int)
void CMinerPolicyEstimator::Read(CAutoFile&, const CFeeRate&)
void CMinerPolicyEstimator::seenTxConfirm(const CFeeRate&, const CFeeRate&, double, int)
void CTxMemPool::check(const CCoinsViewCache*) const
Corrupt fee value in estimates file.
Corrupt priority value in estimates file.
Read %d fee samples and %d priority samples
Corrupt estimates file. Must have between 1 and 10k entries.
history.size() > 0
nBlocksTruncated >= 0
unassigned
Seen TX confirm: %s : %s fee/%g priority, took %d blocks
estimates: for confirming within %d blocks based on %d/%d samples, fee=%s, prio=%g
circular_buffer
CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)
txmempool.cpp
CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file
CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)
PrioritiseTransaction: %s priority += %f, fee += %d
Checking mempool with %u transactions and %u inputs
tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull()
coins && coins->IsAvailable(txin.prevout.n)
it3->second.ptx == &tx
it3->second.n == i
CheckInputs(tx, state, mempoolDuplicate, false, 0, false, NULL)
stepsSinceLastRemove < waitingOnDependants.size()
CheckInputs(entry->GetTx(), state, mempoolDuplicate, false, 0, false, NULL)
it2 != mapTx.end()
&tx == it->second.ptx
tx.vin.size() > it->second.n
it->first == it->second.ptx->vin[it->second.n].prevout
totalTxSize == checkTotal
it3 != mapNextTx.end()
N5boost8signals26detail19std_functional_baseIJRK12CTransactionEEE
N5boost8signals26detail19std_functional_baseIJRK6CBlockRK16CValidationStateEEE
N5boost8signals26detail19std_functional_baseIJRK13CBlockLocatorEEE
N5boost8signals26detail19std_functional_baseIJPK11CBlockIndexEEE
N5boost8signals26detail19std_functional_baseIJRK12CTransactionPK6CBlockEEE
N5boost8signals26signalIFvPK11CBlockIndexENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26signalIFvRK12CTransactionPK6CBlockENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS0_10connectionES4_S7_EEENS0_5mutexEEE
N5boost8signals26signalIFvRK12CTransactionENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26signalIFbRK7uint256ENS0_19optional_last_valueIbEEiSt4lessIiENS_8functionIS5_EENSA_IFbRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26signalIFvRK13CBlockLocatorENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS5_EENSA_IFvRKNS0_10connectionES4_EEENS0_5mutexEEE
N5boost8signals26signalIFvRK6CBlockRK16CValidationStateENS0_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS0_10connectionES4_S7_EEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK6CBlockRK16CValidationStateENS_8functionISF_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK13CBlockLocatorENS_8functionISC_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFbRK7uint256ENS_8functionISC_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK12CTransactionENS_8functionISC_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvRK12CTransactionPK6CBlockENS_8functionISF_EEEENS0_5mutexEEE
N5boost8signals26detail15connection_bodyISt4pairINS1_15slot_meta_groupENS_8optionalIiEEENS0_4slotIFvPK11CBlockIndexENS_8functionISC_EEEENS0_5mutexEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvPK11CBlockIndexENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK12CTransactionPK6CBlockENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES7_SA_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK12CTransactionENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFbRK7uint256ENS2_19optional_last_valueIbEEiSt4lessIiENS_8functionIS8_EENSD_IFbRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK13CBlockLocatorENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK6CBlockRK16CValidationStateENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES7_SA_EEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK12CTransactionPK6CBlockENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionISB_EENSG_IFvRKNS2_10connectionES7_SA_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail11signal_implIFvRK12CTransactionENS2_19optional_last_valueIvEEiSt4lessIiENS_8functionIS8_EENSD_IFvRKNS2_10connectionES7_EEENS2_5mutexEE16invocation_stateEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK12CTransactionPK6CBlockENS_8functionISL_EEEENS2_5mutexEEEEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiSt4lessIiENS_10shared_ptrINS3_15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK12CTransactionENS_8functionISI_EEEENS2_5mutexEEEEEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionERK6CBlockRK16CValidationStateEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionEEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionERK13CBlockLocatorEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFbRKNS0_10connectionERK7uint256EEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionERK12CTransactionEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionERK12CTransactionPK6CBlockEEEEE
N5boost8signals26detail28bound_extended_slot_functionINS_8functionIFvRKNS0_10connectionEPK11CBlockIndexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvPK11CBlockIndexENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK12CTransactionPK6CBlockENS_8functionISH_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK12CTransactionENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFbRK7uint256ENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK13CBlockLocatorENS_8functionISE_EEEENS2_5mutexEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals26detail15connection_bodyISt4pairINS3_15slot_meta_groupENS_8optionalIiEEENS2_4slotIFvRK6CBlockRK16CValidationStateENS_8functionISH_EEEENS2_5mutexEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf1Iv20CValidationInterfaceRK7uint256EENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf2Iv20CValidationInterfaceRK6CBlockRK16CValidationStateEENS0_5list3INS0_5valueIPS4_EENS_3argILi1EEENSG_ILi2EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf0Iv20CValidationInterfaceEENS0_5list1INS0_5valueIPS4_EEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf1Iv20CValidationInterfaceRK13CBlockLocatorEENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost3_bi6bind_tIbNS_4_mfi3mf1Ib20CValidationInterfaceRK7uint256EENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf1Iv20CValidationInterfaceRK12CTransactionEENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf2Iv20CValidationInterfaceRK12CTransactionPK6CBlockEENS0_5list3INS0_5valueIPS4_EENS_3argILi1EEENSG_ILi2EEEEEEE
N5boost3_bi6bind_tIvNS_4_mfi3mf1Iv20CValidationInterfacePK11CBlockIndexEENS0_5list2INS0_5valueIPS4_EENS_3argILi1EEEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvPK11CBlockIndexENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK12CTransactionPK6CBlockENS_8functionISA_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK12CTransactionENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFbRK7uint256ENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK13CBlockLocatorENS_8functionIS7_EEEEEE
N5boost6detail17sp_counted_impl_pINS_8signals24slotIFvRK6CBlockRK16CValidationStateENS_8functionISA_EEEEEE
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::destroy_back_n(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type, const false_type&) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int; boost::false_type = boost::integral_constant<bool, false>]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::mutex; typename boost::detail::sp_member_access<T>::type = boost::signals2::mutex*]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::mutex::~mutex()
boost::signals2::mutex::mutex()
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >&]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CTransaction&, const CBlock*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&, const CBlock*)>, boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>, boost::signals2::mutex>::invocation_state]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&, const CBlock*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&, const CBlock*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&, const CBlock*), boost::function<void(const CTransaction&, const CBlock*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&, const CBlock*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&, const CBlock*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&, const CBlock*}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockIndex*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockIndex*), boost::function<void(const CBlockIndex*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlockIndex*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockIndex*)>, boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockIndex*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockIndex*)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockIndex*}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const uint256&)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = bool; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const uint256&), boost::function<bool(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const uint256&), boost::signals2::optional_last_value<bool>, int, std::less<int>, boost::function<bool(const uint256&)>, boost::function<bool(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const uint256&)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = bool; Args = {const uint256&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockLocator&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockLocator&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlockLocator&), boost::function<void(const CBlockLocator&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlockLocator&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlockLocator&)>, boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlockLocator&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlockLocator&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlockLocator&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlock&, const CValidationState&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlock&, const CValidationState&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CBlock&, const CValidationState&), boost::function<void(const CBlock&, const CValidationState&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CBlock&, const CValidationState&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CBlock&, const CValidationState&)>, boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CBlock&, const CValidationState&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CBlock&, const CValidationState&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CBlock&, const CValidationState&}]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
FindMints
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
TxOutToPublicCoin
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>&]
%s ZCPRINT denomination %d pubcoin %s
TxOutToPublicCoin : txout.nValue is not correct
%s : cannot find tx %s
%s : cannot find block %s
%s : cannot find spend tx %s
%s : cannot find block %s. Erasing coinspend from zerocoinDB.
%s: found mismatched denom pubcoinhash = %s
%s: found updates for pubcoinhash = %s
Failed to wipe zerocoinDB
Reindexing zerocoin database...
Reindexing zerocoin : block %d...
Reindexing zerocoin failed
Error writing zerocoinDB to disk
void CAddrMan::SwapRandom(unsigned int, unsigned int)
void CAddrMan::Delete(int)
void CAddrMan::ClearNew(int, int)
void CAddrMan::GetAddr_(std::vector<CAddress>&)
void CAddrMan::MakeTried(CAddrInfo&, int)
CAddrInfo CAddrMan::Select_()
?addrman.cpp
nRndPos1 < vRandom.size() && nRndPos2 < vRandom.size()
mapInfo.count(nId1) == 1
mapInfo.count(nId2) == 1
mapInfo.count(nId) != 0
!info.fInTried
info.nRefCount == 0
infoDelete.nRefCount > 0
mapInfo.count(vRandom[n]) == 1
mapInfo.count(nIdEvict) == 1
vvNew[nUBucket][nUBucketPos] == -1
vvTried[nKBucket][nKBucketPos] == -1
mapInfo.count(nId) == 1
Moving %s to tried
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
boost::condition_variable::~condition_variable()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::condition_variable::condition_variable()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&, ChangeType), boost::function<void(const uint256&, ChangeType)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&, ChangeType}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, const uint256&, ChangeType)>, boost::signals2::mutex>&]
CAlert(
    nVersion     = %d
    nRelayUntil  = %d
    nExpiration  = %d
    nID          = %d
    nCancel      = %d
    setCancel    = %s
    nMinVer      = %d
    nMaxVer      = %d
    setSubVer    = %s
    nPriority    = %d
    strComment   = "%s"
    strStatusBar = "%s"
CAlert::CheckSignature() : verify signature failed
-alertnotify
URGENT: Alert key compromised, upgrade required
cancelling alert %d
expiring alert %d
alert already cancelled by %d
accepted alert %d, AppliesToMe()=%d
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
SignBlockWithKey
CheckBlockSignature
SignBlock
allocators.h
%s: failed to sign block hash with key
%s: vchBlockSig is empty!
%s: invalid pubkey %s
%s: failed to find key for PoS
%s: failed to get key from keystore
%s: failed to find key for PoW
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
N5boost13function_baseE
N5boost9function0IvEE
12RPCTimerBase
17RPCTimerInterface
12HTTPRPCTimer
21HTTPRPCTimerInterface
N5boost8functionIFvvEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::destroy_back_n(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type, const false_type&) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int; boost::false_type = boost::integral_constant<bool, false>]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
bool StartHTTPRPC()
HTTP
code
Interrupting HTTP RPC server
Stopping HTTP RPC server
JSONRPC server handles only POST requests
authorization
Basic 
ThreadRPCServer incorrect password attempt from %s
Top-level object parse error
Starting HTTP RPC server
-rpcpassword
No rpcpassword set - using random cookie authentication
Error: A fatal internal error occurred, see debug.log for details
-rpcuser
httprpc.cpp
EventBase()
St22_Weak_result_type_implIPFvP14evhttp_requestiPKcP8evbufferEE
St24_Weak_result_type_memfunIPFvP14evhttp_requestiPKcP8evbufferELb0EE
St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
St17_Weak_result_typeIPFvP14evhttp_requestiPKcP8evbufferEE
St19_Sp_make_shared_tag
NSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIbEENS_12_Result_base8_DeleterEEZNS_11_Task_stateIPFbP10event_baseP6evhttpESaIiESC_E6_M_runEOS9_OSB_EUlvE_bEE
NSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIbEENS_12_Result_base8_DeleterEEZNS_11_Task_stateIPFbP10event_baseP6evhttpESaIiESC_E14_M_run_delayedEOS9_OSB_St8weak_ptrINS_13_State_baseV2EEEUlvE_bEE
11HTTPClosure
St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
NSt13__future_base13_State_baseV2E
12HTTPWorkItem
NSt13__future_base16_Task_state_baseIFbP10event_baseP6evhttpEEE
NSt13__future_base7_ResultIbEE
NSt6thread11_State_implINS_8_InvokerISt5tupleIJSt13packaged_taskIFbP10event_baseP6evhttpEES5_S7_EEEEEE
NSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP9WorkQueueI11HTTPClosureEES6_EEEEEE
St5_BindIFPFvP14evhttp_requestiPKcP8evbufferES1_iS3_S5_EE
NSt13__future_base11_Task_stateIPFbP10event_baseP6evhttpESaIiES5_EE
St23_Sp_counted_ptr_inplaceINSt13__future_base11_Task_stateIPFbP10event_baseP6evhttpESaIiES6_EES8_LN9__gnu_cxx12_Lock_policyE2EE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex>&]
void boost::signals2::mutex::unlock()
HTTPEvent::HTTPEvent(event_base*, bool, const std::function<void()>&)
void HTTPRequest::WriteHeader(const string&, const string&)
void HTTPRequest::WriteReply(int, const string&)
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
std::pair<bool, std::__cxx11::basic_string<char> > HTTPRequest::GetHeader(const string&)
~HTTPRequest
void http_request_cb(evhttp_request*, void*)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::last_value<bool>; typename boost::detail::sp_dereference<T>::type = boost::signals2::last_value<bool>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = bool; boost::optional<T>::reference_type = bool&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int), boost::signals2::last_value<bool>, int, std::less<int>, boost::function<bool(const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::function<bool(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>, boost::signals2::mutex>&]
std::future_error: 
bitcoin-httpworker
httpserver.cpp
!replySent && req
bitcoin-http
Entering http event loop
Exited http event loop
Interrupting HTTP server
Rejecting request while shutting down
Stopping HTTP server
Waiting for HTTP worker threads to exit
Waiting for HTTP event thread to exit
HTTP event loop did not exit within allotted time, sending loopbreak
Stopped HTTP server
libevent: %s
libevent
Starting HTTP server
-rpcthreads
HTTP: starting %d worker threads
%s: Unhandled request
Unhandled request
POST
HEAD
Received a %s request for %s from %s
workQueue
Work queue depth exceeded
Unregistering HTTP handler for %s (exactmatch %d)
Registering HTTP handler for %s (exactmatch %d)
127.0.0.0/8
-rpcallowip
Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).
Allowing HTTP connections from: %s
-rpcssl
SSL mode for RPC (-rpcssl) is no longer supported.
Couldn't create an event_base: exiting
couldn't create evhttp. Exiting.
-rpcservertimeout
-rpcport
-rpcbind
WARNING: option -rpcbind was ignored because -rpcallowip was not specified, refusing to allow everyone to connect
Binding RPC on address %s port %i
Binding RPC on address %s port %i failed.
Unable to bind any endpoint for RPC server
Initialized HTTP server
-rpcworkqueue
HTTP: creating work queue of depth %d
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
const Type& boost::token_iterator<TokenizerFunc, Iterator, Type>::dereference() const [with TokenizerFunc = boost::char_separator<char>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Type = std::__cxx11::basic_string<char>]
void boost::token_iterator<TokenizerFunc, Iterator, Type>::increment() [with TokenizerFunc = boost::char_separator<char>; Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; Type = std::__cxx11::basic_string<char>]
T boost::detail::variant::forced_return() [with T = void]
ACTIVE
ENABLED
EXPIRED
VIN_SPENT
REMOVE
POS_ERROR
"192.168.0.6:40444"
masternodeconnect "address"
Attempts to connect to specified masternode address
Arguments:
1. "address"     (string, required) IP or net address to connect to
Examples:
error connecting
masternodedebug
Print masternode status
Result:
"status"     (string) Masternode status message
Examples:
Missing masternode input, please look at the documentation for instructions on masternode creation
createmasternodekey
Create a new masternode private key
Result:
"key"    (string) Masternode private key
Examples:
listmasternodeconf ( "filter" )
Print masternode.conf in JSON format
Arguments:
1. "filter"    (string, optional) Filter search text. Partial match on alias, address, txHash, or status.
Result:
    "alias": "xxxx",        (string) masternode alias
    "address": "xxxx",      (string) masternode IP address
    "privateKey": "xxxx",   (string) masternode private key
    "txHash": "xxxx",       (string) transaction hash
    "outputIndex": n,       (numeric) transaction output index
    "status": "xxxx"        (string) masternode status
  ,...
Examples:
MISSING
alias
privateKey
txHash
outputIndex
getpoolinfo
Returns anonymous pool-related information
Result:
  "current": "addr",    (string) GIANT address of current masternode
  "state": xxxx,        (string) unknown
  "entries": xxxx,      (numeric) Number of entries
  "accepted": xxxx,     (numeric) Number of entries accepted
Examples:
current_masternode
entries
entries_accepted
getmasternodeoutputs
Print all masternode transaction outputs
Result:
    "txhash": "xxxx",    (string) output transaction hash
    "outputidx": n       (numeric) output index number
  ,...
Examples:
txhash
outputidx
getmasternodecount
Get masternode count values
Result:
  "all": n, (numeric) Total masternodes  "total": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Total count
     }
     ,...
   ],
  "enabled": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Enabled masternodes
     }
     ,...
   ],
  "obfcompat": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Obfuscation Compatible
     }
     ,...
   ],
  "stable": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Stable count
     }
     ,...
   ],
  "inqueue": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Masternodes in queue
     }
     ,...
   ],
  "ipv4": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Masternodes ipv4
     }
     ,...
   ],
  "ipv6": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Masternodes ipv6
     }
     ,...
   ],
  "onion": [
     {
       "level": n, (numeric) Masternodes level
       "count": n  (numeric) Masternodes onion
     }
     ,...
   ]
Examples:
level
total
obfcompat
stable
inqueue
ipv4
ipv6
onion
getmasternodescores ( blocks )
Print list of winning masternode by score
Arguments:
1. blocks      (numeric, optional) Show the last n blocks (default 10)
Result:
  xxxx: "xxxx"   (numeric : string) Block height : Masternode hash
  ,...
Examples:
stoi
Exception on param 2
successful
start
local
start-alias
start-all
start-many
many
start-missing
missing
start-disabled
"alias" "0" "my_mn"
startmasternode "local|all|many|missing|disabled|alias" lockwallet ( "alias" )
Attempts to start one or more masternode(s)
Arguments:
1. set         (string, required) Specify which set of masternode(s) to start.
2. lockwallet  (boolean, required) Lock wallet after completion.
3. alias       (string) Masternode alias. Required if using 'alias' as the set.
Result: (for 'local' set):
"status"     (string) Masternode status message
Result: (for other sets):
  "overall": "xxxx",     (string) Overall status message
  "detail": [
    {
      "node": "xxxx",    (string) Node name or alias
      "result": "xxxx",  (string) 'success' or 'failed'
      "error": "xxxx"    (string) Error message, if failed
    }
    ,...
Examples:
you must set masternode=1 in the configuration
You can't use this command until masternode list is synced
Successfully started %d masternodes, failed to start %d, total %d
overall
detail
errorMessage
could not find alias in config. Verify with list-conf.
getmasternodewinners ( blocks "filter" )
Print the masternode winners for the last n blocks
Arguments:
1. blocks      (numeric, optional) Number of previous blocks to show (default: 10)
2. filter      (string, optional) Search filter matching MN address
Result (single winner):
    "nHeight": n,            (numeric) block height
    "winner": {
      "address": "xxxx",   (string) GIANT MN Address
      "level": n,            (numeric) Masternode level
      "nVotes": n,           (numeric) Number of votes for winner
    }
  ,...
Result (multiple winners):
    "nHeight": n,            (numeric) block height
    "winner": [
      {
        "address": "xxxx", (string) GIANT MN Address
        "level": n,          (numeric) Masternode level
        "nVotes": n,         (numeric) Number of votes for winner
      }
      ,...
    ]
  ,...
Examples:
nHeight
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/share/../include/boost/token_iterator.hpp
valid_
nVotes
winner
Unknown
createmasternodebroadcast "command" ( "alias")
Creates a masternode broadcast message for one or all masternodes configured in masternode.conf
Arguments:
1. "command"      (string, required) "alias" for single masternode, "all" for all masternodes
2. "alias"        (string, required if command is "alias") Alias of the masternode
Result (all):
  "overall": "xxx",        (string) Overall status message indicating number of successes.
  "detail": [                (array) JSON array of broadcast objects.
    {
      "alias": "xxx",      (string) Alias of the masternode.
      "success": true|false, (boolean) Success status.
      "hex": "xxx"         (string, if success=true) Hex encoded broadcast message.
      "error_message": "xxx"   (string, if success=false) Error message, if any.
    }
    ,...
Result (alias):
  "alias": "xxx",      (string) Alias of the masternode.
  "success": true|false, (boolean) Success status.
  "hex": "xxx"         (string, if success=true) Hex encoded broadcast message.
  "error_message": "xxx"   (string, if success=false) Error message, if any.
Examples:
alias mymn1
Wait for reindex and/or import to finish
error_message
Could not find alias in config. Verify with list-conf.
Successfully created broadcast messages for %d masternodes, failed to create %d, total %d
listmasternodes ( "filter" )
Get a ranked list of masternodes
Arguments:
1. "filter"    (string, optional) Filter search text. Partial match by txhash, status, or addr.
Result:
    "level": n,          (numeric) Masternode Level
    "rank": n,           (numeric) Masternode Rank (or 0 if not enabled)
    "txhash": "hash",    (string) Collateral transaction hash
    "outidx": n,         (numeric) Collateral transaction output index
    "pubkey": "key",   (string) Masternode public key used for message broadcasting
    "status": s,         (string) Status (ENABLED/EXPIRED/REMOVE/etc)
    "addr": "addr",      (string) Masternode GIANT address
    "version": v,        (numeric) Masternode protocol version
    "lastseen": ttt,     (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last seen
    "activetime": ttt,   (numeric) The time in seconds since epoch (Jan 1 1970 GMT) masternode has been active
    "lastpaid": ttt,     (numeric) The time in seconds since epoch (Jan 1 1970 GMT) masternode was last paid
  ,...
Examples:
rank
outidx
pubkey
lastseen
activetime
lastpaid
masternodecurrent
Get current masternode winner
Result:
  "level": xxxx,         (numeric) MN level
  "protocol": xxxx,      (numeric) Protocol version
  "txhash": "xxxx",    (string) Collateral transaction hash
  "pubkey": "xxxx",    (string) MN Public key
  "lastseen": xxx,       (numeric) Time since epoch of last seen
  "activeseconds": xxx,  (numeric) Seconds MN has been active
Examples:
protocol
activeseconds
getmasternodestatus
Print masternode status
Result:
  "txhash": "xxxx",      (string) Collateral transaction hash
  "outputidx": n,        (numeric) Collateral transaction output index number
  "netaddr": "xxxx",     (string) Masternode network address
  "addr": "xxxx",        (string) GIANT address for masternode payments
  "status": "xxxx",      (string) Masternode status
  "message": "xxxx"      (string) Masternode status message
Examples:
This is not a masternode
netaddr
message
Masternode not found in the list of available masternodes. Current status: 
hexstring
decodemasternodebroadcast "hexstring"
Command to decode masternode broadcast messages
Argument:
1. "hexstring"        (string) The hex encoded masternode broadcast message
Result:
  "vin": "xxxx"                (string) The unspent output which is holding the masternode collateral
  "addr": "xxxx"               (string) IP address of the masternode
  "pubkeycollateral": "xxxx"   (string) Collateral address's public key
  "pubkeymasternode": "xxxx"   (string) Masternode's public key
  "vchsig": "xxxx"             (string) Base64-encoded signature of this message (verifiable via pubkeycollateral)
  "sigtime": "nnn"             (numeric) Signature timestamp
  "protocolversion": "nnn"     (numeric) Masternode's protocol version
  "nlastdsq": "nnn"            (numeric) The last time the masternode sent a DSQ message (for mixing) (DEPRECATED)
  "lastping" : {                 (object) JSON object with information about the masternode's last ping
      "vin": "xxxx"            (string) The unspent output of the masternode which is signing the message
      "blockhash": "xxxx"      (string) Current chaintip blockhash minus 12
      "sigtime": "nnn"         (numeric) Signature time for this ping
      "vchsig": "xxxx"         (string) Base64-encoded signature of this ping (verifiable via pubkeymasternode)
Examples:
Masternode broadcast message decode failed
Masternode broadcast signature verification failed
pubkeycollateral
pubkeymasternode
vchsig
sigtime
protocolversion
nlastdsq
lastping
relaymasternodebroadcast "hexstring"
Command to relay masternode broadcast messages
Arguments:
1. "hexstring"        (string) The hex encoded masternode broadcast message
Examples:
Masternode broadcast sent (service %s, vin %s)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
getnextsuperblock
Print the next super block height
Result:
n      (numeric) Block height of the next super block
Examples:
checkbudgets
Initiates a buddget check cycle manually
Examples:
mn tx hash
mnbudgetrawvote "masternode-tx-hash" masternode-tx-index "proposal-hash" yes|no time "vote-sig"
Compile and relay a proposal vote with provided external signature instead of signing vote internally
Arguments:
1. "masternode-tx-hash"  (string, required) Transaction hash for the masternode
2. masternode-tx-index   (numeric, required) Output index for the masternode
3. "proposal-hash"       (string, required) Proposal vote hash
4. yes|no                (boolean, required) Vote to cast
5. time                  (numeric, required) Time since epoch in seconds
6. "vote-sig"            (string, required) External signature
Result:
"status"     (string) Vote status or error message
Examples:
Proposal hash
You can only vote 'yes' or 'no'
Malformed base64 encoding
Failure to find masternode in list : 
Failure to verify signature.
Voted successfully
Error voting : 
"test-proposal"
getbudgetvotes "proposal-name"
Print vote information for a budget proposal
Arguments:
1. "proposal-name":      (string, required) Name of the proposal
Result:
    "mnId": "xxxx",        (string) Hash of the masternode's collateral transaction
    "nHash": "xxxx",       (string) Hash of the vote
    "Vote": "YES|NO",      (string) Vote cast ('YES' or 'NO')
    "nTime": xxxx,         (numeric) Time in seconds since epoch the vote was cast
    "fValid": true|false,  (boolean) 'true' if the vote is valid, 'false' otherwise
  ,...
Examples:
Unknown proposal name
mnId
nHash
ABSTAIN
Vote
nTime
fValid
vote-many
vote-alias
"local" "ed2f83cedee59a91406f5f47ec4d60bf5a7f9ee6293913c82976bd2d3a658041" "yes"
mnbudgetvote "local|many|alias" "votehash" "yes|no" ( "alias" )
Vote on a budget proposal
Arguments:
1. "mode"      (string, required) The voting mode. 'local' for voting directly from a masternode, 'many' for voting with a MN controller and casting the same vote for each MN, 'alias' for voting with a MN controller and casting a vote for a single MN
2. "votehash"  (string, required) The vote hash for the proposal
3. "votecast"  (string, required) Your vote. 'yes' to vote for the proposal, 'no' to vote against
4. "alias"     (string, required for 'alias' mode) The MN alias to cast a vote for.
Result:
  "overall": "xxxx",      (string) The overall status message for the vote cast
  "detail": [
    {
      "node": "xxxx",      (string) 'local' or the MN alias
      "result": "xxxx",    (string) Either 'Success' or 'Failed'
      "error": "xxxx",     (string) Error message, if vote failed
    }
    ,...
Examples:
node
Masternode signing error, could not set key correctly: 
Failure to sign.
Voted successfully %d time(s) and failed %d time(s).
Can't find masternode by pubkey
mnfinalbudget "command"... ( "passphrase" )
Vote or show current budgets
Available commands:
  vote-many   - Vote on a finalized budget
  vote        - Vote on a finalized budget
  show        - Show existing finalized budgets
  getvotes     - Get vote information for each finalized budget
suggest
show
getvotes
Correct usage is 'mnfinalbudget vote-many BUDGET_HASH'
Correct usage is 'mnfinalbudget vote BUDGET_HASH'
Error upon calling SetKey
FeeTX
Proposals
VoteCount
IsValid
IsValidReason
Correct usage is 'mnbudget getvotes budget-hash'
Unknown budget hash
FeeHash
TotalPaymentCount
RemainingPaymentCount
PaymentAddress
Ratio
Yeas
Nays
Abstains
TotalPayment
MonthlyPayment
IsEstablished
getbudgetinfo ( "proposal" )
Show current masternode budgets
Arguments:
1. "proposal"    (string, optional) Proposal name
Result:
    "Name": "xxxx",               (string) Proposal Name
    "URL": "xxxx",                (string) Proposal URL
    "Hash": "xxxx",               (string) Proposal vote hash
    "FeeHash": "xxxx",            (string) Proposal fee hash
    "BlockStart": n,              (numeric) Proposal starting block
    "BlockEnd": n,                (numeric) Proposal ending block
    "TotalPaymentCount": n,       (numeric) Number of payments
    "RemainingPaymentCount": n,   (numeric) Number of remaining payments
    "PaymentAddress": "xxxx",     (string) GIANT address of payment
    "Ratio": x.xxx,               (numeric) Ratio of yeas vs nays
    "Yeas": n,                    (numeric) Number of yea votes
    "Nays": n,                    (numeric) Number of nay votes
    "Abstains": n,                (numeric) Number of abstains
    "TotalPayment": xxx.xxx,      (numeric) Total payment amount
    "MonthlyPayment": xxx.xxx,    (numeric) Monthly payment amount
    "IsEstablished": true|false,  (boolean) Established (true) or (false)
    "IsValid": true|false,        (boolean) Valid (true) or Invalid (false)
    "IsValidReason": "xxxx",      (string) Error message, if any
    "fValid": true|false,         (boolean) Valid (true) or Invalid (false)
  ,...
Examples:
"test-proposal" "https://forum.giantpay.network/test-proposal" 2 820800 "D9oc6C3dttUbv8zd7zGNq1qKBGf4ZQ1XEE" 500
preparebudget "proposal-name" "url" payment-count block-start "giant-address" monthy-payment
Prepare proposal for network by signing and creating tx
Arguments:
1. "proposal-name":  (string, required) Desired proposal name (20 character limit)
2. "url":            (string, required) URL of proposal details (64 character limit)
3. payment-count:    (numeric, required) Total number of monthly payments
4. block-start:      (numeric, required) Starting super block height
5. "giant-address":   (string, required) GIANT address to send payments to
6. monthly-payment:  (numeric, required) Monthly payment amount
Result:
"xxxx"       (string) proposal fee hash (if successful) or error message (if failed)
Examples:
Invalid proposal name, limit of 20 characters.
Invalid url, limit of 64 characters.
Invalid payment count, must be more than zero.
Invalid block start - must be a budget cycle block. Next valid block: %d
Invalid block start, must be more than current height.
Invalid ending block, starting block + (payment_cycle*payments) must be more than current height.
Invalid GIANT address
Proposal is not valid - 
Error making collateral transaction for proposal. Please check your wallet balance.
"test-proposal" "https://forum.giantpay.network/t/test-proposal" 2 820800 "D9oc6C3dttUbv8zd7zGNq1qKBGf4ZQ1XEE" 500
submitbudget "proposal-name" "url" payment-count block-start "giant-address" monthy-payment "fee-tx"
Submit proposal to the network
Arguments:
1. "proposal-name":  (string, required) Desired proposal name (20 character limit)
2. "url":            (string, required) URL of proposal details (64 character limit)
3. payment-count:    (numeric, required) Total number of monthly payments
4. block-start:      (numeric, required) Starting super block height
5. "giant-address":   (string, required) GIANT address to send payments to
6. monthly-payment:  (numeric, required) Monthly payment amount
7. "fee-tx":         (string, required) Transaction hash from preparebudget command
Result:
"xxxx"       (string) proposal hash (if successful) or error message (if failed)
Examples:
Proposal FeeTX is not valid - 
Must wait for client to sync with masternode network. Try again in a minute or so.
Invalid proposal, see debug.log for details.
getbudgetprojection
Show the projection of which proposals will be paid the next cycle
Result:
    "Name": "xxxx",               (string) Proposal Name
    "URL": "xxxx",                (string) Proposal URL
    "Hash": "xxxx",               (string) Proposal vote hash
    "FeeHash": "xxxx",            (string) Proposal fee hash
    "BlockStart": n,              (numeric) Proposal starting block
    "BlockEnd": n,                (numeric) Proposal ending block
    "TotalPaymentCount": n,       (numeric) Number of payments
    "RemainingPaymentCount": n,   (numeric) Number of remaining payments
    "PaymentAddress": "xxxx",     (string) GIANT address of payment
    "Ratio": x.xxx,               (numeric) Ratio of yeas vs nays
    "Yeas": n,                    (numeric) Number of yea votes
    "Nays": n,                    (numeric) Number of nay votes
    "Abstains": n,                (numeric) Number of abstains
    "TotalPayment": xxx.xxx,      (numeric) Total payment amount
    "MonthlyPayment": xxx.xxx,    (numeric) Monthly payment amount
    "IsEstablished": true|false,  (boolean) Established (true) or (false)
    "IsValid": true|false,        (boolean) Valid (true) or Invalid (false)
    "IsValidReason": "xxxx",      (string) Error message, if any
    "fValid": true|false,         (boolean) Valid (true) or Invalid (false)
    "Alloted": xxx.xxx,           (numeric) Amount alloted in current period
    "TotalBudgetAlloted": xxx.xxx (numeric) Total alloted
  ,...
Examples:
Alloted
TotalBudgetAlloted
20CValidationInterface
24submitblock_StateCatcher
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
gethashespersec
Returns a recent hashes per second performance measurement while generating.
See the getgenerate and setgenerate calls to turn generation on and off.
Result:
n            (numeric) The recent hashes per second when generation is on (will return 0 if generation is off)
Examples:
getgenerate
Return if the server is set to generate coins or not. The default is false.
It is set with the command line argument -gen (or giant.conf setting gen)
It can also be set with the setgenerate call.
Result
true|false      (boolean) If the server is set to generate coins or not
Examples:
getnetworkhashps ( blocks height )
Returns the estimated network hashes per second based on the last n blocks.
Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change.
Pass in [height] to estimate the network speed at the time when a certain block was found.
Arguments:
1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.
2. height     (numeric, optional, default=-1) To estimate at the time of the given height.
Result:
x             (numeric) Hashes per second estimated
Examples:
generate numblocks
Mine blocks immediately (before the RPC call returns)
Note: this function can only be used on the regtest network
Arguments:
1. numblocks    (numeric, required) How many blocks to generate.
Result
[ blockhashes ]     (array) hashes of blocks generated
Examples:
Generate 11 blocks
This method can only be used on regtest
Couldn't create new block
ProcessNewBlock, block not accepted
"txid" 0.0 10000
prioritisetransaction <txid> <priority delta> <fee delta>
Accepts the transaction into mined blocks at a higher (or lower) priority
Arguments:
1. "txid"       (string, required) The transaction id.
2. priority delta (numeric, required) The priority to add or subtract.
                  The transaction selection algorithm considers the tx as it would have a higher priority.
                  (priority of a transaction is calculated: coinage * value_in_ugic / txsize) 
3. fee delta      (numeric, required) The fee value (in ugic) to add (or subtract, if negative).
                  The fee is not actually paid, only the algorithm for selecting transactions into a block
                  considers the transaction as it would have paid a higher (or lower) fee.
Result
true              (boolean) Returns true
Examples:
"txid", 0.0, 10000
rejected
valid?
"mydata"
submitblock "hexdata" ( "jsonparametersobject" )
Attempts to submit new block to network.
The 'jsonparametersobject' parameter is currently ignored.
See https://en.bitcoin.it/wiki/BIP_0022 for full specification.
Arguments
1. "hexdata"    (string, required) the hex-encoded block data to submit
2. "jsonparametersobject"     (string, optional) object of optional parameters
    {
      "workid" : "id"    (string, optional) if the server provided a workid, it MUST be included with submissions
    }
Result:
Examples:
Block decode failed
Block does not start with a coinbase
duplicate-invalid
duplicate-inconclusive
inconclusive
getmininginfo
Returns a json object containing mining-related information.
Result:
  "blocks": nnn,             (numeric) The current block
  "currentblocksize": nnn,   (numeric) The last block size
  "currentblocktx": nnn,     (numeric) The last block transaction
  "difficulty": xxx.xxxxx    (numeric) The current difficulty
  "errors": "..."          (string) Current errors
  "generate": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)
  "genproclimit": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)
  "hashespersec": n          (numeric) The hashes per second of the generation, or 0 if no generation.
  "pooledtx": n              (numeric) The size of the mem pool
  "testnet": true|false      (boolean) If using testnet or not
  "chain": "xxxx",         (string) current network name as defined in BIP70 (main, test, regtest)
Examples:
currentblocksize
currentblocktx
genproclimit
networkhashps
pooledtx
testnet
hashespersec
true 1
setgenerate generate ( genproclimit )
Set 'generate' true or false to turn generation on or off.
Generation is limited to 'genproclimit' processors, -1 is unlimited.
See the getgenerate call for the current setting.
Arguments:
1. generate         (boolean, required) Set to true to turn on generation, false to turn off.
2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.
Examples:
Set the generation on with a limit of one processor
Check the setting
Turn off generation
Using json rpc
true, 1
Use the generate method instead of setgenerate on this network
estimatefee nblocks
Estimates the approximate fee per kilobyte
needed for a transaction to begin confirmation
within nblocks blocks.
Arguments:
1. nblocks     (numeric)
Result:
n :    (numeric) estimated fee-per-kilobyte
-1.0 is returned if not enough transactions and
blocks have been observed to make an estimate.
Example:
estimatepriority nblocks
Estimates the approximate priority
a zero-fee transaction needs to begin confirmation
within nblocks blocks.
Arguments:
1. nblocks     (numeric)
Result:
n :    (numeric) estimated priority
-1.0 is returned if not enough transactions and
blocks have been observed to make an estimate.
Example:
getblocktemplate ( "jsonrequestobject" )
If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.
It returns data needed to construct a block to work on.
See https://en.bitcoin.it/wiki/BIP_0022 for full specification.
Arguments:
1. "jsonrequestobject"       (string, optional) A json object in the following spec
     {
       "mode":"template"    (string, optional) This must be set to "template" or omitted
       "capabilities":[       (array, optional) A list of strings
           "support"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'
           ,...
         ]
     }
Result:
  "version" : n,                    (numeric) The block version
  "previousblockhash" : "xxxx",    (string) The hash of current highest block
  "transactions" : [                (array) contents of non-coinbase transactions that should be included in the next block
      {
         "data" : "xxxx",          (string) transaction data encoded in hexadecimal (byte-for-byte)
         "hash" : "xxxx",          (string) hash/id encoded in little-endian hexadecimal
         "depends" : [              (array) array of numbers 
             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is
             ,...
         ],
         "fee": n,                   (numeric) difference in value between transaction inputs and outputs (in ugic); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one
         "sigops" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any
         "required" : true|false     (boolean) if provided and true, this transaction must be in the final block
      }
      ,...
  ],
  "coinbaseaux" : {                  (json object) data that should be included in the coinbase's scriptSig content
      "flags" : "flags"            (string) 
  },
  "coinbasevalue" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in ugic)
  "coinbasetxn" : { ... },           (json object) information for coinbase transaction
  "target" : "xxxx",               (string) The hash target
  "mintime" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)
  "mutable" : [                      (array of string) list of ways the block template may be changed 
     "value"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'
     ,...
  ],
  "noncerange" : "00000000ffffffff",   (string) A range of valid nonces
  "sigoplimit" : n,                 (numeric) limit of sigops in blocks
  "sizelimit" : n,                  (numeric) limit of block size
  "curtime" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)
  "bits" : "xxx",                 (string) compressed target of next block
  "height" : n                      (numeric) The height of the next block
  "payee" : "xxx",                (string) required payee for the next block
  "payee_amount" : n,               (numeric) required amount to pay
  "votes" : [
                     (array) show vote candidates
        { ... }                       (json object) vote candidate
        ,...
  ],
  "masternode_payments" : true|false,         (boolean) true, if masternode payments are enabled
  "enforce_masternode_payments" : true|false  (boolean) true, if masternode payments are enforced
Examples:
Invalid mode
longpollid
proposal
Missing data String key for proposal
inconclusive-not-best-prevblk
GIANT is not connected!
GIANT is downloading blocks...
Shutting down
Out of memory
prevblock
coinbaseaux
coinbasevalue
mintime
mutable
00000000ffffffff
noncerange
curtime
votes
payee
payee_amount
enforce_masternode_payments
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
T boost::detail::variant::forced_return() [with T = bool]
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
T boost::detail::variant::forced_return() [with T = UniValue]
isscript
iscompressed
sigsrequired
"mypassphrase" 30
verifymessage "giantaddress" "signature" "message"
Verify a signed message
Arguments:
1. "giantaddress"  (string, required) The giant address to use for the signature.
2. "signature"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).
3. "message"         (string, required) The message that was signed.
Result:
true|false   (boolean) If the signature is verified or not.
Examples:
Unlock the wallet for 30 seconds
Create the signature
"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ" "my message"
Verify the signature
"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ" "signature" "my message"
As json rpc
"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ", "signature", "my message"
Invalid address
Address does not refer to key
reset
"status"
mnsync "status|reset"
Returns the sync status or resets sync.
Arguments:
1. "mode"    (string, required) either 'status' or 'reset'
Result ('status' mode):
  "IsBlockchainSynced": true|false,    (boolean) 'true' if blockchain is synced
  "lastMasternodeList": xxxx,        (numeric) Timestamp of last MN list message
  "lastMasternodeWinner": xxxx,      (numeric) Timestamp of last MN winner message
  "lastBudgetItem": xxxx,            (numeric) Timestamp of last MN budget message
  "lastFailure": xxxx,           (numeric) Timestamp of last failed sync
  "nCountFailures": n,           (numeric) Number of failed syncs (total)
  "sumMasternodeList": n,        (numeric) Number of MN list messages (total)
  "sumMasternodeWinner": n,      (numeric) Number of MN winner messages (total)
  "sumBudgetItemProp": n,        (numeric) Number of MN budget messages (total)
  "sumBudgetItemFin": n,         (numeric) Number of MN budget finalization messages (total)
  "countMasternodeList": n,      (numeric) Number of MN list messages (local)
  "countMasternodeWinner": n,    (numeric) Number of MN winner messages (local)
  "countBudgetItemProp": n,      (numeric) Number of MN budget messages (local)
  "countBudgetItemFin": n,       (numeric) Number of MN budget finalization messages (local)
  "RequestedMasternodeAssets": n, (numeric) Status code of last sync phase
  "RequestedMasternodeAttempt": n, (numeric) Status code of last sync attempt
Result ('reset' mode):
"status"     (string) 'success'
Examples:
IsBlockchainSynced
lastMasternodeList
lastMasternodeWinner
lastBudgetItem
lastFailure
nCountFailures
sumMasternodeList
sumMasternodeWinner
sumBudgetItemProp
sumBudgetItemFin
countMasternodeList
countMasternodeWinner
countBudgetItemProp
countBudgetItemFin
RequestedMasternodeAssets
RequestedMasternodeAttempt
getstakingstatus
Returns an object containing various staking information.
Result:
  "validtime": true|false,          (boolean) if the chain tip is within staking phases
  "haveconnections": true|false,    (boolean) if network connections are present
  "walletunlocked": true|false,     (boolean) if the wallet is unlocked
  "mintablecoins": true|false,      (boolean) if the wallet has mintable coins
  "enoughcoins": true|false,        (boolean) if available coins are greater than reserve balance
  "mnsync": true|false,             (boolean) if masternode data is synced
  "staking status": true|false,     (boolean) if the wallet is staking or not
Examples:
validtime
haveconnections
walletunlocked
mintablecoins
enoughcoins
staking status
minamount
Staking Not Active
Staking Active
getinfo
Returns an object containing various state info.
Result:
  "version": xxxxx,           (numeric) the server version
  "protocolversion": xxxxx,   (numeric) the protocol version
  "walletversion": xxxxx,     (numeric) the wallet version
  "balance": xxxxxxx,         (numeric) the total giant balance of the wallet (excluding zerocoins)
  "zerocoinbalance": xxxxxxx, (numeric) the total zerocoin balance of the wallet
  "blocks": xxxxxx,           (numeric) the current number of blocks processed in the server
  "timeoffset": xxxxx,        (numeric) the time offset
  "connections": xxxxx,       (numeric) the number of connections
  "proxy": "host:port",     (string, optional) the proxy used by the server
  "difficulty": xxxxxx,       (numeric) the current difficulty
  "testnet": true|false,      (boolean) if the server is using testnet or not
  "moneysupply" : "supply"       (numeric) The money supply when this block was added to the blockchain
  "keypoololdest": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool
  "keypoolsize": xxxx,        (numeric) how many new keys are pre-generated
  "unlocked_until": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked
  "paytxfee": x.xxxx,         (numeric) the transaction fee set in giant/kb
  "relayfee": x.xxxx,         (numeric) minimum relay fee for non-free transactions in giant/kb
  "staking status": true|false,  (boolean) if the wallet is staking or not
  "errors": "..."           (string) any error messages
Examples:
NETWORK/
BLOOM/
BLOOM_ZC/
UNKNOWN/
services
walletversion
zerocoinbalance
timeoffset
keypoololdest
keypoolsize
unlocked_until
paytxfee
relayfee
Invalid spork name
spork "name" ( value )
Return spork values or their active state.
Arguments:
1. "name"        (string, required)  "show" to show values, "active" to show active state.
                       When set up as a spork signer, the name of the spork can be used to update it's value.
2. value           (numeric, required when updating a spork) The new value for the spork.
Result (show):
  "spork_name": nnn      (key/value) Key is the spork name, value is it's current value.
  ,...
Result (active):
  "spork_name": true|false      (key/value) Key is the spork name, value is a boolean for it's active state.
  ,...
Result (name):
 "success|failure"       (string) Wither or not the update succeeded.
Examples:
setmocktime timestamp
Set the local time to given timestamp (-regtest only)
Arguments:
1. timestamp  (integer, required) Unix seconds-since-epoch timestamp
   Pass 0 to go back to using the system time.
setmocktime for regression testing (-regtest mode) only
a multisignature address must require at least one key to redeem
not enough keys supplied (got %u keys, but need at least %d to redeem)
Number of addresses involved in the multisignature address creation > 16
Reduce the number
%s does not refer to a key
no full public key for address %s
 Invalid public key: 
redeemScript exceeds size limit: %d > %d
2 "[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]"
createmultisig nrequired ["key",...]
Creates a multi-signature address with n signature of m keys required.
It returns a json object with the address and redeemScript.
Arguments:
1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.
2. "keys"       (string, required) A json array of keys which are giant addresses or hex-encoded public keys
     [
       "key"    (string) giant address or hex-encoded public key
       ,...
     ]
Result:
  "address":"multisigaddress",  (string) The value of the new multisig address.
  "redeemScript":"script"       (string) The string value of the hex-encoded redemption script.
Examples:
Create a multisig address from 2 addresses
2, "[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]"
"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc"
validateaddress "giantaddress"
Return information about the given giant address.
Arguments:
1. "giantaddress"     (string, required) The giant address to validate
Result:
  "isvalid" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.
  "address" : "giantaddress", (string) The giant address validated
  "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address
  "ismine" : true|false,          (boolean) If the address is yours or not
  "iswatchonly" : true|false,   (boolean) If the address is watchonly
  "isscript" : true|false,        (boolean) If the key is a script
  "hex" : "hex",                (string, optional) The redeemscript for the P2SH address
  "pubkey" : "publickeyhex",    (string) The hex value of the raw public key
  "iscompressed" : true|false,    (boolean) If the address is compressed
  "account" : "account"         (string) The account associated with the address, "" is the default account
Examples:
isvalid
ismine
iswatchonly
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
getconnectioncount
Returns the number of connections to other nodes.
bResult:
n          (numeric) The connection count
Examples:
ping
Requests that a ping be sent to all other nodes, to measure ping time.
Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.
Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.
Examples:
"192.168.0.6:8333"
disconnectnode "node" 
Immediately disconnects from the specified node.
Arguments:
1. "node"     (string, required) The node (see getpeerinfo for nodes)
Examples:
Node not found in connected nodes
onetry
"192.168.0.6:40444" "onetry"
addnode "node" "add|remove|onetry"
Attempts add or remove a node from the addnode list.
Or try a connection to a node once.
Arguments:
1. "node"     (string, required) The node (see getpeerinfo for nodes)
2. "command"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once
Examples:
"192.168.0.6:40444", "onetry"
Error: Node already added
Error: Node has not been added.
listbanned
List all banned IPs/Subnets.
Result:
    "address": "xxx",          (string) Network address of banned client.
    "banned_until": nnn,         (numeric) Timestamp when the ban is lifted.
    "ban_created": nnn,          (numeric) Timestamp when the ban was created.
    "ban_reason": "xxx"        (string) Reason for banning.
  ,...
Examples:
banned_until
ban_created
node misbehaving
ban_reason
manually added
getnettotals
Returns information about network traffic, including bytes in, bytes out,
and current time.
Result:
  "totalbytesrecv": n,   (numeric) Total bytes received
  "totalbytessent": n,   (numeric) Total bytes sent
  "timemillis": t        (numeric) Total cpu time
Examples:
totalbytesrecv
totalbytessent
timemillis
inbound
outbound
getaddednodeinfo dns ( "node" )
Returns information about the given added node, or all added nodes
(note that onetry addnodes are not listed here)
If dns is false, only a list of added nodes will be provided,
otherwise connected information will also be available.
Arguments:
1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.
2. "node"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.
Result:
    "addednode" : "192.168.0.201",   (string) The node ip address
    "connected" : true|false,          (boolean) If connected
    "addresses" : [
       {
         "address" : "192.168.0.201:40444",  (string) The giant server host and port
         "connected" : "outbound"           (string) connection, inbound or outbound
       }
       ,...
     ]
  ,...
Examples:
true "192.168.0.201"
true, "192.168.0.201"
addednode
connected
getnetworkinfo
Returns an object containing various state info regarding P2P networking.
Result:
  "version": xxxxx,                      (numeric) the server version
  "subversion": "/GIANT Core:x.x.x.x/",     (string) the server subversion string
  "protocolversion": xxxxx,              (numeric) the protocol version
  "localservices": "xxxxxxxxxxxxxxxx", (string) the services we offer to the network
  "timeoffset": xxxxx,                   (numeric) the time offset
  "connections": xxxxx,                  (numeric) the number of connections
  "networks": [                          (array) information per network
    "name": "xxx",                     (string) network (ipv4, ipv6 or onion)
    "limited": true|false,               (boolean) is the network limited using -onlynet?
    "reachable": true|false,             (boolean) is the network reachable?
    "proxy": "host:port"               (string) the proxy that is used for this network, or empty if none
  ,...
  ],
  "relayfee": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in giant/kb
  "localaddresses": [                    (array) list of local addresses
    "address": "xxxx",                 (string) network address
    "port": xxx,                         (numeric) network port
    "score": xxx                         (numeric) relative score
  ,...
Examples:
subversion
localservices
limited
reachable
proxy_randomize_credentials
networks
score
localaddresses
getpeerinfo
Returns data about each connected network node as a json array of objects.
bResult:
    "id": n,                   (numeric) Peer index
    "addr":"host:port",      (string) The ip address and port of the peer
    "addrlocal":"ip:port",   (string) local address
    "services":"xxxxxxxxxxxxxxxx",   (string) The services offered
    "lastsend": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send
    "lastrecv": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive
    "bytessent": n,            (numeric) The total bytes sent
    "bytesrecv": n,            (numeric) The total bytes received
    "conntime": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)
    "timeoffset": ttt,         (numeric) The time offset in seconds
    "pingtime": n,             (numeric) ping time
    "pingwait": n,             (numeric) ping wait
    "version": v,              (numeric) The peer version, such as 7001
    "subver": "/GIANT Core:x.x.x.x/",  (string) The string version
    "inbound": true|false,     (boolean) Inbound (true) or Outbound (false)
    "startingheight": n,       (numeric) The starting height (block) of the peer
    "banscore": n,             (numeric) The ban score
    "synced_headers": n,       (numeric) The last header we have in common with this peer
    "synced_blocks": n,        (numeric) The last block we have in common with this peer
    "inflight": [
       n,                        (numeric) The heights of blocks we're currently asking from this peer
       ...
    ]
  ,...
Examples:
addrlocal
lastsend
lastrecv
bytessent
bytesrecv
conntime
pingtime
pingwait
subver
startingheight
banscore
synced_headers
synced_blocks
inflight
whitelisted
"192.168.0.6" "add" 86400
setban "ip(/netmask)" "add|remove" (bantime) (absolute)
Attempts add or remove a IP/Subnet from the banned list.
Arguments:
1. "ip(/netmask)" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)
2. "command"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list
3. "bantime"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)
4. "absolute"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)
Examples:
"192.168.0.0/24" "add"
"192.168.0.6", "add" 86400
Error: Invalid IP/Subnet
Error: IP/Subnet already banned
Error: Unban failed
clearbanned
Clear all banned IPs.
Examples:
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
GetMasterNodeVin
CActiveMasternode::EnableHotColdMasterNode() - Enabled! You may shut down the cold daemon.
Masternode is not in a running status
Error upon calling SetKey: %s
CActiveMasternode::SendMasternodePing() - Relay Masternode Ping vin = %s
Couldn't sign Masternode Ping
Too early to send Masternode Ping
Obfuscation Masternode List doesn't include our Masternode, shutting down Masternode pinging service! 
Failed to sign ping, vin: %s
CActiveMasternode::CreateBroadcast() -  %s
Failed to sign broadcast, vin: %s
CActiveMasternode::CreateBroadcast() - %s
Node just started, not yet activated
Sync in progress. Must wait until sync is complete to start Masternode
Masternode input must have at least %d confirmations
Not capable masternode: 
Masternode successfully started
CActiveMasternode::GetMasterNodeVin - Address does not refer to a key
CActiveMasternode::GetMasterNodeVin - Private key for address is not known
CActiveMasternode::GetMasterNodeVin - Could not locate specified vin from possible list
%s: %s on strOutputIndex
CActiveMasternode::GetMasterNodeVin - Could not locate valid vin
Can't find keys for masternode %s - %s
Could not allocate vin %s:%s for masternode %s
CActiveMasternode::CreateBroadcast()
CActiveMasternode::ManageStatus() - Begin
CActiveMasternode::ManageStatus() - %s
Wallet is locked.
CActiveMasternode::ManageStatus() - not capable: %s
Hot node, waiting for remote activation.
Can't detect external address. Please use the masternodeaddr configuration option.
CActiveMasternode::ManageStatus()
CActiveMasternode::ManageStatus() - Checking inbound connection to '%s'
Could not connect to 
%s - %d confirmations
Error upon calling SetKey: 
Register::ManageStatus() - %s
Error on Register: 
CActiveMasternode::ManageStatus() - Relay broadcast vin = %s
CActiveMasternode::ManageStatus() - Is capable master node!
Could not find suitable coins!
CActiveMasternode::ManageStatus() - Error on Ping: %s
 $(,048<@DHL
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
bool CObfuscationPool::SendRandomPaymentToSelf()
bool CObfuscationPool::CreateDenominated(CAmount)
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
bool CObfuscationPool::MakeCollateralAmounts()
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
cA10
dssu
CObfuscationPool::ChargeFees -- found uncooperative node (didn't send transaction). Found offence.
CObfuscationPool::ChargeFees -- found uncooperative node (didn't sign). Found offence
CObfuscationPool::ChargeFees -- found uncooperative node (didn't send transaction). charging fees.
CObfuscationPool::ChargeFees() : Error: Transaction not valid
CObfuscationPool::ChargeFees -- found uncooperative node (didn't sign). charging fees.
DoAutomaticDenominating : Running Obfuscation denominate for %d rounds. Return '%s'
DoAutomaticDenominating : Running Obfuscation denominate for all rounds. Return '%s'
DoAutomaticDenominating : Error running denominate, %s
CObfuscationPool::ChargeRandomFees -- charging random fees. %u
CObfuscationPool::ChargeRandomFees() : Error: Transaction not valid
CObfuscationPool::SignFinalTransaction %s
CObfuscationPool::Sign - My entries are not correct! Refusing to sign. %d entries %d target. 
CObfuscationPool::Sign - Signing my input %i
obfuscation
CObfuscationPool::Sign - Unable to sign my own transaction! 
 -- dss %d %d %s
CObfuscationPool::Sign - txNew:
CObfuscationPool::IsCollateralValid - Invalid Script %s
CObfuscationPool::IsCollateralValid - Unknown inputs in collateral transaction - %s
CObfuscationPool::IsCollateralValid - did not include enough fees in transaction %d
CObfuscationPool::IsCollateralValid %s
CObfuscationPool::IsCollateralValid - didn't pass IsAcceptable
CObfuscationPool::AddEntry - input not valid!
CObfuscationPool::AddEntry - collateral not valid!
CObfuscationPool::AddEntry - entries is full!
looking for vin -- %s
CObfuscationPool::AddEntry - found in vin
CObfuscationPool::AddEntry -- adding %s
CObfuscationPool::SetCollateralAddress - Invalid Obfuscation collateral address
CObfuScationSigner::IsVinAssociatedWithPubkey : vin=%s, collateralPrice=%d
obfuscation.cpp
reservekey.GetReservedKey(vchPubKey)
SendRandomPaymentToSelf: Error - %s
SendRandomPaymentToSelf Success: tx %s
reservekeyCollateral.GetReservedKey(vchPubKey)
CreateDenominated2 %d
reservekeyDenom.GetReservedKey(vchPubKey)
CreateDenominated1 %d
CreateDenominated: Error - %s
CreateDenominated: CommitTransaction failed!
CreateDenominated: tx %s
CObfuscationPool::SignatureValid() - Sign with sig %s
CObfuscationPool::SignatureValid() - Signing - Error signing input %u
CObfuscationPool::SignatureValid() - Signing - Successfully validated input
CObfuscationPool::AddScriptSig -- new sig  %s
CObfuscationPool::AddScriptSig - already exists
CObfuscationPool::AddScriptSig - Invalid Sig
CObfuscationPool::AddScriptSig -- sig %s
CObfuScationPool::AddScriptSig -- adding to finalTransaction  %s
CObfuScationPool::AddScriptSig -- adding  %s
CObfuscationPool::AddScriptSig -- Couldn't set sig!
GetDenominationsByAmount --- %d nOutputs %d
 IsCompatibleWithEntries %d %d
RelayIn - found master, relaying message - %s 
MakeCollateralAmounts: ONLY_NONDENOMINATED_NOT1000IFMN Error - %s
MakeCollateralAmounts: ONLY_NOT1000IFMN Error - %s
MakeCollateralAmounts: tx %s
MakeCollateralAmounts: CommitTransaction failed!
Obfuscation is idle.
Obfuscation request complete:
Your transaction was accepted into the pool!
Submitted following entries to masternode: %u / %d
Submitted to masternode, waiting for more entries ( %u / %d ) %s
Found enough users, signing ...
Found enough users, signing ( waiting %s )
Transmitting final transaction.
Finalizing transaction.
Obfuscation request incomplete:
Will retry...
Submitted to masternode, waiting in queue %s
Unknown state: id = %u
Already have that input.
No matching denominations found for mixing.
Entries are full.
Not compatible with existing transactions.
Transaction fees are too high.
Collateral not valid.
Input is not valid.
Invalid script detected.
Transaction not valid.
Value more than Obfuscation pool maximum allows.
Not in the Masternode list.
Incompatible mode.
Non-standard public key detected.
This is not a Masternode.
Masternode queue is full.
Last Obfuscation was too recent.
Session not complete!
Missing input transaction information.
Incompatible version.
Transaction created successfully.
Your entries added successfully.
Masternode:
CObfuscationPool::StatusUpdate - set sessionID to %d
CObfuscationPool::StatusUpdate - entry accepted! 
CObfuscationPool::StatusUpdate - entry not accepted by Masternode 
Invalid private key.
Signing failed.
Error recovering public key.
CObfuScationSigner::VerifyMessage -- keys don't match: %s %s
Transaction 2: %s
CObfuscationPool::Check() - CommitTransaction : Error: Transaction not valid
CObfuscationPool::Check() -- IS MASTER -- TRANSMITTING OBFUSCATION
CObfuscationPool::Check() - ERROR: Invalid Masternodeprivkey: '%s'
CObfuscationPool::Check() - Sign message failed
CObfuscationPool::Check() - Verify message failed
CObfuscationPool::Check() -- COMPLETED -- RESETTING
CObfuscationPool::Check() - entries count %lu
CObfuscationPool::Check() -- TRYING TRANSACTION 
CObfuscationPool::Check() -- FINALIZE TRANSACTIONS
Transaction 1: %s
CObfuscationPool::Check() -- timeout, RESETTING
CObfuscationPool::Check() -- SIGNING
CObfuscationPool::SendObfuscationDenominate() - Obfuscation from a Masternode is not supported currently.
CObfuscationPool:SendObfuscationDenominate() - Obfuscation collateral not set
CObfuscationPool::SendObfuscationDenominate() - No Masternode has been selected yet.
CObfuscationPool::SendObfuscationDenominate() - Not enough disk space, disabling Obfuscation.
CObfuscationPool::SendObfuscationDenominate() - Added transaction to pool.
dsi -- tx in %s
Submitting tx %s
dsi -- transaction not valid! %s 
CompletedTransaction -- error 
CompletedTransaction -- success 
CObfuscationQueue():Relay - ERROR: Invalid Masternodeprivkey: '%s'
CObfuscationQueue():Relay - Sign message failed
CObfuscationQueue():Relay - Verify message failed
CObfuscationPool::IsCompatibleWithSession - sessionDenom %d sessionUsers %d
CObfuscationPool::IsCompatibleWithSession - collateral not valid!
CObfuscationPool::IsCompatibleWithSession - incompatible mode, return false %d %d
CObfuScationPool::IsCompatibleWithSession - compatible
CObfuscationQueue::CheckSignature() - Got bad Masternode address signature %s 
dsa -- incompatible version! 
dsa -- not a Masternode! 
dsa -- last dsq too recent, must wait. %s 
dsa -- not compatible with existing transactions! 
dsa -- is compatible, please submit! 
dsq - message doesn't match current Masternode - %s != %s
Obfuscation queue is ready - %s
dsq last %d last2 %d count %d
dsq -- Masternode sending too many dsq messages. %s 
dsq - new Obfuscation queue object - %s
dsi -- incompatible version! 
dsi -- not a Masternode! 
dsi -- session not complete! 
dsi -- not compatible with existing transactions! 
dsi - non-standard pubkey detected! %s
dsi - invalid script! %s
dsi -- more than Obfuscation pool max! %s
dsi -- fees are too high! %s
dsi -- missing input tx! %s
dsi -- transaction not valid! 
dssu - state: %i entriesCount: %i accepted: %i error: %s 
dssu - message doesn't match current Obfuscation session %d %d
 -- sigs count %d %d
dsf - message doesn't match current Obfuscation session %d %d
dsc - message doesn't match current Obfuscation session %d %d
CObfuscationPool::CheckTimeout() -- Session complete -- Running Check()
CObfuscationPool::CheckTimeout() -- Pool error -- Running Check()
CObfuscationPool::CheckTimeout() -- Pool success -- Running Check()
CObfuscationPool::CheckTimeout() : Removing expired queue entry - %d
CObfuscationPool::CheckTimeout() : Removing expired entry - %d
CObfuscationPool::CheckTimeout() -- Session timed out (%ds) -- resetting
Session timed out.
CObfuscationPool::CheckTimeout() -- Session timed out (%ds) -- restting
Signing timed out.
CObfuscationPool::NewBlock 
giant-obfuscation
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
CDBEnv::VerifyResult CDBEnv::Verify(std::__cxx11::string, bool (*)(CDBEnv&, std::__cxx11::string))
bool CDBEnv::Salvage(std::__cxx11::string, bool, std::vector<std::pair<std::vector<unsigned char>, std::vector<unsigned char> > >&)
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = int]
CDBEnv::EnvShutdown : Error %d shutting down database environment: %s
db.log
CDBEnv::Open: LogDir=%s ErrorFile=%s
CDBEnv::Open : Error %d opening database environment: %s
CDBEnv::MakeMock : Already initialized
CDBEnv::MakeMock
CDBEnv::MakeMock : Error %d opening database environment.
wallet/db.cpp
mapFileUseCount.count(strFile) == 0
CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.
CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.
CDBEnv::Salvage : Database salvage failed with result %d.
HEADER=END
DATA=END
-dblogsize
 database not started
CDBEnv::Flush : Flush(%s)%s
CDBEnv::Flush : Flushing %s (refcount = %d)...
CDBEnv::Flush : %s checkpoint
CDBEnv::Flush : %s detach
CDBEnv::Flush : %s closed
CDBEnv::Flush : Flush(%s)%s took %15dms
main
CDB : Failed to open database environment.
CDB : Failed to configure for no temp file backing for database %s
CDB : Error %d, can't open database %s
wallet/db.h
!"Write called on database in read-only mode"
CDB::Rewrite : Rewriting %s...
.rewrite
CDB::Rewrite : Can't create database file %s
version
CDB::Rewrite : Failed to rewrite database file %s
15CCryptoKeyStore
0123456789abcdef
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
GetDeterministicSeed
AddDeterministicSeed
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CCryptoKeyStore*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>; Mutex = boost::signals2::mutex; R = void; Args = {CCryptoKeyStore*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CCryptoKeyStore*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>; Mutex = boost::signals2::mutex; R = void; Args = {CCryptoKeyStore*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
bool CCryptoKeyStore::Unlock(const CKeyingMaterial&)
Unlock
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>&]
basic_string::_M_replace_aux
basic_string::_M_create
crypter EncryptAES256 - Invalid key or block size: Key: %d sIV:%d
crypter DecryptAES256 - Invalid key or block size
decrypt seed
read seed from wallet
read seed; wallet is locked
%s: Failed to %s
encrypt seed
save since wallet is locked
save zgicseed to wallet
s%: Failed to %s
The wallet is probably corrupted: Some keys decrypt but not all.
crypter.cpp
Failed to read zGIC seed from DB. Wallet is probably corrupt.
%s: first run of zgic wallet detected, new seed generated. Seedhash=%s
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const uint256&), boost::function<void(const uint256&)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const uint256&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const uint256&)>; Mutex = boost::signals2::mutex; R = void; Args = {const uint256&}]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const CTransaction&), boost::function<void(const CTransaction&)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const CTransaction&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const CTransaction&)>; Mutex = boost::signals2::mutex; R = void; Args = {const CTransaction&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const CTransaction&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const CTransaction&)>, boost::function<void(const boost::signals2::connection&, const CTransaction&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const uint256&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const uint256&)>, boost::function<void(const boost::signals2::connection&, const uint256&)>, boost::signals2::mutex>&]
SwiftX::CConsensusVote::SignatureValid() - Unknown Masternode
SwiftX::CConsensusVote::SignatureValid() - Verify message failed
CTransactionLock::SignaturesValid() - Unknown Masternode
CTransactionLock::SignaturesValid() - Masternode not in the top %s
CTransactionLock::SignaturesValid() - Signature not valid
CConsensusVote::Sign() - ERROR: Invalid masternodeprivkey: '%s'
CConsensusVote::Sign() - Sign message failed
CConsensusVote::Sign() - Verify message failed
SwiftX::DoConsensusVote - Unknown Masternode
swiftx
SwiftX::DoConsensusVote - Masternode not in the top %d (%d)
SwiftX::DoConsensusVote - In the top %d (%d)
SwiftX::DoConsensusVote - Failed to sign consensus vote
SwiftX::DoConsensusVote - Signature invalid
Removing old transaction lock %s
SwiftX::CheckForConflictingLocks - found two complete conflicting locks - removing both. %s %s
SwiftX::ProcessConsensusVote - Masternode ADDR %s %d
SwiftX::ProcessConsensusVote - Unknown Masternode
SwiftX::ProcessConsensusVote - Masternode not in the top %d (%d) - %s
SwiftX::ProcessConsensusVote - Signature invalid
SwiftX::ProcessConsensusVote - New Transaction Lock %s !
SwiftX::ProcessConsensusVote - Transaction Lock Exists %s !
SwiftX::ProcessConsensusVote - Transaction Lock Votes %d - %s !
SwiftX::ProcessConsensusVote - Transaction Lock Is Complete %s !
IsIXTXValid - Transaction value too high - %s
IsIXTXValid - Unknown inputs in IX transaction - %s
IsIXTXValid - did not include enough fees in transaction %d
CreateNewLock - Transaction not found / too new: %d / %s
CreateNewLock - Transaction Lock Exists %s !
CreateNewLock - New Transaction Lock %s !
ProcessMessageSwiftTX::ix - Invalid Script %s
ProcessMessageSwiftTX::ix - Transaction Lock Request: %s %s : accepted %s
ProcessMessageSwiftTX::ix - Transaction Lock Request: %s %s : rejected %s
ProcessMessageSwiftTX::ix - Found Existing Complete IX Lock
ProcessMessageSwiftTX::ix - masternode is spamming transaction votes: %s %s
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
T boost::detail::variant::forced_return() [with T = void]
PRE_ENABLED
OUTPOINT_SPENT
WATCHDOG_EXPIRED
POSE_BAN
UNKNOWN
Masternode
Supernode
Deprecated
CMasternodePing::Sign() - Error: %s
CMasternodePing::VerifySignature - Got bad Masternode ping signature %s Error: %s
CMasternodeBroadcast::VerifySignature() - Error: %s
CMasternodeBroadcast::Sign() - Error: %s
Invalid port %u for masternode %s, only %d is supported on %s-net.
%s - %s
CalculateScore ERROR - nHeight %d - Returned 0
CMasternodePing::CheckAndUpdate - Signature rejected, too far into the future %s
CMasternodePing::CheckAndUpdate - Signature rejected, too far into the past %s - %d %d 
CMasternodePing::CheckAndUpdate - New Ping - %s - %s - %lli
CMasternodePing::CheckAndUpdate - Couldn't find compatible Masternode entry, vin: %s
CMasternodePing::CheckAndUpdate - Masternode %s block hash %s is too old
CMasternodePing::CheckAndUpdate - Masternode %s block hash %s is unknown
CMasternodePing::CheckAndUpdate - Masternode ping accepted, vin: %s
CMasternodePing::CheckAndUpdate - Masternode ping arrived too early, vin: %s
mnb - Accepted Masternode entry
mnb - Input must have at least %d confirmations
mnb - Got NEW Masternode entry - %s - %lli 
CMasternodeBroadcast::Create -- pubKeyCollateralAddressNew = %s, pubKeyMasternodeNew.GetID() = %s
Failed to sign ping, masternode=%s
CMasternodeBroadcast::Create -- %s
Invalid IP address %s, masternode=%s
Failed to sign broadcast, masternode=%s
Invalid masternode key %s
Could not allocate txin %s:%s for masternode %s
CMasternodeBroadcast::Create
mnb - Signature rejected, too far into the future %s
mnb - ignoring outdated Masternode %s protocol version %d
mnb - pubkey the wrong size
mnb - pubkey2 the wrong size
mnb - Ignore Not Empty ScriptSig %s
CMasternodeBroadcast::CheckAndUpdate - Got bad Masternode address signature : %s
CMasternodeBroadcast::CheckAndUpdate - Bad sigTime %d for Masternode %20s %105s (existing broadcast is at %d)
mnb - Got updated entry for %s
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
Read
T boost::detail::variant::forced_return() [with T = void]
Write
Proposals: 
, Budgets: 
, Seen Budgets: 
, Seen Budget Votes: 
, Seen Final Budgets: 
, Seen Final Budget Votes: 
budget.dat
MasternodeBudget
CBudgetVote::Sign - Error upon calling SignMessage
mnbudget
CBudgetVote::Sign - Error upon calling VerifyMessage
CFinalizedBudgetVote::Sign - Error upon calling SignMessage
CFinalizedBudgetVote::Sign - Error upon calling VerifyMessage
CBudgetVote::SignatureValid() - Unknown Masternode - %s
CBudgetVote::SignatureValid() - Verify message failed
CFinalizedBudgetVote::SignatureValid() - Unknown Masternode %s
CFinalizedBudgetVote::SignatureValid() - Verify message failed %s %s
Can't find collateral tx %s
CBudgetProposalBroadcast::IsBudgetCollateralValid - %s
Invalid Script %s
Final Budget: o.scriptPubKey(%s) == findScript(%s) ?
Final Budget: o.nValue(%ld) >= BUDGET_FEE_TX(%ld) ?
Normal Budget: o.scriptPubKey(%s) == findScript(%s) ?
Normal Budget: o.nValue(%ld) >= PROPOSAL_FEE_TX(%ld) ?
Couldn't find opReturn %s in %s
Collateral requires at least %d confirmations - %d confirmations
CBudgetProposalBroadcast::IsBudgetCollateralValid - %s - %d confirmations
Proposal 
: Active removal
Invalid Proposal
: Invalid nBlockEnd (end before start)
: Invalid nAmount
: Invalid Payment Address
: Invalid collateral
: Multisig is not currently supported.
: Payment more than max
: Tip is NULL
: Invalid nBlockEnd (
) < current height (
Unknown proposal hash! Check this proposal before voting: 
Budget payee/nAmount doesn't match our proposal! 
CFinalizedBudget::GetStatus - Couldn't find budget payment for block %lld
CBudgetManager::Sync - sent %d items
unknown-budget
CBudgetManager::GetRequiredPaymentsString - Couldn't find budget payment for block %d
Invalid BlockStart
Invalid BlockEnd
Invalid budget payments count (too many)
Invalid Budget Name
Budget 
) Invalid BlockStart == 0
) Invalid FeeTx == 0
) Invalid Payout (more than max)
) Invalid Collateral : 
) (ends at block %ld) too old and obsolete
CBudgetManager::AddProposal - invalid budget proposal - %s
CBudgetManager::AddProposal - proposal %s added
New vote inserted:
new vote older than existing vote - %s
CFinalizedBudget::AddOrUpdateVote - %s
time between votes is too soon - %s - %lli sec < %lli sec
Existing vote updated:
new vote is too far ahead of current time - %s - nTime %lli - Max Time %lli
CFinalizedBudget::AddOrUpdateVote - %s %s
CBudgetManager::UpdateFinalizedBudget - Unknown Finalized Proposal %s, asking for source budget
mnvs
Finalized Budget 
CBudgetManager::UpdateFinalizedBudget - Finalized Proposal %s added
CFinalizedBudget::SubmitVote - Error upon calling SetKey
CFinalizedBudget::SubmitVote - Failure to sign.
CFinalizedBudget::SubmitVote  - new finalized budget vote - %s
CFinalizedBudget::SubmitVote : Error submitting vote - %s
CBudgetProposal::AddOrUpdateVote - %s
CBudgetProposal::AddOrUpdateVote - %s %s
CBudgetManager::UpdateProposal - Unknown proposal %d, asking for source proposal
Proposal not found!
CBudgetManager::CheckOrphanVotes - Proposal/Budget is known, activating and removing orphan vote
CBudgetManager::CheckOrphanVotes - Done
CFinalizedBudget::IsPaidAlready - Budget Proposal %s, Block %d from old cycle deleted
CFinalizedBudget::IsPaidAlready - Budget Proposal %s, Block %d added to payment history
CBudgetManager::IsBudgetPaymentBlock() - nHighestCount: %lli, 5%% of Masternodes: %lli. Number of finalized budgets: %lli
CBudgetManager::FillBlockPayee - Budget payment to %s for %lld, nHighestCount = %d
CBudgetManager::FillBlockPayee - No Budget payment, nHighestCount = %d
CBudgetManager::FillBlockPayee - Budget payment to %s for %lld
CFinalizedBudget::IsTransactionValid - Invalid block - height: %d start: %d
CFinalizedBudget::IsTransactionValid - Invalid last block - current budget payment: %d of %d
CFinalizedBudget::IsTransactionValid - nCurrentBudgetPayment=%d, payee=%s == out.scriptPubKey=%s, amount=%ld == out.nValue=%ld
CFinalizedBudget::IsTransactionValid - Double Budget Payment of %d for proposal %d detected. Paying a masternode instead.
CFinalizedBudget::IsTransactionValid - Found valid Budget Payment of %d for proposal %d
CFinalizedBudget::IsTransactionValid - Missing required payment - %s: %d c: %d
CBudgetManager::IsTransactionValid - checking %lli finalized budgets
CBudgetManager::IsTransactionValid() - nHighestCount: %lli, 5%% of Masternodes: %lli mapFinalizedBudgets.size(): %ld
CBudgetManager::IsTransactionValid - checking budget (%s) with blockstart %lli, blockend %lli, nBlockHeight %lli, votes %lli, nCountThreshold %lli
CBudgetManager::IsTransactionValid - GetVoteCount() > nCountThreshold passed
CBudgetManager::IsTransactionValid - GetBlockStart() failed, budget is outside current payment cycle and will be ignored.
CBudgetManager::IsTransactionValid - GetBlockStart() passed
CBudgetManager::IsTransactionValid - pfinalizedBudget->IsTransactionValid() passed
CBudgetManager::IsTransactionValid - pfinalizedBudget->IsTransactionValid() error
Written info to budget.dat  %dms
CBudgetManager::GetBudget() - Processing Budget %s
CBudgetManager::GetBudget() -   Check 1 passed: valid=%d | %ld <= %ld | %ld >= %ld | Yeas=%d Nays=%d Count=%d | established=%d
CBudgetManager::GetBudget() -     Check 2 passed: Budget added
CBudgetManager::GetBudget() -     Check 2 failed: no amount allotted
CBudgetManager::GetBudget() -   Check 1 failed: valid=%d | %ld <= %ld | %ld >= %ld | Yeas=%d Nays=%d Count=%d | established=%d
CBudgetManager::SubmitFinalBudget - nSubmittedHeight(=%ld) < nBlockStart(=%ld) condition not fulfilled.
CBudgetManager::SubmitFinalBudget - Too early for finalization. Current block is %ld, next Superblock is %ld.
CBudgetManager::SubmitFinalBudget - First possible block for finalization: %ld. Last possible block for finalization: %ld. You have to wait for %ld block(s) until Budget finalization will be possible
CBudgetManager::SubmitFinalBudget - Found No Proposals For Period
CBudgetManager::SubmitFinalBudget - Budget already exists - %s
CBudgetManager::SubmitFinalBudget - Can't make collateral transaction
NO-ix
CBudgetManager::SubmitFinalBudget - Can't find collateral tx %s
CBudgetManager::SubmitFinalBudget - Collateral requires at least %d confirmations - %s - %d confirmations
CBudgetManager::SubmitFinalBudget - Invalid finalized budget - %s 
CBudgetManager::SubmitFinalBudget - Done! %s
CFinalizedBudget::AutoCheck - %lli - %d
CFinalizedBudget::AutoCheck fMasterNode=%d fAutoChecked=%d
CFinalizedBudget::AutoCheck - waiting
CFinalizedBudget::AutoCheck Budget-Payments - nProp %d %s
CFinalizedBudget::AutoCheck Budget-Payments - Payee %d %s
CFinalizedBudget::AutoCheck Budget-Payments - nAmount %d %lli
CFinalizedBudget::AutoCheck Budget-Proposals - nProp %d %s
CFinalizedBudget::AutoCheck Budget-Proposals - Payee %d %s
CFinalizedBudget::AutoCheck Budget-Proposals - nAmount %d %lli
CFinalizedBudget::AutoCheck - No Budget-Proposals found, aborting
CFinalizedBudget::AutoCheck - Budget-Proposal length (%ld) doesn't match Budget-Payment length (%ld).
CFinalizedBudget::AutoCheck - Finalized Budget Matches! Submitting Vote.
CFinalizedBudget::AutoCheck - Proposal size mismatch, i=%d > (vBudgetProposals.size() - 1)=%d
CFinalizedBudget::AutoCheck - item #%d doesn't match %s %s
CFinalizedBudget::AutoCheck - item #%d payee doesn't match %s %s
CFinalizedBudget::AutoCheck - item #%d payee doesn't match %lli %lli
CBudgetManager::CheckAndRemove at Height=%d
CBudgetManager::CheckAndRemove - mapFinalizedBudgets cleanup - size before: %d
CBudgetManager::CheckAndRemove - mapProposals cleanup - size before: %d
CBudgetManager::CheckAndRemove - Invalid finalized budget: %s
CBudgetManager::CheckAndRemove - Found valid finalized budget: %s %s
CBudgetManager::CheckAndRemove - Invalid budget proposal - %s
CBudgetManager::CheckAndRemove - Found valid budget proposal: %s %s
CBudgetManager::CheckAndRemove - mapFinalizedBudgets cleanup - size after: %d
CBudgetManager::CheckAndRemove - mapProposals cleanup - size after: %d
CBudgetManager::CheckAndRemove - PASSED
CBudgetManager::NewBlock - incremental sync started
CBudgetManager::NewBlock - askedForSourceProposalOrBudget cleanup - size: %d
CBudgetManager::NewBlock - mapProposals cleanup - size: %d
CBudgetManager::NewBlock - mapFinalizedBudgets cleanup - size: %d
CBudgetManager::NewBlock - vecImmatureBudgetProposals cleanup - size: %d
mprop (immature) - invalid budget proposal - %s
mprop (immature) - new budget - %s
CBudgetManager::NewBlock - vecImmatureFinalizedBudgets cleanup - size: %d
fbs (immature) - invalid finalized budget - %s
fbs (immature) - new finalized budget - %s
CBudgetManager::NewBlock - PASSED
mnvs - peer already asked me for the list
mnvs - Sent Masternode votes to peer %i
Proposal FeeTX is not valid - %s - %s
mprop - invalid budget proposal - %s
mprop - new budget - %s
mvote - unknown masternode - vin: %s
CBudgetManager::ProcessMessage() : mvote - signature invalid
mvote - new budget vote for budget %s - %s
fbs - Finalized Budget FeeTX is not valid - %s - %s
fbs - invalid finalized budget - %s
fbs - new finalized budget - %s
fbvote - unknown masternode - vin: %s
CBudgetManager::ProcessMessage() : fbvote - signature from masternode %s invalid
fbvote - new finalized budget vote - %s from masternode %s
fbvote - rejected finalized budget vote - %s from masternode %s - %s
%s : Invalid masternode cache magic message
Loaded info from budget.dat  %dms
Budget manager - cleaning....
Budget manager - result:
Budget object cleared
Verifying budget.dat format...
Missing budgets file - budget.dat, will try to recreate
Writting info to budget.dat...
Budget dump finished  %dms
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
Read
Write
T boost::detail::variant::forced_return() [with T = void]
Votes: 
, Blocks: 
IsBlockValueValid() : WARNING: Couldn't find previous block
mnpayments.dat
MasternodePayments
CMasternodePaymentWinner::SignatureValid() - Got bad Masternode address signature %s
mnpayments
CMasternodePayments::CleanPaymentList - Removing old Masternode payment - block %d
Unknown Masternode %s
CMasternodePaymentWinner::IsValid - %s
Masternode protocol too old %d - req %d
Masternode not in the top %d (%d)
Written info to mnpayments.dat  %dms
Masternode payment is out of drift range. Paid=%s Min=%s
CMasternodePayments::FillBlockPayee
Masternode winning not found for level '%s'
masternodePayment is empty for level '%d'
Masternode payment of %s to %s for level '%s'
CMasternodePayments::IsTransactionValid - Missing required payment to %s
Client not synced, skipping block payee checks
Invalid budget payment detected %s
Budget enforcement is disabled, accepting block
Invalid mn payment detected %s
Masternode payment enforcement is disabled, accepting block
CMasternodePayments::AddWinningMasternode %s
CMasternodePayments::ProcessBlock - Unknown Masternode
CMasternodePayments::ProcessBlock - Masternode not in the top %d (%d)
CMasternodePayments::ProcessBlock() Start nHeight %d - vin %s. 
CMasternodePayments::ProcessBlock() - Error upon calling SetKey: %s
CMasternodePayments::ProcessBlock() Failed to find masternode level '%s' to pay 
CMasternodePayments::ProcessBlock() Winner payee %s nHeight %d level '%s'.
CMasternodePayments::ProcessBlock() - Signing Winner level '%s'
CMasternodePayments::ProcessBlock() - AddWinningMasternode level %d
mnget
CMasternodePayments::ProcessMessageMasternodePayments() : mnget - peer already asked me for the list
mnget - Sent Masternode winners to peer %i
mnw - unknown payee %s
mnw - Already seen - %s bestHeight %d
mnw - winner out of range - FirstBlock %d Height %d bestHeight %d
mnw - invalid message - %s
mnw - masternode already voted - %s
CMasternodePayments::ProcessMessageMasternodePayments() : mnw - invalid signature
%s : Invalid masternode payement cache magic message
Loaded info from mnpayments.dat  %dms
Masternode payments manager - cleaning....
Masternode payments manager - result:
Verifying mnpayments.dat format...
Missing budgets file - mnpayments.dat, will try to recreate
Writting info to mnpayments.dat...
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
getspork
mnwsync
busync
CMasternodeSync::GetNextAsset - Sync has finished
CMasternodeSync:ProcessMessage - ssc - got inventory count %d %d
CMasternodeSync::Process() - tick %d RequestedMasternodeAssets %d
CMasternodeSync::Process() - lastMasternodeList %lld (GetTime() - MASTERNODE_SYNC_TIMEOUT) %lld
CMasternodeSync::Process - ERROR - Sync has failed, will retry later
Synchronization pending...
Synchronizing sporks...
Synchronizing masternodes...
Synchronizing masternode winners...
Synchronizing budgets...
Synchronization failed
Synchronization finished
N5boost10filesystem14basic_ifstreamIcSt11char_traitsIcEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
castOutputIndex
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
%s: %s on getOutputIndex
# Masternode config file
# Format: alias IP:port masternodeprivkey collateral_output_txid collateral_output_index
# Example: mn1 127.0.0.2:40444 93HaYBVUCYjEMeeH1Y4sBGLALQZE1Yc1K64xiqgX37tGBDQL8Xg 2bcd3c84c84f87eaa86e4e56834c92927a07f9e18718810b92e0d0324456a67c 0
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)
Could not parse masternode.conf
Line: %d
Failed to parse host:port string
Invalid port detected in masternode.conf
(must be 40444 for mainnet)
(40444 could be used only on mainnet)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
Read
T boost::detail::variant::forced_return() [with T = void]
Write
@Masternodes: 
, peers who asked us for Masternode list: 
, peers we asked for Masternode list: 
, entries in Masternode list we asked for: 
, nDsqCount: 
mncache.dat
MasternodeCache
CMasternodeMan::AskForMN - Asking node for missing entry, vin: %s
dseg
CMasternodeMan: Adding new Masternode %s - %i now
CMasternodeMan::UpdateMasternodeList: just updated
CMasternodeMan::UpdateMasternodeList() -- masternode=%s
Closing Masternode connection peer=%i 
dseg - we already asked peer %i for the list; skipping...
CMasternodeMan::FindRandomNotInVec - nCountEnabled - vecToExclude.size() %d
CMasternodeMan::FindRandomNotInVec - rand %d
Written info to mncache.dat  %dms
CMasternodeMan: Removing Masternode %s - %i now
CMasternodeMan: Removing inactive Masternode %s - %i now
MN input checking tx: invalid vin amount
CMasternodeMan::ProcessMessage() : mnb - Got mismatched pubkey and vin
mnb - Rejected Masternode entry %s
mnp - Masternode ping, vin: %s
CMasternodeMan::ProcessMessage() : dseg - peer already asked me for the list
dseg - Sending Masternode entry - %s 
dseg - Sent 1 Masternode entry to peer %i
dseg - Sent %d Masternode entries to peer %i
dsee
CMasternodeMan::ProcessMessage() : dsee - Signature rejected, too far into the future %s
CMasternodeMan::ProcessMessage() : dsee - ignoring outdated Masternode %s protocol version %d < %d
CMasternodeMan::ProcessMessage() : dsee - pubkey the wrong size
CMasternodeMan::ProcessMessage() : dsee - pubkey2 the wrong size
CMasternodeMan::ProcessMessage() : dsee - Ignore Not Empty ScriptSig %s
CMasternodeMan::ProcessMessage() : dsee - Got bad Masternode address signature
dsee - Got updated entry for %s
dsee - already seen this vin %s
CMasternodeMan::ProcessMessage() : dsee - Got mismatched pubkey and vin
dsee - Got NEW OLD Masternode entry %s
CMasternodeMan::ProcessMessage() : dsee - Input must have least %d confirmations
mnb - Bad sigTime %d for Masternode %s (%i conf block is at %d)
dsee - Accepted OLD Masternode entry %i %i
dsee - Rejected Masternode entry %s
dsee - %s from %i %s was not accepted into the memory pool
dseep
CMasternodeMan::ProcessMessage() : dseep - Signature rejected, too far into the future %s
CMasternodeMan::ProcessMessage() : dseep - Signature rejected, too far into the past %s - %d %d 
dseep - Got bad Masternode address signature %s 
dseep - relaying %s 
dseep - Couldn't find Masternode entry %s peer=%i
Skipping Masternode with obsolete version %d
Skipping just activated Masternode. Age: %ld
Loaded info from mncache.dat  %dms
Masternode manager - cleaning....
Masternode manager - result:
Verifying mncache.dat format...
Writting info to mncache.dat...
Masternode dump finished  %dms
%O:%M:%S%F
%Y-%b-%d %H:%M:%S%F %ZP
%Y-%m-%d %H:%M:%S%F%Q
%Y%m%dT%H%M%S%F%q
maximum-date-time
minimum-date-time
+infinity
-infinity
not-a-date-time
after
before
last
fifth
fourth
third
second
first
%Y-%m-%d
%Y%m%d
N5boost9gregorian11bad_weekdayE
N5boost9gregorian15bad_day_of_yearE
N5boost16bad_lexical_castE
N5boost9date_time16date_input_facetINS_9gregorian4dateEcSt19istreambuf_iteratorIcSt11char_traitsIcEEEE
N5boost9date_time16time_input_facetINS_10posix_time5ptimeEcSt19istreambuf_iteratorIcSt11char_traitsIcEEEE
NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
N5boost16exception_detail19error_info_injectorINS_9gregorian11bad_weekdayEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian11bad_weekdayEEEEE
N5boost16exception_detail19error_info_injectorINS_9gregorian15bad_day_of_yearEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_9gregorian15bad_day_of_yearEEEEE
N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE
N5boost16exception_detail19error_info_injectorINSt8ios_base7failureB5cxx11EEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINSt8ios_base7failureB5cxx11EEEEE
0123456789abcdeftypename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::destroy_back_n(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type, const false_type&) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int; boost::false_type = boost::integral_constant<bool, false>]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
UniValue importprivkey(const UniValue&, bool)
UniValue bip38decrypt(const UniValue&, bool)
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>&]
UniValue importwallet(const UniValue&, bool)
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
bad lexical cast: source type value could not be interpreted as target
Parse failed. No match found for '
Weekday is out of range 0..6
Day of year value is out of range 1..366
dumpprivkey "giantaddress"
Reveals the private key corresponding to 'giantaddress'.
Then the importprivkey can be used with this output
Arguments:
1. "giantaddress"   (string, required) The giant address for the private key
Result:
"key"                (string) The private key
Examples:
"myaddress"
"mykey"
Address does not refer to a key
Private key for address 
 is not known
bip38encrypt "giantaddress" "passphrase"
Encrypts a private key corresponding to 'giantaddress'.
Arguments:
1. "giantaddress"   (string, required) The giant address for the private key (you must hold the key already)
2. "passphrase"   (string, required) The passphrase you want the private key to be encrypted with - Valid special chars: !#$%&'()*+,-./:;<=>?`{|}~ 
Result:
"key"                (string) The encrypted private key
Examples:
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" "mypasphrase"
Addess
Encrypted Key
importaddress "address" ( "label" rescan )
Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.
Arguments:
1. "address"          (string, required) The address
2. "label"            (string, optional, default="") An optional label
3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions
Note: This call can take minutes to complete if rescan is true.
Examples:
Import an address with rescan
Import using a label without rescan
"myaddress" "testing" false
As a JSON-RPC call
"myaddress", "testing", false
Invalid GIANT address or script
The wallet already contains the private key for this address or script
Error adding address to wallet
importprivkey "giantprivkey" ( "label" rescan )
Adds a private key (as returned by dumpprivkey) to your wallet.
Arguments:
1. "giantprivkey"   (string, required) The private key (see dumpprivkey)
2. "label"            (string, optional, default="") An optional label
3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions
Note: This call can take minutes to complete if rescan is true.
Examples:
Dump a private key
Import the private key with rescan
Import using a label and without rescan
"mykey" "testing" false
"mykey", "testing", false
Invalid private key encoding
wallet/rpcdump.cpp
key.VerifyPubKey(pubkey)
Error adding key to wallet
bip38decrypt "giantaddress" "passphrase"
Decrypts and then imports password protected private key.
Arguments:
1. "encryptedkey"   (string, required) The encrypted private key
2. "passphrase"   (string, required) The passphrase you want the private key to be encrypted with
Result:
"key"                (string) The decrypted private key
Examples:
"encryptedkey" "mypassphrase"
Failed To Decrypt
privatekey
Private Key Not Valid
Address
Key already held by wallet
label=
importwallet "filename"
Imports keys from a wallet dump file (see dumpwallet).
Arguments:
1. "filename"    (string, required) The wallet file
Examples:
Dump the wallet
"test"
Import the wallet
Import using the json rpc call
Cannot open wallet dump file
Importing...
Skipping import of %s (key already present)
%Y-%m-%dT%H:%M:%SZ
change=1
reserve=1
Importing %s...
Rescanning last %i blocks
Error adding some keys to wallet
dumpwallet "filename"
Dumps all wallet keys in a human-readable format.
Arguments:
1. "filename"    (string, required) The filename
Examples:
# Wallet dump created by GIANT %s (%s)
# * Created on %s
# * Best block at time of backup was %i (%s),
#   mined on %s
%s %s label=%s # addr=%s
%s %s reserve=1 # addr=%s
%s %s change=1 # addr=%s
# End of dump
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
void boost::shared_mutex::state_data::assert_locked() const
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_one()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::condition_variable::notify_all()
void boost::shared_mutex::state_data::assert_lock_shared() const
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::detail::interruption_checker::~interruption_checker()
boost::condition_variable::condition_variable()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
SearchThread
T boost::detail::variant::forced_return() [with T = void]
T boost::detail::variant::forced_return() [with T = bool]
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
N5boost6detail11thread_dataINS_3_bi6bind_tIvPFvP11CzGICWalletiiENS2_5list3INS2_5valueIS5_EENS9_IiEESB_EEEEEE
N5boost3_bi6bind_tIvPFvP7CWalletENS0_5list1INS0_5valueIS3_EEEEEE
N5boost6detail17sp_counted_impl_pINS0_11thread_dataINS_3_bi6bind_tIvPFvP11CzGICWalletiiENS3_5list3INS3_5valueIS6_EENSA_IiEESC_EEEEEEEE
fromaccount
timesmart
basic_string::_M_replace
getunconfirmedbalance
Returns the server's total unconfirmed balance
Error: Please enter the wallet passphrase with walletpassphrase first.
0.00001
settxfee amount
Set the transaction fee per kB.
Arguments:
1. amount         (numeric, required) The transaction fee in GIC/kB rounded to the nearest 0.00000001
Result
true|false        (boolean) Returns true if successful
Examples:
getstakesplitthreshold
Returns the threshold for stake splitting
Result:
n      (numeric) Threshold value
Examples:
Requires wallet passphrase to be set with walletpassphrase call.
createautomintaddress
Generates new auto mint address
Result
"address"     (string) GIANT address for auto minting
listspentzerocoins
List all the spent zGIC mints in the wallet.
Result:
  "xxx"      (string) Pubcoin in hex format.
  ,...
Examples:
Invalid account name
"backup.dat"
backupwallet "destination"
Safely copies wallet.dat to destination, which can be a directory or a path with filename.
Arguments:
1. "destination"   (string) The destination directory or file
Examples:
Error: Wallet backup failed!
keypoolrefill ( newsize )
Fills the keypool.
Arguments
1. newsize     (numeric, optional, default=100) The new keypool size
Examples:
Invalid parameter, expected valid size.
Error refreshing keypool.
"my pass phrase" 120
walletlock
Removes the wallet encryption key from memory, locking the wallet.
After calling this method, you will need to call walletpassphrase again
before being able to call any methods which require the wallet to be unlocked.
Examples:
Set the passphrase for 2 minutes to perform a transaction
Perform a send (requires passphrase set)
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 1.0
Clear the passphrase since we are done before 2 minutes is up
As json rpc call
Error: running with an unencrypted wallet, but walletlock was called.
true 500
autocombinerewards enable ( threshold )
Wallet will automatically monitor for any coins with value below the threshold amount, and combine them if they reside with the same GIANT address
When autocombinerewards runs it will create a transaction, and therefore will be subject to transaction fees.
Arguments:
1. enable          (boolean, required) Enable auto combine (true) or disable (false)
2. threshold       (numeric, optional) Threshold amount (default: 0)
Examples:
Changed settings in wallet but failed to save to database
enableautomintaddress enable
Enables or disables automint address functionality
Arguments
1. enable     (boolean, required) Enable or disable automint address functionality
Examples
signmessage "giantaddress" "message"
Sign a message with the private key of an address
Arguments:
1. "giantaddress"  (string, required) The giant address to use for the private key.
2. "message"         (string, required) The message to create a signature of.
Result:
"signature"          (string) The signature of the message encoded in base 64
Examples:
Unlock the wallet for 30 seconds
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" "my message"
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" "signature" "my message"
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6", "my message"
Private key not available
Sign failed
"my pass phrase" 60
walletpassphrase "passphrase" timeout ( anonymizeonly )
Stores the wallet decryption key in memory for 'timeout' seconds.
This is needed prior to performing transactions related to private keys such as sending GICs
Arguments:
1. "passphrase"     (string, required) The wallet passphrase
2. timeout            (numeric, required) The time to keep the decryption key in seconds.
3. anonymizeonly      (boolean, optional, default=false) If is true sending functions are disabled.
Note:
Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock
time that overrides the old one. A timeout of "0" unlocks until the wallet is closed.
Examples:
Unlock the wallet for 60 seconds
Unlock the wallet for 60 seconds but allow anonymization, automint, and staking only
"my pass phrase" 60 true
Lock the wallet again (before 60 seconds)
"my pass phrase", 60
Error: running with an unencrypted wallet, but walletpassphrase was called.
Error: Wallet is already unlocked.
Timeout cannot be negative.
Error: The wallet passphrase entered was incorrect.
lockwallet
"old one" "new one"
walletpassphrasechange "oldpassphrase" "newpassphrase"
Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.
Arguments:
1. "oldpassphrase"      (string) The current passphrase
2. "newpassphrase"      (string) The new passphrase
Examples:
"old one", "new one"
Error: running with an unencrypted wallet, but walletpassphrasechange was called.
walletpassphrasechange <oldpassphrase> <newpassphrase>
Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.
SearchThread() exception
getzerocoinbalance
Return the wallet's total zGIC balance.
Result:
amount         (numeric) Total zGIC balance.
Examples:
Total
Mature
Unconfirmed
Immature
resetmintzerocoin ( fullscan )
Scan the blockchain for all of the zerocoins that are held in the wallet.dat.
Update any meta-data that is incorrect. Archive any mints that are not able to be found.
Arguments:
1. fullscan          (boolean, optional) Rescan each block of the blockchain.
                               WARNING - may take 30+ minutes!
Result:
  "updated": [       (array) JSON array of updated mints.
    "xxx"            (string) Hex encoded mint.
    ,...
  ],
  "archived": [      (array) JSON array of archived mints.
    "xxx"            (string) Hex encoded mint.
    ,...
Examples:
updated
archived
setzgicseed "seed"
Set the wallet's deterministic zgic seed to a specific value.
Arguments:
1. "seed"        (string, required) The deterministic zgic seed.
Result
"success" : b,  (boolean) Whether the seed was successfully set.
Examples
63f793e7895dd30d99187b35fbfb314a5f91af0add9e0a4e5877036d1e392dd5
true 5000
reservebalance ( reserve amount )
Show or set the reserve amount not participating in network protection
If no parameters provided current setting is printed.
Arguments:
1. reserve     (boolean, optional) is true or false to turn balance reserve on or off.
2. amount      (numeric, optional) is a real and rounded to cent.
Result:
  "reserve": true|false,     (boolean) Status of the reserve balance
  "amount": x.xxxx       (numeric) Amount reserved
Examples:
must provide amount to reserve balance.
amount cannot be negative.
cannot specify amount to turn off reserve.
getzgicseed
Check archived zGIC list to see if any mints were added to the blockchain.
Result
"seed" : s,  (string) The deterministic zGIC seed.
Examples
resetspentzerocoin
Scan the blockchain for all of the zerocoins that are held in the wallet.dat.
Reset mints that are considered spent that did not make it into the blockchain.
Result:
  "restored": [        (array) JSON array of restored objects.
    {
      "serial": "xxx"  (string) Serial in hex format.
    }
    ,...
Examples:
restored
dzgicstate
The current state of the mintpool of the deterministic zGIC wallet.
mintpoolstatus
dzgic_count
mintpool_count
MultiSendStake Activated?
MultiSendMasternode Activated?
Disabled From Sending
MultiSend Addresses to Send To:
Address 
Percent
generatemintlist
Show mints that are derived from the deterministic zGIC seed.
Arguments
1. "count"  : n,  (numeric) Which sequential zGIC to start with.
2. "range"  : n,  (numeric) How many zGIC to generate.
Result:
    "count": n,          (numeric) Deterministic Count.
    "value": "xxx",    (string) Hex encoded pubcoin value.
    "randomness": "xxx",   (string) Hex encoded randomness.
    "serial": "xxx"        (string) Hex encoded Serial.
  ,...
Examples
1, 100
randomness
listmintedzerocoins (fVerbose) (fMatureOnly)
List all zGIC mints in the wallet.
Arguments:
1. fVerbose      (boolean, optional, default=false) Output mints metadata.
2. fMatureOnly      (boolean, optional, default=false) List only mature mints. (Set only if fVerbose is specified)
Result (with fVerbose=false):
  "xxx"      (string) Pubcoin in hex format.
  ,...
Result (with fVerbose=true):
    "serial hash": "xxx",   (string) Mint serial hash in hex format.
    "version": n,   (numeric) Zerocoin version number.
    "zGIC ID": "xxx",   (string) Pubcoin in hex format.
    "denomination": n,   (numeric) Coin denomination.
    "mint height": n     (numeric) Height of the block containing this mint.
    "confirmations": n   (numeric) Number of confirmations.
    "hash stake": "xxx",   (string) Mint serialstake hash in hex format.
  ,...]
Examples:
true true
true, true
zGIC ID
mint height
hash stake
exportzerocoins include_spent ( denomination )
Exports zerocoin mints that are held by this wallet.dat
Arguments:
1. "include_spent"        (bool, required) Include mints that have already been spent
2. "denomination"         (integer, optional) Export a specific denomination of zGIC
Result:
[                   (array of json object)
    "id": "serial hash",  (string) the mint's zGIC serial hash 
    "d": n,         (numeric) the mint's zerocoin denomination 
    "p": "pubcoin", (string) The public coin
    "s": "serial",  (string) The secret serial number
    "r": "random",  (string) The secret random number
    "t": "txid",    (string) The txid that the coin was minted in
    "h": n,         (numeric) The height the tx was added to the blockchain
    "u": used,      (boolean) Whether the mint has been spent
    "v": version,   (numeric) The version of the zGIC
    "k": "privkey"  (string) The zGIC private key (V2+ zGIC only)
  ,...
Examples:
false 5
getwalletinfo
Returns an object containing various wallet state info.
Result:
  "walletversion": xxxxx,     (numeric) the wallet version
  "balance": xxxxxxx,         (numeric) the total GIC balance of the wallet
  "unconfirmed_balance": xxx, (numeric) the total unconfirmed balance of the wallet in GIC
  "immature_balance": xxxxxx, (numeric) the total immature balance of the wallet in GIC
  "txcount": xxxxxxx,         (numeric) the total number of transactions in the wallet
  "keypoololdest": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool
  "keypoolsize": xxxx,        (numeric) how many new keys are pre-generated
  "unlocked_until": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked
  "paytxfee": x.xxxx,         (numeric) the transaction fee configuration, set in GIC/kB
  "automintaddresses": status (boolean) the status of automint addresses (true if enabled, false if disabled)
Examples:
unconfirmed_balance
immature_balance
automintaddresses
listzerocoinamounts
Get information about your zerocoin amounts.
Result:
    "denomination": n,   (numeric) Denomination Value.
    "mints": n           (numeric) Number of mints.
  ,...]
Examples:
listlockunspent
Returns list of temporarily unspendable outputs.
See the lockunspent call to lock and unlock transactions for spending.
Result:
    "txid" : "transactionid",     (string) The transaction id locked
    "vout" : n                      (numeric) The vout value
  ,...
Examples:
List the unspent transactions
Lock an unspent transaction
false "[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]"
List the locked transactions
Unlock the transaction again
true "[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]"
clearspendcache
Clear the pre-computed zGIC spend cache, and database.
precomputes.dat
Successfully Cleared the Precompute Spend Cache and Database
Error: Spend cache not cleared!
searchdzgic
Make an extended search for deterministically generated zGIC that have not yet been recognized by the wallet.
Arguments
1. "count"       (numeric) Which sequential zGIC to start with.
2. "range"       (numeric) How many zGIC to generate.
3. "threads"     (numeric) How many threads should this operation consume.
Examples
1, 100, 2
Count cannot be less than 0
Range has to be at least 1
done
"my pass phrase"
encryptwallet "passphrase"
Encrypts the wallet with 'passphrase'. This is for first time encryption.
After this, any calls that interact with private keys such as sending or signing 
will require the passphrase to be set prior the making these calls.
Use the walletpassphrase call for this, and then walletlock call.
If the wallet is already encrypted, use the walletpassphrasechange call.
Note that this will shutdown the server.
Arguments:
1. "passphrase"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.
Examples:
Encrypt you wallet
Now set the passphrase to use the wallet, such as for signing or sending GICs
Now we can so something like sign
"giantaddress" "test message"
Now lock the wallet again by removing the passphrase
Error: running with an encrypted wallet, but encryptwallet was called.
encryptwallet <passphrase>
Encrypts the wallet with <passphrase>.
Error: Failed to encrypt the wallet.
wallet encrypted; giant server stopping, restart to run with encrypted wallet. The keypool has been flushed, you need to make a new backup.
reconsiderzerocoins
Check archived zGIC list to see if any mints were added to the blockchain.
Result:
    "txid" : "xxx",           (string) the mint's zerocoin denomination 
    "denomination" : amount,  (numeric) the mint's zerocoin denomination
    "pubcoin" : "xxx",        (string) The mint's public identifier
    "height" : n              (numeric) The height the tx was added to the blockchain
  ,...
Examples
pubcoin
pubcoinhash
getarchivedzerocoin
Display zerocoins that were archived because they were believed to be orphans.
Provides enough information to recover mint if it was incorrectly archived.
Result:
    "txid": "xxx",           (string) Transaction ID for archived mint.
    "denomination": amount,  (numeric) Denomination value.
    "serial": "xxx",         (string) Serial number in hex format.
    "randomness": "xxx",     (string) Hex encoded randomness.
    "pubcoin": "xxx"         (string) Pubcoin in hex format.
  ,...
Examples:
serialhash
seedhash
category
otheraccount
comment
setstakesplitthreshold value
This will set the output size of your stakes to never be below this number
Arguments:
1. value   (numeric, required) Threshold value between 1 and 999999
Result:
  "threshold": n,    (numeric) Threshold value set
  "saved": true|false    (boolean) 'true' if successfully saved to the wallet file
Examples:
5000
Value out of range, max allowed is 999999
threshold
saved
Insufficient funds
Error: Wallet locked, unable to create transaction!
SendMoney() : %s
Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!
SendMoney() : %s
Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.
"tabby"
getaddressesbyaccount "account"
Returns the list of addresses for the given account.
Arguments:
1. "account"  (string, required) The account name.
Result:
[                     (json array of string)
  "giantaddress"  (string) a giant address associated with the given account
  ,...
Examples:
importzerocoins importdata 
[{"d":denomination,"p":"pubcoin_hex","s":"serial_hex","r":"randomness_hex","t":"txid","h":height, "u":used},{"d":...}]
Import zerocoin mints.
Adds raw zerocoin mints to the wallet.dat
Note it is recommended to use the json export created from the exportzerocoins RPC call
Arguments:
1. "importdata"    (string, required) A json array of json objects containing zerocoin mints
Result:
  "added": n,        (numeric) The quantity of zerocoin mints that were added
  "value": amount    (numeric) The total zGIC value of zerocoin mints that were added
Examples
'[{"d":100,"p":"mypubcoin","s":"myserial","r":"randomness_hex","t":"mytxid","h":104923, "u":false},{"d":5,...}]'
[{"d":100,"p":"mypubcoin","s":"myserial","r":"randomness_hex","t":"mytxid","h":104923, "u":false},{"d":5,...}]
Invalid parameter, missing d key
Invalid parameter, d must be positive
Invalid parameter, h must be positive
privkey is not valid
added
bcconfirmations
generated
blockindex
walletconflicts
timereceived
%s: start=%d end=%d
getnewaddress ( "account" )
Returns a new GIANT address for receiving payments.
If 'account' is specified (recommended), it is added to the address book 
so payments received with the address will be credited to 'account'.
Arguments:
1. "account"        (string, optional) The account name for the address to be linked to. if not provided, the default account "" is used. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.
Result:
"giantaddress"    (string) The new giant address
Examples:
"myaccount"
Error: Keypool ran out, please call keypoolrefill first
getaccountaddress "account"
Returns the current GIANT address for receiving payments to this account.
Arguments:
1. "account"       (string, required) The account name for the address. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.
Result:
"giantaddress"   (string) The account giant address
Examples:
getrawchangeaddress
Returns a new GIANT address, for receiving change.
This is for use with raw transactions, NOT normal use.
Result:
"address"    (string) The address
Examples:
sendtoaddress "giantaddress" amount ( "comment" "comment-to" )
Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001
Arguments:
1. "giantaddress"  (string, required) The giant address to send to.
2. "amount"      (numeric, required) The amount in GIC to send. eg 0.1
3. "comment"     (string, optional) A comment used to store what the transaction is for. 
                             This is not part of the transaction, just kept in your wallet.
4. "comment-to"  (string, optional) A comment to store the name of the person or organization 
                             to which you're sending the transaction. This is not part of the 
                             transaction, just kept in your wallet.
Result:
"transactionid"  (string) The transaction id.
Examples:
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 0.1
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 0.1 "donation" "seans outpost"
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6", 0.1, "donation", "seans outpost"
sendtoaddressix "giantaddress" amount ( "comment" "comment-to" )
Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001
getreceivedbyaddress "giantaddress" ( minconf )
Returns the total amount received by the given giantaddress in transactions with at least minconf confirmations.
Arguments:
1. "giantaddress"  (string, required) The giant address for transactions.
2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.
Result:
amount   (numeric) The total amount in GIC received at this address.
Examples:
The amount from transactions with at least 1 confirmation
The amount including unconfirmed transactions, zero confirmations
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 0
The amount with at least 6 confirmation, very safe
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 6
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6", 6
Address not found in wallet
sendfrom "fromaccount" "togiantaddress" amount ( minconf "comment" "comment-to" )
Sent an amount from an account to a giant address.
The amount is a real and is rounded to the nearest 0.00000001.
Arguments:
1. "fromaccount"       (string, required) The name of the account to send funds from. May be the default account using "".
2. "togiantaddress"  (string, required) The giant address to send funds to.
3. amount                (numeric, required) The amount in GIC. (transaction fee is added on top).
4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.
5. "comment"           (string, optional) A comment used to store what the transaction is for. 
                                     This is not part of the transaction, just kept in your wallet.
6. "comment-to"        (string, optional) An optional comment to store the name of the person or organization 
                                     to which you're sending the transaction. This is not part of the transaction, 
                                     it is just kept in your wallet.
Result:
"transactionid"        (string) The transaction id.
Examples:
Send 0.01 GIC from the default account to the address, must have at least 1 confirmation
"" "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 0.01
Send 0.01 from the tabby account to the given address, funds must have at least 6 confirmations
"tabby" "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" 0.01 6 "donation" "seans outpost"
"tabby", "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6", 0.01, 6, "donation", "seans outpost"
Account has insufficient funds
2 "[\"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6\",\"DAD3Y6ivr8nPQLT1NEPX84DxGCw9jz9Jvg\"]"
addmultisigaddress nrequired ["key",...] ( "account" )
Add a nrequired-to-sign multisignature address to the wallet.
Each key is a GIANT address or hex-encoded public key.
If 'account' is specified, assign address to that account.
Arguments:
1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.
2. "keysobject"   (string, required) A json array of giant addresses or hex-encoded public keys
     [
       "address"  (string) giant address or hex-encoded public key
       ...,
     ]
3. "account"      (string, optional) An account to assign the addresses to.
Result:
"giantaddress"  (string) A giant address associated with the keys.
Examples:
Add a multisig address from 2 addresses
2, "[\"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6\",\"DAD3Y6ivr8nPQLT1NEPX84DxGCw9jz9Jvg\"]"
send
acc_checksum
zerocoinmint
duration_millis
outputs
spendzerocoin amount mintchange minimizechange ( "address" )
Spend zGIC to a GIC address.
Arguments:
1. amount          (numeric, required) Amount to spend.
2. mintchange      (boolean, required) Re-mint any leftover change.
3. minimizechange  (boolean, required) Try to minimize the returning change  [false]
4. "address"     (string, optional, default=change) Send to specified address or to a new change address.
                       If there is change then an address is required
Result:
  "txid": "xxx",             (string) Transaction hash.
  "bytes": nnn,              (numeric) Transaction size.
  "fee": amount,             (numeric) Transaction fee (if any).
  "spends": [                (array) JSON array of input objects.
    {
      "denomination": nnn,   (numeric) Denomination value.
      "pubcoin": "xxx",      (string) Pubcoin in hex format.
      "serial": "xxx",       (string) Serial number in hex format.
      "acc_checksum": "xxx", (string) Accumulator checksum in hex format.
    }
    ,...
  ],
  "outputs": [                 (array) JSON array of output objects.
    {
      "value": amount,         (numeric) Value in GIC.
      "address": "xxx"         (string) GIC address or "zerocoinmint" for reminted change.
    }
    ,...
Examples
5000 false true "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6"
"f80892e78c30a393ef4ab4d5a9d5a2989de6ebc7b976b241948c7f489ad716a2" "a4fd4d7248e6a51f1d877ddd2a4965996154acc6b8de5aa6c83d4775b283b600" 100 "xxx"
spendrawzerocoin "serialHex" denom "randomnessHex" ["address"]
Create and broadcast a TX spending the provided zericoin.
Arguments:
1. "serialHex"        (string, required) A zerocoin serial number (hex)
2. "randomnessHex"    (string, required) A zerocoin randomness value (hex)
3. denom                (numeric, required) A zerocoin denomination (decimal)
4. "priv key"         (string, required) The private key associated with this coin (hex)
5. "address"          (string, optional) GIANT address to spend to. If not specified, spend to change add.
Result:
"txid"             (string) The transaction txid in hex
Examples
"f80892e78c30a393ef4ab4d5a9d5a2989de6ebc7b976b241948c7f489ad716a2", "a4fd4d7248e6a51f1d877ddd2a4965996154acc6b8de5aa6c83d4775b283b600", 100, "xxx"
spendzerocoinmints mints_list ("address") 
Spend zGIC mints to a GIC address.
Arguments:
1. mints_list     (string, required) A json array of zerocoin mints serial hashes
2. "address"     (string, optional, default=change) Send to specified address or to a new change address.
Result:
  "txid": "xxx",             (string) Transaction hash.
  "bytes": nnn,              (numeric) Transaction size.
  "fee": amount,             (numeric) Transaction fee (if any).
  "spends": [                (array) JSON array of input objects.
    {
      "denomination": nnn,   (numeric) Denomination value.
      "pubcoin": "xxx",      (string) Pubcoin in hex format.
      "serial": "xxx",       (string) Serial number in hex format.
      "acc_checksum": "xxx", (string) Accumulator checksum in hex format.
    }
    ,...
  ],
  "outputs": [                 (array) JSON array of output objects.
    {
      "value": amount,         (numeric) Value in GIC.
      "address": "xxx"         (string) GIC address or "zerocoinmint" for reminted change.
    }
    ,...
Examples
'["0d8c16eee7737e3cc1e4e70dc006634182b175e039700931283b202715a0818f", "dfe585659e265e6a509d93effb906d3d2a0ac2fe3464b2c3b6d71a3ef34c8ad7"]' "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6"
["0d8c16eee7737e3cc1e4e70dc006634182b175e039700931283b202715a0818f", "dfe585659e265e6a509d93effb906d3d2a0ac2fe3464b2c3b6d71a3ef34c8ad7"], "DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6"
No zerocoin selected
Too many mints included. Maximum zerocoins per spend: 7
Balance 
print
printaddress
printaddresses
clear
Erased from database
Erased from RAM
enablestake
activatestake
enablemasternode
Unable to activate MultiSend, check MultiSend vector
MultiSend activated but writing settings to DB failed
activatemasternode
disable
deactivate
enableall
MultiSend deactivated but writing settings to DB failed
failed to clear old vector from walletDB
delete
failed to delete old MultiSend vector from database
walletdb WriteMultiSend failed!
address you want to disable is not valid
disabled address from sending, but failed to clear old vector from walletDB
disabled address from sending, but failed to store it to walletDB
Invalid GIC address
Invalid parameter, expected valid percentage
Sending 0% of stake is not valid
Failed to add to MultiSend vector, the sum of your MultiSend is greater than 100%
Failed to add to MultiSend vector, cannot use the same address twice
multisend <command>
****************************************************************
WHAT IS MULTISEND?
MultiSend allows a user to automatically send a percent of their stake reward to as many addresses as you would like
The MultiSend transaction is sent when the staked coins mature (100 confirmations)
****************************************************************
TO CREATE OR ADD TO THE MULTISEND VECTOR:
multisend <GIANT Address> <percent>
This will add a new address to the MultiSend vector
Percent is a whole number 1 to 100.
****************************************************************
MULTISEND COMMANDS (usage: multisend <command>)
 print - displays the current MultiSend vector 
 clear - deletes the current MultiSend vector 
 enablestake/activatestake - activates the current MultiSend vector to be activated on stake rewards
 enablemasternode/activatemasternode - activates the current MultiSend vector to be activated on masternode rewards
 disable/deactivate - disables the current MultiSend vector 
 delete <Address #> - deletes an address from the MultiSend vector 
 disable <address> - prevents a specific address from sending MultiSend transactions
 enableall - enables all addresses to be eligible to send MultiSend transactions
****************************************************************
involvesWatchonly
txids
listreceivedbyaddress ( minconf includeempty includeWatchonly)
List balances by receiving address.
Arguments:
1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.
2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.
3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').
Result:
    "involvesWatchonly" : "true",    (bool) Only returned if imported addresses were involved in transaction
    "address" : "receivingaddress",  (string) The receiving address
    "account" : "accountname",       (string) The account of the receiving address. The default account is "".
    "amount" : x.xxx,                  (numeric) The total amount in GIC received by the address
    "confirmations" : n                (numeric) The number of confirmations of the most recent transaction included
    "bcconfirmations" : n              (numeric) The number of blockchain confirmations of the most recent transaction included
  ,...
Examples:
6 true
6, true, true
listreceivedbyaccount ( minconf includeempty includeWatchonly)
List balances by account.
Arguments:
1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.
2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.
3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').
Result:
    "involvesWatchonly" : "true",    (bool) Only returned if imported addresses were involved in transaction
    "account" : "accountname",  (string) The account name of the receiving account
    "amount" : x.xxx,             (numeric) The total amount received by addresses with this account
    "confirmations" : n           (numeric) The number of confirmations of the most recent transaction included
    "bcconfirmations" : n         (numeric) The number of blockchain confirmations of the most recent transaction included
  ,...
Examples:
sendmany "fromaccount" {"address":amount,...} ( minconf "comment" )
Send multiple times. Amounts are double-precision floating point numbers.
Arguments:
1. "fromaccount"         (string, required) The account to send the funds from, can be "" for the default account
2. "amounts"             (string, required) A json object with addresses and amounts
    {
      "address":amount   (numeric) The giant address is the key, the numeric amount in GIC is the value
      ,...
    }
3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.
4. "comment"             (string, optional) A comment
Result:
"transactionid"          (string) The transaction id for the send. Only 1 transaction is created regardless of 
                                    the number of addresses.
Examples:
Send two amounts to two different addresses:
"tabby" "{\"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6\":0.01,\"DAD3Y6ivr8nPQLT1NEPX84DxGCw9jz9Jvg\":0.02}"
Send two amounts to two different addresses setting the confirmation and comment:
"tabby" "{\"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6\":0.01,\"DAD3Y6ivr8nPQLT1NEPX84DxGCw9jz9Jvg\":0.02}" 6 "testing"
"tabby", "{\"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6\":0.01,\"DAD3Y6ivr8nPQLT1NEPX84DxGCw9jz9Jvg\":0.02}", 6, "testing"
Transaction commit failed
getbalance ( "account" minconf includeWatchonly )
If account is not specified, returns the server's total available balance (excluding zerocoins).
If account is specified, returns the balance in the account.
Note that the account "" is not the same as leaving the parameter out.
The server total may be different to the balance in the default "" account.
Arguments:
1. "account"      (string, optional) The selected account, or "*" for entire wallet. It may be the default account using "".
2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.
3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')
Result:
amount              (numeric) The total amount in GIC received for this account.
Examples:
The total amount in the server across all accounts
The total amount in the server across all accounts, with at least 5 confirmations
"*" 6
The total amount in the default account with at least 1 confirmation
The total amount in the account named tabby with at least 6 confirmations
"tabby" 6
"tabby", 6
lockunspent unlock [{"txid":"txid","vout":n},...]
Updates list of temporarily unspendable outputs.
Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.
A locked transaction output will not be chosen by automatic coin selection, when spending GICs.
Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list
is always cleared (by virtue of process exit) when a node stops or fails.
Also see the listunspent call
Arguments:
1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions
2. "transactions"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)
     [           (json array of json objects)
       {
         "txid":"id",    (string) The transaction id
         "vout": n         (numeric) The output number
       }
       ,...
     ]
Result:
true|false    (boolean) Whether the command was successful or not
Examples:
List the unspent transactions
false, "[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]"
Invalid parameter, expected object
Invalid parameter, expected hex txid
mintzerocoin amount ( utxos )
Mint the specified zGIC amount
Arguments:
1. amount      (numeric, required) Enter an amount of GIC to convert to zGIC
2. utxos       (string, optional) A json array of objects.
                   Each object needs the txid (string) and vout (numeric)
    {
      "txid":"txid",    (string) The transaction id
      "vout": n         (numeric) The output number
    }
    ,...
Result:
    "txid": "xxx",         (string) Transaction ID.
    "value": amount,       (numeric) Minted amount.
    "pubcoin": "xxx",      (string) Pubcoin in hex format.
    "randomness": "xxx",   (string) Hex encoded randomness.
    "serial": "xxx",       (string) Serial in hex format.
    "time": nnn            (numeric) Time to mint this transaction.
  ,...
Examples:
Mint 50 from anywhere
Mint 13 from a specific output
13 "[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]"
13, "[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]"
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6" "tabby"
setaccount "giantaddress" "account"
Sets the account associated with the given address.
Arguments:
1. "giantaddress"  (string, required) The giant address to be associated with an account.
2. "account"         (string, required) The account to assign the address to.
Examples:
"DMJRSsuU9zfyrvxVaAEFQqK4MxZg6vgeS6", "tabby"
setaccount can only be used with own address
getaccount "giantaddress"
Returns the account associated with the given address.
Arguments:
1. "giantaddress"  (string, required) The giant address for account lookup.
Result:
"accountname"        (string) the account address
Examples:
getreceivedbyaccount "account" ( minconf )
Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.
Arguments:
1. "account"      (string, required) The selected account, may be the default account using "".
2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.
Result:
amount              (numeric) The total amount in GIC received for this account.
Examples:
Amount received by the default account with at least 1 confirmation
Amount received at the tabby account including unconfirmed amounts with zero confirmations
"tabby" 0
darksent
orphan
immature
listtransactions ( "account" count from includeWatchonly)
Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.
Arguments:
1. "account"    (string, optional) The account name. If not included, it will list all transactions for all accounts.
                                     If "" is set, it will list transactions for the default account.
2. count          (numeric, optional, default=10) The number of transactions to return
3. from           (numeric, optional, default=0) The number of transactions to skip
4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')
Result:
    "account":"accountname",       (string) The account name associated with the transaction. 
                                                It will be "" for the default account.
    "address":"giantaddress",    (string) The giant address of the transaction. Not present for 
                                                move transactions (category = move).
    "category":"send|receive|move", (string) The transaction category. 'move' is a local (off blockchain)
                                                transaction between accounts, and not associated with an address,
                                                transaction id or block. 'send' and 'receive' transactions are 
                                                associated with an address, transaction id and block details
    "amount": x.xxx,          (numeric) The amount in GIC. This is negative for the 'send' category, and for the
                                         'move' category for moves outbound. It is positive for the 'receive' category,
                                         and for the 'move' category for inbound funds.
    "vout" : n,               (numeric) the vout value
    "fee": x.xxx,             (numeric) The amount of the fee in GIC. This is negative and only available for the 
                                         'send' category of transactions.
    "confirmations": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 
                                         'receive' category of transactions.
    "bcconfirmations": n,     (numeric) The number of blockchain confirmations for the transaction. Available for 'send'
                                          and 'receive' category of transactions.
    "blockhash": "hashvalue", (string) The block hash containing the transaction. Available for 'send' and 'receive'
                                          category of transactions.
    "blockindex": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'
                                          category of transactions.
    "txid": "transactionid", (string) The transaction id. Available for 'send' and 'receive' category of transactions.
    "time": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).
    "timereceived": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available 
                                          for 'send' and 'receive' category of transactions.
    "comment": "...",       (string) If a comment is associated with the transaction.
    "otheraccount": "accountname",  (string) For the 'move' category of transactions, the account the funds came 
                                          from (for receiving funds, positive amounts), or went to (for sending funds,
                                          negative amounts).
Examples:
List the most recent 10 transactions in the systems
List the most recent 10 transactions for the tabby account
List transactions 100 to 120 from the tabby account
"tabby" 20 100
"tabby", 20, 100
Negative count
Negative from
listsinceblock ( "blockhash" target-confirmations includeWatchonly)
Get all transactions in blocks since block [blockhash], or all transactions if omitted
Arguments:
1. "blockhash"   (string, optional) The block hash to list transactions since
2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more
3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')
Result:
  "transactions": [
    "account":"accountname",       (string) The account name associated with the transaction. Will be "" for the default account.
    "address":"giantaddress",    (string) The giant address of the transaction. Not present for move transactions (category = move).
    "category":"send|receive",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.
    "amount": x.xxx,          (numeric) The amount in GIC. This is negative for the 'send' category, and for the 'move' category for moves 
                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.
    "vout" : n,               (numeric) the vout value
    "fee": x.xxx,             (numeric) The amount of the fee in GIC. This is negative and only available for the 'send' category of transactions.
    "confirmations": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.
    "bcconfirmations" : n,    (numeric) The number of blockchain confirmations for the transaction. Available for 'send' and 'receive' category of transactions.
    "blockhash": "hashvalue",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.
    "blockindex": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.
    "blocktime": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).
    "txid": "transactionid",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.
    "time": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).
    "timereceived": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.
    "comment": "...",       (string) If a comment is associated with the transaction.
    "to": "...",            (string) If a comment to is associated with the transaction.
  ],
  "lastblock": "lastblockhash"     (string) The hash of the last block
Examples:
"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad" 6
"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad", 6
Invalid parameter
lastblock
"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d"
gettransaction "txid" ( includeWatchonly )
Get detailed information about in-wallet transaction <txid>
Arguments:
1. "txid"    (string, required) The transaction id
2. "includeWatchonly"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]
Result:
  "amount" : x.xxx,        (numeric) The transaction amount in GIC
  "confirmations" : n,     (numeric) The number of confirmations
  "bcconfirmations" : n,   (numeric) The number of blockchain confirmations
  "blockhash" : "hash",  (string) The block hash
  "blockindex" : xx,       (numeric) The block index
  "blocktime" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)
  "txid" : "transactionid",   (string) The transaction id.
  "time" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)
  "timereceived" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)
  "details" : [
    {
      "account" : "accountname",  (string) The account name involved in the transaction, can be "" for the default account.
      "address" : "giantaddress",   (string) The giant address involved in the transaction
      "category" : "send|receive",    (string) The category, either 'send' or 'receive'
      "amount" : x.xxx                  (numeric) The amount in GIC
      "vout" : n,                       (numeric) the vout value
    }
    ,...
  ],
  "hex" : "data"         (string) Raw data for transaction
Examples:
"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d" true
details
Invalid or non-wallet transaction id
listaccounts ( minconf includeWatchonly)
Returns Object that has account names as keys, account balances as values.
Arguments:
1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations
2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')
Result:
{                      (json object where keys are account names, and values are numeric balances
  "account": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.
  ...
Examples:
List account balances where there at least 1 confirmation
List account balances including zero confirmation transactions
List account balances for 6 or more confirmations
listaddressgroupings
Lists groups of addresses which have had their common ownership
made public by common use as inputs or as the resulting change
in past transactions
Result:
    [
      "giantaddress",     (string) The giant address
      amount,                 (numeric) The amount in GIC
      "account"             (string, optional) The account
    ]
    ,...
  ,...
Examples:
"" "tabby" 0.01
move "fromaccount" "toaccount" amount ( minconf "comment" )
Move a specified amount from one account in your wallet to another.
Arguments:
1. "fromaccount"   (string, required) The name of the account to move funds from. May be the default account using "".
2. "toaccount"     (string, required) The name of the account to move funds to. May be the default account using "".
3. amount            (numeric, required) Quantity of GIC to move between accounts.
4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.
5. "comment"       (string, optional) An optional comment, stored in the wallet only.
Result:
true|false           (boolean) true if successful.
Examples:
Move 0.01 GIC from the default account to the account named tabby
Move 0.01 GIC from timotei to akiko with a comment
"timotei" "akiko" 0.01 1 "happy birthday!"
"timotei", "akiko", 0.01, 1, "happy birthday!"
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
unsigned int GetStakeModifierChecksum(const CBlockIndex*)
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
CheckProofOfStake
int64_t GetStakeModifierSelectionIntervalSection(int)
kernel.cpp
pindex->pprev || pindex->GetBlockHash() == Params().HashGenesisBlock()
Null pindexNext
GetKernelStakeModifier() : block not indexed
CheckStakeKernelHash() : nTime violation
CheckStakeKernelHash() : min age violation - nTimeBlockFrom=%d nStakeMinAge=%d nTimeTx=%d
failed to get kernel stake modifier
CheckProofOfStake() : called on non-coinstake %s
%s: spend is using the wrong SpendType (%d)
CheckProofOfStake() : INFO: read txPrev failed
CheckProofOfStake() : VerifySignature failed on coinstake %s
%s: Failed to find the block index
CheckProofOfStake(): INFO: failed to find block
%s failed to get modifier for stake input
CheckProofOfStake() : INFO: check kernel failed on coinstake %s, hashProof=%s 
stakemodifier
GetLastStakeModifier: no generation at genesis block
ComputeNextStakeModifier: unable to get last modifier
ComputeNextStakeModifier: prev modifier= %s time=%s
nSection >= 0 && nSection < 64
SelectBlockFromCandidates: failed to find block index for candidate block %s
SelectBlockFromCandidates: selection hash=%s
ComputeNextStakeModifier: unable to select block at round %d
ComputeNextStakeModifier: selected round %d stop=%s height=%d bit=%d
basic_string::replace
ComputeNextStakeModifier: selection height [%d, %d] map %s
ComputeNextStakeModifier: new modifier=%s time=%s
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>&]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex>&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::mutex::~mutex()
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
void boost::signals2::mutex::lock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::condition_variable::condition_variable()
void CWallet::GetAllReserveKeys(std::set<CKeyID>&) const
void CWallet::AddToSpends(const uint256&)
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
CPubKey CWallet::GenerateNewKey()
MintsToInputVector
AcceptToMemoryPool
void CWallet::ReacceptWalletTransactions()
MintableCoins
CreateCoinStake
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
SetMintUnspent
CreateZGICOutPut
CreateZerocoinSpendTransaction
ReconsiderZerocoins
GetMint
GetZerocoinKey
GetMintFromStakeHash
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
GetMasternodeVinAndKeys
LoadCScript
PrecomputeSpends
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CCryptoKeyStore*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>; Mutex = boost::signals2::mutex; R = void; Args = {CCryptoKeyStore*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const uint256&, ChangeType}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state]
T boost::detail::variant::forced_return() [with T = const CNoDestination*]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CCryptoKeyStore*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>; Mutex = boost::signals2::mutex; R = void; Args = {CCryptoKeyStore*}]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const uint256&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const uint256&, ChangeType}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&), boost::function<void(const std::__cxx11::basic_string<char>&)> >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(bool), boost::function<void(bool)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(bool), boost::function<void(bool)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(bool)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, bool)>; Mutex = boost::signals2::mutex; R = void; Args = {bool}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ChangeType}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
CreateZerocoinMintTransaction
CheckCoinSpend
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]
void CWallet::ReserveKeyFromKeyPool(int64_t&, CKeyPool&)
bool CReserveKey::GetReservedKey(CPubKey&)
bool CWallet::CreateCollateralTransaction(CMutableTransaction&, std::__cxx11::string&)
bool CWallet::CreateTransaction(const std::vector<std::pair<CScript, long int> >&, CWalletTx&, CReserveKey&, CAmount&, std::__cxx11::string&, const CCoinControl*, AvailableCoinsType, bool, CAmount)
std::__cxx11::string CWallet::PrepareObfuscationDenominate(int, int)
bool CWallet::CreateZerocoinSpendTransaction(CAmount, CWalletTx&, CReserveKey&, CZerocoinSpendReceipt&, std::vector<CZerocoinMint>&, std::vector<CDeterministicMint>&, bool, bool, CBitcoinAddress*)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(CWallet*), boost::function<void(CWallet*)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(CWallet*)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, CWallet*)>; Mutex = boost::signals2::mutex; R = void; Args = {CWallet*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*)>, boost::function<void(const boost::signals2::connection&, CWallet*)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const std::__cxx11::basic_string<char>&, int)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>; Mutex = boost::signals2::mutex; R = void; Args = {const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, int}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(), boost::function<void()> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(), boost::function<void()> >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void()>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&)>; Mutex = boost::signals2::mutex; R = void; Args = {}]
ResetMintZerocoin
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>&]
ScanForWalletTransactions
MultiSend
MintZerocoin
CreateAutoMintTransaction
SpendZerocoin
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>&]
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>&]
bool CWallet::EncryptWallet(const SecureString&)
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>&]
7CWallet
CWallet::GetDebit() : value out of range
CWallet::GetCredit() : value out of range
pool
GetAllReserveKeyHashes() : read failed
wallet/wallet.cpp
keypool.vchPubKey.IsValid()
GetAllReserveKeyHashes() : unknown key in key pool
CWalletTx::GetAvailableCredit() : value out of range
CWalletTx::GetUnlockedCredit() : value out of range
CWalletTx::GetLockedCredit() : value out of range
CWalletTx::GetDenominatedCredit() : value out of range
mapWallet.count(wtxid)
ERROR: SetMerkleBranch() : couldn't find tx in block
GetTotalValue -- Couldn't find transaction
ConvertList -- Couldn't find transaction
-gicstake
Relaying wtx %s
ResendWalletTransactions()
secret.VerifyPubKey(pubkey)
CWallet::GenerateNewKey() : AddKey failed
-autozgicbackup
wallet%s.dat%s
COutput(%s, %d, %d) [%s]
wallet-autozgicbackup-%d.dat
-zgicbackuppath
%s : %s
wtx.GetHash() == wtxid
Wallet passphrase changed to an nDeriveIterations of %i
GetInputObfuscationRounds UPDATED   %s %3d %3d
GetInputObfuscationRounds INSERTING %s
CWalletTx::GetAnonamizableCredit() : value out of range
CWalletTx::GetAnonymizedCredit() : value out of range
%s : invalid reserve balance amount
-keypool
CWallet::NewKeyPool wrote %d new keys
keypool return %d
keypool keep %d
AddToWallet() : found %s in block %s not in index
%s: did not find mint
%s: newly created pubcoin is not valid
%s : failed to unarchive mint %s
%s : failed to unarchive deterministic mint %s
%s: serialhash %s is not in tracker
%s: failed to read deterministic mint
%s: failed to generate mint
%s: failed to read zerocoinmint from database
%s: could not find serial %s in walletdb!
%s: failed to find meta associated with hashStake
CWallet::GetVinAndKeysFromOutput -- Address does not refer to a key
CWallet::GetVinAndKeysFromOutput -- Private key for address is not known
CWallet::GetMasternodeVinAndKeys -- Could not locate any valid masternode vin
CWallet::GetMasternodeVinAndKeys -- Could not locate specified masternode vin
%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.
Precomputer started
giant-precomputer
-precomputecachelength
precompute
%s: Loaded precomputes from database. Size of lru cache: %d
%s: Got Witness Data from lru cache: %s
%s: Got Witness Data from mapDirtyWitnessData: %s
%s: Got Witness Data from precompute database: %s
%s: caching mint %s of denom %d start=%d stop=%d end=%s
%s: Generate witness failed!
%s: Cleaning up precompute cache
%s: Writing precomputes to database. Precomputes size: %d
%s: Finished precompute round...
ThreadPrecomputeSpends started
ThreadPrecomputeSpends exiting,
ThreadPrecomputeSpends() exception: %s 
ThreadPrecomputeSpends() error 
tryDenom: %d
selectcoins
CWallet::SelectCoinsMinConf best subset: 
%s - total %s
CreateCoinStake : invalid reserve balance amount
CreateCoinStake(): selectStakeCoins failed
CreateCoinStake(): listInputs empty
CreateCoinStake(): no pindexfrom
CreateCoinStake : kernel found
CreateCoinStake() : kernel found, but it is too far in the past 
%s : failed to get scriptPubKey
CreateCoinStake : exceeded coinstake size limit
%s : failed to create TxIn
%s: attempted staking %d times
CreateCoinStake : failed to sign coinstake
SpendZerocoin() : %s
%s: failed to create new zgic output
%s: new mint %s
Insufficient or insufficient confirmed funds, you might need to wait a few minutes and try again.
Signing transaction failed
The transaction did not verify
%s : The transaction did not verify
The coin spend has been used
%s: serialhash %s not found in tracker
%s: failed to write zerocoinmint
Transaction Mint Started
Couldn't generate the accumulator witness
        - CoinSpend constructed in %.2fms
%s: failed to set zGIC privkey mint version=%d
        - Signing key set in %.2fms
%s: could not find checksum used for spend
        - Accumulator value fetched in %.2fms
CoinSpend: failed check
        - CoinSpend verified in %.2fms
%s : could not get lock on cs_spendcache
could not get lock on cs_spendcache
    - %s took %.2fms [%.3fms/spend]
Spend Valid
CoinSpend: Accumulator witness does not verify
TopUpKeyPool() : writing generated key failed
keypool added key %d, size=%u
Loading wallet... (%3.2f %%)
ReserveKeyFromKeyPool() : read failed
ReserveKeyFromKeyPool() : unknown key in key pool
keypool reserve %d
Error: Obfuscation requires a collateral transaction and could not locate an acceptable input!
CObfuscationPool::Sign - Unable to sign collateral transaction! 
Transaction amounts must be positive
Transaction amount too small
Insufficient funds.
Unable to locate enough funds for this transaction that are not equal 1000 GIC.
Unable to locate enough Obfuscation non-denominated funds for this transaction that are not equal 1000 GIC.
Unable to locate enough Obfuscation denominated funds for this transaction.
Obfuscation uses exact denominated amounts to send funds, you might simply need to anonymize some more coins.
SwiftX requires inputs with at least 6 confirmations, you might need to wait a few minutes and try again.
Transaction too large
Transaction too large for fee policy
GetBudgetSystemCollateralTX: Error - %s
Error: You already have pending entries in the Obfuscation pool
Error: Can't select current denominated inputs
PrepareObfuscationDenominate - preparing obfuscation denominate . Got: %d 
Error: can't make current denominated outputs
You don't have enough Zerocoins in your wallet
Value is below the smallest available denomination (= 1) of zGIC
Failed to find Zerocoins in wallet.dat
%s: failed to fetch hashSerial %s
Trying to spend an already spent serial #, try again.
%s: tracker does not have serialhash %s
Unable to find transaction containing mint
Mint did not make it into blockchain
Too many spends needed
Failed to select a zerocoin
Failed to find coin set amongst held coins with less than maxNumber of Spends
Selected coins value is less than payment target
Need address because change is not exact
reserveKey.GetReservedKey(vchPubKey)
Failed to create mint
In rare cases, a spend with 7 coins exceeds our maximum allowable transaction size, please retry spend using 6 or less coins
Failed to write coin serial number into wallet
Transaction Created
%s: failed to archive mint
ResetMintZerocoin finished: 
 mints updated, 
 mints deleted
ResetSpentZerocoin finished: 
 unconfirmed transactions removed
update
AddToWallet %s  %s%s
-walletnotify
%s: found mint
Still rescanning. At block %d. Progress=%f
CommitTransaction:
CommitTransaction() : Error: Transaction not valid
AutoCombineDust: failed to extract destination
AutoCombineDust createtransaction failed, reason: %s
AutoCombineDust transaction commit failed
AutoCombineDust sent transaction
Multisend: lastmultisendheight is higher than current best height
Multisend: failed to extract destination
Multisend: disabled address preventing multisend
%s: fee of %d is too large to insert into last output
MultiSend createtransaction failed
MultiSend transaction commit failed
Failed to write MultiSend setting to DB
MultiSend successfully sent
%s: balance=%s fee=%s nValue=%s
MintZerocoin() : %s
Error: The transaction is larger than the maximum allowed transaction size!
%s: autominting request amount %s
CWallet::AutoZeromint(): auto minting failed with error: %s
CWallet::AutoZeromint() @ block %ld: successfully minted %ld zGIC. Current percentage of zGIC: %lf%%
CWallet::AutoZeromint(): Nothing minted because either not enough funds available or the requested denomination size (%d) is not yet reached.
Error: No valid utxo!
%s: failed to commit
Error: It cannot delete coin serial number in wallet
Error: Unable to cannot delete zerocoin mint in wallet
Error, the mint did not get marked as used
Spend Successful
CWalletTx::GetAmounts: Unknown transaction type found, txid %s
automint-address
CWallet::AutoZeromint(): time since sync-completion or last Automint (%ld sec) < default waiting time (%ld sec). Waiting again...
CWallet::AutoZeromint(): available balance (%ld) too small for minting zGIC
CWallet::AutoZeromint() @block %ld: percentage of existing zGIC (%lf%%) already >= configured percentage (%d%%). No minting needed...
Encrypting Wallet with an nDeriveIterations of %i
!pwalletdbEncryption
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex>&]
boost::signals2::mutex::~mutex()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::mutex::~mutex()
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; T = std::__cxx11::basic_string<char>]
bool CDB::Erase(const K&) [with K = std::__cxx11::basic_string<char>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; T = std::__cxx11::basic_string<char>]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = std::pair<uint256, unsigned int>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = CDeterministicMint]
MapMintPool
LoadPrecomputes
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = uint256]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = long int]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, long int>]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = int]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, unsigned int>; T = std::pair<std::__cxx11::basic_string<char>, int>]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, unsigned int>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, unsigned int>; T = std::__cxx11::basic_string<char>]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = unsigned int]
LoadAutoConvertKeys
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CKeyID>; T = std::__cxx11::basic_string<char>]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = long unsigned int]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = std::pair<std::pair<bool, bool>, int>]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = std::pair<bool, long int>]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, CScript>]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, CBigNum>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CBigNum>; T = CZerocoinSpend]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = CoinWitnessCacheData]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, unsigned int>; T = CMasterKey]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CScript>; T = char]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint160>; T = CScript]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CPubKey>; T = CKeyMetadata]
bool CDB::Erase(const K&) [with K = std::pair<std::__cxx11::basic_string<char>, CPubKey>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CPubKey>; T = std::vector<unsigned char>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, long int>; T = CKeyPool]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, CPubKey>; T = std::pair<std::vector<unsigned char, secure_allocator<unsigned char> >, uint256>]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = CZerocoinMint]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = CBlockLocator]
bool CDB::Write(const K&, const T&, bool) [with K = std::__cxx11::basic_string<char>; T = CPubKey]
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; T = CAccount]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = CWalletTx]
void CDataStream::insert(CDataStream::iterator, std::vector<char>::const_iterator, std::vector<char>::const_iterator)
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, std::pair<std::__cxx11::basic_string<char>, long unsigned int> >; T = CAccountingEntry]
ListMintedCoins
ListArchivedZerocoins
ListSpentCoins
LoadPrecomputes
ArchiveMintOrphan
ArchiveDeterministicOrphan
UnarchiveDeterministicMint
UnarchiveZerocoinMint
WriteZGICSeed
bool CDB::Write(const K&, const T&, bool) [with K = std::pair<std::__cxx11::basic_string<char>, uint256>; T = std::vector<unsigned char>]
ListDeterministicMints
ListArchivedDeterministicMints
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const uint256&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const uint256&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const uint256&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const uint256&, ChangeType), boost::function<void(CWallet*, const uint256&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::mutex::mutex()
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(const std::__cxx11::basic_string<char>&, int), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const std::__cxx11::basic_string<char>&, int)>, boost::function<void(const boost::signals2::connection&, const std::__cxx11::basic_string<char>&, int)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const std::__cxx11::basic_string<char>&, int), boost::function<void(const std::__cxx11::basic_string<char>&, int)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CCryptoKeyStore*), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CCryptoKeyStore*)>, boost::function<void(const boost::signals2::connection&, CCryptoKeyStore*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CCryptoKeyStore*), boost::function<void(CCryptoKeyStore*)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::function<void(const boost::signals2::connection&, CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType), boost::function<void(CWallet*, const boost::variant<CNoDestination, CKeyID, CScriptID>&, const std::__cxx11::basic_string<char>&, bool, const std::__cxx11::basic_string<char>&, ChangeType)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(bool), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(bool)>, boost::function<void(const boost::signals2::connection&, bool)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(bool), boost::function<void(bool)> >, boost::signals2::mutex> > >&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> >]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<void(), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void()>, boost::function<void(const boost::signals2::connection&)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(), boost::function<void()> >, boost::signals2::mutex> > >&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const bool&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state&]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<void(const bool&, const std::__cxx11::basic_string<char>&), boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<void>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>; ExtendedSlotFunction = boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>; Mutex = boost::signals2::mutex; R = void; Args = {const bool&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<void>; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<void>&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = boost::signals2::detail::void_type; boost::optional<T>::reference_type = boost::signals2::detail::void_type&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<void(const bool&, const std::__cxx11::basic_string<char>&), boost::signals2::optional_last_value<void>, int, std::less<int>, boost::function<void(const bool&, const std::__cxx11::basic_string<char>&)>, boost::function<void(const boost::signals2::connection&, const bool&, const std::__cxx11::basic_string<char>&)>, boost::signals2::mutex>&]
boost::filesystem::directory_entry& boost::filesystem::directory_iterator::dereference() const
T boost::detail::variant::forced_return() [with T = const CNoDestination&]
T boost::detail::variant::forced_return() [with T = const CKeyID&]
T boost::detail::variant::forced_return() [with T = const CScriptID&]
./streams.h
last - first >= 0
basic_string::erase
./wallet/db.h
!"Erase called on database in read-only mode"
wkey
mkey
ckey
destdata
dzgic
mintpool
 : cannot create DB cursor
 : error scanning DB
 : error scanning precompute DB
orderposnext
minversion
mdisabled
automint
stakeSplitThreshold
msettingsv2
autocombinesettings
watchs
multisig
zcserial
cscript
keymeta
defaultkey
giant-wallet
Flushing wallet.dat
Flushed wallet.dat %dms
acentry
%s : failed to database orphaned zerocoin mint
%s : failed to erase orphaned zerocoin mint
dzco
%s: write failed
%s: failed to erase
%s: failed to retrieve deterministic mint from archive
%s: failed to write deterministic mint
%s : failed to erase archived deterministic mint
%s: failed to retrieve zerocoinmint from archive
%s: failed to write zerocoinmint
%s : failed to erase archived zerocoin mint
%s: failed to write current seed hash
Failed to read a current seed hash
Failed to write empty seed to wallet
Failed to write empty seedHash
CWalletDB::ListAccountCreditDebit() : cannot create DB cursor
CWalletDB::ListAccountCreditDebit() : error scanning DB
cannot backup to wallet source file %s
copied wallet.dat to %s
-backuppath
-custombackupthreshold
LoadWallet() upgrading tx ver=%d %d '%s' %s
LoadWallet() repairing tx ver=%d %s
Error reading wallet database: CPubKey corrupt
Error reading wallet database: CPubKey/CPrivKey corrupt
Error reading wallet database: CPrivKey corrupt
Error reading wallet database: LoadKey failed
Error reading wallet database: duplicate CMasterKey id %u
Error reading wallet database: LoadCryptedKey failed
Error reading wallet database: LoadCScript failed
Error reading wallet database: LoadDestData failed
Error getting wallet database cursor
Error reading next record from wallet database
nFileVersion = %d
Keys: %u plaintext, %u encrypted, %u w/ metadata, %u total
wallet.%d.bak
Renamed %s to %s
Failed to rename %s to %s
Salvage(aggressive) found no records in %s.
Salvage(aggressive) found %u records
Cannot create database file %s
WARNING: CWalletDB::Recover skipping %s: %s
 DeterministicMint:
   version=%d
   count=%d
   hashseed=%s
   hashSerial=%s
   hashStake=%s
   hashPubcoin=%s
   txid=%s
   height=%d
   denom=%d
   isUsed=%d
GetKeyPair
GetWrapSerialInflation :: Invalid denom
%s: version is %d
%s: empty privkey %s
  ZerocoinMint:
   version=%d   
txfrom=%s   
height=%d 
   randomness: %s   
 serial %s   
 privkey %s
23NotEnoughMintsException
19GetPubcoinException
29ChecksumInDbNotFoundException
25searchMintHeightException
P29ChecksumInDbNotFoundException
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::mutex; typename boost::detail::sp_dereference<T>::type = boost::signals2::mutex&]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state*]
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_member_access<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex>&]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::signals2::mutex::unlock()
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::shared_ptr<void>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::shared_ptr<void> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::shared_ptr<void>&]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
LoadAccumulatorValuesFromDB
EraseCheckpoints
InitializeAccumulators
CalculateAccumulatorCheckpoint
CalculateAccumulatorWitnessFor
ValidateAccumulatorCheckpoint
GetAccumulatorValue
LockMethod
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
AccumulateRange
GenerateAccumulatorWitness
T boost::detail::variant::forced_return() [with T = void]
boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::~auto_buffer() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >]
T boost::detail::variant::forced_return() [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>]
T boost::detail::variant::forced_return() [with T = bool]
boost::optional<T>::reference_const_type boost::optional<T>::get() const [with T = int; boost::optional<T>::reference_const_type = const int&]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections_from(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, const typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator&, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}; typename boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::connection_list_type::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >&]
T* boost::scoped_ptr<T>::operator->() const [with T = boost::signals2::detail::foreign_weak_ptr_impl_base]
void boost::signals2::detail::connection_body_base::dec_slot_refcount(boost::signals2::detail::garbage_collecting_lock<Mutex>&) const [with Mutex = boost::signals2::mutex]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::erase(const group_key_type&, const iterator&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::iterator = std::_List_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> > >; boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::group_key_type = std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >]
void boost::signals2::mutex::lock()
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state&]
boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>::grouped_list(const boost::signals2::detail::grouped_list<Group, GroupCompare, ValueType>&) [with Group = int; GroupCompare = std::less<int>; ValueType = boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >, boost::signals2::mutex> >]
void boost::shared_ptr<T>::reset(Y*) [with Y = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state; T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>::invocation_state]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::slot<std::__cxx11::basic_string<char>(const char*), boost::function<std::__cxx11::basic_string<char>(const char*)> >&]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::reserve_impl(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::size_type = long unsigned int]
void boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::unchecked_push_back(boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference) [with T = boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>; StackBufferPolicy = boost::signals2::detail::store_n_objects<10>; GrowPolicy = boost::signals2::detail::default_grow_policy; Allocator = std::allocator<boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr> >; boost::signals2::detail::auto_buffer<T, StackBufferPolicy, GrowPolicy, Allocator>::optimized_const_reference = const boost::variant<boost::shared_ptr<void>, boost::signals2::detail::foreign_void_shared_ptr>&]
void boost::signals2::detail::connection_body_base::inc_slot_refcount(const boost::signals2::detail::garbage_collecting_lock<Mutex>&) [with Mutex = boost::signals2::detail::connection_body_base]
void boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::nolock_cleanup_connections(boost::signals2::detail::garbage_collecting_lock<Mutex>&, bool, unsigned int) const [with Combiner = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<std::__cxx11::basic_string<char>(const char*)>; ExtendedSlotFunction = boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>; Mutex = boost::signals2::mutex; R = std::__cxx11::basic_string<char>; Args = {const char*}]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >; typename boost::detail::sp_dereference<T>::type = boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >&]
boost::optional<T>::reference_type boost::optional<T>::get() [with T = std::__cxx11::basic_string<char>; boost::optional<T>::reference_type = std::__cxx11::basic_string<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>; typename boost::detail::sp_dereference<T>::type = boost::signals2::detail::signal_impl<std::__cxx11::basic_string<char>(const char*), boost::signals2::optional_last_value<std::__cxx11::basic_string<char> >, int, std::less<int>, boost::function<std::__cxx11::basic_string<char>(const char*)>, boost::function<std::__cxx11::basic_string<char>(const boost::signals2::connection&, const char*)>, boost::signals2::mutex>&]
GenerateAccumulatorWitness
GetPubcoinFromBlock: failed to read block from disk while adding pubcoins to witness
GetPubcoinFromBlock: failed to get zerocoin mintlist from block 
%s : Missing databased value for checksum %d
%s : erasing checksums for block %d
%s: height is below zerocoin activated
%s: failed to reset to previous checkpoint when recalculating accumulators
%s : failed to erase Checkpoints while recalculating checkpoints
%s: failed to load hard-checkpoint for block %s
%s: failed to reset to previous checkpoint
%s: height %d is more than active chain height
%s: could not get lock on cs_main
searchForMintHeightOf:: failed to read mint from db
searchForMintHeightOf:: failed to read tx
searchForMintHeightOf:: mint tx 
 is not in chain
        - Range accumulation completed in %.2fms
%s: failed to verify witness
%s: generating
%s: after lock
RESET ACC
%s: using checkpoint height %d
%s : Less than %d mints added, unable to create spend. %s
%s : %d mints added to witness
        - Witness generated in %.2fms
%s: searchMintHeightException: %s
%s: ChecksumInDbNotFoundException: %s
%s: GetPubcoinException: %s
%s: failed to initialize accumulators
%s: failed to read block from disk
%s: failed to get zerocoin mintlist from block %d
%s found %d mints
%s: failed to add pubcoin to accumulator at height %d
%s checkpoint=%s
%s : failed to calculate accumulator checkpoint
%s: block=%d calculated: %s
 block: %s
%s : accumulator does not match calculated value
%s : new accumulator checkpoint generated on a block that is not multiple of 10
calculateAccumulatedBlocksFor : failed to find checksum in database for accumulator
Less than %d mints added, unable to create spend
calculateAccumulatedBlocksFor() : nMintsAdded %d
CalculateAccumulatorWitnessFor(): Calculate accumulated coins failed
GenerateAccumulatorWitness(): Calculate accumulated coins failed
Remove
%s : remove %s from mint pool
%s : add %s count %d to mint pool
%s : add %s to mint pool, nCountLastGenerated=%d
Mints Added: %d
Height Mint added: %d
Height Checkpoint: %d
Height Acc Start: %d
Height Acc End: %d
Amount: %s
Demon: %d
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::mutex::~mutex()
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
SetMintSeen
CzGICWallet
SetMasterSeed
SyncWithChain
GenerateMintPool
RegenerateMint
%s: value not in pool
%s: generated pubcoin and expected value do not match!
%s: failed to set master seed.
%s: Updated zGIC seed databasing
%s: failed to remove old zgic seed
%s: failed to get deterministic seed for hashseed %s
%s: failed to save deterministic seed for hashseed %s
%s : n=%d nStop=%d
%s : %s count=%d
%s: master seed does not match!
dmint:
 %s 
hashSeed: %s
seed: %s
%s: failed to correctly generate mint, pubcoin hash mismatch
%s: failed to correctly generate mint, serial hash mismatch
%s: Mintpool size=%d
%s : Found wallet coin mint=%s count=%d tx=%s
%s : failed to get transaction for mint %s!
%s : failed to get mint from txout for %s!
%s : failed to get mint %s from tx %s!
%s: updated count to %d
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
UpdateZerocoinMint
Archive
UnArchive
UpdateState
UpdateStatusInternal
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
ListMints
%s: mint %s is not known
%s: failed to archive zerocoinmint
%s: could not find pubcoinhash %s in db
%s: failed to archive deterministic ophaned mint
%s: archived pubcoinhash %s
%s: failed to unarchive deterministic mint
%s: failed to unarchivezerocoin mint
%s: unarchived %s
%s: failed to read deterministic mint from database
%s: failed to unarchive deterministic mint from database
%s: failed to update deterministic mint when writing to db
%s: failed to read mint from database
%s: failed to write mint to database
%s : Pending txid %s removed because not in mempool
%s : Failed to find mint in zerocoinDB %s
%s : Failed to find tx for mint txid=%s
%s : Found orphaned mint txid=%s
%s : Set mint %s isUsed to %d
%s: added %d zerocoinmints from DB
%s: added %d dzgic from DB
10CZGICStake
9CGICStake
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
GetModifier
GetModifier
CreateTxIn
CreateTxOuts
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
GetIndexFrom
MarkSpent
%s: failed to get index from
CheckStakeKernelHash(): failed to get kernel stake modifier 
%s: failed to find checkpoint block index
%s: failed to fetch mint associated with serial hash %s
%s: serial extract is less than v2
%s : failed to find tx %s
%s: tracker does not have serialhash
%s: failed to create zGIC output
%s: failed to database the staked zGIC
%s: failed to database mint reward
CreateCoinStake : failed to parse kernel
isValid
From: 
Height: 
accWit: 
%s: ERROR: invalid denomination
%s: ERROR: filter not within size constraints
%s: ERROR: starting height before V2 activation
%s: ERROR: invalid accWit value
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
%s rejecting work %s , error code: %s
%s pop work for %s 
%s calculating work for %s 
%s pushing message to %s 
%s NOT pushing message to %s 
ThreadLightZGICSimplified: 
lightzgicthread
void boost::mutex::unlock()
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
T boost::detail::variant::forced_return() [with T = void]
bool ComputePasspoint(uint256, CPubKey&)
bool BIP38_Decrypt(std::__cxx11::string, std::__cxx11::string, uint256&, bool&)
0142
bip38.cpp
ctx != nullptr
0xffffffffffffffff
0xffffffffffffffffffffffffffffffff
SelectMintsFromList
listSpends
%s: Problem getting change (TBD) or Too many spends %d
%s: %d coins in change for %d
%s %d coins for denomination %d used
Total value of coins %d
    "height": 870020,
    "1": "6c029e4aa703c507a72423e838d977e50446b559f95988388088d0d2605a2a795dc57cc0f2a56f703cd348c0ff3c2c30cbf0dce2770c953e2afaeaab0c019fc800dbbdd5e23b073d164d37e8fd15e73b047e16fdf2a4906a33adb158ac56512b183c570318bd843e18ab8c1c18896b8b2d1bcd4dbbdd5df16057432fb227e09add499e2a6b39446d8098400706bd65638f2ca68fb5563353efc3eb5249df6740121cd452923b074dc620789d21aea7ba399da1cbeac85844a851bbf8c72be1bc5df409d974e78b69641a50f4551f7d971e3ce0349c1be115876c937fd13ff6d153e57e4e676046a3f8eff57c716048dbb2c25204e550325f1e2b1cbf8e2be464",
    "5": "8ccd744b7312cc0aff036d70faa4668702be7031471dc92b90676748a998ac7acfaa9c32426155a45bc9529a3bebb5ef6ba8d85c7fdccd5f07cd88217c975e1dda86a92fbd24250a09ea321ef9f3be0761d42b9e1fe96bced5235a0d272f5b9c8d76e09806a514d21bce5d61da3cd54fddfa1d62aad7f47f0870379df095ec41fe88c06b7fa885da5a8e4ee23d67b46e9fa94f8b2e66b986740fc8c3574d047059c609c6968f8e84515c418978b04c6855cf44841e3f4f85096af81c9fd63255ac9354d215937fbfca39bc6ae365a1308da0266a638ebcdc1fc874b641d12ab788ec619f3ffd96678a3cc5dac6bb89c7e9975f19fdcf05d343f63a0e217ebeac",
    "10": "925088d6ae3c25a57fc3d4374a90ae01439abf91ad1f81a9146775eb583610f885e94d8a13da96cba3f412ec5a367b8c6dbb1f6de6d346948cf7fd8de7c574dfbb4d7933975d7bbfb2faad9307014817cc54e833c762e8aa65a15162a55bd0bb58136cabd269fe49e612d324625f533aca929c32b8df70627f2fe20fddaaabbaf7e4c73ad25a64d59bc7ac8a9dc95ba0b7def931837ad3ef2d7c74b872620f2a7a8ae8643dfa0abe35af969a0dd550294548d6d3cb7ea5e75b2c64eeceaa5d8e65969240345a9f4efc7a74611bba6e394212126804f7015274438051ddc0d2fddafd3fc53cc088b8bda8eef10c99f5fad1c24aed3571dc144f952e2d330e72ce",
    "50": "7bdd398484b78426d6c13c5b67385d7fc5dea997b9896fd87128dbf512548ebc44e07e7e659ade73cad2dacf2b582c11737508abca62afff6462300855be5528663fb2a4980db4168ddf42169dc751418448394eff682ac10f2cd87be705a0def9c3364ea99a574f8c61b83557b7bc3044224ed39408baeff194cbbf93d4f220c332b202219cd6a1a8ec398128dc677d235b8b8f8fc2ec4ddf08e489b0eef583803ddd04c3dd2eaf0270fa5412f85ec442e3c9892d2c638526ec96b0783f8f04bd3c57381c74ec0bbfd8c264a123717b41607259e878dbeeef0fe69a02fc442e5ccb4bf985b7862aa3be27413413bafece94d46e89e4335a920ea0b6142d67ad",
    "100": "403e84ae26d157aa947b311c4698f266c7d5c4fad1cc992eec78decd70883063bf193b05d4134a39873217ba1b75534ac9dde787b603c4877b67eb27c64595158d3f9ae8984e61b59be72b7ecff8d682410981dd8804ba45cab49dc5c20bcd749f6d9d9c41e92aa9e66208cddbc372d28133b963befdbe8fbad01ad4746a895b7999d24e469cb19202dd29c306d06cc8087f3de0a73ac391a7b97a728eeb0150f9122c6d8758590cc1482fcfe3fa2e2afaee3bbf000ac685479d5a5394546960b52ae1d6e4b465172f082622330621fc28ef01fe6cb1c2bedd7f6096da1791d03334ed1202bacbcd231e1a90eaf24899c5b68096aa782c48b7e2053b6120b3d",
    "500": "b7921079e30cde47ba05a945e28024616ccfb0f08ee8e98ade72889de2edf599e9b87572f06447c9c94832a66c81be7c7b58bef22ca2f4c7f8be77c1f1e5284b819c462f5dbd79c6ffcb207e81597c5b8438913aed6ebb2895a25e421449bc37e267034f73d29a4cf692b0043fadecb49a296726769ca9968e602ffbc802ec46d245af05d4b3c7202eee5c3d0f213585b035791502ede5a0eec4b1b88fa7a9460d370cd50bbe41b62f80b894f2225e9acfaa7ecbcca81518da48fccc09d1f5f29d7aad2ec2cda75d8f389d8e19b0c159c1dd9f7efede302659f8b94ec4be195b2f50de49529f8c69ae8b508d25155948e9a89d797171502e702ec991d171a1a5",
    "1000": "22141db13d53082a32b45595bace860b85cc220199aa82783ff20d8e84dbb2acb16a8a6fdc38c4cbe80631e939fb547a5bb5d1ed8dba1b80a2d4b93588e3ca688298f3c3b7e35ee45c1a50bc84d2ff69edb0373de45cbea43d97d06612e0afaebb86c0bf8f2c5392407a2e1a155c97e1d605bd030c1a5e96dcd0e63e87dc9de7dc6835c06a9204333089fd86584c660cba17343a5d7ccbc2fe6126518f8f68d47e66b5ac6d54edbdce743206d46dfff8611a0b6a00fb6fbdcc108c2423512f92f0a1b9644bb60b3d4565cc49df9d427652e61af01b939776211adc99bc8db2adf376661aa3da7f1b083fa61e917ba205b9353b7d2ebb660201252830fab9259c",
    "5000": "6b9bf16263b08be301f15db6731c5799526df49a827077d55d2f20d01504e276528c7d9ce3ee3c8e4aeab30ff2cc02fb96819845d612e07ade6735c18499a193d96e727a90c94cfca49f2b4ce0fa1a9dbd7137eefdcb8103833b521ed50139a9336197afa1064a096ea3094abeb1b60f2878ea14acba6449d962b09df257c868e90ba4413b1dca437656ffb9256ebe13c6ecef0eeaf6b71a824166fed8a5da8deb6ceed7a56d9b75eb268a32e589d9d96f11e6969a6342e42a2cfd184aba81726853f196ccaff2e0af1b1079e114773f0d9d2498ad26b80d90f4bfde2cf1a1208777c762ecfe5c9510f70530f925e4e5f0fcdfd733e058431918b590d70b375c"
  },
    "height": 880020,
    "1": "ae3103531f9d34aa4c8d73eacc30b2d0a10b920779bc2d9c11d008b113f21e1e5dca65b00884e9b006a224c1ff764e0b825b2c56a979ce265685cc415fac7d3479466bc8eaccd04e735d557ab9fb517b3c18288768a26c131a9cf760e7f9ddcb73cb28c52064884438773d4dae837d2fae2a1d3c64c57a73239b806e3fe20c098ab9e7e6ec4fbc85045cdbbf3fbf17ef5bb5b39842e4b7d99f4d32e9bc0c3029f4be44c51b3c1cfd92d722252856493b42248abcbecb3aec1f24a1331070da0421731e11d274b2324ccd2d27a65871b8e7f95dfe68bddb89b3f2fcef67a9807d98da143952def9df2814c4aba662fcef443497501e5f46a9c9b5962251bbe178",
    "5": "a3548ad4efa24ff22d1f42800bb5f760ef4eff220e5e459e66876c54019740b78d8debc0081efe5a8abc9154bb75fdd01f48cfdcbe1b694b634331db0f2cb00e7eceb23720a36766163390652c8326897ff589c312ba13aa370a7d3ba7995b9ac0083dcb842f8e49c36b3a7f0dbbf72be163205b4196c5c3541e2bff7a231908a9ad2545f123bc265abef776d27eedb075e2617ef1a4a14967400625be85eea174ea117d59c7559614146ddfa5d52b1c2f007e8cd135df0a9de75d9954f3092a7412a7e7bc3e48ff5a3496a00de95a04ad7a347575532e912c59d5121c6ad09ab2d314d921a1f3f7248f7d1bbea591fc16cae06745143b480e8c0a59cf24b1de",
    "10": "c04d91e518a6619caae745a5cbc9f302b0956c0134a4ff7503217c30ba1b29db99f984d9c83e5fb0d19cca8eafc8549b9b0ee7085a21082bd8606df7dd29f353f57bb917b09c8f7a2b333eae37f5b56b4cd2905ed4c27314ce4fd76c66522870cf9a57aa248f6913ab564dc5458aaeaad9ac42fa4d3b96f2289d4235f58e093451305499094606fbc58e24ce290e029e7f87b14362a5e0e2333d3d7c767313ac32d375169983653d00db2e93e6da2251f7381bf46462429a2b4a25a68c7630eea7cba6f993f186cd220ffdc58b4713da1c076b164a36f5133d0fa869f38dfdee3b4b3caa6854aa4f16e7873166e548912637224b6267eed13b6b0f7a75406089",
    "50": "51983e2bd41249f41de509cf9823ff97bdbfe334a5039c46f35114df3fc361c9d5adbebfd57dceb3a8b651898064a8c39f89aec936416154e6cb0329016b950ad7da4264ecf1ebcdc4799a06e008be19015e6dded54356bdd74d88a659db11057c895c63b432328b472408693158e9faf46b498ed2dee19ec26111fde783742d70f2afbe5d20cdfbca79ff93470b8caf1068b18aa182c7c7b3b7c9ec1758631c30d5b925253665fa8118a0fea9c26e6fa8aff9fc5efa673027fbd03d98fa5a30115c84bbe86b245caa7fd63d525bff3a10705fca68686c53b835723b27a70c4e42322784430b648fe09d961fb6e9e242ca01bf38f5c7e19f4f154aa07bd48855",
    "100": "94be6830abf24c079cea3a193b05d209e1c59547f9b6f3535cf9be2289915d948802f7fbe254f76a550839c7fe69441e4f64190df320628d051835cf08ebf52a2ccf81ff6611205e42d463a5abe78b40bf0cff49e2901e2ddee920bee7b3116bf7da8729cb533ea1646401bd8afa6d0f90bd039a1790eb934d59ad1f8b14f6a2c431e9c87baf1df88669b1c17bde30154e70a729f5d913761b6d193193174a1c36cac5910f5bfd6e22086069746a65fae8050120f6182fd724c7b79496ff692cb40cddb35166213935db5a7e59f272cce42bb058a6b404e09e1eb3c8e7ac1657963ac38b4951be30170a44b891c8c85822827a09e1fbdda84b42adcd78bbf15",
    "500": "136ec87ffabc5b1699d091587d12bf954e3bc10b9f08f9dd222f3ca67703a0e55be56a497073383614525ca4eced74c2a66995a5d45e84af6a19019743482f71667cbacb3298730477572c9fc2be3236fb4a545a64b81c60ad75ba1129c71b24da68b42a68767aa757f206cf6678f0fd60da768075d94f9dcd3b17e49228b300521bb74b03ad5d184d237569f70dcbb830a25663ae2f056e83933d2fd6e657157a899ff39373bdbfda7cbd4fac07faf717baa8a1d3edc1b06f72b8fc4c64a058d6540d8290303bf200b1bc297b2c0286d702f26a6c3bd533b28bf5fbefc012afec87ea53943cc702e28b77e46dc211f301b48180601f3348c5951a99e76249a7",
    "1000": "38f39ee5bc1145f86f18ff4a4f65ef9c92a20396651bdfe35f67a72d42852accfa4885338cb9db0567445dbe6ed5a6ceb94ababb879260306c662eb6e1b97bb9793bfc44755acb5ec41267f6c6d1ba2712afa40fe1b7da6492089e072cc91150a45b1ffb55451c187732e13edf6e5ea169acdadaa6fec710d326e9b5693a83cd500a50e30893e3bf99907aa4c209cfe51338f716afcf043fedf1df946f858307749ba8cda14127f03a4f63ef543bb9493060a07e5e2500a6173ad7acadeb0c10c649853cb1813f56cdf6325783d517efc2c62ad67327acdb8e06e79f11a0aa0d61c364a53bf892bfbd085a4ee0d16679a0a0c5f86a6cbd3d34c7d51b0bd36432",
    "5000": "477cb469961112102d36651f68eba34aa3d511ffc448e9f9bfabcc116a752835cc1af7f16bb78268087837b44e2371998f3941a6460daa857d45027fd54f64618e75d12e653449094eba5e227ecb6e53b3ddacb50a4a71c85244bb0697403fd0ba59bd23dbc71c4687c3bcc2c90260ea4b4f56074e0145dfc3bd67569dabdc31335619633b7047a955d0597939ca82261d5f6a6dce0a51be356ed53671d59f155ffb1b5b50a6e626015096261add901508bf5301c2f7b2abde3284746bc29e4723c9516975dc51a55f951b19882e04d9c318c0cd8b79bb94f913c6b6e7c8ca8595a1a9aa032df6c4b63e6f424f46ef432e8681ac7bb80e6dc12e7d9a039973bb"
  },
    "height": 890020,
    "1": "9614d09a2b40850cec45de18ac6c58fdf5887dd3d23ee83388fcf03e1f5d6e60cbcd367bad6e94feed56f71f167f79940e79072666c04a7cba5db9c8d975b610a641649773d86b09566d3f89fd4ebbd66da7def362c9588581d96ffdd95f1cc3b58ed9873ea0403a7f6dbe3d751921495b3f740cc3634a113f2bc00c77081d1e51e3bbe3c518fb47d8ddc0a05acb88196e6022bdb9b01b7600e3c122c63352b9d32091d8149e134c0d8e176c73fa83a381e43bf84904d66ca4f6eaacdb4af0b24d4bb71947e6add6cf55ea8fc10af55df6d8f09641a84dbac1d1819c2af5081bc3c7df24bad78473af0edda8f0e1150c8407166801568b2198740b0f53e6e16b",
    "5": "a1372bbfe455ee96bac6a5999649413b5ada0f03c90b6b5ba7154e1aa268631c25026a6dbd439e5097f5d8a8c8333fb6d9eb918e45a0a56956363e6138ca0c5982c7d18c27588b4f1fdebd3e09efbc8ae42b38425e977e0a60e5482435696d160973166fb43e3de6fe3f659500ee9143342d77300642687e528390431289e482cb2dd979f2552d9e8481df4b40aa115d665ed03c6e24fcc5589fa6b5cfc2135889e3816984ace918bdecf968f5efce5c878b55b1cb7b8696c7955ad49828b3e6df0a9480abe84ec1e2ce684dcff58854ea5fcc1b4388e9f7243ae1fc5a4c026eb73106212c4ed8895dcee6588930cde617fea9ae08785071c95094954b83608a",
    "10": "88c02e3ec0ba7f0eb3290c1d4f0b49b5479dbae62c56c028efb4d9f05da8f7adabb64ffa59a8f185244ff99228b69b0118eb4c9640e2f99af2f5631e968bf0e0203df5d0e6548c8f9f7c650f4b452e42503e304c5ed539b5db3ef5bc07834d638fb953527191a5b98026bf2aea4c431b487dfe74accd7382674b3b818e0c68482561de191e5e8cb5800552d2776f0da96ab9b11fa3cee55438715e76fb9c569196a74b71ded76ba1164ed1ce23365d54d8a58766fe3c6a353bf7e04aaf8874f50f6d437c5a76d86f8686340d96ea4af315447c180b0e8f5f7a50f79b5242db8c390381221e0732ea0b48a96ac6c95444aabffa2a6ac893202f22c9106ae24f78",
    "50": "c051633ba3e6ed24e0640ca04126159285f4b4c44990235ef75f2e90d26c82e16cb2bcb7868ead2f0c5cc97a1dbf3e167fefbe68d5873bc96c128f9038d58d4f1b516369beeda20371eafce863fce8806adb94fa022bbf510afe051d5eebcea885af42a45bc5e953cf6d51feceea7fe9bbfc2884ca84b3499ea7546e0d4f0238cb236186dab93f06bb3a416f92549a86f70b2be8193a944461d1d0e41d867c37226185580aba6faafd8faf750994f115621b85e3da7ac9b7a111921e5db6b24ec57fb0c73a3be04852dd13a6b83cdfc417dba076686d398e1550ca6cac78a82e57cbcd6eb2f575b64da460a61f643e491cb7aafe94e3ca27edd55c47ebe6131",
    "100": "8d708fdeae9cf549bac55f0c6be9dbf32b41ad97b95eb4ec5537d2fd0651bb71a72558dd4c3cf11cd2023a14105188da2b6d5747733273a578f4d288b9dfc72c3bf754aa868f87e54da0a88819e2044964b65339380a216764f5397fcb28beb2720542a1298d9b23095d555ddf279eecd67a575e96bbef5a997a5f59c9f7bf448c5bc4c7341b98432a6508007552d22996478882b3882b15b27adc0892a862276516a26a59ef2cfd123d22e4d87e5de08d3c05debd0090a3fe8b954f99afac934553fa7242dfadeea285e274a2deca6d56b3195cbb29aab3d0a95be563d77f11eafe2d0082dbc8d021a0af8a7df072af8bbe55f09c24ee37be38d4aa65213e53",
    "500": "b5582b48070bdda6d7f74a73244cebf416d78f5706e468d6d1319a616b0109c7bd3353e45a6864f3b9b2c3b987dee4a1c6574f24dc81f9715ce38454c7e868938043c84c630105db522e4ac62aa0ab7b60ee3f0d09de353d7634645a899665fd69c8a164c753af412889fa4f8b8df1722227d478c531ad5928d0215dec539c448147d024e1b99e4f64155dd018245e7c57f10a7db5d8fa4b8968cd5bd9f9d09e73d64466ca5adf8bb3901a218e352715e288a255226d7f6fc7b990381d26f014b346a8aeccde221b0158cc8c92b00323251ad75490681e9302c89a03a852e3c3ea34bdb4daf6f24b4e63cdfe77c50b0fe5dd37eb4d55949705ab9e34bf21c394",
    "1000": "a593c3ab28b7fc32f808a5438121c6533b474c7cc4f6dcce475f385cbaa3a7419783599cee3e862b261e44b8ca93e577fd96f821691bd438ba7e2404ef341cfad657cc8d06084f64ee2c1c64da4613f8159b35b9c32b713255f96f587bf477c99f7f269003ad6920fb5b3453e34f406e552b4c62afd1bc8c811791ded899bbc78a88936fad607cd9b5980bc905cdd576d145946266315767a85b8c2c7505380c8b9bafadab785e55760b6579e528ee00dec72afb5e86d437b30af733fd9c327daec98c7bb7297bf2292e9f82efa305ecc1fdd7b70fad22503182e9f6c0cbb4948693e2e2314ce54033f8eed904b9767252831bca429de51dc50dccc2bc6309bc",
    "5000": "46f0caea1498fbd7c5021e8f304e2496e0abea86e5a093c27e9bbe3cbf36638cf4cd03e33993d1bfc7a3a95dc132a10387e02765462fbce0e4c4d704dda8bfce792d0b3aea6a41640b820a8572ad7f9bdea9118ed995987ba840c285a4e809f5dacff57cb27899a94524e32f261d2bdc61eb7c1c27428a32ec071bac6ac7efd63526b67a673ed9eadbc62a81403e6189f6cbfa6e0efc170676163ed085e238acaba5dd5b795c05eaa60c0b595ba76198d9c9910969884e78462a818379423b1eb5c0df76e597e65f15ea0750aa842e6a35989ec12e603d127ad53c54b15e03ffe1e2eeb774fbb6e431ba4e0cfbbc3f1af958f38bde028e44a3edff9f26561922"
  },
    "height": 900020,
    "1": "2328a94b12dd6d5b19f22a7e2c10537355d9f440ab1e96de1a8e12e881537c302fc70dc91c02521ace264e684aa8c02f8f454fe17494fb65c8fe0d60a10e2dc3497bfd060104f3df92b95afb48de42ebe76fba6257daa977d1d93223e527592773c82f93ad781b8890f2d242077d7850d01ae590fe2c9a00f9f3404c80a001044168d7e8bee15a8541a60ed3cec5d449daef31d23894703970c7868e2774ff8adddf7797f7b89df0d1f139771b4a08a67970a81bfd0809111157625cd02e0d028e7f4abb371140da262235336ad1758b6ae4b5892f3e7fa725e67459e0b7aac41970857089cbfc88645cee4c9cbb4b16c6367d7df974ae5a684b304e0578009f",
    "5": "4b8fc1867a8ba6edcec82f3ee8bfc46df6f026356fa36111c9fcd9019d0a48cda9f98603e0194edee1291bb75306f4afb030c7c48fb44b391e2017d3ae6d2642f6f6d0e67bc0680ab5acdeae3d2ca1ffec2837713ab279e1dfb5c8125ceb46d96fc7d575aa171f409c303598c3a1f45ce40cd40a900ea0555de891766b89ec587a7146c6e5b91d3c2d806c12c295212baffb4bdf3c33dd6f122d9a479cf25118ea76d5984ee9e52d87f70373a42681279d8384bc82745784953511e18477b26d53656306d205ba6b65a03705159af46f0c3440fce60fc04b037f380b8e691f93124cb98804377cb998ed59a79b43bab575e0617969b95c2fba07578a4f945e3d",
    "10": "7c24716c7ffe0a9d4ee2aa8f495e845b1515802b512d249a5e36e12f45d3f6bd345b580bc5b91ac4057e069cd8e776cc5d236b82866dc1b3f4ccb8b712bdca978fc5e1d47794f4c5478c98930ad09e8706e0289b09db5dcf68b63b58d3fab4b34eee3dbd2320117ac75549ad0dfea52e7610c7d205b1e4fa8efb385ef3850607287ebd14d7c3279e94976e9ce53bec7497159dea263c5279b1ad777b3baba6bc36029eb853e70249f4af494984d5aed254423b5914120cb3500b5b5c2384af90fb2cb120afdfad51da7a463b67803d192f7999e783881e91df3d93c52e7c8837f5d651e88d3ac60da5d6ab211be045eaba619b2035a8894bcdc8edd90f5bca52",
    "50": "6f3a65c90f94c14ad8c4c4aeb99693e159e96a84b9e94b3de43d35183739a98ae848229be56db1ac85498568e9f986468f8fb6a5bf803d10d003b417a6041c998681a0d04b0678bb6c806688635abd72553e98c59d04f7fd909469d08a515c3edb466ea7f8a076972149c872b0730744043a16da1824c1847838939df506b136d5dddb970c8915fa6f84fc5d3fd7f68b550ed0cbcc9eac49f1d7fd666d964f9703143468d89c16b768b39ff03449be2670a5c264a9e4440e9b8692a3363336a5dac9c4141dace44904895fdf82821ba493d5fc02f9b2105e5e099c816c6481ab1bd811fcd42a68d76a8417d03b317c592947ebd330506dca9813c57637520bcf",
    "100": "9a3301542ab971cec3f72924e9f715c4161b38e0987d94ea289c127833e7df29160fd42e9ed09afdef4eea9435af273af5d66cddb5096511b310e0a301cff89f63ca64f2cdfe4aadb1a261200f937d97f558f93cc48a97a4b7d3ff335250494aecb33fe4481fca9092366c1f7ef0f9cc4f79d5164505421b30e6933a37711e6d5da4b70986cce9ab6975549f62d88252447c9b43731193611ee42120d1a9db58df7aaf53f15e7822c53c6e0ba9e434aa7cc8fbc871a598fe6890f00d1539fc6eda4398c5b0a54cb65d1aff3973b35c3827bd3f1fd66f2eb20f6b3a25a4ad8fbceee55f2a06b65958101903450d9ecc854105ed4f6ec58b1b53acc75aff94e8d",
    "500": "2e23bab273d9e9a305c5c4bc6bae6242fc52bd2bbc888d01d59217a184d459a3a6003c35a645adaf9bce2423609870e14526e2f56ea2cdfdb98db0da2ac1de0eafd05c8b0da65ad756901c011e8eb42623a834657b21838ee1328493020178617a1435903c47fb39eae32bf2f5395ae3b14fc9eea6850fa1a4324e426d33a529c7ced786608c38dfb8a79019d2326178d5942ad3b7c0f9615508d1e060bddf32cc74977808edbec21528bd400078873fbae53b0a9ba75fcb5a20484d9cb67f30fbf62becc697fbd8fd0f7ca617e61fb860ca10c937ba652770aea0b7b1ecd6b2d801bc13534d28d258e4fe68f1acb09f15a21e7fc2860123eb595e83549706b8",
    "1000": "7de06a2264a3355c5b23263db84b95a54509f1ca528253da23745a65cdb4c3376790bfca838f75acb1072ea589c50254b1837a117ece627ef4119ae1790c9a3a84a95427c69e8f337eff2cb4a3eb42b90332a207068421125b48980aac8ccf412881953e180ff31bb812cb9b795ffe55a199a6658f8fff93132556eb346154a50529f67b2eec4d2854a411928520803ed2c9eb8079c937019c20933424032718859a6b5aaf770613ba79c39c3db65151c1c4169ec5d6b3cc5b393f932b69448c19a1c80b77d745c958b46f5d4becc81d6baa6cd1592f60254f88af70ef0b2a3c596a7e829cdb7c7bcd5132cfe1b216e29a515dcd61cb63f37c9ef8594f9efcb3",
    "5000": "72a6e83aada0c33b9e36de9fa40285f53c1bf8bb83616a6d98b30db3b9c5a2891e02e771cc1916c46d4ca58ba3ee0f6e12b20f1152de6adbb68cd3e923301ca5ef51877fd4c944a2cb6c9398762b24c78689896da8a24b829b7ec55129eb01a96118f216d38b02a0278bb9955e8ef814c1380b54b3809149410eef0a958e130b86d3a5c434d5715b9b37a790a3ef47175a180aefc40b2c3a651db0145d7927cbfdb11d60ab08b989e496ed5bb5dc786ab569e3ecf96d4f9df0f19e9adc01913b449b779389c438296c60ab8bd647b3fcde6b0c771cae73eb18e2789bac4fecbcb0e80a9e64cc55e49aef6f88e45d4fd42ceb5a258bce40f2d81db0e974988149"
  },
    "height": 910020,
    "1": "2328a94b12dd6d5b19f22a7e2c10537355d9f440ab1e96de1a8e12e881537c302fc70dc91c02521ace264e684aa8c02f8f454fe17494fb65c8fe0d60a10e2dc3497bfd060104f3df92b95afb48de42ebe76fba6257daa977d1d93223e527592773c82f93ad781b8890f2d242077d7850d01ae590fe2c9a00f9f3404c80a001044168d7e8bee15a8541a60ed3cec5d449daef31d23894703970c7868e2774ff8adddf7797f7b89df0d1f139771b4a08a67970a81bfd0809111157625cd02e0d028e7f4abb371140da262235336ad1758b6ae4b5892f3e7fa725e67459e0b7aac41970857089cbfc88645cee4c9cbb4b16c6367d7df974ae5a684b304e0578009f",
    "5": "4b8fc1867a8ba6edcec82f3ee8bfc46df6f026356fa36111c9fcd9019d0a48cda9f98603e0194edee1291bb75306f4afb030c7c48fb44b391e2017d3ae6d2642f6f6d0e67bc0680ab5acdeae3d2ca1ffec2837713ab279e1dfb5c8125ceb46d96fc7d575aa171f409c303598c3a1f45ce40cd40a900ea0555de891766b89ec587a7146c6e5b91d3c2d806c12c295212baffb4bdf3c33dd6f122d9a479cf25118ea76d5984ee9e52d87f70373a42681279d8384bc82745784953511e18477b26d53656306d205ba6b65a03705159af46f0c3440fce60fc04b037f380b8e691f93124cb98804377cb998ed59a79b43bab575e0617969b95c2fba07578a4f945e3d",
    "10": "7c24716c7ffe0a9d4ee2aa8f495e845b1515802b512d249a5e36e12f45d3f6bd345b580bc5b91ac4057e069cd8e776cc5d236b82866dc1b3f4ccb8b712bdca978fc5e1d47794f4c5478c98930ad09e8706e0289b09db5dcf68b63b58d3fab4b34eee3dbd2320117ac75549ad0dfea52e7610c7d205b1e4fa8efb385ef3850607287ebd14d7c3279e94976e9ce53bec7497159dea263c5279b1ad777b3baba6bc36029eb853e70249f4af494984d5aed254423b5914120cb3500b5b5c2384af90fb2cb120afdfad51da7a463b67803d192f7999e783881e91df3d93c52e7c8837f5d651e88d3ac60da5d6ab211be045eaba619b2035a8894bcdc8edd90f5bca52",
    "50": "6f3a65c90f94c14ad8c4c4aeb99693e159e96a84b9e94b3de43d35183739a98ae848229be56db1ac85498568e9f986468f8fb6a5bf803d10d003b417a6041c998681a0d04b0678bb6c806688635abd72553e98c59d04f7fd909469d08a515c3edb466ea7f8a076972149c872b0730744043a16da1824c1847838939df506b136d5dddb970c8915fa6f84fc5d3fd7f68b550ed0cbcc9eac49f1d7fd666d964f9703143468d89c16b768b39ff03449be2670a5c264a9e4440e9b8692a3363336a5dac9c4141dace44904895fdf82821ba493d5fc02f9b2105e5e099c816c6481ab1bd811fcd42a68d76a8417d03b317c592947ebd330506dca9813c57637520bcf",
    "100": "9a3301542ab971cec3f72924e9f715c4161b38e0987d94ea289c127833e7df29160fd42e9ed09afdef4eea9435af273af5d66cddb5096511b310e0a301cff89f63ca64f2cdfe4aadb1a261200f937d97f558f93cc48a97a4b7d3ff335250494aecb33fe4481fca9092366c1f7ef0f9cc4f79d5164505421b30e6933a37711e6d5da4b70986cce9ab6975549f62d88252447c9b43731193611ee42120d1a9db58df7aaf53f15e7822c53c6e0ba9e434aa7cc8fbc871a598fe6890f00d1539fc6eda4398c5b0a54cb65d1aff3973b35c3827bd3f1fd66f2eb20f6b3a25a4ad8fbceee55f2a06b65958101903450d9ecc854105ed4f6ec58b1b53acc75aff94e8d",
    "500": "2e23bab273d9e9a305c5c4bc6bae6242fc52bd2bbc888d01d59217a184d459a3a6003c35a645adaf9bce2423609870e14526e2f56ea2cdfdb98db0da2ac1de0eafd05c8b0da65ad756901c011e8eb42623a834657b21838ee1328493020178617a1435903c47fb39eae32bf2f5395ae3b14fc9eea6850fa1a4324e426d33a529c7ced786608c38dfb8a79019d2326178d5942ad3b7c0f9615508d1e060bddf32cc74977808edbec21528bd400078873fbae53b0a9ba75fcb5a20484d9cb67f30fbf62becc697fbd8fd0f7ca617e61fb860ca10c937ba652770aea0b7b1ecd6b2d801bc13534d28d258e4fe68f1acb09f15a21e7fc2860123eb595e83549706b8",
    "1000": "7de06a2264a3355c5b23263db84b95a54509f1ca528253da23745a65cdb4c3376790bfca838f75acb1072ea589c50254b1837a117ece627ef4119ae1790c9a3a84a95427c69e8f337eff2cb4a3eb42b90332a207068421125b48980aac8ccf412881953e180ff31bb812cb9b795ffe55a199a6658f8fff93132556eb346154a50529f67b2eec4d2854a411928520803ed2c9eb8079c937019c20933424032718859a6b5aaf770613ba79c39c3db65151c1c4169ec5d6b3cc5b393f932b69448c19a1c80b77d745c958b46f5d4becc81d6baa6cd1592f60254f88af70ef0b2a3c596a7e829cdb7c7bcd5132cfe1b216e29a515dcd61cb63f37c9ef8594f9efcb3",
    "5000": "72a6e83aada0c33b9e36de9fa40285f53c1bf8bb83616a6d98b30db3b9c5a2891e02e771cc1916c46d4ca58ba3ee0f6e12b20f1152de6adbb68cd3e923301ca5ef51877fd4c944a2cb6c9398762b24c78689896da8a24b829b7ec55129eb01a96118f216d38b02a0278bb9955e8ef814c1380b54b3809149410eef0a958e130b86d3a5c434d5715b9b37a790a3ef47175a180aefc40b2c3a651db0145d7927cbfdb11d60ab08b989e496ed5bb5dc786ab569e3ecf96d4f9df0f19e9adc01913b449b779389c438296c60ab8bd647b3fcde6b0c771cae73eb18e2789bac4fecbcb0e80a9e64cc55e49aef6f88e45d4fd42ceb5a258bce40f2d81db0e974988149"
  },
    "height": 920020,
    "1": "44528958fa1e3a8cb129f676f8317f429c9080350e892fcfe44618eda12622f00c2575c4ccd3157a476d1914617d7f9a18e4822cdf51af6da73d116876e417a2681684fb001231d8c2b6563fe9f0e13f92227a7a011464d0a635a56ae66d6584b4e2add4db864f1c289a056bd35d319ca131aa8d807b4d1b51945fffe7b6364cd3e21c84ed35e1f927be959fd7da6dc1b416c5faaadd6137e29a3dc21301895b01dc8f51299d2df3db32c0cdfa20071c8e232727eab6a30f51bf868caa986bc92bf022cd63020ffff0361e948e54eb925a97ede1d7acf67ca1748bd03c59303538095f293cbc235ec8065f88a7da23cae36a36568a33fe8342524ddfe3b8e6a7",
    "5": "193cd5b83549bbe9c18799e2d08b3e2c58d9f466a13e22fde1278acfcfb9c23a0aec3cfcbc044b3f36ecc2d4c19041896e53827c2885cc014b1609712aa75d012ca8546a75df45ff08598aaf36ad38e5412d8e4b2b8e993dfc08365b0692162bb67cf58dc4f6cdd2bf1200ccfa70d187b41820b312460b7457d723392a2568ade9af47477f38d743ccf7a9cab300e5d31067e94fd61476116490054e057583b141975a2dece0a33032e56f011b91a34f520d6da923a36ae1c175e4e1822932920fccf381c6e82bbd5c690697115ca5a8ed66ad7dba2701a54bbab76624fa28974a0e364d73b10a1eac2848502e04502f1ad60c5f85102a25c267592cb8103744",
    "10": "69bb9347331e2083a160894063bb0e8778437d9c7d673ebeb41796486c614a07561d80f8e2809b4cb74f059802515cdadb83a7ee4f4c434abb2633a232f21071481a86152f66a909d0b80a39998eebe561ef2e90f34fb1df40a239f00fc35b02f0845aa9e5e243b3e61a15c29720f0508e7b619de9cfa9dbe71c4a98f5fd6063a8331931ba2cfdc160cb640d198aacdec2cbc82f6509f69cf61a49612bd241340b9c1a7e6935de67cd972bf8cc2ae246028f833a534c58a35eadd8c3c2926f2bbb448d2ff18175435f24e32e4b566e0660e695ba42d19fcbe179e90a9d31c04b63914d5a293872cd037a8aa5d601dbd3900fd70b2c6ec7694b26ad0cec0b51ff",
    "50": "a229569bf927eed89d9d736b78992282a22aea037064581f7a393e403b4265df7ea9a5a866197ca7f64b21fd34051c74bdd3780f7b3c6d274078277c649c9d2ac56f59021ea6de6a8155393553a7d0953836aeed64a132e9fc35853a18de80b1d9c5a5d822565bd682642b0dfc972c91e26cc348fd56a85ebe386b5a6af62319891ac821f8cd37237fdbfc059469a73e043051cce01bbcf8c849acb9bd02b129b2e667a060eae6a507cc8b95a07f6d480355b5bfd4ccec316a99961d0bc86fafb5b98dcb92adc917834599bdb7e37493882d7f27243bd3f1b08c8a433376b7e3b00c7f78ea1e2664091b71d610f7cfab24b0207b221e2e4bd22dbe178311544d",
    "100": "48e5cdebef7d4139c7ccea78a4466190661d49c7d30ae06f0e3016e13d15e2fe6db68e4cd6f634f9f683fa94a4f3fbaf8e473aec6547b580bbc926f972976671e28719cbbd3e41bd849819e04b01a2a5e9accbfeb0ab0e8b16cc8de2389f3468060e403276f5cbdaaea3e9463f1e427d25bdd4c1e61cde15a35561999c50b83cfffde93acd695093999fef54e018791c26fc344806d5db0bb9bcb31766f37ed68a4a8fb221eec7c1aeefee5fed619474818d138443630f42551519b1bf55e06fb82fd730eaae1384bfc046d72ae29aa142bb59ef1ced26874fe3faf8c560e6f79c6c6e15af26ea2f566c34ee3aad4404db6141e5310e92ae8882b3c67dc8927a",
    "500": "dc253997e3b916d574d1092380e22a1aa22719fcc82f2985ceeadac290b070e45e55c40bf5a8131c5cac130e4f2f87aa5d13c21fc4f25b1159d0a2c9bd86dd6006e918647d3c8635042ced04944e154e936a7f7b4786eaf11acb6800c391931b506f698026cceba558a495a7e2d434e5bd447004c6727f6eb1c6599eab51c4d6b2ff7b8f8fe8e962e5d8804a111edd1fea40a7e02295c613b196c236a9d28d2d4fd14d5a2fd22e55531bcda0e9a0917029da1bb3b19c2425292b416116c5ea1261007aa595872ae0942f621a9e29ff1b59f5ad24281e6b280c44a933d8f5bbbda33045485c0bc952a6cadbc9f2cb2a8b911c8411a8334dfeb67195a088730e5",
    "1000": "86fbe4fcd342ff1b2dbbb5d9227d9c9ef23105ebc4fd1db5834618b8c6627fabc562b7692247dd64eaa6f1a5a650abb52ed38f22c364bfb92c906ff27c644c9c195c2dabf32c2a664120cab2104c3e1df3a112b09166e4f98886a121e4093edb5dba8242bc9e24e3dbba83e3cdb1ce2f26fb182843ea13da02bcc2c75128ab20857d7e37404e097c7fee4d621a55171eb30e5cad3df5a23a2a33cd07bcbfd16b7ac0079ec411d68c9380dfc749c8b03a062fbf36bf46c16c6ba2d7529b6a373b01dbaf7076ba1777b609b2c1d4b9c125efeea55746d334834b09804cc5077dc1afb88460b768be2d9627b069f6f59cfe878d0130be109589900747918c759de1",
    "5000": "87a81f64310f2b163ef8c4900720225f97350ee047dd206f82e45c294b3ad93e496c38b4b15c5112b0f99fff7af0a6b366403af8c566bd364453ccbc9037435a2694e5be241c11ac77c79d9bffe29d2b2dafa658695f6c8b1f93c47118a1f2acd12d54c9fbdc546071a37d8219f18a72955dbde29d14a50142420b3bef38719a4428590188f03b34bcff66cc2ad098c9814a35bfce2804758b3500e1a895453fd6a26a17a518b145fb0d69df47412901ed08dd51e1ac5a08430a5b58c5243fc0bbdd2ac7c063e0c8cac638f9a3b658786f6fce2cde5cbd2dba3f5d29807f8edb09d991294393f86448013942a7134a0eb9039002e7e5834763fda1419daa1b13"
  },
    "height": 930020,
    "1": "2fe336fe0fbb3c40df8c5e9b2087bb5e079e0b5a4e1f76976d2fa9159028b215dc121b47ba7a6e9406df94cc26ed1158484b05c55d6955088f7fe117b83882a2951b11b0c71e744273892778e23a24294ca1a22aadb20336abfa13b425ca7279c073d4d3cc0a19d7681c94304334957d328e1beb274686e4adcc1f272d6ef3b82d839c89c3d637bfe01c70f0b1e133f0b0be51fda07862536b4cef3b0a834cce6b2bc10fa2321ac60312c79ac28729f238b35556fc245ce4dcef07333fb240db01e8c3990a3f27df76d822a4d729ff76753d8de38739d65e55b51fd1f1979838e456e51f90eb8b7e087f4ce6154527e13fc5c8f41144534d602144ff62596385",
    "5": "3bc9923cefd1df512ec3fa45f3d2921c55c86879c58d378ca96425c89add112bc7c6e89749e5c043d246671b611e2defb2f438d3fd3482452f0f48eb16ab2777a1daefebdd42e875ff1995835c52b20cd541bca545ff9c9089b819375489026b8dc0b07b3d15db5417bd09ee18194621729dbe380e8858e79c31ff6b82b4f7bdb3138695b8fd13979b5242a454f52c0fc8556c368bc4781de4b856229df16c79e82fe3c8e75856dad44c12a4b9099219a3ad5a1277707f75be31fa587028da161344e92c605d0a6575d6956684e98a4bb22dbba77dfecbac45a0368491ede39e088fd5f42099e79097d9093c01378eda77647e92ecc122366550137f752284f9",
    "10": "b12916b9c692cf20d56b04650341bf166cd4b7a6e5fd617b63ce02fddbf81d2f98302732aed5cf8a0fef88470502e2437d97a4674bf8cc37f9a83cb3916bacb0186fce5e66a20155ea8bdd4e3ff717802de6d4565f3feb49037c309850b5b76ebed8ffb1d9b2c45e099a56430377328645d3279455698844ee936d7d2c002a521f2d81dc554a34038ae3ec18b307a6a18d21c5ef4a9af50179e081738df83f4f5cb9974cf0adcbcbd50ea01aafe198f7fd3b617ba3db2d4cb4f1117ed44015d95c0976c53c267d43ca88ab34946ae00509b07cd7eece432f60d74e451af3cfe9b9fe5c3f060e51a4bec2ccf82f99e45920be8ac10bcffda303f2e5bb205a55d0",
    "50": "1246a4cd3da8bbb7de13a03a51cb4938d51717eda52b67b4befa2d681200a5fad8b6c422d05d913de3316253df0744314d3000661f152492208f984de0016913a96c0a344a39bb80462149b5ca9e2ec033f40495024f83139f1087f54d48c0742abec4f963801d4292a84a7c3b81d53b0e8df36b4b7d0012337fd503514734603f703eadeebd140a10e64d2672616f9f74c61f055e3b2b9118cdc18ec7da9d3956f05f3f5ff853f954994a34342fc0068003d997285b99c19d9c357bdcae8b883ca997f299078293409cf67cde9ad1b0d4932f8c766f54b59a388e12b1bcec704dc881d99dd2a170014a48152613ea5f8b19874aa87394626a70211898ab6804",
    "100": "852fa9ce489d0e4422b8928282d9bf9c327859c452fa582155d83eb28841651b3eb50cf3c08892fa59f66829d8eb9931ee6543b1204b3f4eaa9ddbdb9e3ff62e1d53373de873e64a533682cb18cfa6e8aa9c9b318376ada966641fb5056bc52c93755957f96a5f842afff76dfae5dea76c8dd8fe35c53381789889b1408dd32d80197b44f9f6cbac3dc5e50b544f562dda7e8eea5a634debd0342eb3c3766a7fd3ddd9d1e5f26a7fd91c955c2100dc1a126ef6e02ac9b2d7c67680c2f0833805e01e1c8c4d57560139db0da2899d046e62ba6ed448cbf462e787cd2fc6666a6b38cc9d339f1bb9db82526059aec23fb20438cde773fcc9e2b99fa3226e5924e7",
    "500": "75ca86dc0465d60b3fa1bfb14f3146d15af27ce5f70d67bd179d83d0e5d64ab453a275dfe1699a8e8cf7e9c7879d76d12b3ae560330f78b4114b59a9f7b2fb05e28622229266ff1ee816f2180215e2f4a762d9dd418f76fd57e8c10130f90e0cff0531730b7842044901dd57ef3f246f42939e66705d35e280ccb798b34aa936df9f2d8e4e67337b586907a789ba94b30d95a5ac89f52e114daceb1f382d843427d8863817625fd75ba1e359f6f793f1d95700547067443c79c3f5ba78d9744b387a3a7fcb184e6d268c160012cf665571f64d59e2eda8d59d215ec2c28affd66a7f7ceae5da65b568c35e61e85720e9ce62e0af98e75ec51c82b7687eba77bc",
    "1000": "136f9aa4308660b02bb7601104d528b05372f704ed614f83c23f64b7dc7248258c4f3562f4386e53a8beecf31cfc78e90b650939c2c65083dd134669983046daadbc501275ae8251599e272a73074705de18b2beb23bb929c4ef9ec6f9d23b4a71c2eedb6e54ab730c23eab09f140f8d0df5563d31607a97872e3caefb85625b0d7a2a48e1858aa3ae6f27f7e41b52de494c4c8ee726def18b354673af73dd819d3b5c3ec81d87bc1b51e6360877cd0ae5109f652743459a8a670175c68b0618766fd4cc5a9575291e05651678496051b61ddbda4c9a8ed09cd59f9228ab85bef64628d94c5379270dc6ac3a66539bff2a23e30caff0356c036ddfa614d4727f",
    "5000": "8c5d19d6eaa5e3549b350f7ec5a5960c5c9b3ba85f9d6fedf8d16cb70a61f3bc2e1549299e6937f31e95e51efa6f031e1cb8724b90c6ed06495ebfaa7041bdabfb10be0276170934b63f3e460273871c69fdb951007315d3c86dc3fee01e5e744e2427ebf27bf4377dff14c3106abf1b3bc3434a858afdd0bc0939a33a190c6ad11bb6e1c37306b927df7ff35911b8e86b11f78021626f776bc06da98742448bff58b01ddaf9697721bacb573b53b92d08967b38c5bc50b3a19c4201786844c7f6e8294bf7e9f73d12a5d47d355b3ef08030bd73da51acc27f459623009e095ddfc0de8c3830a74353f960aeedfcadea3b21588d08ed49688c7a52a2548c1cf0"
  },
    "height": 940020,
    "1": "15aa5b61947dfb0053432474c543af89005d397b4c13e7db44430cd46a6e6434062202df449b3ba9e06b0c1e4f7c08bf9b882031f27af797dc7b520f19cbc6659795691a00c0e895be8a5d2da244f89b0f7b2172e28e8453cd3c6c98ddc1d8b5468bcf1703b411481306ecbe20c123a485e2bea879f85baf961a7104ffa1de9c6fd329129b57ca1a9945c6f75de245f985e602da4e8122d797f1bbb7bcadfcaf43e3d05e091a748e0772082b5802376823d447a20fa2973d0c47d398d8c265efbef78070caf49d75854bef04cde7d04b1599a631b762e5e9ae5f6c9225db16cf6a016f6de97398ade05cf36d571ac0b830bebfc1594fe9bdbb735cde0f65662c",
    "5": "147906a706eb2c6d39b8f07e3fa10b39ac3218f5332f4640acce0f82ffb6ea3fa297ee6e7905c139f1a25a45180d065990e4a1eecad8622bb4c64bfd783c98dfc6e3b50f2cd7a1b9be59fe3fb6b9ef2b6c42066b0145d2246361c29d841226505a1dcada6672900a554c325d48fa5772dc2c3ae881c805c1843c9401c0b39e63869727913d3d5338a80cf7d4844446034df8fc029cc93a8a379872d9f5b1f155a9f3893e2822eac219842669f3bbc8c474989ec53c48ed3a2232d71cf6029c0b4f4a6b1d96b76dc9660a44cc4e836ae186bd6439eeb4c5c275324f263f2fc954a9971db96a0c650cfc79958e549d6d013c6859f84c0ce350ffbcf6f7204d8d80",
    "10": "7b2aa2e166c0cfefb76a9bcae8e4f95fbaf8cfab744ebd6b9d89ce5895b074d5ad059037d4e82c0ec24d26190b3289881bf2d9dae4440631d4e9dc81b523d4fd05a325fdfe4cbd67c17b2188f2a77026d11d2ee58a254239115e4392d713ca2dfac699e65548fe37f7c966d338cb123ef1dceb012cce6016ac048dd2cddf4dfc8a856f1639c8c8888e753f69f582dd58c22088a11bc1db115f3a23bcd4f2e4e890204b1928d47e6c542f87ebfc93131a3caacaecaec9d3edd36452f09751cd0947d3b526812796b9f7a95e10d5c5f5b73cecd67d9c00dbed2413ce5f884ab11913ec842445128c7309d6de05f0e0b3549de39067741a05c859ff832f4a80da15",
    "50": "7e4c8268513e7790aaedf0dcf1fc39b2464ba6bb3eac9251cf309615386e4078d2c8bac9570f37afb049096b07fb5fca2aadc0ede4524905a400912b3f6167f4ba2cf0ebb1ecdef67f4b7e931bd0031979e434a6d76521a7d17fa1e2954aee1048a0f6416ffa01824f859c56ba89983b629178de0b3bb8d4741f2fdd2f9ec7fd2b32d706c755fc1fd134ac7c359baefd27e9cc25e802715b9664380a80e636c30aa39b96f9235a4e938447fd1478ce36a97d16c9d550a2bef38816a6c024e2ec1a8653a34d0cf1df8923f550b2b9795c2a609012ce4f891060db64283d0c458ad4374a346af738990fef866e9789774c2285bbedeeb427000ed4171d29e4a3e",
    "100": "5c12acf60e2e99e7030ffd96cf7aa80f75e51a102c652346bc9431197fbac7dcf53409c16d8b60f38b482e4a1340ad54ebb454f839cd85dd6f3ec545b5863f477a684f8b377417d4aa9e6d1b784f06c70bb28ba42df8271f9d3c5a31673f54ebd4e956d849ae87ef5153af0bd0daebf24b5d2a20df52c16593d8e2e3cb98b2ddccfb5b085e4200f61635178fb734479438a9e89532ce9bcbda78b978acdf3536ef3a36af901adda6ce288f599b12dd769f079eb33b854ae590e53866a4fe5045c0176d94d207256671b2cc602b3b0c7b239462a0c908ff21b46043a9b617cbdf3c4b84c5a40ca7a19592f55f074cbcb8450be8fd9b18f66f06960d83797532ec",
    "500": "ae0838f1565966abb70d089a91c804febdb1024ce1b671bbbc448dbc7327fec1662b32f99a486eb5c75d28914942a4a4453d8a267b995ee92cca4f5cd5c7e7424f08d5b757b38f06f5c6a0d070fd9d613b86e287da61c1e72c47d161b6aabfb89ad3a60c4c4ceabd898584e5677b4006d2036c98e8c3919c8c25206df220453eacafcbd08837d85527d2e9a8cbef97b5189c426d6cdd045950b6830414107af3bd8d1acccbc06d43bef7ba3f0b925984f3c3d91df878cf90d68e99c30332a1c6d19fa05abc257def595b7e2b56f03c888330719a92a14d8187cf6d41fccf3f5ae0d61ed055a69668fab58efca40cbfea8505f35701a96082407666934dc2f8f3",
    "1000": "4f775eb25d2be973fcca95d804bf808fd73801672a5ac818a70a6f2f1045907e28d84006126c20007cf46103e91a4b09540d782f00ef012af984f632a2208ed72c0d6aab29bde26846fe23e57c25815a401ee07e04ad408e3b8eec7703d3b34da8eb9a438b668a04d1aa41b309147986ad0e8bad726f0bc87a2dcd1a35581e4145e0682da895c764c1bc36593f5226dfe77f38d6d5f9f89b4fa513d8a5ff8871f8b28aa2631315733af1747afffe5aa2ad37f1a50ad4130e14a7c780c2362a638a32218ef27e0f12a98cc9e76da2eae1553f7dcb5e09d898c0643128be85a11823d21bb0541c9b897f3b9b0a564630fe36c051ec4b5f19d2ec5150569e27c987",
    "5000": "947e0f4319719151be26bf70d25135cb8263bea8ef214ad39b4728d2c07b711ddc27a20647fff0397bb4377adb1279b1c6ba98744871bb05da4d7891cc8bbf34b81cda9f38c21ed5105d58e61c4b3f5265c850feb59a3cbf0c09a2e7742458e4396116e17322247bd39741b88b929090426252a4128110aa630c074e5658ac77cc5395c80c1a2bb178b7b1694c916faf7e9b2f46571de9b15c51312f8402bb6aa1e133719a545172afff864410b73ed13766a9b028d2aefa5fd8331645d9ef091f76416302d3ed7c41f990cdcb5288ae1779c7e4cdb0c1b7b7f37ed0ef1154d1e68c434b3a387f8031a3eb9cace961723fa1830eba08c6c693ca6ff1c9831c1d"
  },
    "height": 950020,
    "1": "5dbbdd3894bb9d297b68ab6c3fbded02bac956b629e14a975c2cbaccfeb4cd36608fa65428b4028ce57f4b80be328674afd3bc621223451623eba6ee0b0572aadea52827e03dc464107c481b22e76f541e02accc5c47b7e8617d1a3ffc9dc5e34502384418c3ce8a3c3d7cbeadb76e1d06992aa5412c12b506d0b7c662bf944732093c3de4bdfd91b18ee1ae73631d5012e43e99f9b43dece69aa6a524608249f41af302be14c7757dbf98e8cae816b869a91af4d2248c37f627e72059342f9ecd52152293616e01993511fbf93a6624cd4a770e811688476900944146ec7ce20fea9a1d9ab1e22cd110faa9daf7b34c011ef54f62f52692671950d519187869",
    "5": "bd105fa872bab50110c2f22220b146daccb44e8c4c9b3ead96625c85979f504e26dc938617054f1d09db9a57b0c7cb8342a9c91ba3a5e34bd8f524cde395c0952e775cfbce09353bb85a51da2f61803f5a76330cc986deca2ccffc2307319490df59b19c37f3e441eab42233f1ad90549c5a4560b2ad7e9d7567f0ee968d1bf1faa8baa174774b9a44f32bb0f56e4e725711136d72a99b29761c4de751747ecf4f6b181a4a161a7a5ca493f82c5c493bf245178f8f998751ffd95b35cbc6f77c6098f325c0cbf961970120f4f4ff1420c2a9a21d00fcaa753ea18dcac2938f2f70e5de75663bf16d171102d4f0a25caa1509e37395e6a2a5fef949ab321d38d8",
    "10": "5ab489a52b81cd4735827c20743d1cdcdb6d839a99833b12c4db4c120c4bf03a83fcc35b7af837d746dfdba4beacbae7c660762bf49655c344d95f4713e069e79a98fa00998dd1362be3af50cf7e9a2d65c97cbbda4a1e3c11de85d8298ba07fad840188da58f8fe4d0fcd450d0713b57eba82eeaf30197852925fab2d46d3a993b99b8fbc1c49f47e8f67300dcc04c48c21f48da47b763ab979cb91ab272c709f151a8a0ceb53939312279866d470073d0d012deece7ef23768cc007d977bea558a48d1ebfa47cb25d77f7753c08f791a3c31abe8da41930ee00036e0dbb1df58ca366c3bdc3fa6e3293fa5ef5fd83bb84460e5f80878b1238ad69df9e9381f",
    "50": "262505ba1af97dc950efecc7329712c330008cc37bdbf4fead92dae434732270fbbfdd7b0be18b0316efdc784a1bca9fa87595806af9ae2f986dd58ca34df2b928f3908f2a6c83c5c319d29a9acf97c26a233c64a4e0dcbb95fbfea442ef819eba6e16c78ba462cf51b2bdd0c0d7e45646b7254113b15c04e682c319c69ab6c4e3e08cb93f4521b3fdbdd128c42647af54b395d5a4f54bdc0661d926c98460213b89fea1f0487154492f06e9f7cceb0ce732cb69d98b9889b1bc6949f49c150b4c13a22012df6540139caa63b4b514cffae7b62b78a8a5e90bac52ea8a57be510506f955e3153a22e0a929134c5a9ea7c959b14e7758609da68e3ea2068a99ba",
    "100": "9ab4640438964838c6f3e22e017b6cdb0bf9edf4044f35024d0a29431f98412972ab282be66f18e4921cc6895e1544960494303658c3afc512035333bc53550037358326f17dd72f4d82c9627333429a7f7fe79b2f4643ca5b5bc145b1b710cb104b9b16b005a21e473a926f2605c677c580b5dd3b542f82aa5a3792c3d3956d12b05524426f64ec57bd4a78c1e2258b5801f1f64c514b6c1753e13ca8ce070fd8d6afe23838bb089269c00e755e52f0381d350a2d0c13b3cd226f8ef50717966a332268a2a76f5492da6d220be406a95d226192108df542fc1dbbfd446d77f7c2a9b4296a7e59f53382c555290ea3e49c1b4bd68f0e91ca31fdc0feba0554a4",
    "500": "4582f0a2fc3d34f94996b120f7a52a2b97a1a72c28326e3e4a402a2f7cb8b1158be2c0979d33b2cbc4ec29da98e6dda2249d10c87f09afb7ad24b9efd1554850a4f56f1e0708f1911986ed054f02ab7e59240ca25326957892fef8df7b984527f04879436966648ca7b5b1832ababa351b67921955ea486a7bd37b48d202ba64de770aa3be08c6d14f9024fce4adeacd1af8f4ad1a69814a446a39992d883d2cc946a95ca2102b1379b1d9e145f69b22a45954951c109df2a584136eb8c8b9fd1252fa1f439a27ff5f3e6cc5c107eb77fa059989c3b1ded6226453005fbf1ffaa4cb9b0c56d58f84f377a0f55355edc2824e985ac09aa81ed3a6a91024bbc5df",
    "1000": "9a4b9236477b259752120477dece65df779b409e207f5994cfed266258d2e0c205341e698d07e740535ab770550ce7de9ac130077f74741cc011641c6253f43302810e017e59e6e4eb285b236f70215198439207c62487aee2c46b68590e2cb9d30d5b3abd2c619404907725c93469c72aa00aee72e15f752805b5234ed79f36b90699af1af63995c39cd1c00f15b6aa184b0ebe864d63a352c36f78110ea26876bc7f87b965e5bab7b2990ae2832578ac800c73181dfdd4ea6d49a040547d54692725c183dd21a95b2ca9f4acba3b2539ce8e8ea98039d049e8339ac07ee52e0d4d538e89c1875ccdb7be510ee85fe1d9904b78922135e826e30c8ed19c0a78",
    "5000": "35443f26394eb3d05b1cafcfe4b731bf14f730d30e0ac3fd4d5a46e56c7e8fba0096a554d79b8826aec502e11adfbc78cb8a393e07713cd9eb2bc16b831e6cceb94aeb0c360ae71ae8d014537c92ff67f7a5ab2e5e8de486d2568564c36c1e5104bb258f413daf143a3a9a2894d423da5f580cc550d9de22e5163fbc225ee2f07d9da02613b0c904bc2a7e7c69d21922fdf04479e18c6e3d93df9c392cc3aa7933af4db7f2fc972d41543a5fec36df8ca426f763df84dd3320bfc8b906e379362086fa319a322eda356257665a7d48135eeeb3531976287270035f92f3ce6299c0b72aefee88c4be7a0e5171ce3103105a9e204c0e31efefe7ac0de97aff4021"
  },
    "height": 960020,
    "1": "1ea6903434669d0a80722348882e73906f19d1a772f173dad22c2b378aa65bbb00f7941bc28e1f634a5ac817aa42f566ee86ca8b56befc48885c13344250fc1c1669aee851b1668a8d3434c9133274158514e3a98b2f5b1a8fe843669494cffe4332b515f4be894e050de2bb5a598bf9cc20c6608414be5d32366a5abe68ee9e18656b9fb576ad6624afafa2462d685691def3320cc9d352a426712276dde7e1739f9a81495bf35ddf27326d0bed00e34fa9569582b280d8795f4b8b68095bc633942c0cba851bbc2be0569607413cee54df717cca540a54205521a434a6d4b5a41426a7e2e9bdf21138d16eaf55d63c30c478ad436ec8fa96fa8ba500c95f10",
    "5": "b7fff747acfbf037e11a0eac11dc61e00b4144cd235dac0de0fa48d9d66057b5d3a323a1b3b783741bceec30cef83e6c7cb8be63cd704b9c8e67a6bb16dbe23232aec16c877b03eeb8e1eda807a3f0b605444dc8f03fd25508cae77cdf338135d9b7167b174192e8ef7c08507095a6be85963ca7f3ef3930872acfb4821aa6e3973126e0d647b17f17f6cc5f83f69f6ca6fb6172b6670d8808e8b332883e89c13104d2ffbc55ade17248e351a3adbec45392bec70a9c2b279bde38bff4cb63a06ac368505deda8520289d5c54c70bdea9554d9426e33c05c2bb54756117d197dbbcfe9dc4cf594f16c9b89de0d245a5728ca1501d3fed19221f4401551f50a86",
    "10": "78b8159092e2d4007e1bc2317ca31819c57a485a5e89aef8308accb5fc8c31a3bab00bbaf457ad437a9a050c95eafaca14e463e289e6c86350ccf96ed7f0afa29eb1a0ba7da1b077410a8bd716ffcf9f504530ff45cd7193ee209bd7a3024557679ea8ca32944f1b5895b29f86b8785ea1793a7c431fbc30e7aa09cb38bfb880e6be9dc41b0a04df15c89490a9b411f1e2b450b41b0ebba0e464106e035286388315d794245c5ce4f647a8ce96b51dfb960c785d599e06c045dee2833ad05b8c04d11e4b9b4423a62e7db01b01fecea6583afb10f563909256acbc7721120a7888b4062ff0f250d7533b183c46b6e62aefc40cc6669b3f2bbd9556a8703e3498",
    "50": "bd6652d24178adc62c72b6d40fbf098a71736a6340270f560d42362529b2fcc33ac9841703685becd4d2f182806894aa61eee2679dfe5cf82f8039fc413f235db8adb6db0fec09290285631ea694bc37525517683c07e5daf803be42803697aae1d49e7087f5e368bb0796c49a70c7f8f911ab21f03134a8ff7dda862001f05cf92622af42ac5c377446d2ccb3453e962a881ff57efda84e73dd6588b8a74fd21214c1b9a3ded42dfb156780c6bb0bdad7fd90ccfe55a07ad19368f0817f2c72436140723278028ffff56d4e1fcd7dd9d6e1c9ffd0c2fadf9759e67d409b0019f01913a6629b94e11b0e4ab3433f2958c6337ea01eab66084a757b6bc227f83e",
    "100": "aac6345d7cd12b34d08e157ed8c13c39287965083e3c6ca89bd219d97ccb6d3c544f6759666eb87bbda7849873c5c92cd1ffba528aae2ec2adaf616b130f8e93a0f7234157df36ca3c7b66923735187e017c891db3d07570010f75693064b4bcc941736d135bf6608b46cf73de114fd2e7abca68cb02bbd2277b753b7d255770d65b947027379ee610ed101219235de840c9e88b57aa68cb6d76080290a595bc09594eff4407d5d6b03d960589b56a0087b15da473c358842a990b7261608a97f60230bd809c259643e11b8711975553026e1a42bc5837acddef2c247c979669f1fbd94d107950f4cc574bbed435eb90e3a04076ed42dd3b704e3ad885a18939",
    "500": "a92c3a90b4fe71935397c5822715faf449a1202d0e1c34a2ecee7d8bb6b8b976bfb70d23099efd0a5529d78aa7b0d262f73d87cf200fb11bffbc7df0881d06c46f3f556c06d95a7d071cf288c8fe8a577a46cfa0f4563aaaff618ea98952f0c8ff946dc0f5c82ee3ab37e982d3b8d83aedfca36fddc3b103985218ea458e5433f626444bb090a65c0653c9c4be668eb7fd9f5d1b752e9bedca7047e996bb310f2b8dbd272162a9bade3cc9a2abbd6932d6c3af384cebc1bfd53d84683369ef0aaf720ac75b940b08ecdc20fc20c835048820385d05c7104a77ae4a222129c291f5f5aa845e6dee4daaaf4d0335d39bd3a730e4a5d0e876f547e28b1e6fb0c2ab",
    "1000": "2abe2db0b5a6a9a653341ff31f81e231c6af44169b072ef156d289c001d75b50d9437fccebb608cb317bfffb5a58870a936f68e74eb093a49db5973669748ca29b5075a9d646a1c10cdbcd6449759bbe5acbfd6de85cf924bacfa493b72b39df2ffecd45bdabcf37640062bdf8c12dd0dfd0554eed22716514495242aa694aa81e4126bdf669c4f34ad6a5ec70db6255d331dfc49b4af3376285c0b5faa1f66f3558ffd6c8996d7262cee68756bd8752029570a11161aa6105bd80a8bd8aefe52466f36f1b57b4b760d8d11e2b9da047a3243fc68364cb90f995cf1e1a06dcc6c215ca911b5c42bffa4b906d0ff2d914e33f22fef17d6440ac39ab40df4e56df",
    "5000": "a9057b75d6aba393d32a9715def784efffeab24343e5b20ef6ea0b47d682c10d406af244790161069b19defc3670ccf81866ec074468842466e5d694dd460f545b5081fa0d5547ff052ceb74232ca634cd51ca0f8b2ad1b5147fd62e997994a89d1cb6ea86e652f4c31765c186c1ef130bf4dc0f88848787d5ba34bc2ad7da12b5a89655d7fc3b5c560a9e85540c37a3b2709d1e1d2c57a33e3a7eb3dd340d905e31eee9fcd69c6063101c6e19c00265d456894bad2836531925b705a26744e543bc3f778c3ce253668fbfbf6278d1e219edcd1abe61d141bc468342b62c0980e51220c32ba7313f5f5d2428f676effef42f21486f092f4450023d8331f71e70"
  },
    "height": 970020,
    "1": "c1a81656ef24c43462fb4b5ed4a26e1c0751a684cca422ba4973d1305cf7954798815f0e89065faa9fe69ec9e84456bc379e85b6e3d4d3262d9a9d512ae1b3cc0655f4ab77b60477617cc68894b245c29da54034c34b50c759e0d6b24e09eafe6fa0107b505d900e57e168aac035037673b4570316cd18f9155a6696af1faeae0d205ab8eb1e047973d71265e288eb09ae964b238acd67adf8974aaaa05b85a33bcbfc1327c7768a5737264a3ab9525358213629e544a5e714602b4f8edb3db50dc62de371a1da7f33182c718422fb3ef908d8ad6ed9d34aec8e9c79b4d9c955464d3d57472b2390eba68fe34857cf2d068b622b22b7a432c436941138efeb47",
    "5": "60df7018c0f27b1b30b4b7af4eb6cfecc542cfc486a83d2cc2d98bc82aa8ac8ba674125b1303625a9b65bb90a8ebb06c89f4d826c648c66b6808bf52f126602eab3383dd468bc36496d72a51a2b475cd8dd9fd049d92a1be662fd66055e2a53b29b22ba8a34c9e3804cbf67c570d09dc12fd3fb76c19b7d1aa58a8aebc643a6f01d63f5966f49a6a849b100784b65524e0aeaf2c6ba50005dacf460e71610fb13d70239ac7fca7824287a0531ee1d972cbc5414d396a09672e9a358e33e73b95eba5cbdfeb963d73b3b9611663b16097420be0271a040819f29bef15b2c75aca1df6273602fdbaac661a07e23bf9c20a23e71ff9584cb316d1ed70e8a8784ded",
    "10": "814dc2e830827ad89189c2b64002e9015d547b2cb4607ada3bdb6834db629251c0de4ae18f463819679495c36fccd74d7bc69b0e9877d89a4716b120f40ad85b0ce25b9a2a4954cdf227e7e22befc50dbce9150ce19f5cac10799b189897a32d3cae821c7f79a4e2fd2632122ae661a7b5be4d8d994511464ba548fc706c01ba2483b2c63cc4ecff3b3535aa591ad48c2467838475ac7c407a337588a45650dfc9f673bd9c5e79c5112ef610d48286aad17a410db2f1313ed9536707420b02ccf5f3efe8744a86a0c4ed1f6c94e2a0d7d444d27eaef8e756c3cce1c1c80040d3c992efdeda268532cec403eaec2fea3480c081132967d511916c60efb66c8234",
    "50": "94cc002af6f9c2b9f28911b314c45790371cf0895b7413823d8f873c6401b57d823f9a88579152d9bc722504118825a00444a6e97b4c736750b10907bb53dc43c9086e66e651c0859b673e7ae4bf54640a4350aeba4443725f0ef89d593b81fa340a7cfd8de6c9f34c9895de8a05bd0aa79fcda5735d2a8ed58fb4d565b6396db23442702a22cfd149ecea8351fe29736095c057725eec93b89cfc51832921b247baa705a031f009653cb4d68ef804172e6c476ab7e6e69d585f5afc6870dea269e47989156fa959644c89853a62c9a76cbaccf9a999506cdfdb14b8e8d8ba3cb38b11aab33ad1b32600d4340956c1f3a8881563097d907f79f4d046d8e7ff0f",
    "100": "a2fcdbd4a22acdec8ca95cf45e318fca9466894dec233085427875897ef68f74ec4b4332214a46adbeda2a0b1f0a576ee17fb8206dcadce48231e2692c8ab25726df66128dfdeb8f936a34190a26e22e025b00c2bed5589e3101db63e8f4a1c95c10aef9c83ef4d335752fd38a61dddaaf6f00aa8fc7e7bed3c4aad024722440a2b200b8f20073a795d3dbb7f64f9fb1fdc458d16949081ac42c292e002f08980c8f2de2d48bb1bc897ea4e866c01eccdc147ca12d8251aeb34ac5c8ab5b73f9041bdfaeacff0fd14cf3e3b8ec6e725e099c5aee8c454bfff4dc00618e081a9236df71cd8c768bf63c0a3737b46e9b762b92a2dcd54542070b5daf39b346a75e",
    "500": "703d1ce97a2dfbc15c9702da52970a9295c1f9bc39093156b7166c87f009c72a22aed1c455dd90a5b1fc5e5884631044d66d6cfa37973721733ff2679c10b468687dcaa7073cb092171d8a1cc1d99b7a7c33d2d113cb288d20ddf2f14658fd926749076c59cc77d874abeb23c21095bcb9198e345ba25714e90fbcdf21e70080f075cfd9e6ff68b7586a7ed579c3a9c3efb258e3813c985c561d1e854115ee5089ff679a603397a7a19681f8c0581a0456ef624cb834d5e757bef5e4e66ccc184e0c02741c2c44a38aab0ecfeed3ce015e14f67127a021026ef12c947026caa1abff752a826cfe35bc5654ee6ebc2a21d0be97eeb3d661a24968541e8bd161c7",
    "1000": "c571c03bc39f49c38373a87bf74844e01a8550e4b1939027442a59844536450f63fd777958bb21afa4868e5b4ba039a4b46384396a3978ece1ea2e03b0a2f09bd723a0323af9aaf898b532c016b97a349d71ff8d9b1f78e60f5cee2455f2078ded222f998d519ab181217fffd84c81da5c89acca93f6d737c23da65f10d3dd42050ead10325e799b7bda67ba6e75a7e0751eb6c22835f249b3a2e050f369572f7d98872b549dd135e1e27da68ac471239af7ca042a2fa1c78c53f439dbc975226f68271dab74d59f760978eda1060ecc08ecb9ad760b8352d4dd0d5a88bd4822e57da2d17dd46b52cef0d7e0a2413374eafa59a16f8d9b447a783c2f38eaee18",
    "5000": "4b38f68a4157c7934d084cc7c32d419233f2acf652ae348127d2ae0fb82e121cf1471367022ae553043877d7b7cfde713a51e29907f4787db2e0052ddb8b1815d38fe28d081a60599c950258190c8b7b92b58a4afd0677f2b3b68fb705946fc6abdd9cfb3cc01a6da873391e9ea7a88ef02a9b90b3ac9ff0c7e3ff6b09eb04eda988506f4ac27a33be3d83bf448bd7303fdfa4e1578835d1c182dd78cbc389670d0fa98773f2a99c04965e31b8b72ea11c433f504d8129ed442d92c3d4246fb70f7bd4687dd9fcf899341ec495e82687f2793e25e8c8ddaf48ed065d446b0feba2e1b0be213b91ef0006fe1d71fdd838bb61709770b9acbd5aeb3a92109a0d36"
  },
    "height": 980020,
    "1": "6014bdb2966ca526db05fffec4e47980d733b76953890faa0638186f39a4cb18f145c48a9761289061e6fd61aee0c7b7b9e5dcd620d932d30b83937634e9d5a183315cc9dade817ead0e3c63e3df7c89cf3683d39e7fdbc7719ad1c3311859e6c51ed5af35cb99661311bb0ba35a48e3e331b9aec088d54e3668f07f562f4fa067f96dd18939cd499469da69ce59a5e8448a251adecc4efc7f196daf4ed1bbd2f02c7f0596e3e1a88f4200795381da9c1750a052ad90e07eefb33da52767bf08aa5bc0325fb0c2ed610960e0a876fa8db62826e73ecfac112a50014551a1a1807c33d6f211dd7444da092388a1fb3d3b81d2d643593ac3d973fb3c7bd09a7d2",
    "5": "7ba64a6cf676ee8f36ce9604687b7472e670c253afa6c8ff4bb37c63ca9b4a8bb6aee34a13d7e91670a022a7afb68c9fcca48866d44a10ec6401d0b45f6f68a000bb1022cf50b52719ffcae27f1630a1784c9e2aea7ad3e18df90eb8b991f842b51a44ca27029c6464cc98c424253352b6b91486065059c3074a4a4898b3ed22ca0628c7a3ee541f2cc49e5f126cca201f81d1bb073119ef1178575178d9dee3230a15c402675bba78b59068d457bb3698ac5eec9da54c057229fc4fdad07c80313d987e746bde852c42c0c4c9f1c1df7da9c5dd8609b8e6149fa3174fc97cfe06f03f4444f37df6cba171ad9757d13753021973d14402e079fbae3fdd0d51b0",
    "10": "9271caceee1257c8d4b69a714dfc1003e321d62401608f51405479a6c476b741ccca3effed5f22b60d1fdb4afe56de8078801755d89ca780b2b29684998cae34aae9466c42d0ad0c055900fd463adba5a445b58431b0c765467cbc13c58f972d8d6037c1db2ae322a61fed3a68180e0ab92075e727c240e21b5ce3c2b6c1ec3c8563589946204796dab4c929c1047d87da85d7363664cb62a0fa17e54dcc8c0ea8f1769f3e5d1e7cb8457c20c90e5636e636a156aac30405b88a4071e86ecf565e857660558b353e5605dde1d1e4ce01f1b91c2265c3006354f6657dd0a3a9f169881c177bf3f81dbb39754fe46d3bf44098a479e08aae5b36bf75fd442b24ef",
    "50": "b8b58ce89680e230e60f444bd61acd8a62831a895edfbe9d880913564b264eac3d67c7cc3f38b8de386d4d3621ee6482a49baae48222d1fb02b5d47cee725336e7b77bd688b9f4e4fe12c857c4fd77fc85b4358ff1b5b1e7b1bd71c2b2b6411c5ae6b79401c18ef85180cecdc178cc7744333fa2702017a7ffbc8cf071b1094fa36d7c03e40882694da6fee4f268c1a3e872215287e2def36ddbeb897075949d07559cb311371839a80de6341e63ee43607ab811258fa2e61c8367b92d1c83cf4114186d10d4908d2064c3be3e34c973e1331a71c5681ff0b0e98a292960feef2f7e0a4853b7af8e2805ddcd7594a2034b9b5f71f61f1d5a96d7eb08d4052b9b",
    "100": "56321b717510e109c7b2b6653ccb14fb2bc8b553dd991932f8a345e57d0890fc27751e5cd18df45e6608b8a40fce5c72b1aa3b29c4277a67536e2d88ab815e26163c9a3a714444069420488ec18d696c4a2173530dbdc7182db7dcbaad5b8b72ff64fc404cc6f3d3a960424916cb18608cedce5ede9e75ebb7d2229d26cf3b226136e5270b9ba50be2778c32743d778cb68528170e0b729401ba6cb0181cfb847e18daf1eb3c114df6724c7dcbbe1a336db5e007c0be49611167fca5184b97960dd6be7ae9df223b59a8bab7cb9a6f30cc7912a1fabfbe588289855ae00f402e427f7c5b569fa0f864712e07a86d0f7bd51f73162592d2ce94e6bcf2ebf16e3c",
    "500": "81362738086f051a184daff6d2eb2fd3ab4e9d482e36e557231988bb7f7b7fb512924100e3470e4aaf565a2c5b17b7928bae832b8b9b055807ced91eb9fd62af87fa9051db66f7154ba12fca5e9f5f524bcff0a8c82a0ba9fd2e2f5717292d41aea195843672ff75dbe0a714a3becf810ad78f3a25e36bb9cc3903b642c4b9f7f6cc710f24b450bef60b0380dca658c8f67ddca17b2bb49f99adbba0d83457a55b1f622142e334cfd212e028116aa4a87d43ed847b59e2a83c754e58e1d87070c3b78daa32ade1c6a68234942fde42b77ed04f9a80bc8e8dcb2023910d3c6d3653b3ede5d7187f99b1b03763b1227d07980dce47c24dba3e2ee392b8845ed634",
    "1000": "711f803faafc755db36240b093165c4435a2522fadd640434f6336dad41e6f587f11688ae493ab92aa9a2326a7598df982ef9fcbc5268d5799a53d16104a73ba086b109ca267b62428f67778820d4e557ed714c75a29403ea6e3f94f815dc30c1d701bc3d7f265dd2a8ae22903a08d81c62360e7808b6888d5fccdacdb201ff4a2e0e527423b2d8622ccd5f0e0d64983778564bc646545cb332a9ec2b3ba0eee169d1133dab9b71ed18fa917e5bd1f8d453a6e19e42eb8606652b7f80a804f87dbc3e6aa083e1a2fa3155a266ac8af722469688893cb2df73db1546901050859b87dbf2acf77d85f80df6c78be534a1b966d90a49f2ac0c98130a846b2a81a78",
    "5000": "4c7230a07054f22af97346adaab24d42099e92e0ac0d919b7ebf8efdfbb7405b4d40f3d3eeed44e734de594562b299947508c2bebfb75c11f70efba00da76ed5a5b8aef61ef16f3efea8e6ca1dcf4900ae8ae2ab00c1ddd4751ca53b6ed5db5b50d5a73af8c762b5d89563f1bf971b166c146b806bb463b16de158bbae1e5c37a0ebad5aee12660be5b9be9069fb72eb01697a5be36a3f96ae3a7f6a66730129eb30a0bc4f5ad3ea5c656c635b29288b0f38637e32a52ff7053fabfb87695db80d4e555a2f31cb06cd8ea957d44f1b4e5565a491d9a7a362e414d52850303693ac5d87bf5e35479f424eb2e8a7969aeb0f96738ae2915e6b9e7084da6a24985d"
  },
    "height": 990020,
    "1": "55eed4c1a643d6863de94b63c5fa770881b2e8a210e018d9e3ffae8d476ece2d2dcf66f5388920039d8d2d91bc84349328938bbea7b85b2053c15a213e1f667db4db2053fddb820e50a48e989f66df466649f124ab9448106a8e9a13d12f958c01da7935d520ee309c7836a8e33a67dfa973d2c40294de72fb8268cb1afebbfd6d9950c8d7dd35ff7772f803713dd9450ee0d88433bcbe08238bf501a00c154788c0dfb80910486d115dcabf0bde55da5fd65386ae6c3d198a25d97f9d306b7e2eab6aeb39a1d5d83f4dd221f9403236afddd53ee9a2ec4a82b55393658344fe816d9e6c8fce2038521bed659ac9aa24851c335e71c85d0a3d6712c0c9c4a05e",
    "5": "56c4e8014fea76129e5b0d81d8896dab79148289bef1b11cf9cca2726ebfa3d8cb724c7b3225b70e3949f5c7b5300aae5c8030ce17c6f6be858df2a9a960f5c0058e1c475ee2755e75c6302e506b52de02cad9840e942454f8f61b6069debca6d70749ee7eead3ba3f240f5e73d2e8f2d9d2aaecc0bb86eb223d477487a4c00677dba27824217a7bb9d10166b8bd0879e8c5d8df970eafc7f28a50c57349f9779ca92fda9b7bdaedf0499d9812f6b4fec97d0f046468bf16f5514022be42addfb40b03cafeb6335294f1c9862814c33559898128aa1ae339e0de8aea54511aff39c01e16922cf813b19a666bec230131086ba494d6dd2e880e7287b91e454bb9",
    "10": "63fa34e94dedc6f86f550d02cdbdacf7d5fca0ec0e57f36e78820a7e9421e5e95cff560c69682a52882431341cf0aec81a6c6f6d463368ebf33612bd0bb0fc2dbdc9f2e9fa441165a3f7ab510f87980f98e844d020a485dd01b67fe8196b89b60c3a6ac8b693117a91e4e1675fad3b58c12d1a99ef6b0e564aa8ceac65e42be5b91e753ff90d9352b30e3de8c92de913ef2798e2c8697f5787a8b064107c261933421d29467bb9da8d99257484e218ba551abaf04fc45f9fbf812f3a3f6ff67b047ebddd285950177613efcd760195fae1472c093bfb868cbfa2fc71e03bd3a6142280acadc5823d7e301096b6ccbfd207459bcda8f17d98a16bc1ccb439311c",
    "50": "a52c906c6b4dc9a8a7f03d9b2286c27342d198af3b5d13c4d95e80194eb9731b12d786b4a20f9dc208e4d3701e97d3b23beb4a1a50b17fcefe45474b71b4da96ad786eec8f6893ec53d32ccbd2abb5d470ed1ff419f550ab15436bc449fc03747c90d0fb170b13b89a686281a4ec6efda02f92eb644521a1b698cf48b15c4cc49fb2edd420f3224485cfb9d58df5c8896a2c38a0d468e5c847371f44a71f6a5df1b9574a2342ae12e38f22d5f56f7e7f18514a4770baa63d58b4643fb47336dd7719814051ba5e2292be601429865b45d149e6fcb6a533533a2f47f9f7f29e674bb1597ed0366dc579bbead22b73133ac243c60087dab80a57f9df3b62751362",
    "100": "5f2e4063dcf8d56fbf2394b44d7f2c87bd030c2831d7c05b838298b500fc8e2120497e328b2000eee91baa4c4adb47c753cc53fce1dce8b824367e5b2230e6b74bc5e0ba93cfd8f89e93c590fc0d928ec51ae3b9c38875bdbea8b65396c7c2b5ff5dd34e464a951d1eba80409c4feb860da114fc7af46b00e8d412405382ac1be8857fa6e8a1fae17fef366698d312394847a1b45d8f9600443300e5e22cad174478834882f10c38d5412c50053911ba3507f200be2f9b087df35d65085cb1e8783f68d6391aab27588e0d73fd220018db0ba1abae0b5a54120305dcb5a622b3fcfccce724ee8554e00aa4ed06d4ae35c8f8ef13a3b1a2cb47513c5318d50def",
    "500": "b7f449091d3b1791c1812c91cb2e87f983c0a4dc47994a7e42742351b27f0e9b570ff8ce451ee67c3bbb4a159197044b87d7a786ff255be0dd63b6bfafb7f8382c1c335650966dd00ad64df3da5ef4ddad739993dba4d707d8071b98a9eca2896bdeb5908b3485cf86096f8c7e8c44db22e09b91cb48c006a4683193431c7727b75e3254e131a9eeaa2a76635ef8530d41de3f017c5852cb61bc9fb3e8e152a45993221cd617a56a023f078d98f31de3f9623c19f898ff9a5095716fdda953db4308c21c6e9e64f7f8bbb3c698c54c6ce2d656c50afff4a85d5ced3278f3edf7049545ddb7b47d5d649caeb1bb0c20f10c4a1f4aaeae4a4ccc6fa9f30ea040a8",
    "1000": "80f57221ad426c354c062d99fd1be2f21c38c155cbd2ed05613b5c3453107e106cc863eec8cf2a8643903fd60181fd46ff94cfb93d0c6aa6126d50982d15ad52fb91896d597c207927f12450b67b5c72cde220d270698e085a9679785d2ff2e144d389b7d5029d0092919681de2f83b7e7d6ae393f422bc2e48604fe373ab8efb95db897ad3b10d37a547e1de643d203a7cfd2929386fc8fa9a691d1df2a2dad41fc4fa169548f98e631d7850b2277286ae51309feb740855adbc8ade032742e326a6d8cd246d9a26f2f2c603668300891fbf1f0ccdc243dfba64caa47e37054dbfc9f879d66ffa0113d0f09ecf2e598cc61c3ed8c652b8e46cc0e4f4787cd4f",
    "5000": "56aeea36032ff5ffeb2bdee5a2def02193191c096fc6dcad8614952954b3e5b648cdbeb77a98cca86923feec3bb7a12571aed0a77a949e728a496ae5cb0ecc90667cad81065dd24129e1989799baf4d77d5e013ac2c7521d0f5fdc69996af41868e4ccaf272b5b5c06d6f93c045c599acc9d631589ed61bd34952a2186789ed67d8822a9dd60581f88e953a62578b0f2214f26876a9f9a764f105452c292302da8a5009c25fb4c5b0c95cd5ae8f2a9a4b90739cc65e365795acea6b4f8f6b1b3a171a49d93bb5f140d00d980f15266184fec463e63bada178d60e961a707434547e2672e46cb8a736b24a75038a4ebacd55fa32f8a0d7fe8e8db116e9bb37e1f"
  },
    "height": 1000020,
    "1": "8d7a55417613725bc63fa31db56a67352478eab37f504185872fcd9ce7941ebd627c2c8c55223c9a9ee9e29abd05dbdde3341a5a1131b08e2182577abe9d63bfa8341dce375ed7249920d80ff33bd82be9651d59f40d63d59653cb2a37434e5fd2427da4ea56ad4e341f8a5732a8d6f9b9f7ae84a05864edd8dc8a9f21df8fac2d3f97cf5d08da018f1aa38bc31662b38ddca86ec36595bb12f3a2370e51f7f920ee27835a9c44eadb52aa655c008af6ac3ce1c96c893f266f4c98bdc693d9d343512dcf03c732f3ac4ba8245682fbe3f643adf913efd26196c0b24682fc31f54dfd49e89351d3106c880cbb49adccdb9943f931e6a41f3f6a96b1b8a931e405",
    "5": "328b9c8e26618ceb4e2f3459bb792d2146200ffa120ee4eab80e759676d9957581e23af0e6add83bd3cd0111e8cc5a918698bd42dc9f43f7ed5d880c540cb25b8f292e884b702780ae9a0e3c3fe7f73d08260a65aaf3d73e50d4e9b8094d096af84c52a0661e45080ec578e5944746d7a161371dfd7dfebfece2311cc040499ccda17a093c5e3906e3085b9d02da6f98430f7d2a3e4c8defcfd7396a51f2ab3ad0d358545638e4f2fe1cc83f45ffd536b4efd485fd0874a0436e9f52e8ad101c54337272325aa736f0fa4e02c238aaad95d21434c1727ae79b6b6f41cc6cf2f49f78b85aee13cd5f8e0ab4c425ba3f516a0b7642f7131d51abe70103874357f",
    "10": "b5e5cd880ebe8711c81efcfc720c8bdd0d06196c38cc600d9899aecf0c5aac75e34edee63d47618279399151c101dcba9fd6f290283c3b65e89c9bb1ef9e5318c59870c24776d7a4379ca583031f1e7bcfa4f5c8ffb83b01d8641e8af9adf70cc3b9848ceab9b7c303ffd0a53b201b369ffb98c8104ad89e268374e116db3c2872c28d47187a55a6ba9937e27172535e8e1975dc6fa67b26e4617560b600811e21684271cbafc3269f933e4cdc84a126c10447fe2cbd5d2c2c28f37569e4dda941788c43bc5adbf3a352ddcf3563e11fbc032cddf28dd5ec0fdbfb99c2b6566d5b14d5331ced654d92e9348a6a11e6a1871a2798060a3685e8950b10f99a5186",
    "50": "632ea504dbf0cdc55b20910ee68bc9f6dadb5e2b78f4e4e97b1499cf87e029836c279853b94c085b03b4e70081dc744aea214e4f3a10882cf7256c38137cfc5f37b9e615b0605a452ab6308b8aeb4f5b98e6ad7cc318127b285784b8e2209afe47d59e1ec24b4a67ff2a671593f4254048eb9edd605194004b6982b31e3929fef79fd01c67f2fc99cec064512b74df7b7aafb7d21515d0f03068a5a51ed05cab3a2bbc2808c87a0f065e704e4b614cbab9c696ddd2726ef29a11b02e0f6aa164553430817af46db519a6266ffb5d34c03e02218b28510df452c3436ba8533c79d2bfb83c4158b15e26dd38ad8313bcbb455e4480183d1981719ce54afc95c07a",
    "100": "aa4c3604cc4c001b40e779aca3979858fefa53acbc67f9febaa7797a15a2d3dabfb48f7dc541795d07f549f468067dbb39126fa790ddaa222c87f106d3ffa72f0dfa0d9b09cd4a363ec87fa72ebb9850bdd34f8ef382bf3bd367085303cb395e7f14f565594b42a7a22f0e4d5279e9da26b24fe407baeccc55cb3e68c97ea2bff14b52a20d20c207289626fc3f9ce4b138968fa195ae75182140729956bbfc0eec3d51600ca115e15654865ff48e3c5cb45bb4d3e40ac1683049aad88e0f292427e09551833632f28675b6aeec548ee32cfb07370eca538f2104a3cc777dc910b7e4f185b65a877b7501a4c4a1a4ffa46d746329e8740d828719a3a9d227dd5e",
    "500": "855e6f7cccbc9546a05318cdea3ae316982c5a4531193dbedd081c4b8827e4e12cc412fdea4b20b5021e161c68645aaf2bd996ac3e1414f39d8e27db316f39ad3024b5678cd41af7993a9442bae3a0c16a37999f6481d96fadfa45faffc9857a70da3749a62ce5762d91bed9784fc111b387d1ce04b821d4d8b770effc68720b583db5f56a3b8ca1209060925c10b6efaffcc71f1c7fd31f361c8c8061b5f07d50a3cb6dde6e1b97eca0978e2a685976b4f1016b2db897f0bdaa09107e0197846cd502f40bc42c86e4ee86571fbcc09425775b045ce3f147e1397662f6b4fb1be53079a3cbf4131908e891e9d9340f58925894e10f2efe85948f326a63a0efa5",
    "1000": "6079a149183dd3b62679c91d276f2d7758717e52fc7d62fac1d1e17f5262b94bc34cb843be67b8b6f0f5a9d713ab0ef1d55bf9eb9e9156186196f1b641ee45dfacf8d9e155e091e29e404df5f9dc953203d7132fe2f7954b290072c26b8ef596f247fa748016de7c244afadcfde6fa418d228a1c69f9011e2e92442c29f70e3c04b43e7cd8d3cb49bbd0f3ca3f51b1fc4f7824a45065cc430082b904f8003d451db7b09dc60bc34e357658cea361fcde3b96fd0a7e00340fba2cbaf9a0ddb9148c1e632a63baddfef06a1e109d184034797beb62d8b769c37df04911839db0395e90896c03b0ac798ed06a92a21964ade3530373a600549ae7cb33c21cf34036",
    "5000": "3c31f64f97fa634a4c0678e6dcd07c8c23699914f34eb4f56b1d121459f9683ce593f14e44fbd993818ff4ef915b6c1be23e0ffd843bd0e79dd01bdf9a1b8c67a1ee4ab0d3d59c56e036dd09cf0a769e29bc4ab5c70b77c6768df71db7a8fc3575089c872d7565a78909a822fef58745fdba5feb2c8a4224990f62c3ac52caafaaf587c9056591636719fae44b29b4a683fe104e4633df0a69a71d434d5d6294b2878a8a9046ff94fa9fee2f442169cbd5e97ddda217c09331d3004162c9fe59ede7e1577addd2b11860368442ba2b283e2491492bbc04d216e32f19c2d7446e6eea765382d76140d6d81fbab2f2c4b3fcb7051f0844d7c936ba8544855156e8"
  },
    "height": 1010020,
    "1": "ad096282323cf4ced95683f96d59c973561146c377e147e5dddae6e5fa87c8c01d090a7b7281809aa6c6c8f31d797fec08235585100dea2834f809d8303b833f82502532a87da71bf4453fedf277cfca89282071f660eccf5a7c9b583fb2558a3fceaa51ae5a7330c3a66ac4c302045f4b1ffa59c3c6718c2bb4179ee77b39d1c344f8d0271f193ee6c7dfc4485c8e3baee03e62f710547a43c3355891893516428b4fab4d6ebe6368f4eb1bb05d826ba4826165f2d10da204806c244a809d65712c4eb4ab8ca28749e6a803bd4a8c81c8224bdb8875f181808441f770b165f0b5358b5773e49bafa55c56ebfd8089a36ad87af11642d2426951ba5b21b1d3bf",
    "5": "ec7de1f98a135c4aa45e2b1ff5618ce3b64102996083e673ce5db134c65b3ba8a82e26f90734214e90de2ea4df4f1aee831ff928d91ed14b45d3b813a550c4bb7cc888794442186ad6f944e93239cc1a9b8bf464c14d201fc9751f52a898f4898577a6f82de3f68a7eb77209958cf7586f260af34f674faa9ddce454aec62b4faeff7fee36f1a315c7979602b6e40dccfa50fa003fca922f48e608dacbb019dd63345e8c2730c579c98943fb2c28a52fc8d793bd88af13d814b180baca681717b958baebff0ac46937b199e692f523f6afd9a8b2da2e271e1e01c08b5a30e2718b1ff7b60e99bbcc6ccca048fe66dfe8d81b40ecca4c1e50edd12b2a0bee953",
    "10": "199fbbeb0ca6648dc0caf72eafc87a75c67ece97ba61c9fa6f0994b7596d241084c02d988cc1d638927ed6a73385bf305c566ab5b388d1b50b10b30460d034e87bcd4f9afec4d183d9c00ff852b0c9b5d4e906a0ce37b89141e8ef1a88cfeba5c7f2a65724518308baedfc871ce9f0ad6ea4fc1ae1908473b8976fc93be344e0ad8521cb3010112cf31ee606ecfd8cf566f3acb613b916c6e775b5c01b6860fed22bf8cd82c67208cea7817d8cf977f6622ed27eec10a1f93b593db16553ad3269a30e09ab983567e97f317a121182c3fc0907c0ad17a3a35227c1dbe93eb06acc2cbdb1a683b7b1e1c56b1933d34959564694be2dc3a1f0b4c1fbb3972a2950",
    "50": "21e87cfe3bffaa2298216d916ca5eb5323de2221d740f8237478c11151243544b4ea4c42267679cffb2b4107962526db084849eda7f8a9825d26972d49216e555a4e2435558ea45c9038879c60d6cc52aca8dd47ca7246fb6221dc18199c55e10b2d2b5eb7ac73e0be05952af78624e2ced3d3259947900fc05dc0c73e577f615e50087eb854088c6a4a3601fbcfbd32f992dfc0f0fb68050d927a14d8a1baef5a674d935b92272a93c09abf405c34e7280445644ed54d2fb79aa2cb09d128e23bd3d619948e4f351c4af7e46fa2986d99636f328e76a96e4a24873a2d90e150bcedb3893e23c4a037cd29f0a06306e732220033fc88f8a3deafaf43ba5e81e6",
    "100": "262f9663db00dec4e08b0dc6f94931236be7abcd1cedd7bc06383974e698ce11ebc2b8668327588d6df23bee6f66f1c18a216daad36d6cdfb8a4f3f30ebb9ec381809270fbe20f91ff9f54e066189c1e5e8ed6780c57666bc9acce3ec45bd5df7252223f5691d636d7d22c085edc808dcc6da649e046921d375694689fe8575bbf4321d5097c4f3b8a8bf15d2c926042a0467dd0a406fbcaed89fd2600ea228d43a0d6def97b981c2eead594d209169d50269b9621b4b2e357a6fd326d7c03197df560a6be38a3be6d4231473f011d3949486577240f3eaa688c43e0bd7ca0af9c0d10c79de98bc9c886cd00bf2ff756cbec18938289aaebcda7fc9649207ecb",
    "500": "ba4eaa4d338ef907fd43695a56b1a87bdf1799d4c75cf9fd4dfac0f5b0bb322123c83fe74fdfea723ec6affd84c538de03e75cb971face004e155d6a5ef7c5d45ce0c503135cf5dff53bd772a895c6236aa9cabeac7acba486b55652a87d7dd65012b71e529afc6b7ca893c510866aeda5bc4f7121ef6fdd09532df580e563e23ceee1c0b5829025a96cd773e6d5747ba5ea27dcd8931308ee62e276b30062749ec5321b6e292d49bd2634b0d1a8b40546e3a4e63c05ea6b51d944359d4d58d5c84d5f032cbf146cfbfaaddc07f3eb4b0f24b8637db6cc2cd157a358007d70a1a8bbd38dba6f1292718940aab7cd2cd4f4b1437b5baf7dedd2bfae91e3241eb3",
    "1000": "a7b1c965e6ae2c148932f94800e540128dff8681297f9dca06c7889324e2bdcd2e7a50c431df3cc23ec741db2033682a2d7c939fc74de301acb29eaa1257cc231a44394893e1756c63e6fc34c8f38df6c2ad5140e5baa22c4f2a82479dece9be7dc65e563273ef7406c1f856b1c1f14a26fbcaf3ab864e1146f341f609966bb386e5716e4f759e2c4e6dc400ffe9c47ec54ac44e19c350597d034e0581ec050f25d546ffeeccedc4e94cd7862d6f220061c9c1f38149397aa8030e47a353224fded60f5703fe25f7274fad53ab2f4c3ef089369e4a21346b42f2361017210b573f5566af370422c234cb4e35582c1061b530cdf7ae02338e3c3d142ebd3f58e8",
    "5000": "2796ebcaee4bd48a29c357825d490ad3d0919af4a00bbb084ad81c46981c06974835b0814497403bce51cacffa3bdfbca9032b571b8ac8523a85474861dd7323bc84fc5092501d224bb2200b394d326d526e691fbd2dd7e228d11b56dda315d92462a1b55ba30a7c9986dbde0085fdfb881d7d9cc1edc48cd8275e9560e01cee8228145d1b3b252ca533c6f14d05ca65d7bf7a67995c5ca88400422a7e9803438ad40dcd69d912967647ffa151aa11147faaac38e98a3da4fd47f849afc440eecdca085b71da517e12a4f64be256abc48317e767ac94f881e3b047bfbf008fa665af3e9b56dc2988237b671221524efa76219677138b62daf3ce96c65700e276"
  },
    "height": 1020020,
    "1": "11349b20504a5508eed9e39d075a61b0228278c10b81724afc4af69c475a53b2d7e28ce60b87185bfb2f24f798dbb7fe5f352346b7d0e00cfdb34071ae43e765102641f9909b14c46a89d2db57cf9324eba051c06bd9356e348f2ab68e1652e6563879bd2519fa5ea265c52a34d9ca7a73e76e6f2ef56cf29421caacb42bf35a53d0b5787b4d165cee95698cd3cb36b57b9a545d627b8761f34fe2281499139838cebe2fa04b541314271a129db4f1226543a60c78b6b6ce8ff0cd637bb910ac8d31f1b140f010bc043cd5a5b82a7bf400a293f8c39ec313fabc857760e9b917f0a6d5dac9f9c2d45e5adc64108ecf7f6a7f7687940815d5d0b9672a1c113b3f",
    "5": "1d652999c2b563af28c4b57fa7ba9d9334990ea72618514240e94a966371f4a624b91a99a16da2d6f0d0e0c47f30e43ff6ea37b7bb87366e1f7c87a36fce34bacff5e255728a52272e28ef8887fd878b06af79b72f69fe356ca55f32144c270367b2e4cd968d02afcb2b6dcdc262ed2201266208aa6c90dad26a3a4976a5fd6e4f89ca4e0e14cd093fbca210fee05f627d5d4b7b482a3eb252c0dfec871881feafced384380911cefd5f2d6f96d114ad95dd1b6369d07c7e1d41e66d242852032525657d04ac842dabfcacd88354062a1a1712ed5c2df40a315e3989662ec19b24dc7d1f76af46c12ad5722ffd081112e4c7ad766094036a4c7cf2607e13dcfe",
    "10": "14284d46e90fe8525d8a45de8bdd18b30db30d96caf67f157dbfe214dbf992208922dbd15b6b55d4a8a407785dea235dc96eb8131578735b4168d9db4573c826a14507ef8ad7c445be34e1d46172012a7eab54737723c30143b55a71afed3610c14e1e962deee16ecd1c58ad0fb6a438da9055049e1391568427648d342c99fa24ff7c11a9b5422a571e2cbe9f9c4477a075da82f4e6f36dba717d854ff9598ea6c48d6eab08705981a8e9056e869cc7592c46ea8a8d1a2149d05598f151ef50d69f1d7e16ba634004b531dc46e75cb64e63d0e01071856cd8f9383b3a14dff4fcacfdaf1b685a32372aec8a0e482a3e15753e3698bdd46c05935362bae537d0",
    "50": "638b86b8f85b0d631dd46a4de30d62bc82ab75ddda9507385c12f6be897df46f2d135377709ab99fb413565d7407179ecc11d72480234c6159be331a2338d0daba7123adf040ccf8000ba7e5ae1931058fe04671a2fb2aa08f4bc324790e583c37ad351619cfbd0ceade87d7a1c5e51024d7a76f9b8fba7b04ca8c273536dc5d1b5205bda8b5057ebc2582b41bf7c82ee9d2b58f892846008692696f99eb6496e59fc3635498ecd21fb65625bc141f90df05443b60ade754fd9f26f5a4256e2e2b7ff50d498a27456ad2df326ce35e060ee676673d73df58a1821f8edc45a59bdb40a60ba30540b59ef7d3e9ebda917c5719c06332b106ba6e644516098a6d4f",
    "100": "68480620a69429107f6cb33edb7d974070607cee688b968ca83f1866303c13cff6051d3f2eacb82c5251354941c5ace826e99777e20f9c14e60483b48da9bbc63700071debe9bc4f1d27996ba2e1b83440eb9bbc1b33050d14bdca82145c871a90feb37fb3ab6f3a1a83e97c769e32675fed33bddc4c630c2e16f10a572edb9f8e6ddec65a7877500819a45afdfb34112358d78fe91cab745c4e7a1cd9bdc3f07d6a7dc0f3f5e9e1480595e623420e04f185e0a45392a51655f0251bb025d4d2b62ebcf1ad2305f915752d4c4b180d7404e622698286524d0ac125e392f61162b9d81df90e436dc2587779f2e1ed24dcde9511400f7c7dc087a2aad9247ec717",
    "500": "564e200751f5ed90a1fa6738323d81988e3dcb1165651d544fab6f61e70333e236fe1738400441efbaee3b3d2e2f5be49f258ef5f99b4215caca46f9807b1f433e9afaea6a9e53b0049c532eff66cc83673bea22cece5c1d32c7ae1c40ca730fc3a590aecc241fe964a569fc030fad615cfd6738d720fc4d4641412b1a17aec9b78eeb7825fcb3b7ecef1af534d531eb47c1ba6739c3d0c00395651761dfc0863879ad23d5c0b17c584787aaf28239ed1ace10e9ba90d4b20f4a013475d915d0421616dc49be1b26e0d62cae8275cc2dd7b7244e4d56cf7daf6c03fbc462e73ad64d9250200a886242f3c00d1473a572fc781eba812e664cd2c5d4c6a7a7b66b",
    "1000": "541b8a3e1d4127f29161ce50923abe38dec414bfe5965029cc3dbaf1efe41d3aa66fab26466cfda164c99b0eeba361fa9b7aa42146d3143f9a9c36570b0da6d68eff41634c3dca613e985876815a15ee078bffa48c6609cc13e527d6e221bf2a8e9aadd556f76de7e2844e15aaf325126c52ec2463d6cb455e00e4c7069a792558f8e23ee0b4b1f37f393a9cc8fff534e86c37653b7731009b6928010b9b3ad89a7298a18bcd9ba96b717edd9545f940357f5118a37dda3174ad6641eeb61764407f7cdb55796b265f60c4f7c0e1b98d20ac35cf04e4a115639643784aa4b79f1493fd2560fad2d62e779243c1ad205abb67c51ac11c4fde3903e19c37514543",
    "5000": "bb0143b28cace07b064b7b9e663199fe07c7d36f1f47109f3e1e514323b5d1422562aa7479372eeda75a3ecb4449c889ec357d47e95781c5202f65cfd985afa1bb671b342b8307b610a9180693cbace217b79218e9f3be31f4ff1d9830e67048da4d628a31f71f7fe0ba622f0431e545e040cf24c011dca9b38ddda9a22c3a8c185c92f89e5e17122604ca5b85d79964a3695e38dbc665e64fe80c1fc2552227c18d4de206294cb6b8cb2f875f18b1d214a0c1016cf7db55a7db0fb5a0f4c8d173d0a14a4972f5856b4a3587b9fb9a6bdbfde435ff6909f7f8b96e4335cd99e3433f9bc774afdc656d046960ff63fd5bd9b4152d9d85f57185d1c96dfc1218e9"
  },
    "height": 1030020,
    "1": "853ddf5a2efee77703d97fe219b8a7fd408955b151b7eae478fab06cd0ebf52e5fb518d8a96243b75d7771ad4230456b1a872483b9d5a739042062e97c6f502a61e8760b24f4605b8e0167ee7fadfddb1501fd6e713b247abb7954139396594cd115b2a9e2ce985c27565b567fadf022e8461c93ffa91223e45d7ec9dc815d4c30a667c71a636deb02227b6621f01261512351d2350612921592e80fdf9135aedbd4002a6f878fbfa4b25799e775c8a7748972d4a2c8526f31be7e500bb77ba3edbae876c2a0c9f3f8b73a03344d9ec04f7e2193ca4a5dfc82d887e5160e48122d5a2207f3ef47c05f644f1b7d04c377150dbf8ceadcc2e65da26df358c786f9",
    "5": "aed3119f8a71cca4179fbf208bd99453fb0b85a68925bb6734d1bd978f0e7aaecf10a0f0248e7adc9a3d94ef11abb59d4eee29eee16ccd7f0754ef14e812d2e24f97f77eb642c0b45e1d3baf6839230e41ed3eec0278305b071bc83a25dfeea7e02163223eefcf1cbbe6f0adf8715794b81dab677fb3f38fdd70a6c88663631956b5adc3a6be3f23d4e3c71e07badfdee5be4a4ba3321855e0001816d2aa29f9df608a6a4d467b052cac1655fcc4b867141f9d02ef85ade01ccc78dcd5e7452b444b1f4105ff220514f2b4f9c11ac8e29cfdc7dbe622edcfa6c19624b691d9b79592f2ee7302ff27f8e9b854d98481456535f7d7dd75f91d8aba0787cfc89857",
    "10": "7fc0acb0a3ea27c0648e0fc32eee93673c5dd90badca9c78eb0db4918d2b959481edcd021d70cc8a75811a1956f0caed16d4f06ca0fe34a864f1b764d5a462bc8cc16c1f41e817ffdb8ce285011fefb65b6f94013f894fa5c1c62955d48141884eeb59c1bb8b7f832d9583dc89ed1e85dd8c37b36497bdcc70ee85848cbf2dc56e690708606d00970aaa1549300d4d3034aaebe2d8122f7eca8419bb45bb439093844494533297bae915346d80daaafe6af86b85987d67598e3e4fd5530567dae1914f1bac9e70189fa8870c9b3b4362bd9252844b2a475ac6d65959e9e90cf9d33cbf7c703ccc1d9be4fab6f0e7692ceed12f0a155472d0b0ae73a0cbe34f8d",
    "50": "363b36185abbdaece8c80df3fcbcff9a1299b276d98410854a0e5adf21ef7f051aa1339b4a7b00a55e5a14998e8ee65cda0263b2f25b0c0c8ad6a77c80e532586ce387307dc029810fd126349f68d2ffc3471a9298e0ba716ede2efd8f67d8c083501b3bcb205ca8bfe25438290a05ebcac810e366d2f69796886187bd83e7a8f919a2a23aec9a9ef831be5f1cbbab932a4640a8a064e82eafd9aac1206773256ea471549b4a0dcbfd448a7c418085ef4cb2bb868b3a90a992e2601c63e3afa7e8b56de2f1593d92bbf8318f37e0811c756819a331d1365b9525e3f48842ce7284c8b122b6696260887595112c86e8a716e6031204961d2c6411d6d2b473492a",
    "100": "599bd7a62f8a2dca61168c41f76e3a6f38b9d0ccbbfc637b5ec9b8d846cf1a651bde1183b0c28388da4886914a7ed52b35f0f75da945f65e7e143f449c7ab2a00da8a93d88c3b28335a77cef101cad1120344db2d7a2c1fef6b5f589ec88709b1a51f483b2f7a2ea59222c404a2bbd1055bc5505a408a1a4d96ea5de96549dd213601ac011a0da2956b39c37a45b7bb0ac4d603557755f2ae1ae5bfc70f2bae9140aba04bd3dd6fe7830f70f0d994bbf4dd33fdcff64247def3502a51716cfcf4119944cc3d071a3222e9465c8fb0794bc3d8452b6c4a8b60b276f1b0c7ff7c6d6a5c0b618523346b5fee27812f8f553bccf03e1a9cc389947219512bc7afcf8",
    "500": "95b3fcdd0132a5204624fc4d3c7fe47b7db432dde96941186cd9c0ab7d72c992837be551b08d0cb0e2ab836a3b0287cf2967e7ba6bd6550a461da695181479454d8c32c8166a8030c9b695d143bb397b5d4fd26d03dfe01e32fdbfc3b957e63b16b1d5af1bdedc7482bb070cdcf5d5d69aa2f4fdac13d2f5c4414e61d5c4d5d5de6f0657c0f6ffda835233bfc07fdbf04498d3e1b31fb91ff0a0611c2fe45c06ca466007c7ef55f5564228feec05a51a035c28f619b66d8c972303e86a152e5f1ada8be020d4db0a1ff12fc55a31144b63499b27382c25e78b3335be15133b2eb0b503402dce3254310424b7ba3fc26a582890d82ff33736af0f7bc6e0854d21",
    "1000": "8410db48914965f2f51d3cec03f6831d3259e9a45ea75848c05f6ca37124b099d7b4cec439be7a2c593383b19a36701bfce0074d92fa9cde5050fafe46f15834daa6def87dcb01b1f0abec48991054c8b879fd1d167ad8d5053c7fff11701dea53cdbb52a183820cb2446e5dc1097fbda8eb935bae8927e4ae5709ce6892dd9e7fb28defb39d715657e57d3d1d732b21d9dc6c8882fc6b8644b3a7554773e35157bd03c61000fae69b494fb10d6186ff709dfb556a004e9000c81216d856b14cad845d1ffba3a7316126805953c0c8f9fed37381a29e44177aac2b604c036a20d7e17b0be32187c57222146b73e7a993f9471593db366f2ebbf48df3f8e80586",
    "5000": "210739e84eb1c1964999a4c2c8aaa94d7ddd32d2e5ab9160ab7bc6d16726ca26a2be9af947404ba1f544a0183ead8b752fe2e8bd23fbe85847380aef18890057310f3da1c6c77d67c38158eeec1b3d38e09b70b34b945360087bf0e5b7a93e43a2f6e6376bc59cf395b681252289481ec7f4a49d64520a2d15d57de254bbd18600ca3aead37eb3ad9d2ba14f9dffe3cd74fb8641b00cf35ac616168753ec9a632d440954b68b7bb9d793e2a13b0b2ebe082b3e9392cf1e66c6cff8635fe69d0db924e9f80d2cb5be2a2b5b3dbb02098adc895f87e96a6c3563ba2d1545a7c53d2aefbcd22b4ab19e1f45fc70e50441ee4fd2deda85aa06c5e531f4962e05084d"
  },
    "height": 1040020,
    "1": "201879f7d9ec72c62cc5c01f2057c043d88ca1f5eb24564fa0f9b4de45eaf727f87be884b1242895a7182482f032d35e73603949e41e3aecec123f221b2f741e7cdae7892ccba69eb345bdc5e6ec5c576e93fb9886932727e4cdc77b50f1bdcd33ac4ff576a46fb036674db217b5c79b2bc9a2ac0b42998d57c0bf7fcecd67d516c3d31b81997866293b8ff71a2d4c6071ebb33fdca97193bf8f80df3fb0cb4add2daf7b72081377ce8cafae0d62bf75fc72b7bd7b1357b8ffe2477369cf05841faea82f8532c17ea25276cd0a254f440d72797229f675d6b3abec1ad5a73cf809ccff2256c056b2d397a93896f9cb2ebb342f902fef2bd102cc68c00f6b6012",
    "5": "2bd354d3b50e5bcf9ea89c84edb9ae0faf1f911f3c42a83b4112ff9c1a94c00a3c60fe2dfeb92af9de925308318d7777f263695ec0b5c26ff50068189235bd581080964dcbfe4cbd238b0c652abe3da0b1a71a317437a035d493909ff285967e1c4623dbb281e75f84a97b0ef94a6851d273d2065ea0a027c23121e3c59a175dfc5d525e780d50c472d497ab05322a441c04e7f30e7670c4b5b1d41d7b075da87531779a3211dd63a68a61981c31d618c56d0ee30aa7a47697cdcc120525d9bb108c169b1c9eab45d692ff8ccf6a4462178b0107a7b5a4f7eb7ed58f4ca0ad5a22de93643f7dded76330fa65f387eb61e98a62f1cebc897e2db761dd4a734134",
    "10": "a7f596c7ee5be18eda569041508871297816410736158b43693bb29e3b1b8aba2619f3a4decf296a5bbb90daa9b262997b29471039cbe9b0dee9d30788873920cb498c1b9c63ee10b3e620269d0a08e57bff36948f6f8d4b35349ea98b76570a83bf0a1a7cb53cc3927e751fc10dee730daf33c8a6ceeab7a9059cc4e60486ef08c260d2439d977a029e7795b02b7081b447e4c796c64af1b1eb96106045474c6f09df4b81351ef7efe1bd4b2a7bc7f76e6046b7b1b8d234185dcb5ccf16eb821958ecd006a49320c20a0ac9fccd03e3c9b0e507d56a44abaf93a19a3c53d8a96050a0d676e3de16739d047fa768f80cafe90162d3701e2f051986abc1d0b9e4",
    "50": "d569110570a48137c8df9ab89a60a386d51d6bed551b8e725d9f8efd850affe44378aa79e08cc55979d288d56fc3e22948943cd6beea81cd1caf5bbc81112af51277e1adf6342c51bcf9273162680f2f766010a1633b4c14c950c743bdac70df2a30cad6d5fb41733c5d8163df21101d3a84475926ca15ea8554589eb4b1c85c0aa7ff831050be65f40b24cd77cd3c1156980cb5f0b685901a70e9f35186d87f8c6b8f3a17ace49c313f18d8af29e331f7e591ea9775ba2d7472bb8d3555c2c7e60a607e020e0a092bb602a43b171ed91553459f0076ad891a49b947ec0ce548c4e1409236d027bd9ba4189b06d4cca35476a77cb2cc58f05f099094e3e1347",
    "100": "1256b417c6166d95ac7795a75cbae8e0ccd9e845f29b829aeea1f0a00d2dbed3c6634b2b96e0663b5fb1b3e212a521dffc8d6490096ee8bfee4eddf86586644a339911f375c851d7bd28e96e9ff23f07ea9fcd213c72b160047b73d56e090ed303ab65af049c5294bd50720a04febd5fc45e5727b9a27aaa6880ca22abfbc7199e9376002051e323ca6c3da1875ccfcfe464bc7172fccb31671952eff580a81c7de2cf4af92b30305f026bc87910e0223b7e0227ba622f1ef2e60e479538cd0b8a697f6a9d9081f3476755a66f9cdd162fe78c1f63c0e5da1601eacc19a77b129d64bc0fab66a9dbd1b9e1a73397a3874557cd250da9614ad16eaa71a8001168",
    "500": "baa8d11e998accce29db4a276ff707f273271567d4ed79d4c0bc659e3a515b2953639abaa39a5c90a8674a47d30b663000aaccb85dc1ebde282b341da70de449fd3cd9b2ed28f23b7d2228ee875fbb190d90e7218c7ea46c9377219ed3013dac9c5eee9d0e31114a52474b9c5f42f8a609a2bc8c5a8c6f2ff8115c55001952c342a3553fd0b100afce4567d01edd45947f81eea2709df49d4e93aed27a39a30493c300207f3925b7844015520eb0442f81220d62d12450e04236b221ffc157e1b0ba004c7c77fe9c196c01b61b82250000e4f93fe786033fecf53c7e8726238101b2cb72ab75300a809a809aecb76b095e8970351b080c13ef30f67d63c82723",
    "1000": "ae2a1bc2f290e9d29cebe4e41192b3d70e15cf29efd4c609340f7a601f3b76beba9ff1aecda13ec1c79ea6d5aaf34a3c5df2967fa41f63697e10530c0d48f3be99bf364485472341bbb4828cefa78736ed046a6b2a688a6f752222fd27604a367fa97785dc2f5c8a2f4f1c20390bfbe2ce3243d6765e75367e1ef14470bfb12e9c8af5df33d338954028afde3cf5b3563ae08253c8c31d9b00e28227b6f2b4091d06532550333beac1c018f50742df8cf86196a8484aa77cf400d8c429bb2f835138c52d4e37dbda24c8307550a0f5dad4f3c541f7ed2c927f0b0a3b4d27b31a42e8f705ee824fa879f4c089e464c0cb99acf2f57700c4da32f23abce3b34455",
    "5000": "b06384ff58bd0538f9b7129068ee6dcce6a61ac08bc5a413ecc400a51c3a6b98182555f65aae49b4043ac6c33ffb90e42a269725ff0a326be92ea856f0b0cf41a6a7829515f22896d8bf7ef6353b8bdbce086c7fec385a60669e8c96232e9ce3e92b48d3ded44cdaec3cafabf7deb40f3b49dde9e0e66db87647243efd94d0e1495429d03edc267a3cc980751b666f84c4acc155704d66c21f6490d1bd25b2bb5735d4e8fa5a8282788ce76196cbd7d7e7023a7c92dd5032375873c1f35fd02e51b09f336257af50822dfe3eb3521464a59b9fea730e62331f06d2cd2ac52080caf4e73b7b3e2e9c5d7bd88f166241eb8c89c8cfbbd3dff73dee8bc0f1bdd140"
  },
    "height": 1050020,
    "1": "388968e6df7f8298be012dfc0e274406eaeba2f8cbfb0417c398c357898bca23d3e18c6ff4a13bf934d413547103a0124477b30b49de57c5b3644728b895d9df8e7f24733140306e29083f2754646966bb20426b473ebd0c5463c093c512a235fecc73df9d8373cfbe10b34f82ebf22986ffe4c876c000515a726490db1a0554088cf83619fa58a1d7127182853108a04e7de7654cec39955b0fb322d550e87de7bed1cb22220a4c6a72115f9b8b780b873f0e1ba1573e6f5d312ac7493763098ed84907f582d7d4fec57ef7a1640017b5117fcdc72106d69b3f061aec7173356362c5ea382e756cd7cf102dd06c5afd51862e200deda85f8de5ddd63a146076",
    "5": "717df9f914de0a39932e0c208ca18154163b3db53578859168e3945db124e4cb434238133f574c2b72aab7dc21aabe76609506a5a4fd6a300e7aa6264fbf4dd0bece41f2ed526ad714971947e219d10b7c723cde125aed4d76a6af8a956a730bebb219f5c7410658896562ef35fe2f52dcd73249a21214de666930d358b6852fc2fc56e7448f1ecf144bc9505f2ed8ef70fdb2cdb8a426f86e2826bbb5ad952b6596170345ace06e9f651b79164ed3cebbfb7bd81d3a24d5722815eb1ae9a0fff0d1409fb852dc1e844f0b8636dd361ba7823e6cf7ff8a48ce597109c4cb7bb0ed948f2979939e2e2878a965a2d38200384d776caf33c0ad0c0105aee2abf6f6",
    "10": "60efe75de80c643cdabf8865da60f3699912369ddceedd342cf8415080f8922cd21d7ea07168e92553bb711524f0f3feaf22b5f8342c9340429eab0b5bd1f84cf89263a9d3f8a964cf0b8b23484703b860f788bf1ee46e3086a2c2fdd65175eaeca0b7e6a2bde11c1e19908609592fee8bb2411403673680b71d58289eb9c136a79ebf67ad5e9a480baeb734fc0b2fc1f67961ebc6534b141cec8190f90a8e30696b33ed7da6b8153bcef85248caeb1e42ac9902606b8af2f77217e91d69e7c262ad9bfdd732c44d2f93702874e8b7e7b0331d8413075fd783a91a3fef48122643ad68310cf5b766a7994d9dcd700390e3a51d3c7a03ac3f39d989453702ea4c",
    "50": "2e756f4ecaacbe2b5e289260117b8ff5a3ad1b8fb1f872ab545b83f5040404cce3ced4612e8e1fcb1568317a9b531053dd7444eabd4d5e5bb1e91276ace3f129ccb52c2e305c24ec8081f7d463818d1a0a8ecc5231bf7ef340c57d841832255c92e9735a50f7d07ecc57107b644320251908c5d3ba9af9d5938853b2fa366d53283f21c0dfbeb731470a77f9203bfa2db0877c54158bbe1955e09f74ca730fe0a0f0304b3618e901bc160f304f8b6ed5283de1266f35c7bfb578b23cc7a0919597ae369a6abd3bc812928e7434633a192d9fe49ddd652b4c9f643ab75a2e50397117a84f7ab9acb541c738589d68cdc23c7a07c13433747bf4884d13d9f51400",
    "100": "99db88560c92aecfec120c6ec842dc038fbb115f76e1ca3e4f60c0dcabf1ca9ef051ae4def8e856690169726474ac606110bf37c0cc4f51d7cebdd3c0e15193d97a8c0db856e954b0be50d61c993623cfbf7030745961126fa7d2ed0360be86324e243ba1f3b264c3dc5e18ee4438606635944ca20939c0f865f8ffa72f79e4d3b0c43ff2af4dbd10a6d351435e294656c8fccccf11eb47aa63f38bcc34edc6e11d251b428b5c2e08e115bc0cf763b291f5793809de0af44380eb8cd2c3c0ea29efffc8e9123acc98c41d91d34fbb5bf669fad1c0db367bb1728b992f13e6771bf3e1256c2865c141c13738e7339eccf0e579c80dd672fc72a8496c41ac93985",
    "500": "2776d075e04a4e6d8afce71a310d8f8201e8122bb1ec2bd9b03360fa34922445181256a191db1a3394c709361f0822a0a3cc25b09500219470322fc5228a60c2613aae46d9f0f541d904a5b81a5ae62eb0f57058b5df30a4c626e41e1fd36ae6f887102a16ae4a9146ab14fa21948c846e6f25e593ba850a24bc03865c634e3aa6b69680ab846050169ce572684edad68a2f111dce2c1ec0956c3d77d8b3c8dafab4356c06ef01acca34df47cba09afc2621b007fac72eb5bed2049b2be00d3e8f76c172110cd43171094010e81d0ce8dc7f941557626608ccc1c4c251ae0ce5608cb0a4b298488cb1f235d7819ea501ceeaa8f5bcae4156f17260d8cb7bd0a6",
    "1000": "a63178e99b588497ddc59386bfbabae1d4683a30ba8e387a39b6af5d33660e9bdde9fc1af0d2d5fbaefce98e13dc0cb187def1b2f50fc873ad4763d9a7357a445f6afe8da9b0f622cb29c646e62ece462ab3eca38ccde1469b68385552600a1a93d38a149cebe566fb025cd520a943877ac8150573f4d23f045626b2577eeb1d55026bd1b78e0bf08e7388df92d68b2cb9f550fadb85365c61ea9e18a4218067f6b74fd628549968cc6f7cc405e1fb64d57092741da66c6c5312236fbf81057f41c27708ba74b773e74701e80906292773ecde7505b7116903a884eb3b4fc4ed26a0dcacbe14560b976ae7bca8531d183ed049ce475bb0e9a67885bec39815f4",
    "5000": "fad7cf992b67792695619224fbbe311c6e60bf80d5bc1680fd9e32b5b3f00f373c9305c72c82bfaf1ce56adb617dc71bb8ddaf61326858ae4b01c3acf443bc7d22d4d2c77704b44fbe4f4fd260f13e0e12e82c531c390e72770e1d444e0877844d35a76c1e45072ddf02e101cf9c0a05a125f19ac5205ee1216732f4040cc3e8a68528685f2f39325efb2b7ba4d681fe13aaabb80ef07d8de8ef883a07e0a4f9771e8c370924fe4959de3c2a6e6e7ad74b12dd7e666765d7d660febe4d4cab3f49cb33cb51e44f756eef609184d8eeeb1c4dfe13b123251166c877d8e992f60cefd568644918c3617aec4d5564a9fe008540add903b9739973838d667721f8d"
    "height": 210020,
    "1": "af0c8e4a111e8364983d7a0a6625d16316c58c810c076069e7e1f6b6914e68a5b7be514adfb8c62b061cb9a1837483cf75a681ed0ec65eb346961907f820e944cd9e7f0da6d973478030967e6264576ba5a3c55afbbf97c1625723c3c2bfb1eeda9cd341bf2ec204822e0003916ebbd7ca3a8b551460b0c83b107455b3694bbf72d22271665b1ca7dc82983309a6fa5b5371d84384354986beed3cdfbc6b75d39755eef24e9234887db39b9e0d3973a0cb695f91c037c9464d7d83059517bf99fbfb1e8f973abea347dd90bb8a0f4b1a5bcc46d62008d86be578675402571f74be2f96bd83208874ffcb13fb55e1886f183ebf97a23e80a08fc082049c103ab8",
    "5": "398464aa0774f168d6c56f3f303fe89a6032e4a1dc08fdef9b2abca749c5816aad8724ce75b648f23694bb75f31484c696755a732a6f2a5d98d921570e9c657b04fd09458b4155afc965d59bb33878a08d0abf3c702c9aa4d772c0c0fa991514e8efbc4eba98931f6349fd553add70ac91226d3adbce1c9c5600ae27234a21f46254896f7970551a04d5f9e525f3386db0b3e918744a3f6ffcba8f39f507afc39ee99ee7622a32557c53f895baa064e43d9d7b7c0f2069f837532067ac2c33a51b34956f49a8ff92bd86849e6764dfa37024825cc3192cef988385243a2c43cd687e470722010e656cbb7d6bf7691c4b597c971655971b7d00119715508ee2d0",
    "10": "a64e7119beae7c8a838ccaa616faeab46f85ba7fd1ed144deab3062617fdc7ce86237730a237afb4401596d3cdfa010c79169f92e689b482f093406d20caa8ade7e3215117bdc11eea591308a2dc23af3bbbac63e6a71229ebb9fa1610b0cbf3c66c0d2b2887163aa00eeba8980f08a34d70138b6518eed4cd880cde23deba01d2a5d30cee730999038e10edaaae7aa49afc68efe59cc445cde71fe789a08949bc9c3c81bdba27421dfe4dd4407fce04a6a97300f2ef66f1274f527c7b1b2cf24fc34c8367f0cc4a868233b4380c73a94e42d86ef449846dcfd4240f2d94712d234073969f09e8255b785bc46c382fd5c23308b348aab0fcbe8bd4561bc637b8",
    "50": "433dbcc8f97b85bb9933488204f2969bb30d150630a0cd14b6ba30e576c998827290ad7eab6a60295c24d4ad9cbf2bf966224674da7e8445e7d4a02d5e1673923e249f81cd81521e8df934e04a3f5bca8292e8e74c1054d4041c30af4e8e3394356973e77798004d51cb45eb62c0334d2d50fc40c040b7e0f4f1a8a143a31ce0c4580d4dcd6a2745c9f5427ca75d9e64d22d840695f70dfb6ba090c2616cf66c14a0e6af0f3593cce408557017a67cacaf35ff3f95793f199d86a6799d6da8b5dea1684936197ecf2267e5bc6fa26efcba75d7db23df0371947ddf2f1bbbb318fb1d5e73d1e09df6267727fe1017e2ce2ba53eeb06b849a0c0a9a61bc10fac10",
    "100": "7b8c3894ca1aa5c60aee9f29ef7a5586bf1a7a5339ad3847f4db8f1504308bbbc00a8a1d699ab212403c5c81966bbf7f6ad2d51e8c75dc5557062a4538f9e493c32503617e4287e1dd180a1e84a14af151bb2088a6ce7a475f2c00f67c7d48ab6719adeba149f24044cbc328c8430394f5e77db0b72b37db789dfbcb41622e7321e6db4a702646ccfc43989b124c75d0572e6f24f57f19d743f498dba3b7f72c688033c303471f02c6ee2540ed3d40caaebc301a3955891d2ad263b1f5c211056877b937fbd2c8f4223b01f689c699c9c706edd0531e36200cc01754ece46971382d5f456b418ad18d409a776a7a5fdc364b1b5ca06167b22eb5504e560ee3a8",
    "500": "636b39fcfec45ed67f744119f9bf38085efc2662c451c469648674507ecf8bbdc13e33de46eb954fa3df6cf4fdb32c1c540900288c48916454f41df5a4d06bd596c88711d06319f5af394c13c3acc22ec4f02b2531c86c3bc5b3a18b06122d5ea7cc7e36b07050673116f397f11a27579571b1c6c686a04dfbc39ab474c9405bef2421f2e2ab81338cfe0d48ca2918ab8ecf98374ef266765904e4e30aa6a10f43b67339193bca84376787c0f316e01275dfa436434cfa93124ade92658f01e64f1f42a7a3d52405bc81a63e8dd04000fcc58719f73c812865a491f0b30693036ce3443d14de4846ad2736c920a6f2064014edee1bbd56956bbee95621d52a92",
    "1000": "47d0c6ab4524cbfbcde5159c16e0f2cc84baa3ceaf8d7aa3f5c02c8860e5df8937cc5ccd0b3ec997d907f4fca8e4a67d50e8acf6a353f22e1ab99331363b19994c14527c9c03635c483bfdb6b1f5ae99558e1c90b0284baa61338142ef8dcf460d09f68fa1a9ec2e34c8491243f607a6bbcae5ec5be4fcbe6dcd431e401c251bfa110cb34959731a982b66ea228d2e0754fcdac6dba2af41e6c4ad2d568fde4885cc57c3b5e235f79e67a33ab5f3b24a32be7f8764fa0dbec07f5a835b11da3c63357038c826b5a3f5f8df317535c19f06e26b00c69b1218a0792a1f86579ce2ab71d3a5e63d996992fc4f05125f1df4ebfca2be23cffe7f7d012215bb2e5298",
    "5000": "a4e6bbb6e54aa78e4a6fced3e499f8ecf6894538a28fe8aca71cfa46a9dfc31f2d3e46493d9d08e617401dbf8db812be4b29fcd939f6e67710a514fffda1d13a410b830eaabd17476150a58f64d24e0f32e81ffc897815fabfa0ed11277df87721b7a9baad5f03367ebe5629b00917ac9e88a880c8a3a45ecc9b514bc2864d094de8dc5ee2eda3768b81512f358ce46921293c9ff67e29952daea534057524ee03d563ee93a5d9a75be98dc8842d3ac10ba52fad1ea9dfe301b481ad1dc1910d3e8de86b7e148c3850dd6e45e7e51c92415c01a2e76bbc0c89f739d410dc4659253c249e5b5e77c1f0c18c351fc3757feea8fb0ac7773b0d76b7b67199125bcb"
  },
    "height": 220020,
    "1": "c34d9130ccd3b157b689a13a38c1d11960a180dd5e26847fdb40f97c1051e498756d3ae182f2c5d64014108cffc2ed125446b3c2cb8320c448efa775f9cee41092733a3f89f23962fbf74096fc2f2cb17dfa478633695373172f0c0096744ac7686a0e6d6cc452890edbf8e42cb41a9a315e7800ae0994d2399658985098f55fdb156b5619517cacf2cc11afb7a95e75cd71af5b72e9e75bebc3e9376987dc01c4a7112f4869d4eff410909f0569a65f3883d978b6ebe2be5d2d33f67e8e59bedab4dc5bcc38a539cc1a0b936d21e5fce177e9f46bd995c7154f5875cd63478092f4a66665acffee544368e51b77a393f2e39278bae213230ddf784a8d225dfa",
    "5": "102e3107aff90dbd71abe3121110c49aab38612192213a438b927a7b7f7185518f67e7546a6c45689b1fd6d94630fcf0b39144226d13bc855ce8558e143a0e4b44cecc4a90658930f0c699af1bad9ccc6f2d7b57741073dff4ca2d3ad89ee3a80f135530f4a5dbb5be3e6677bd97290896d08e4e3f6d9a012a1e684a3549a3d444604d47caff68978d4aeef9994751ac3659f3cdaa4d4bc925b07a5417e733abe4363ee0c6b9359e1155a9ed450ba41f5e1fc581e070d9fe934b2b0be9dc17dd0ca298b01be2e0e9dee02a0b792cf92d1445578bfb7131f4902d79e76df547afce26d36cdf76cb9185edd2570db22350c0f114fa4c7a6364720d0705b908ce4c",
    "10": "b6f179ba3ca8dfebe5a1100bd4c0c7f3b3c9804752f3fcd5fbabbef6fe34937c72f1c4691e6a5bad8cbae9f31b499bee4f5f7c40245b4dfa9db650dd06ee9f34a9c4259a6966983267b3b5f4c9a3d2a93c15790936445922180daa33c55764d732d3637b3c193e3d70af8c5bd3b3c1064afea0d68ffbd32e64883d404c55ac184f8529796b7f225fa2fe694a56a21eeb0127edfa2ea319ecf56d8106e1c7ea9250cdc1d1ccbcc0a67d1f272de05d58fe4afcb9b3619ada62415bfbb6857f486e1d725eae866e04eff3afd4184a31177d3c058a747e16e2844f72ab2a768d01dcaf839ac0dba6d09fc2ed40db8f5a69dc6208ebe5c5ab58575624861a6920ec2c",
    "50": "953a9397f915ecd50e14d566677dda739e518dd707a53d847e595b09a8abae5e088872adc467026975ae38cb5a6c218920e1d21010baed27d89ccfb54ee19b9be65f88c51df13a38f7ca861cb35f0bb73f4fd9449d71a15291e7f04efe77a50412ab51ad26431cfc5ca312efe2297b368021c2257a9393c26bd5f4058e8bb865c50c40bdf30eb9938ca6661d7ec07c388f7d7b303f54a91c11f5cd8a7c1cacef1ddd5dd036a5e1c83a222dacb9958bd9b410353013cb1d0ba608938588cb2038550a5ef06fabe107926cd24af9085bcfa8fdc462faba7391d6070c6dbe187b52c9d3ad8beadb48d8e10e5752eb71337589fbe0c4d9ddb54dfbeb8d2b97a23ed0",
    "100": "9f9dab888ea32711f2fbc0df3e1252ea256cf6b27d2c338f07477acc2bfe506f538f7a7037c7cfc3ff12cf954704882a1403b20ebbdddf56d02ad8bb119fc45c1e89d6144b0aa68b2289d823889d93312c76fedc613fdcae5e5180dc73b72eea10c9a8bf5ac75a60b0926cf75f82f09a16fa205d717fc04e3be6101ec0f42b04431bdb3eea00a639c3d21eb3cd106e2e948930869258af42db5f044fbc0c7edf1a4d083149186e5e799f916fe3dfc4c627996d9a46964499189510764b6a20cd5738fdc2b3523d0f8e6d8a0f7e3d18d727f5db9457e65252b58777751b4abfad8f8d933d4d145d3d34ab0fed86d5d3843e32b8bda826da566fc2905172527461",
    "500": "152f449942f3a6f4daa67e98ed0768ba00fae1d5c1bded97df55c1ecb4d8728b1846b3eafabbd71eab421c85c9ad2e9dd7b8cb1ca6544d03f73fb9251287b1c47b9dbca59c1ba69b1d49745357f384fc4d7d23b0856c89cd660d1551f3b758998618b9a815b6fa0d39b38788b3e8675d25c1c3633c368fbea4b891dd19082c490fe24c7a3489370a2771977c1002b60b5a26fcf50daef30d7f8b9495df56f3312b1ca2999b78b2b51c094f2910ea5802e72b70f12df2495a5fa5bba4ca6dbdd3ff229468ee5fea7877b48dc093857652e5d275dbee5a0fbbc6e96da8e405394ae3e8d642d5a0ffe7a9ed9cc16fff633b9f911fdfa1c8cabf1a3dc5f00c9344c2",
    "1000": "47d0c6ab4524cbfbcde5159c16e0f2cc84baa3ceaf8d7aa3f5c02c8860e5df8937cc5ccd0b3ec997d907f4fca8e4a67d50e8acf6a353f22e1ab99331363b19994c14527c9c03635c483bfdb6b1f5ae99558e1c90b0284baa61338142ef8dcf460d09f68fa1a9ec2e34c8491243f607a6bbcae5ec5be4fcbe6dcd431e401c251bfa110cb34959731a982b66ea228d2e0754fcdac6dba2af41e6c4ad2d568fde4885cc57c3b5e235f79e67a33ab5f3b24a32be7f8764fa0dbec07f5a835b11da3c63357038c826b5a3f5f8df317535c19f06e26b00c69b1218a0792a1f86579ce2ab71d3a5e63d996992fc4f05125f1df4ebfca2be23cffe7f7d012215bb2e5298",
    "5000": "a4e6bbb6e54aa78e4a6fced3e499f8ecf6894538a28fe8aca71cfa46a9dfc31f2d3e46493d9d08e617401dbf8db812be4b29fcd939f6e67710a514fffda1d13a410b830eaabd17476150a58f64d24e0f32e81ffc897815fabfa0ed11277df87721b7a9baad5f03367ebe5629b00917ac9e88a880c8a3a45ecc9b514bc2864d094de8dc5ee2eda3768b81512f358ce46921293c9ff67e29952daea534057524ee03d563ee93a5d9a75be98dc8842d3ac10ba52fad1ea9dfe301b481ad1dc1910d3e8de86b7e148c3850dd6e45e7e51c92415c01a2e76bbc0c89f739d410dc4659253c249e5b5e77c1f0c18c351fc3757feea8fb0ac7773b0d76b7b67199125bcb"
  },
    "height": 230020,
    "1": "a9118c3b6d24d9eeb712aae7fdc26cf00ecb60d795090c3d151876d7211722094c456921770f8e35adb2c637b356c7eaaa9e68556bb4cf1f7a4fb8962ffba46fc3ddaf2e84d5a39e8572be6ae57160b605e23bf2502b8a3807538a12eb1d4eea145eaa2bfef7b1653dd51dca02e548b697ade4a2c148a949f67b5c33818972c4805e80a883c4aef4c06d476a3b260d57df57c5ff83b30d2471da4c693f996e8156b2ca55d9f8f08270ac46051e052365480401ed3cae7f08a887b08f448e4c2180f763fa360afde300bdc082819903709761cf402d0b607bed87319065b00ce30ef7d6b7e9e8ce5eb730a4bddd1a8fa38d7a0c02549e8e6d518b3ea1ee1517b2",
    "5": "395bd319318a99862f4156484fc71269d6781830c9e3987b20087f36a33ea9af5ba38e1b7d169c9c7164c9b5751f5d7ab7f857127e27951d99425c0831efa8e38255dfd7f79fb6709bf39cd877239e555dd431bb9c711c640326793da12cafdd106f0ffdc9e049e1db49d11217c71533808e6219e85433d2c48b09063d27d552ea60694caed5575dd3aedb738255004f49221c4e205291525cf0d0478fb551c7ff698db5863852f426a9434e3f2acce9ab36e2860d7a24ed82876d6a9d197461e305bd7d03e259e1b2d3cef563e2a9ba9c40bc6484205e8fc0f5b48d33fae0ec3be173ac72bd15fecaf319558aaaa9262761ffe110ef660eda658522b590bb46",
    "10": "9b367f6b8c97f35c8bd4555afb92de52256bfbc8a0e8e44b5e06b983e678f4a1e1d74b64cfc7f2fb53ef6914246b7954f967042366d19bcf8d6d7e9784ba2e91535455d967be46097cb4e9f1b19274a8bb7ef61e9373ea960a41f49e3b62b60f0a9cdf7dbb3ffbbe849ff47a90e33f67657d1fbda32bd3e21ac3bcc7de91e310baa54d8fdd18809f37eaf14417100d1be2f268bcafca4be8b792665339985bff58ddb7307798bfb15fc496aaca15ef7d754fa59f84cec5d86b3e0c80439144ae16d4b557cbead6249cfa90328017f9dc4e4bbea39a654366621cf93f77dad1a29fb335a6fa6ba088dec200e47d8bccafc53081e8f638caa11c9a7d89e8c9b2f6",
    "50": "c6620a34c13ae3c0dadc708de858644039963e2a37202a3469c04a42d18c70648a0f933b4de6ee11b9fb0804fb1ca0927a74625ef3f8636536d3a2ca063f7cddab04d8b6135401840bbc31601f5f4e0ff5df6526ef723215be862a340c64489b8a158c5626b14c979ccaf918743e579d7c1288387e6a288a3f2cbb7405562668f8ef0523397bce315e86c65753be0def453a7bdfd4bb1af88db06fee058ce9c3d64a958b1cee9d09d5c91b282427ac5c1e99f747b721323ed498c278ce8cd377db3da7f7f2cdd1a7c43b4b2b957c77496016023c9654633da167294b8d3bb479242df78ac7c60899f974411ed60ec82724db64ef9598dd99fd04c3bce79354c1",
    "100": "c0cfb24c8fdf74dee68d5e476ccb7753c91d864ddf309a5126a5b41b6fdf2b2d499d8512b82dec02f77e097129a3e44d7dcf18221260dab807a538e816c4988ea493ce7224611e2d25ddb73281ebeb7ef0f8223d613c5bb8ffcea607561be0077986ab607e4927bd09ff93659e4958a1808b670999e32a07c39602c270e00dc70261b8723b25d6c569576b0d1290ec804966c1b836a0b9e95c0c5062310a0eecdd80b75e1dc55ea5122398fcdff5624bc32fa81872722ba52b980b04dac9ef106c16e3dfd9e00871cf957ffe2cb9a6bbb3b787feeae9891a7d4a9b4cb53e47f629e853cb49113c6ab30ed2aeef2deeddbb2f52cff70bccf745eb7a1234dc2708",
    "500": "b02a13cd9d105d9094bae1468c1e2e3f60f5463dfe978fcaf0309fe7fba484f9ff452b3be4bbd3b72b4576cd2895dc1cda37ead620c53b927ee2b37355bce4b0f758937648b81019dd095b9fcda0068a1339ab0beea1e71bc5eb1f79149d7aad613286f807cba7136184d56955a1e6baf6a9e184e3a6d44ba3f09c0b04232d2b41df6ae2cb75f3f74b2c763b79757e3f6ec73676df4ba29e4659033d543ea4365ee0d2836bee891640523827f387048c32647745224015c64a3d41915976634b9dc98cb417b660429126ea55463983bf4f65278cc697bf8d8a44b6428de00e8d9d560b5de602ba2324f2ac7793050eab231fa63446d11294a50a4aa73e253ae4",
    "1000": "c0aba32f43712ab0b2e67b0cd0d8cef16da566db579988c2b7ba25ecf41c83dbb2a60b79485d11d5a5f2a5a8f8e22cee9b3df49c5df992f5ae8db59b85dd8415dd47ce1a2ea2b1035c56fe6e370f6f8cff2789dc7e372977482ff1735e1f473991237377bc7f352f98260cc08feed1d6ab5a46345d547869772609376d64bcf21ec8d70ebc43bfa5899197101415f1b9f86e474750a79e2422211a0af1db43ed6d43d7cf560bc2377d88ba0b9a7bd7f80c728d6f6821d17fbfc89d9d306d89cff677953685b9113bf2663adf441ec2a124cd1422cbf7de480805be804629884dda13cc38bb5b10aa5c52f43985f653a36e5d89f79abfed488ad8ed39533b7871",
    "5000": "25a50111785d18cbb6413f49c4ab65bef262d9b38122e5e21192be53055c02de6a74e301282792ac09c8e99b79fa8375c213a85f29863ed2b7b0add963b4b615dba93c76261f6b577369734ea09d9f202e41a6f9e9b388604957b07d5e87db00ce527a4d01cf8f2b1c310bc0ee275db14905d11885e0fe5340e9ec7f07c0a8796b7ebd9beb340a9fe7334455b8194dd3f95a7ae8c1a7ed20b0531bf0c3987baf7ca1ab53879fd3e105b9276f5d62171e03e51406764ea6abef61361f5095c3f17094bbe1032175e7014b3ed58286bf2b239b9399d6f0d3938c0474e9da1d6def3a434028d31ce349a73edcef44247c3305761e06472aa3faeace7dc3e628e3f7"
  },
    "height": 240020,
    "1": "385b901dfaf60d440a1d58365d3b2e7dbb8c50ba41f4ecfc197926e85c53db25e3d14fe48c0231c5662dd6e54e744fb8aef806eb6192acf1f23633b68a51e48c0ccbecdb441ae6e7a08bbc8a37c49202f275504d2a0f96cdc0be93794aa59ba014a640a4f3f34763a0ca4c869273ace06ef9f4f5f7a9094724c8c54c2e92ef9462331e6ad3474197c23ada25b3e7f55cec7754e492176ea696b05b019b9f131c088031cb8f79dc80608e27b3db986fcfa591993a2a2ba2551f20972acf7aabc7c3653cd11e6936be2f69ccddd476aea949c539c921f729e217b16bfddea16bbfe87e0ed8d755290fe7120098212342eb00d90ddc114914d09f8aa760ab1c799a",
    "5": "3a4e5b8e905767f63854e8f388e9173c60521df4e7b511bc793b4bd658c241ceded8239548085a7f208029b77e4484fa34d1c3d86a5dfc28147492e0762c6a831c1d20e7b1330923bfdd34a96d59a7ddad415c8366630655dcf9bcab3295a6b3e62c0fe449ab464567a9bef0bd70c04b3c9aa156d393d1585f6d55268feaaf1c69f4eb0d03c1558f37c0ab2a779489d48f1ba586a5a3c7433420d204f6ffcb14c47bccbe66554206d37d0fbf2635426718d361ee040db8905ad830fb68611cde9d7252db710193dcafaf13ce56b65065c95c1c16686b6032bed0f5784a507f3aa8dd4304b2e04f4680f419708dbf0d391a40b84fe6df239f6c657e6ce2c213e1",
    "10": "6c3b744982e5a0047951613230ccf8e0dd817546a1dee7906e76e3319c4413589d1c75ebb3c3a248bfc4fb5f40d0277d44ca9c944311678f6529a60b7d14acb7649c038b95b8144d15f5dc2b6eff5a258f208e2e3530ede75c9eadc1c8f1931279bb2732cfac101b4a97fd6289a5ea5c7e7c5da094d5adf6b13a1c6531976675ad892353fd91fbf6b689bd943aec83dc8fc0a63ad09254e5398c0ef4657a1d254dfd72aba217424a6ec82a6a476992b112df4d9861d432acc96fac6e2d272fc89ec66d1d90c2e53c656c018577da531d0542bd848c473573992b95f8850a64ad3b6d24fdf24c3e76a7371b6740a943978cb2171ea12a148ffb8485238dd1361f",
    "50": "64328ac50aa9ce522a70ad75f5dc2045505a52d647350ac6afe46422899a939e36e5cbfe23495cf296f82cb00a94f6d1ac284663c511451ff97eb93554827eceeae3c6261d43337530547ce57898d120f9007e0ec5c5e21a2bb8736b354f77c17607ae6a47cd930c849192500c7f3cdc3bb5b8e5b1717dbb13d65d393413958d05f201c327896f7978bf0ee61f117b1adaac1086dac86cbf5e4c2eacaec6be572af042e4f4ed5c67b6f2d207109a7de83563029f2b1842f79790b1921a601b1d86adb3919e0f66f67a03aed86458d8d76f7bddfd9714bebdc2ba5c4c05dff2a695f462ed51b579cf98b660689a8626af75ca97c3e6668eaab76bb1a213e52e14",
    "100": "53b473a610e3b6ab9d8c0b834620dfccf1ebe8cdc593e1e732c5dc0ecbba64ca110ead752c44eed98d8e556d695898a8330d21acda45a0623781b167621601b41e94763b3e8c5cac85a83ad2255e59760c6e32ad413d160e55713ad82cab33d3d33d3db9ce57bcba33e5c11596d199cc0bd086c7dc25a9f6d482a7af8c3f5e1bb7927caa18fc1bda0064b08708262ee97098e3908a24aa21b1bafa804a2f9c95f5cc5ee91a74b3977371173cccce0e102db69e2b7a17c83e1e2102084e691b716f87bea43110837240e6ca99219a8126810f7eefd79f933c0d3e6f9642a65c81bbf677444210c4659116af3bb87af65c6b1524d5946cce1bb503a2699b410ab8",
    "500": "b2c83b6daf35355a6acbd9c181a2ccf19fc99b863d3d48bf906d49baededb7e5ededa644a57d4a05a70bde52d9db8f996fb80201fb327d53bf2c8c701eb9e2f4b17c7c1b3ad0ee99bad7b4276b24914a64adf9490a55884418f6394585b3bb71c1d887f1d4d1517b4249ad7ba5c623d44763f92ac26ee8962985a392164d4e90f2b9dbf92eb86abf99f90108abe3e269a959ee0978c9aecadd5b76e4bbb1e22a4c98be6c04ce04c963c4a505dcb8d91b5a7910250b94a2c2caf5c8eab7e889810f13bfeab3aedd3756e2b3418d3cb131f9d551c9fa7cfe65f253f524cec8a3482736e755533bcd8565d22791fe338d02cefd3b4337e8b3a7bb611cc992a9289a",
    "1000": "43b3c40348cfa8a92c0d6301f7beacb88f5566fd084f43f466f9f2ef812f9838dcc482ad9cdfc670af339b1ba04a8af0dc0c716180787133006050a3fa0bc8e4ae5e457c9c30b22cfbabace13051a92aba30c0a86cad040425b710a5dfb17795c50d6fde07094727ce93e545523b12976ac6fe10746bb16ecb825b689d2b8904a09b48ba2f9a914b4f223f206718e7b2b345e6a1e18e7fba4afc3a77b7541fc33da55f8c49eeecb2bc298a564d010242f3f5eba5d3ed808cffe9e8c53dcb661dd9ca7694f215c54c8b4677fdd42a77bc6fb46b76476a77b3d50b3fc2598ee28dcc677d864eedd021011f4e6f7694b5a6076bf114b3fdca9a02cc4de49b02dc80",
    "5000": "7f2d8c388f8e240bf5ca28cd400db3b79ff764711c64a5e39de9d64cc7816be6527ce25dc328b7b6b39d084c194eb7088a65b0bc9b32691a681bea0af674d6b7b1a847faa37cddc7573081fb3c5b5b2ba7aa9dc71d1c3a669cc6b8eb65e30ac5b9e3e444eda678ca61ddd67a997f15960149460875e372f3308b563c68a9ebb5d440f73389b0fc39aace9717009b7c75cc8c99fac6b1b7f3aaeb331011a662e8cb014e107a48374efbe1bd59083fa82c11891d41b55a99fb5030b0e990d7b1d681f5dec7c4941cb93c49ab17e1cf651cd73bb557c02514eec5499ed95176dc82a569c17d4dcb23c545bc8eb731fa2b79dac120f84ef9a88b4429a875e156e793"
  },
    "height": 250020,
    "1": "953bc8afb7a12c6d1f9cd28f209173c19373432404a7c730d1ec531896332ded4dc761523bb1ffbe057a54206bcb035553c7a4b644e75559ef1380d32be9c9dd971552a4e28f073c1bf630e382a46bbf4b47db5a59d9732ee1c3378665bdbdd169987ff08b7e5e470d751c36a53737f82740feb0fce5ad63057cfe96fc479259f2445503d4b774e7ffdcf2aa96bd2a2d62c06e085526c6b0f675891fe04df6a96245b9a128a64d894a0b36b70a766abc32e8569b4a2d59a7f13ff8b90236b34f30b8d81ce28d392b358cbb10d128fa98d4e8a315a4d02ef0ee03c6140211c6e7143b155f71d1ba39755c50cf73ecc67a4378da0a5c4b101c242e7111f1af9854",
    "5": "16f1faceb93767e53e68d57c36461a2db24e8331279aedf3b80be53792ae7fa670f7d86d4e7bda8373b5b3144fff4755144df8189ecca86429458009b7b13d10e247d742b46c242dfe58473cd42ccc5e3edaa5ce42a9a3af45c4c761a32752414a070fffb3c7b90d7dcddc6c1186edf4aec96a669c2e9affb1e0f02fba4bb3aa1698b20a1fd194d742465211aa9251795b724b019c222e6c1126ee2e5434dec814157ae7c7a6a19b8218d7c93761eefffa8a926661d59cc02aaa63a5c90423e87d8b0a8a259912152b16c6447522532645f24acf06f409f4256e1dcf72417b9a5e0ea3f2d4cb39d9b39e29d4984a9fb3ad54373f0d557f0a04e0c20631a7193a",
    "10": "5e7be550013829e6eb0f66035a9c5e886c830f8433e79ce3ff0080963b0af64bde6f49926f20185f52f186a1d4f25fbed271cb8f94258bcf7fe278a316fdcfd83d344f7f6fe1eb277975a99bad981475af26a822f7d7c5db590d5be6e70c869a08beb17fa40cf3e4459ba3fdd2fe05aa8d948d42cd8e4298b8c97e21db95dd139127a7a6c5a0b761922a78cea1edb355756e0f482f6cb0527ad70999c8055f1598ab7eeabfbbc1a28180c2c95c426ba6c1a5993fe56058113528fb64f0791df459ca67d5de2ac7de1c2fa4119af778aa26b25213c7f2008e36adbef48fbeb3cb7d43224ebfbe0235af970236ba1cd59e14108128a507da500c90272d121727fa",
    "50": "c5f9a714e113c1a2246461ff7dbe9ccb9d00673332d507f0aff489424348b6622ebcabb00ff6119afc3ef17c8f2c88366eea0019e73c1ba6545418d474700fd461f512291d3313231127742c84471d9245495bd7483eba7e13d8ee33cb337bae840ab23549bee57967a6a2fe4211f6e79284f84480564610fe99bb671414cb210bef43f981d0378af49e68ad4d601487f03fa05ec64a3857531f0a5236ddd8130062df727485c88da159d9466e1316413a1f5b9f1211d5c324addfc8777c05eec6e3994643a400185e8eba2912970da2dc0c23aaaedd0630e65cd17dfe5e102e39c5a544ab9ae8f4092a3a31272521439f6248cb657154ba69db39359891258b",
    "100": "698018c9fb30006d57cd1dc3056804ecf763c639791ead8a9b71509df3d2f12845615497e61debf1eb5359345f487e1195f66e1836d2e4067acbbf2bcecf01404fbd8c13e60bc6d2479966cd65e87ee7f2dc22c836d5ee324b3cd0bae745a666732f2f801bff0b7efb298cbfc26be762a9b15120aebcfa825fe5e672b2d698f9f8cf7cb9a88210705cba157cf4b9a9677ea6553aeb37de1169b92bc639e6a38b2bff631555865bbf5623961873eab78a5ef5e6decf9e0be01b7f4953a8eb13abd3e00a3d7cbd37a81832d4e7e3d0b5b5fb0a9319fcf9346de1af349cc1560fc67bb5fe60705550649052a5f46d73a6c0850810f342f2062a6b1889fbd1af0ef0",
    "500": "7c05223ef0c89e217da7144f81411eaa8a8ece9ef415bc726c199a68c58250c7b5708b41eca6888fbd3000f3719051c5d1a1e2cb70ed0d62a1039f669f4c2d0b608016198f4a8b2f45baddb27ef909c1a456edc6e7242d4c41cd2b8c984bdc4fbf258b94b57839b514224fe8e7de8ad5273363a9985c5d2206f89e116e2f728ea066caecac6ee70eede99dc78869af9eadd5e4880363b94f9093dec704ab25c8865d8910a0b6124935c7295cdf8da94f99a00444dd76e634d6300d715a6bc8c747903e9cb69ebde8312e53cc5fef762e69fa7f723b279dcfb7a42067fa07b6a5b3eb034fae43e91631255edbd0db5c3e3b8ed24ff5175194f5ba212ae360fa87",
    "1000": "2c5f2486687f253678d51ba41848d7db64b79fb3054375086fb15fa77d3a6efa2f1fb7d470f5fd3649adac33ab0582723bf1a90fb9bbe7d43d33ec37eec645b5346e90bbc7fcba010cb2b17f739aaf15b663146723a4d5dd6256a2dcfa9cdac87452574572d6021980483b2492af3071d04de5cc41d61b97aa809f92c4f8b0182b55f04d182888ce3af297d9d5c898b24cf0b0dbced01fc6748c1b24058f29c35c7a37195ffe664f408e7102faf7b11625e4dc4934ec1ee1029b160a992b04e7a3e47782077e0601a9ef541d1efd3c166f2323b29158ce265c3233f2b5dbebf20bdcc254d2c0753869e39a629036a275066fdfd83b8c061e03af739f17bac83b",
    "5000": "a9c242fa87bb1dfbebe905558915de26bce2fbf168922cd3b01b3776b725155e826bce3903f15c52e1fcfa0b20ddd4af699f5848528d348ee1a213636a7403b317bbb9a2fb4e71d26de28a1c9871f3b0bd8d89c1b80b5117d4794dca224a09c52809dff32db0a379fadbc3fff7d81fb042b83f95c625c0fc9239a31e1dc1b36aaebf7a4ed40e5a5ec497023cfdba4369e531e7d0209a9f222f4f0299ee7c473ed0d19eb8cb87ccbb076578259133763370cb1cf1fd5cc0b751b9b6b83899d33c27e30dc72b8a14e830bc2d2b31094f8adb83590a950ecc2af24f6039481ef70bd6fbb6d9b0a5d83dc22cc1f5f71dfe2cd4930609d8eda879bed2dad028e1bc38"
  },
    "height": 260020,
    "1": "a9effcb82d9263f5f3716af9976f6cce732f4d90ea8d524cf1d223da6f08bf5f52cf564993d4f0523f1ec444fa63f9958d958e0ed06dc99ca051698e716931b688fcbb747bcb2ded3323acea717e024316121b25135a465c968ce2c4b9d4b3940642fdf204b4fff1a7e791d247b1c707addeecea33d4cab50e9b82b21fadb58e2c99bc8e4fdda2249362ef8de17e9388535efce5e51c811f878dcc3c3684088011e902bb1de6d2806483f6ed653305f187c5d2e54803a3ec11289e2cd1209f8375ae94ecd83f9de66030eae8e697e344376c02becc134bff45269b64e8ba3dcd255760762906cf3315c5800fa40123f23521759e28aeb4786e81d12207a08485",
    "5": "659ecbcb0185520e84f0c771067ebce7d72677a08ec7a9d091334ac9a15b87e83518b514aecedab36ce13c15b8c3f0217d307839ae505c9f387ca5de8fc55a84d6815259b59f934f21aa6e3d609b58923bf6808aba3d72a577253d9697e054c6d6bad85cb0d9e028475bb0c2fe6a70dc114d38ef86194806220ab65bd84bd8560556697053bf731af721117a7525b31cbb224afff4d08179a60d51be2b56e6ab3da2fbb2ece817548da02ced7793d3bf7bc62dff14f5e8ceaf6a2c2b72a38b8aafe20026fd5e3a6ca81d6c77ce8996ac666129d8617fc950425da0d809e025c1bdd9689b76188bd1aa0916d33e81c6d72835899e1aafc09682f46ceb20936830",
    "10": "64e125dea15a6d95109ba67dda2568b711c8115fb1fb050e6f87a82c72db1deae51181931b6731d0d62ca5138d6bc0f8534621db2cfa93d1f814ae60c0bd5ab2562795278ac746f0e8521b448d9d4b444b7dbcc7a6c2e907edbb31a33f7a974fe9fe48679fd36ff869091684bb99e6ff9d03a510c8754274915270fbf0e4b86f5f2e2aaaa8f9e1d4e46c79a2580a41b5baa7349d34a4357ae177a5558455025e843ce1c5f74a1edfa689cc65190f464db90986a6d110ecf247a935191ec763a4e23cd1e31b92ab9e9e07614882d256cfff2caeeca269d6da32eebe17a1b01fd53a1050d42f0623360662dc06956b621f5b17997358ce7219f7ac66892a17ce7f",
    "50": "c5f9a714e113c1a2246461ff7dbe9ccb9d00673332d507f0aff489424348b6622ebcabb00ff6119afc3ef17c8f2c88366eea0019e73c1ba6545418d474700fd461f512291d3313231127742c84471d9245495bd7483eba7e13d8ee33cb337bae840ab23549bee57967a6a2fe4211f6e79284f84480564610fe99bb671414cb210bef43f981d0378af49e68ad4d601487f03fa05ec64a3857531f0a5236ddd8130062df727485c88da159d9466e1316413a1f5b9f1211d5c324addfc8777c05eec6e3994643a400185e8eba2912970da2dc0c23aaaedd0630e65cd17dfe5e102e39c5a544ab9ae8f4092a3a31272521439f6248cb657154ba69db39359891258b",
    "100": "698018c9fb30006d57cd1dc3056804ecf763c639791ead8a9b71509df3d2f12845615497e61debf1eb5359345f487e1195f66e1836d2e4067acbbf2bcecf01404fbd8c13e60bc6d2479966cd65e87ee7f2dc22c836d5ee324b3cd0bae745a666732f2f801bff0b7efb298cbfc26be762a9b15120aebcfa825fe5e672b2d698f9f8cf7cb9a88210705cba157cf4b9a9677ea6553aeb37de1169b92bc639e6a38b2bff631555865bbf5623961873eab78a5ef5e6decf9e0be01b7f4953a8eb13abd3e00a3d7cbd37a81832d4e7e3d0b5b5fb0a9319fcf9346de1af349cc1560fc67bb5fe60705550649052a5f46d73a6c0850810f342f2062a6b1889fbd1af0ef0",
    "500": "7c05223ef0c89e217da7144f81411eaa8a8ece9ef415bc726c199a68c58250c7b5708b41eca6888fbd3000f3719051c5d1a1e2cb70ed0d62a1039f669f4c2d0b608016198f4a8b2f45baddb27ef909c1a456edc6e7242d4c41cd2b8c984bdc4fbf258b94b57839b514224fe8e7de8ad5273363a9985c5d2206f89e116e2f728ea066caecac6ee70eede99dc78869af9eadd5e4880363b94f9093dec704ab25c8865d8910a0b6124935c7295cdf8da94f99a00444dd76e634d6300d715a6bc8c747903e9cb69ebde8312e53cc5fef762e69fa7f723b279dcfb7a42067fa07b6a5b3eb034fae43e91631255edbd0db5c3e3b8ed24ff5175194f5ba212ae360fa87",
    "1000": "2c5f2486687f253678d51ba41848d7db64b79fb3054375086fb15fa77d3a6efa2f1fb7d470f5fd3649adac33ab0582723bf1a90fb9bbe7d43d33ec37eec645b5346e90bbc7fcba010cb2b17f739aaf15b663146723a4d5dd6256a2dcfa9cdac87452574572d6021980483b2492af3071d04de5cc41d61b97aa809f92c4f8b0182b55f04d182888ce3af297d9d5c898b24cf0b0dbced01fc6748c1b24058f29c35c7a37195ffe664f408e7102faf7b11625e4dc4934ec1ee1029b160a992b04e7a3e47782077e0601a9ef541d1efd3c166f2323b29158ce265c3233f2b5dbebf20bdcc254d2c0753869e39a629036a275066fdfd83b8c061e03af739f17bac83b",
    "5000": "a9c242fa87bb1dfbebe905558915de26bce2fbf168922cd3b01b3776b725155e826bce3903f15c52e1fcfa0b20ddd4af699f5848528d348ee1a213636a7403b317bbb9a2fb4e71d26de28a1c9871f3b0bd8d89c1b80b5117d4794dca224a09c52809dff32db0a379fadbc3fff7d81fb042b83f95c625c0fc9239a31e1dc1b36aaebf7a4ed40e5a5ec497023cfdba4369e531e7d0209a9f222f4f0299ee7c473ed0d19eb8cb87ccbb076578259133763370cb1cf1fd5cc0b751b9b6b83899d33c27e30dc72b8a14e830bc2d2b31094f8adb83590a950ecc2af24f6039481ef70bd6fbb6d9b0a5d83dc22cc1f5f71dfe2cd4930609d8eda879bed2dad028e1bc38"
  },
    "height": 270020,
    "1": "f74a7f86782f2b0ad4b5799b68cc7d60c2c7f0d8754b4f53b46c14d903111f5d8d720cf5a9ffb1b6aec35b86a3f76b1e42dc6ae01a78c5f4850c98aa56297968d91497352b857bd9a823cee92a4828525d3d3d6954897db04a2c2b8ab3a4c43dfdce2d04e17f5276fa7ae2ef80bbb3358cdceb77533eb56c5f4fac8cc8ab25de18c15bc1e48689cea1cf5864e02d34556047c56b933ffe4dde5d00901eb2c7dc90b55d2b54b6d96af5a99fbc6b22cb243311ee335250eb1495e411560bd1207c8c38d5c6fc18713a16b31cd873b3279840ae6a1c1c1f527e00a9705fcd3d1c2b7524d82bac0721a10ac13b5b75dec4f187f87581e6659384043e179d3cd19c0",
    "5": "430ce80da296f2a2940a65a90ae884a280ed2abd4a1fc7efb29e6605d0ee7fbe10acb4fbfc09bce61d13df7f66297443ef8cd5a77a9426d61ab6d56cbe4dcd5876479a5cb1f54869941a7cdbcfcb77e52043cca245f1aa6b737779be3d631ef46d7fe0d2f83c54c28c2d2fdaa75050a1ef1a33e2f56263004c1aaf61187a0b3c3f95d4bfa1515396cbb2d2b896444630325de81995232688e5d7d85652538ab282e4288a1397e8fa6647f2b25ef16aa8e8507d1903137a98ba6438b72884016f7542c00cbbdf62665259a4f1b29bf3cb1f3253c1f56de30d8e68bd203edece679a33c56c52d5e26d02f90cd4702bb3c0632bd961ebd4936941b1fe5553aed448",
    "10": "8cb57e98026bef7e6b17b80b35351b3ccbe43c9563b338e733811bfa259f23b7b3fba59b3813a3fbf1479f589461784220587bae8fc3aa9ce021f4b14a9af5c3420f1c39de6e8651e9c8de99e3988652cbf1b8778047a3e1c6647747b4384aa642e6538363b0e07931950ae3db6d75e26686c2b231989435f587ab97596b2502137bb282b5d5c38fe0af790a8fd3b9c7f3c99c8922165f78837d5e4154cfe6f8a5aa8e55e3c98bd5bf6cdeabc8af3e29735b3d14173ad3de31559d2d63f1c4c188307c7cba1aac95c3d01b1fd3506eb0192b3653947b6816cc8766fd9f8d5834b2ad46fda4fc525363f755cc42fa245c5bccff79f364cab498e7ed9eeafc641a",
    "50": "c3a04f6cb3f895f9e6f2750f8b37e257ed10708a9784e39cda851cc44ce88004c3ef07fa6a772197eac9e0fe97b666a1e401a5474ab53e12586ea37060faf6e82342c963f3e0e07c95adcd516b324852d45974bcef3c8ae726239833b9b75ae5737c873def906664dbb0792a37accfcad74ad5cbc0eaa26f94c7f47a806346b638c761c6bd36d8e3ee41b8fcbc7db2743b1bf701788afe2f7d14de544dc9d838587370763c5b8faecd67cefba807d6fb38dc31136d4125db0db1ec6f12f97b356fad340897737ba19d2ee9b08cae313a6fd6acf021a7aaf038c13f0ad8f2d4821cafb7366a7beeaed8eee0647e5f155323d7817bf4656d58c72b56bfb63c8012",
    "100": "9f2ffa809efc9aa0bceaa78306f55dd4ab04aeb9574968c463cb03a038cb1a411c90af1db5a6c6e4ddff75a296d4445e1623e3f70434f4ee24148de8ce7bd95f8ec3aa34ddadc63966742a5d86b8cd2b5e27506cb601a43707aede8cdf9e3648e2948d4200d89826249e6f07f1f21a0564327493cc5060fef184f3447540a7a0833896761c8b30d8fe43add58a58dcc712ec4af0cec8fcc385daf578341003a240701217740bf2c21767346de2ee43ae0a411099863f2752df49d51391cb5802b1309b183ce982ce8546631730210662de9c808e9ce6d3e28631e51d0afa7d2d7e6e580a3ca1b618f9efb68696fc794fb73fbece3140a5197d2ccbfe740a72b0",
    "500": "7c05223ef0c89e217da7144f81411eaa8a8ece9ef415bc726c199a68c58250c7b5708b41eca6888fbd3000f3719051c5d1a1e2cb70ed0d62a1039f669f4c2d0b608016198f4a8b2f45baddb27ef909c1a456edc6e7242d4c41cd2b8c984bdc4fbf258b94b57839b514224fe8e7de8ad5273363a9985c5d2206f89e116e2f728ea066caecac6ee70eede99dc78869af9eadd5e4880363b94f9093dec704ab25c8865d8910a0b6124935c7295cdf8da94f99a00444dd76e634d6300d715a6bc8c747903e9cb69ebde8312e53cc5fef762e69fa7f723b279dcfb7a42067fa07b6a5b3eb034fae43e91631255edbd0db5c3e3b8ed24ff5175194f5ba212ae360fa87",
    "1000": "41cca0f3f6b94f2c1572066646d1fc6ae9d99dfd7c2df73d0d99947028785ba092f275bae1ab19d2b737244b9ec4903c1c52442efcbfb7e10c842e0925bf1265c44223f91d36b8633e6dac10c7c8754fe621f6aae1030e74ceef8c6221cc2f36e77c5fcb5914276e5369694f471a9c3d60c232abcc435134a58c210191bbbc5cd15f7da69d115d8a05e1ace6a899c1e7b481b64338ebf194bf351a3d414340c11095bf56ff12a124678f193cf57ffe799877a8e3dfeef22d5e3a39bc382ab9bc0825066efd8761edc94eab5edd8305045d978ed44f72c14ff2f9f85daa8ebcd10bbce1f53b919f7980541002c2d583b35d9d4e76a49af719f73d969eb982189e",
    "5000": "a9c242fa87bb1dfbebe905558915de26bce2fbf168922cd3b01b3776b725155e826bce3903f15c52e1fcfa0b20ddd4af699f5848528d348ee1a213636a7403b317bbb9a2fb4e71d26de28a1c9871f3b0bd8d89c1b80b5117d4794dca224a09c52809dff32db0a379fadbc3fff7d81fb042b83f95c625c0fc9239a31e1dc1b36aaebf7a4ed40e5a5ec497023cfdba4369e531e7d0209a9f222f4f0299ee7c473ed0d19eb8cb87ccbb076578259133763370cb1cf1fd5cc0b751b9b6b83899d33c27e30dc72b8a14e830bc2d2b31094f8adb83590a950ecc2af24f6039481ef70bd6fbb6d9b0a5d83dc22cc1f5f71dfe2cd4930609d8eda879bed2dad028e1bc38"
  },
    "height": 280020,
    "1": "932e5e15aa64b4c02c1772f3b8a4d3bd6fc925c5885453350a54133fbd266a076a6f3aceb77b6717c045a693b328a5904fd28f9fd2a08005719ee76309e51fd5c6782474f693de9a55f9727d30734539dae93799497307f6960a84cc08172d9d86eaa040256f4b77ba0e892ac94df398b0a140c910cd8e07dda138e8e7c9a81bcb3947a41e9fdcc3fdaf57684f495466a33e16319495bd7a7745371f94368a53b760e04397c79517a392e3fa6cf141cb791514f5ac77a6000039de2df4bfdf95299540a8bc98671196272f75e77cac836c28d4f8119902ae41aa8a713715d166723c986f2afb30c69fa63350dc2331e87395b3fa280604dd5029dbf3736ad860",
    "5": "99154d9af4974f4036d82bbe924cc2478c4facf655ac3643b21076e69f01b5d9e0fd9571f999516e6c3343fa3b8b8c39003d9ff96eaf0c3f8d002882626955353bf8ad1e1e90a663c68072f3953d9a6d5e0b60605928f63bd70dbe4b2ad46c9cca966785fbb7566cf66e6f6530165b3ec76fa00c301a182ae5e42bdb8091ad4db646150439e59f69ee3c4b8a93ed227090dec83ccce1a67075aea40d108e0555faa40867016a119fe821904ec85cb98167de765517223bd4c40834da0d6e1f1d877256ca6261d016c3474d895a4523b4662541813bcddad4f1910190ea67146d097a096b58b8e78f3de4e921f2bb0b952962d58ef35413413a663c77dce98410",
    "10": "415b2dd47fdf39c064b921a8a86b27082562fca00bdf9c6dd4a572aa1c4709ccf9cd8e5ca841e97f0bb2c75112faace2c6289b6005857b085b048206d056b58ea46bbd00b9ea84ac5939412f46c8f7271302781ba8a959a012cade57f637dca2bffd70e472a95d03dc6c64dd2fe191b368cabdfcc8dac94ecb61263d0761640c13a87d90655b4b08779b335b718bcb090166d021e471847aa7f16e4abaea67d241fe01b4e582c4807b85c3c2392a98a9df9d5bc227fbcbd60733c525116005e96ad762f258811d0e0c4a3bdf732056d4013c71e82b5c683563b90fdd5152fd6c34f4118bcc4251aa244fa50b7549f5494c2cf020b1853bd3c355f58696c4c377",
    "50": "94db3f23d3e4ac054e5eef6539399f30395293a9bab17f869f5706c206072e5693932586aa0036fd21163203347b2037fe6b0946e9643a77738ff45a7b42722dfa0c4680965708827abdb6d618947eb2f3d43a59c8690b5925bc869e17a289018315dcd287fad723b2d46909f12fd96a2271e7f47dac4dcc94c8daf8f8e98ede898ad6d68c11cdf3b66c83dc8d1ffdfccc909053de4c345207b47f2e28a132fd178e76feaf97a6efa40291bc448c95c1d4d6e905f54951329ea7d7fe87ccdce6250a2879c1bb6f5ba76211b5b7df9ad7ca84372f833934176ba243df11e773c9a589ebaf05d8d102003c8a69fa919b1327d898c029b3b1d351cf34fd7d73d3fb",
    "100": "759ce0b698971a592d5ff4f60f01046714898b8961d0b07e67f61e741aa8e5908ae29a2afc565018c23ae1e40c3cd804c0ccaaae9f4bdce1246d9508706eba82cab8c6cfd3c63b16654d5c5050c5c8ef4ad400f05c42d7f76b7971e4e9f38d1cf42d8c5c0b7da9a63b74101a9e10a5adc9da146073327d8b0437c4e55a66d5451defa7aa5812927700431d2ae5d4cd7a4ba8a835e1f2e857cc6832e02c26af12d6cd895578091ab55abcc31c667769a7b0a0855be5627cf27da7dc623c2d3ca05d484a5f5a4e28f1e56aa2b0024ac366033330cd5710cc0d891fe0d28c8d527c2ca20a8f7022f088cb563290758682e8664169ea124ecf52f95670ca85011d5b",
    "500": "3b07bd4f6f9c3478a28125ace2596d0c89d25d98cda84719588393983f9d5c6faa2c39267243cb4331a6ffc38d46b894cbacf9ff37df2de6e887951a14a558bef3fbc9806cd0be61fc5f3adac6fc09138f3e90fed0ca4357cecd398a4091a0563021bf332125903d6ad7e240677793788ff1bdcc95e5784026d2ccb13ec7ecc4b29b7fa2c9abdf8fdc1d88423c5c99a0e2db39f6c733fbff14b7caaa44a8079defda8b158d197829c2ed36568e169e5f374572ebb785f1a2264741d30dad08f7676fa109efea6e55b35b3256b26468c57b23ece47a0b9b5c015d4a6aa34b054ddfd1873a96ef29449d671e80698cd156359418fd6159dbe984917042c46c459f",
    "1000": "7c8799e909d34c47d0b5bb74adf539374a71c87934b610704ce17a5b79868bc196ad658c4d9485af1bfde92ae091c6e78877be8e48a550f601a7495dca6ff9acf9c91626d5ece755886197f874a652daacde346082f4a65f991ff6e55350955671982081dd5bfb75f14aca71c055ee7f5e7a009ff2a5fe2dbc5652f6f659e264f6f83b30e412d9c6c20664252df4ab61b314dabdf65f6eaa2b31a5ad3e1059b9a8b4567ac3207495be2f2cd8fa4d9c77a05666ceb88e7c5ae6d87ebe76d524dd21929b9d2c818d218c758bd5ba51eaa445b95dd28ce97705e967a6955681d07112dccf702848d2fe334ad18dd5f0ec35b663969c4d75693611894da8033754ff",
    "5000": "54c866d12e3f7fd042f1aad6ad523db9ca40a5fcea795936605b02e61eed39cd7431df690e5b17ce70221cc74ce1aef60f3ea7839a2a5070731b0f09ac0fc34a99306f411de8aa4cf50a3ba12ed627ea0c3f9fa8cbf556a706d8d1a46875b49a5d02b0d0300bfe096f8c00c943f8ea1bfd76dbb13ac26da97c4f17e4877ccb0d4cd27d7e5c032df11609f1c0f6c5c0a87a3f22a0a75715baef469fc28bc0bd736fa9af8b4dcb8199c64c450bbaf36c211a9d005d36b7f6f5639f01f137841402c3c29b452886b08b66b03a7af310ceeabe56243d89b16af4c5564e66cdcf5768265991b54aceadaa594442e048e74ed4f4fb8e7f6e1da9528f02003f4b9182bf"
  },
    "height": 290020,
    "1": "c344b7b1926edd671c80bc9a13f1ee51989593614a7931c5a7f0636c8479558a88782a8149ce74795e7e06de873fd96e4581a2454566723fdc4da0d325790efd066f00c74b076e3b168c3aa389b2fc80e47055d890061e19925ade6318511bffcc0217ba7047dbfb2d91fc9bcb7be68848534a66ab876b5fd0ee72e79d756b1f580095dceb261024fe9665190d8622c428cf16371447f3cc96fc705b21e029c916e7709f46f5d4aa216fa85346a0d0154be673b51c92544bcb67cdccb8d1957ebe4602b0375db8c2cacac937a5e9946c24948c272e99df909ef683c6b9f24d9a5ddb0a767977dfe5ddf5dfcd2bacc8a8eb7a2240da6d9ac592d7ada49e902c31",
    "5": "9201977bc743ccda79b318ecd9214ceab878f3b856011e8f5f081c4829421101615885514a243336865414c19f2895b10c69a4906f79b0c22daa74bcefbc5587bd1e30344dd7182c585a40d566f4b67b2873c76b87719d3a5ac0993ba7e56dba7e66d35865d0443785775b2eaa62710bdab46ea84113c3140bc01320313cf670f10b53ee1f3725fc8dcece2901425a1299cbdd1b6ae32160743a7517e1fc7cf3b45b76cfeac6511b997a31019238863c204212783fca95eb891ee3c52c16a33012b1f32738c35c44a194235145c3e62840eaf1e2bafe5a8ed24a3fe6c28a038787eb92b8893d6dc785a0ee3b3d4360802a0b704384ea8b04c60daf51b66bc248",
    "10": "3bc51910aa6b64745a8f6504b52b45d7307d3d694a1570656b62f9d712245a5a53e859bd57b5932ed456b23d68e330a5862b7ea139440152ededee4469ad712a7a02489de07c24c51883d823e749e2933e47b9fa8810d1268fc0a48970ad19543b482648175e9dac3abd68973bd6d6f18dd9c98648945f96f9a8cb197ec5b9d81ee205a219235af8b0cd05772a7d57d1307b0384a187e459be8cf9dcb8c0f77e150ab216fb0f1a38e42181ab03b247d55118a5dc8d3a11e183b4a4e2c74ad83f2df08d678c3bcd2cfd6b14b9032b267c30e01501435d1b434edef891297aaec8e775681fc3766a69ea9c039afc5d9661bfcc9e260a9e2b481eb4d6c4592c667a",
    "50": "3ff7ccb52bb04023e252920ae7d86b67443e944f8574734156e57b1f6d888aee40fad2e23fff8b38e2b2e90ded125fd663d63e65768ee1cae253466aaa665e84448fdbb53f2306b430d59f708ea6939d7fef79de30f109bb5f20dc6beab9c6b86ed7579dae6dde57c053246692f166a4135cbb17084a8826cbe1e6ef2d1e46bb9d934afb2c50d1aeb2ca0c83e4aea0fb514652a7d367f80f0784ce7fcfa48f5b81656b1d2ba60083823216caacb236d692ab97c25b64b1585ce8edf6d3fea2bbb35c5289ccd2efb29afbd2d724cd3aacc8eb73c8384e6af3a6e8ffd1e199bf6e738138ecebb60ca866769816a7eeaf89a5e05c77807727f424548ff519830674",
    "100": "8160bdd907cf7e01483175dbe8b33f3bbae7113f4a66ede3f9ce274b837b7f9879e0c9bf325d73e273b2e5cf0be1d7af5d224c65e58b9227eb4205ad81d43739c58b19b1dd4a424d1f61677d94c59f7f9a72a92ba5f9bdfa634c12301c8dc98ea438692191437040d798cb6dd4070604b405d83b441e7197379625cee50b7341d528641bfe0bf22c0668209adff1bdc16894a3665dc40a92e717d3104f96abc9c589bcc79bbeb5bd6cbb9c7e6af3106818f31d8f2a42f457b06dccf4eb373b87e682256396ddbcb33722859415f6119ed34e60358fe1ee2f9de6daba6af14c7ef66f93832818b532fdc73d2b2e46470aaeadaddab12c99dd841be140f8289fa7",
    "500": "289e6982649f0721a239f839941ad3c17f94ad7f74c098483aa819b3c4d6e3e9e7e09c66590e37d9265fe84f8870381fb9c460af620c2c2f0bcde0adbd1c78f067353f6e71644977e17298b722d52db6a80503a87b727278087adee8afb434c593970a50d4b74e581ed5005d3c6acc5ecc93c46ca6f8093389557a22031fdb0eb64a7cce6aff62db797fa646d984f243437508ba84723d9e026152a096b3a60cf06372e05d3031c1f537c5249a6b1a68ee4bb96da98acada1dfc828f9a3abee39f4a1ddccfb7034352bb2288b3ef8cc3a85818ca2e2623ddf778b6a8fc7f141a808f53cb6014c53a7a461008b81632177c1c01d0ab449c1695621a371bc53697",
    "1000": "bd945f35e2f3766f5b626e459b8e130073d4ffefe7740fa5d0c09afaf3110cd598b95ea6a05d0f82febbb120d891a9348123f5646a07a9aeecc15a781b7f6cb571c05926cf7f769f4983905f4635410b37a61dbbeebc679253d3a52065d2d659f4917d6da5bfce669daa2acd796a2f98647a93acc3765b94f71edf3e5e1947e905bd91319d9ceb107163bfea2ecaa28dab059849ce5285e3a51cba079a2d255342be49b59497ce178284eeb7d749eec4ebc67ffa91f71a816fda172964c18c3659211d75c429432c9f0ec3e03a0cbd08013145b7951afad6640b4b6be0b83aae0507d95ee9d88a7df6959b3da42ece4cfc967e003e12189d6b0a09c224259954",
    "5000": "54c866d12e3f7fd042f1aad6ad523db9ca40a5fcea795936605b02e61eed39cd7431df690e5b17ce70221cc74ce1aef60f3ea7839a2a5070731b0f09ac0fc34a99306f411de8aa4cf50a3ba12ed627ea0c3f9fa8cbf556a706d8d1a46875b49a5d02b0d0300bfe096f8c00c943f8ea1bfd76dbb13ac26da97c4f17e4877ccb0d4cd27d7e5c032df11609f1c0f6c5c0a87a3f22a0a75715baef469fc28bc0bd736fa9af8b4dcb8199c64c450bbaf36c211a9d005d36b7f6f5639f01f137841402c3c29b452886b08b66b03a7af310ceeabe56243d89b16af4c5564e66cdcf5768265991b54aceadaa594442e048e74ed4f4fb8e7f6e1da9528f02003f4b9182bf"
  },
    "height": 300020,
    "1": "1e505581bdd4a9f1430d02a148d5493b49b1d191c9160637ac1ffc0d73fe441ea3761564047fdeac2d571d464d3feb057d58526fc309dd522d0fda90c43e2339a52057c8ac856eac01f037040414b9e8e59c70faa66b2d02e909f31ba121ef142d54ee895c93f8ce26c9e6b966083472f8aa9646b817a70f172556cab32dc817ef75f59fe1662afc4f6584c6189081db2eebc82247076392423439a91e535ef73787875eaeedb8120dbe859c5461847ceb75fc1c1c44df0e3fcf65c00ec5a1aff40ced971ddef4efbbe490934d931cd79181cbf60a748398036b44c2c00521d101186bb63e5371cfcdc37ad5506f5494c22d4e6ed03b69343d075492bf4fce71",
    "5": "11cc758e5972bba65c8e684ddd634d4c551631789c610de7c8fe305b6f0b2d3c77fd3074c33c9d6d5ae1a5daabf89ea10ff0648c1577fc2c5c2cb8a016676c96743fc2d8d88aa8e88c82d2b571802a4164db73fc3232b03fda6eb24e818753bc1f7ee664680f34b9ecade7c7c1eb62bd49fed95f683d545f68c7b4896b4e5fd105b8a3faaf7b6439e70c57774e5b8416641bb70c1fef51ce16d5d635abbc34439564b66634c63da5ac968938673c3bcf4bc8e35a29e96c5f0d286e3d65f882b62f3e55ba196051d79dda1bac57dbe84a9671300bbc5d039c0e0bc7b9c98dd363c26d58ac58cc97333e1810f78274d050752cf9ba757962d7ad34a9ebf5b54963",
    "10": "93e3c9626f117a4c9b8070d6e0bd5d391bb50e91c93ce454b02ff6868d3b3a042028cd259187c3caa1e337efb5753aeaad4fce0de184942a6a12866fa21d6cba21af3893b4ff85a75f9beb7d9e58041c2c0a5befa6298771cb13bcdc5b1921b67011160f6baa84972fe3be3a148ae3e87f9890b324c29ed77c607a881ffa431862c20281f346d11408bd74bf57075c7ce9d8acf50f2782825f68a3b4c13d157d0d36c5f44d160030ffc421f5ec2ccabd8dcd03dc1709c9da5a2bf730417bbf0334fd851dd8ce948c31a6ca9a4ed2498109075fb3898b9394bdaa334314345191cbeda3d6a42da4f11116e3274c895b957a91624816bef5ffb3b2fa01fb472f64",
    "50": "b1de46091ba1fc726ee8091be53962fbf113baf1d404c252728d2260d21f434766920293f2b641c3c8eae8387299c38e884ce2f47dc385d5657d58d3401f66a4abbfd467a9045c570e8ce70eb9ca49b7bca4e2613ec012551f077e846d4ff924cbb7701c7e1a16f7087a3b14d5bd131a978cf80661847800fc373aa932b69a24372217329752697665f50359284b864eac2c9429962234a0e5829c1aa6f0bbdba8788c2270a1b367398209b47261013e03785dbd48c5466fef1b54b5dba55232fc0d901e041d038713271cfda1615a1d6894404d2b1aa0e414e48430a7345b96adc39386d082f5941fe6e47e4eb97d7d7e2e1d8528a5f4d150f950c1231376f7",
    "100": "25386372dcbc594ec93b109c05093692b68b02a1770815002f3decc30612ea42fb3573572ff7136d36603d718248aa369a0b9fc4f68dd0aaa58234ced7dfcf8ad009dc3baf092ed485d266f51c9fb83f9d1da4b01c5e47301ba34ca8401fa0a86f56dacf7793efd79eacd4a4b6faaa0a4bfa11b4ede6fcfac732da0c5fe8716462ed6dcc89c435f1c40f41d82dab9845170a372a8d72fd9c432954528a1e7a94ac5c7208d90b70a3e2536bb157875df103a68b26131fb04d340f0edb02958c78667e7606952f5c2180fba40cbebe69517d264a51714e3270868230ea0cc5adeff83e679907ab0061f4f62a1d7296c9bb539a3ba6986a2ef5bfc6961cf5c01bfc",
    "500": "9e0effe910af3b2fe1f5223f0f42a928df66a6311c6397219fd4c12982e25e77cad27637a8f50e1571461d741159d9fbe96b613bdf1327fd97ba39793077cc1cf05f1ea9822bdfc05595c92638d3126d1f1e70bf46d560976567fb7dc3b368c6ded0c7cdef3bbd71071268c9b94b6a93abff8383ad57a8444f046dde1a5708c618a916c00cf38263f6079a23cbcda36c89dacf11a7597daf1d2a4ed7c3d8fc84a1d793e0793ac282a3ba024a5635a6e419f436e253f6f3712b9aebe32e2f4dfeeebd691b1f5c8e5ff15f8dd943e9adef695353f0ce5d580a37c229268112e5a42d57044c4077a387dc1f6ab4f1f77bc77e28b8ed423cd65f694558cee1ae6d7d",
    "1000": "5c26ab513cf9a32c454e788367cb3fa174272c3b2901d46875a3cc7e9f13fb9dec9d008200d7ce8217f847c2c6096a88f29c929d44fb71f1b87a23ee57fa4e66451580e62e33f5f4e741e326db03e543b73271cbb6bfd61ff1f056c64f02f62cfb77a7162374712e16ed25fb1da863e1c3af0b5a91614fd300ae67800b20fa0a9961b06cdc38d6e8ba77c99a8bb5632af40051f97958f53ed3eec14f2f361d91b01c7909482bdddac304f777d77c1a30ea4aa4ed0b26dd4e30d681b72baf110180e904c24f84655a3bcba2cbfbeb95a5cdbfa115a10267170701a5180d4b2f48475145b56c9d37528abe9f583a0d5213ab72a9243dc6a538d4d663c0c8f31d5f",
    "5000": "a5225b2cf91b409a76dee6cf69fc3b97113b952aee2ebbc99de091cf344f3922300bd1a25667bb0076f2b32a1b5056b43f9ce343f325fd8e2737369d7124d1c16edfbeb1dc2fc09f296e01c7e3aa361a4a30755c90d424dd3fb3b7dc29311d62187c74f4b6a254746d15d485ae035da72b129ee2ec5258423bfd32e516e7347c240375ce23fd1a08749db1fd9253c7c45e16ba4e28845210ef002a2b045e194b4280fd429dc1344b1bea09d5d187a62542207abb69c785df9307a623d82881fbba40804e448168cf85da29bb932c43b4e9bd0709d885085e23ccc7af0440a06da0f7451fad25367230cc17e860190ebd4406ba41f51ec4d2ca5dd89b66dd3c70"
  },
    "height": 310020,
    "1": "72732849b0aa6f416752ca73ef6b5a569d64b8831802d0c2692d51ede08df1ed316d516082005686c88456db12cfa362eabf10c58918da42501206cc464a4db5dd440eba25fae27f25ff5f08df6c78f5a1fb94c6ad551978ec81e4491db62994bf4f9e7edcc3c1c4c5d80e563f8a4c9b76b9ecdb07566ece710a0632ca8d641fe9d75ff0c68d071e6c6071ebafd1deda4b64ee6ce98b0fcbb4890b43c0e5d47ca5096b2ba3820e3cdfe5c24ffad48d11bffea194402dd383e6617ec3227a6a2f4fea80883ace4c68be4c17298e18d272be46f8a60cf94730a94f91dbf7d67fb4fa0cc392fb2122d0600dd6790080da14718c1c7b303fbc6609f1f76e494ccf20",
    "5": "4632a1006791ec555e0b2fb817731df9065f1fa92c62e65181812905ec6ef8121bd6543b7ab97d4b793b44d7597740ce2cb642016f8678e92ee494e1e83ca0eade7c31ef131a468bdb6a5ff678b26214bb8e174d60c09d2ed1e409fe14ae08c8694e38fdcd59f909cacc94fb51164a5378a3c1efff8bb2d3ebbbbcdbbec8d2860f964ce9bb3b7917448650947d26453c0c53af1cbad03e6ef416fb7c4ba90022478d3450db2362029b8bd7e35e6e92e8d710593633c6ddf8f6c638e932fd510abfc903a0ab21ec9d9a048104b520e3f0270071775d227637af0c383469014bac561d3b21dfc040072a9db0dc059e75de5faf075c557d3ab7da3c0a3fdd3820ba",
    "10": "aae6046c93d9150a38717a8130e2f80501b933c4b7de6e644aeb05b75fc26291b0b90b3438fdd8b15aab32ed433017e72d4f7e14ea9ca4574ac1fc30fad2a0ad3f90e8abbe3fafc7416d7cf499bab1bbbb32d5a450aaf778a37dfcb03e4f4f2e26aa7ae52514f964b2ca98fe27d68544de9245a440c26fd1d6fac01464180331ad80f6862caa1ad86102db444129c0bf43f71b6a1cc904058fe8ed659d0f8bde55b4603b30441355c25cd0746c2ae8572d3ea2940499c3a0261357e2d5c3f1a6e2dbc6a4e7d40d9396ac778b8d0eefe5f0f7be0fdee2c1cc5a9dedae49c918fdde8511cade46a1e747f8b14d9f12d0aabf44c883fa9de0d4b66834e50517815",
    "50": "103ff8210f291486d5cee20435ac31314cf86667026164fea31853306d3dcc9e6f046c44cbdd73e0e2ed20ea44840026ecf6e5eeb9254f61c76eefca672200965ccd780575118418cb96f9fb28e6a428bfc22b4591570012b13f5896fd61f070b370fa5e689f19a22ba59a096840154af996a0e14d865a3b6b3a48a9958640c8b2d60b5717203c040e5e0c6076dc79b8fedd48fc9d9b766ee1eafa50cecd530a6cf88deae5010434e5411acbf6ae0693537f814833fdaed980a40d46f422cf793ced2b8cf98327d1f4fbeef9748b0d2d41fdf6b396933054f581ff6b2473199a743520ee67cf21b23a910ec17a1f398fba1e35dd6f3bea234434dfa6203502ce",
    "100": "4fee1a89e61929cf72f55037602f6c7422a52b84734f15ca796d6e87269124ab43cd097327c7b8f80bea41db52f77ac5e98e337a412cbdaa3a0e5f1cd62ae48c6336ad01124d9942a830d97c31a3a2b2e451e6f0bd43583e111009a0285be942b355dd8e3cd283888272afb9b0e17167b3b70209724964a487e9afb7a3b55b798df165cd05fc2c2887868abea1bbdafce3540ae23a786ec27188630e060da7867b8ec89f2ea765e5332960c966019d2e7d8e1535dfeee51f5c6a38e9b08cc25f9a0fe909c45be49904ef8aeb9fa59d95ebda86b3442dfac2dcdcba17a852956c90d0212e7bedf40681c936108206568bec21f8d15ad6841758990eaa277a0b93",
    "500": "be3b0af7fc14662b680a79855a206a6b762dd336aa44d40dac153ac5d1707a979ae73fef68dcdf7d7f435d532481c643c73c0c5e060b3e6ee6c1797fddc40d46489376ca54270ba9850971f5f0991d801c1f1c1a30fac6efa747b1a4a34c2f49a18ebfc9aef6f52d4c78e8548a1ba24ed1cb8caa4ac2be725a59924bf739914c1b7711d2d8ff68a231941c2d39b0b272b09a31b7c0c9d1e13204e3672e1c94829e06cc7eae62406be52d378ec1e19f3b89140c89d1ecc9502839f10242d8da85be9f1ff986a28d0af1ec4ffc4a7f57412956223efabf57c134dcdba85ce11b77be4b7f736c66172a8b1b532e36771843ab4f90457c5a3b0a1368c3e71abe90ce",
    "1000": "6e6ea6568e7c4defacee9bdaa18e53fa04ee89bf6da46330cdd270e9ea8f54a8defe35f371b47c18dbfb40ea0952aa57a1ab60346e347eae7f154a4ebe094a227605f2e1a066eb3d3ddd1447e67d6942f26bf5f45a933504062ad5ecf4df99bf711b2a852bad6b2d4b7c7b940dfd5e2272998c50f41cd212139ddb704ac4fe3909f533d79848c9c911754e52ceb5fb41d001faebba8860be3ce7256b4dbe18f26988bc94f2e5de535ebf60ba64926c0616ce46c48e4d7fa36a50f182795e84ec351f4933192ffc63d2c01198e80675b0549978ae2a3f3e99e378c226ccb89fbc3b9db8fd0238b725eb9c82ba3fab44a3c975fd68dc6f01ac1691ded90dc3dbf8",
    "5000": "47ffeaa9fd75e31413b4329a6431ec846e2787e2a1e5886fa7ef717f8723605db49069b11c7c289f1fadfa624c00e784387c4fd5dfe8324590e34a7957c0c88a93407bcb6886c326e214fa6f1d746c2903e12d547de3d0767c203c503b3054d328bd896ae9800aaf09facf78702f2e0514a04ff0890fe6177c5d1faaab890c708207040aaaf9dd742a2eb319fc3489ab5a04b855cd2d0988b39fd77bc62a94a0ed05d805cc71c95ba103302591213ea55896fe67c1a0b91dc03b619b9960e586309abd4e46e5a8211ea75055211703fbaa0a044971e1d5a68f19818e79e6fa734e04bc027cb67ed89e3af02b09a50a52d3ff21a5b6a1d4bb9a2cb50fa1aeec22"
  },
    "height": 320020,
    "1": "5d154a3ecb222fe3180a9e582c71eb23978e2d04b1588184b812a5bc2f0cba1c9f2709828633e39819f564fbc616b1ee963cf9200c5bf48d0825abcd3ab0a602335b6dca5242128e136d15e104d27fcea6ef987aff9c4cffdce607129ca7d96dcceda886456bd37c2a48bf565dbedab1d163a37a2bc85fe8ce5d8ed382b969a87ffa32596768ebe6db2258b4623e767fed594b5bcec5f2acf72c002d51c0bc4431ea77e9a2e6126fa444d36707f9fbc1a5aaa11c1074c7e2e0cb1793a68dbe0b5366f94c811ec97baffc35fbe836ba7a2a659a7a54cd9ea62698c8f52a152a8635fb9aaf8741ae68e86c5b85720ff3a9c149a934fbb02347c9041a9e149dd7a1",
    "5": "97abd0aad73aaa110a180a7928247b8c3474e80b388c6cd8f79887d9392bf10ff9f3688bf13d7afeb273d7ea4fc04741fc6f895ef5d27c982c4f1552c913ae7953405461fc7b4b0962368944b2af271442e3d6e1861d58382e9b276578ff116449e3548b383016446ead2f53fca059bc86a62823beb9ad78505bfc36d35909f4f5d09fe130dd8d818e78eaffe1d1469011bb474a2f7f8d8077f7d6c0592fecae0d50ab4a337ae3c564a3b67180023b83a337e80cc176d5571d306bd045e109ad781721c6c43998b2a79cefb673c73238af1c29b742015fcd3e9c4dfd268c5bab7ccc6edc018e766cc4ff223c4eb073d6b5a857ff66a168776d8c7fb01c84d70f",
    "10": "11172157a3170618e7b28ebb91b162dd9365a6ae2cbbe959b0f00cd956e1d286a86afb3ca730d7b91a60ad40b32893942f586aa497673a6d5b2b987917bf9f1b4e614aca62784c0ca703f0563102f2e1b87b8bbff097e9c735108bbc2cb6322af9c4ee11a9807c3079494196153b520c84c1ddb055b16d24c9d4e642bf4f42756c6bbc645a66afc6612ed6e15ada3dd4e3b278986d0e627263d39a18fa366003109cabd97347f35546eaced0f88141254df2855b58cab5bac95785d85968813083cb6ab4e9c84a6ff8e0ff7255ee706b82d5408efd2708544a0494cceb321eb266ee1b767b5ad01f854ad3a8a3e1271da188dd8d09cd74cb3cbbe5ee8a8e33d2",
    "50": "5af16b8b13b10ca24f68443541733280b31b9b88f1866ca252b1d21bf74a4392f45b1f31d2db34bfcee5bdf18acba4c39ee3c73a176394b795d66d5e133e7398049cd1fbaab11b8dc3a7946a66ec0111a1a0590ce5d12f06fb8f327422a0dd2c9606d3250e7896ea3ea36c10556dcc1d8f04568a846a8dd1432a39bbb614dfd0be2dff9838e2a9f9af493cf8a48279bf57eb273ce96f69bb49940e0e6ada125ee8bf7e56fbc9f942d0b54c730a1bdc506932ed98bf697f6ff32b159a1dd63022200814fe1bbe9e7eecccd150838026f725076fccf050e0359cd761d7d88e3a3e4b165a3ba131bbe389624bd9e870ea408351d6bbbae95e0379bf5268183d08a",
    "100": "bc87f4059a7b65dee12ec2bf067077c438fab2e8515bb9ae3f8ebaa927edea5cd779f7800084fb90e075d73df5b91d55f69a2f42840c0b71cfa5e951ea5d3d7b5fa6d0a435dee2fd02d363245930cf14c23042da4d8b775cf734b8c036520a791ad3aef7527c7edd3936eefccc345d221db7a6e1996098e26227fe02007cf1d22593b331a116485dbe897aeefdf41cd6fc433a9e7cbff5eaa7dec05e72b19f3850b0de653f93077bde6176d2f6e49fbc5acfb9f872b29ce6aab0a03397a8db9ac5828800966f724faf5d76890bfb17e467cb22083688fd13bf1c1ebe92bd225b77dd678de1346da0436e283d9c6ac1ab8c6a846bc3996dc156a0a20e40f9d7ee",
    "500": "29929869a9ea3f5b17c5e7ee9d52ac7c573d832a25fa2eb6da77959394e9e3685b450d0a2a0026854cc1d770eaed2b694139c0255787a2f614e67688bfd4484eb5cc8d8749146b111421da62729eb1b45fdcb0844f7fd42c7ef7e06615b7a80efd4968b0ea9307a54ecb802477cfdd462cd8a9f0508a1c8c0ea5efcda02351365b2ae331d853115de53640d8413a179d1a94afafeec020790867a9b95bf69f16097f2cb1125a63f5a0b641d9757169c68b9ea15d49f646435a471d8411ed27c37e26b2e84a526b1e7ee3fca267678d3faceed065c5663103854633cb8de45f03495b706ca8b756e4fef90d228d50dfcf90a75c5d2ea940c06d86237e75714369",
    "1000": "745efaaa2a5e3ab8e059e94a10c80842cbfc177f960274b6423a136864246378f21859009ff9af70b2bb9ee3f52fe456e4770140dbaf696d900b034c23b9dc88e82c3af3083f93b1771f19d8720a4a1883c08764a5718ed24ae0943ed8a6da26df2f775536d8d002ef343df4ee56ce1d41ba1c6545e6ed17e52e53b3e66993f6e4935dfe1d2bdd380057c619ee7c9a588eca309e070f0130305c46e40a96632dcf8c04f77fd2ce3a5dfe1339123f67bc06a41c99be394f563696a30310a7a44ab92dbf90c52511f86b327947a805149560e332c6d3fcc9fd085b63f5ac1724eb79bf52f4de78ce0bc702a9e99a7c1762b032d342897163c74685b84d3944384c",
    "5000": "25f1ffdf1cbf13c7c3a65787e47f26dc57c53aa6c14aaab53aeb84718bea4a8869f491bbab182d2459d16b2a336c2c99402189dd332fee80fdfd34689eec3a616ae8694b868c80ee530b227c44662ba97c4fc6a303688ac6555bdf6100af4eeb70efbf798e5130491cb3e3e0835b107b5396eb0b2d9d4ab3f78268d7d11d04308b928914b43ac3a1e9c103d09d566d555a15261b8e5e514625f9d81428192f37d4382173f33c4c4e0aaa5becd92073c208a53a5a7b9273b4ab1c6f6cc8cebcd50b134d684a5d2389ec79ba5f2a7ace212818539dfd8bc80afe122ca6728e3c0afce31f8736fae4e1c0c69aed1fb956bc1e245e74d1b78e0c5e79fcc289e63d29"
  },
    "height": 330020,
    "1": "61a9443adbf703c401c9a83f5425885ff2b68150bcd4ca338d89cb6ead69fa2fa9be165dbe52ff7a58572c8cb54efdfdd21fef6e308c14333cce816bcb1b3cd87fb0d2870520f1835e5be075a2f853b506ebef081cf1460240f1fe86af9fbafebf3e354f969a0f6174c4456224108067b9724feabcafaf0a838c4ead64bdbd6c61aab0d0313e43d541badaa3048c20238d4c3a24cd1e16289d1885aea3815b80644aadec59acde4b5ddbe0c3344453618b73bd81608987a6655f32de63d29e73b4d00ee89b755598c03e566c60ea77db68c2e22917c77a7fbcc2a957693d5bca876b4b0652c61334856dcce8f0f2f9abb98728821986d58d6127d1662636d09b",
    "5": "ba12ec119553282e1b0549f585f414de1ebf91090e08a01f98dd4c607974c847dac6cac96f74f45c8b927e7ebbfae39a952b141c8ce71860489ef20bcd208039d4d63a7ad1cdd34dc57bb9772710966a34c4b2df32edf41f7d3210ffc4b2fdc11b359a9c06c49472c9e7a943d32c2a74bc9d95f7f976162344140e7fa3c696ccdc348bd1ad84c00021c3edde9c93a147efca50728d8b5a0a8e54be903c2350fea83c5b32a17cfee0111f569d1dba7dd6742e3476abed85b00f0668e8ea853ab070c94be51b7981c1c31d1ecec90d34fe0b9063fa099d516f635349c0345070f1993cc670c5724dcbe66debd574e5e11ef9337a8a9994047257ab540e467ca7b3",
    "10": "613285142f4e40aa73b1cf9a65095de0954f229878924b5be3a88ebc6f470966883f3325261fbb01c1231d56e4025b0b6fb11fc9cf0aaa0d274e2bc55721b325abc4c1a7d7ecf73859beffccbacb73bb2055a3ed977f686324be294aa7529bd44f2012f2a03e1b3f3f08f61df60e1f474f9782f5e29b580fb826373803cb567e6afc2284aafde003aa098b94c757f05abb8c898fea449dbb9f9a8afbfb4fead5a9945c72bbb51fbc54134a97aad721c172d7cc7cce4e4687514007c1d917917f27bbfff4c772544ebc1ab3340ff7c1ce937c3ddf388c68db733f2b4c6dd6b125846295169c159542f36ba941a694a8a2fead3160452ed4d635d7678136dce501",
    "50": "5e5e22d6ba74936f9759062972810a71ab1353c18f5196ce9c67559ab108b70ab375a08936b048fe4b206d2f1626215a07e8ad94d2af0d08df10ba15a16db6253494954743f3c4a4b9bfc46c187dcc5dde948186bdf3ef9b35ff80d5acfd5c0b9dbf6e498fc9c008b6bfc945b0cef5e19369473884c4e8f30118009e59c09c35ef50edaeb415957ba9096cebf70b36cd2b063ac98b51baa6480f19d6b584db015f5267518db505b5461fb9d7920d36070d2f4a7d0d0ead789ba5e6497e3187f4b09b7d0b5cdb270a3a21e644d0780b877ebf148515b91b5cc21fdbca79933a123dd078f038f10bd1762bf8b17db45edac7a4616557e88032e8dd4291de754242",
    "100": "6272bcbdb052b79b4a1bdd247be96f7bddf4265b829802d040aae2e993a44010649caa9782c81dcb4c828c8339ba7362c936f3ada1af36614fb50fbf7ec3b3e555b5525354a3bf4272dac7c64f8b75591d1cb7e55bebd5469c0d5cf0fa99dbb35c8be53450c694fdee607568efcb5b5b222592b9fe2912f2abf06a9c9d693cf848b57888050c424dba4553ea2e38bbf495a35431cd9e8838ee0ca6e5721ae922be73a588f421aadd62eb9479fe6dc85f09c80f136245b785938e544faae3b838354457cfe13ddf5915e74af9b5e5d7b1967d0e97c0a92538dae8608f6bdd8091077bded3583297ce7ab5e8b62f6b19eb19cf2f81dce9b9b730c05633de4d3344",
    "500": "187bd392265369a2d4d43c55acf8e6115abf9852dd4daed3f3560c79fee2ba52252d4a8d907adbac8c7ea32eeb48f7d3c25ebd89cd4daadfd777712cc77d8bf7759f6982c7fcb0240a337959ad379839c81bfe62b39cfab465614d632a4a05fa9b00f909f5b870878d5df80031cb5474143ac8bafd1b283076689c5b1058ada34d0881b93a54ff2ced9f4440dce7a097fea08b822121a4d21dfe7a26a3757f84dca48d06f66cf6a8fc54a0ae2baadba5654a359c54f98508d2ddadf18b2e8f02700896957bb2ab12a9fbe9e34185f5f73256a15af3ce727fb8b464307a62757a087ece6b81dd41490ba781ac8dda07257dfc38d6a7455a37fd3f136945064c59",
    "1000": "a3d231f833733f1e4054652f6a4ecb0b5e0c78686694808f4e85b9afa2942d4528ec437e366aecf787daa3e85a3583d64db4f55e089af26029f6d21d51dbd4b006db3f49f646127bc4cb4253c25ac313e47d2ee78dd3292d5454b61c1c118b120dc390fe2a67899c3e5c6fc52acadd711a711ee6af39ea14dc23fa1b62883fee2da30e4d0588050d8989a1e82d37b71f46ee33b9a49f290771ba59fd940c5140fa52864936cf2e4ba5e2f1f97e4f0c3cf8105dbfafa390591d5bc36ea5975c1daa09ac9e9f27be3d09793e154364bebd044bc7b8ef45afd168f85a083a002d7171ce850e44d03847f22d58f91675bc8dbdb5463c1dbdff409cebb4d6fe04f8f7",
    "5000": "6cf4d91b8fabacda47c006e55217801f326f965191b4e49ab82e67ce07381e77e48c915e5ec45929a4a3168fd515c03eb0b310b47b09122b561dab402f1e3742ce8e3c70c5f0ba572a1b3ea777f3395287065187ff15c1061e7bdc241ed26ab39a07d720927f0349418c0af3e7275c59bc249fbe9ced8c85e9103c403808940dcd1fca2583fd0ab9490ae227e11eaa63b1b5d7963bd18d59efd100a0a1cb22de12d34d6f352ea03aceada0dba69a545ea5a5fa467724472f9dcc66fc160236f827aea698786d9d4578d844ebfabbf94f6bea677041a283285c89758fa3c23b8b35600262ca2ead331d0cd973a83245eaa0c488b74c885d4b46a27296eb6677f7"
  },
    "height": 340020,
    "1": "166a81bb80cb4d1949d07976f0751f5020cff237647959ae03288ebdffaef6b12730f5b5dc2fc21e1931b430cb361244dff8b25f691ce33c10ce02539b089a9fc006d606304eb6106107d22d91b859fcf9dd3275e858a833d091394ead822a3d40b3dc7e995846027cdda4de12e06ce248510ed16202661dc273829cd63e13b43a04ba9468bc172a0929dbe4b9e51c34391469d35bb9ec1c7ff4ce6c293f56698dcef82b0f0bfa2fb217ae2ee18873c906b25111ef0172d566dde0e2966af70e68d3392b011c56659ba679a3d57262270848c2ab0b9a2c48ea3570a3e27a0f1a5a057932aa33fe87d45c9dc93f4e693a705a1160b3986abc60017c786ac86883",
    "5": "1d5e840492129ba3066c69f89a2e14d616c768038b9f5ec6753fee11a2342003c76f0f066d43c0505c6f85bac6932287ab29309b831294228f31feb87a98c72324823672b999cb7425003aa155a9b6a43dba49a01dbb55bc796740327cd80fce7feecc6fdb07ad35d69947f7190eeda1602fe13ca5df4e8b20f5014a421b0dbce6c89a8e516ae50246d8c05536fba95157479fc43daec1acfbaa53a5e4431caa7f3637dfbb1526ccc9f3a2111e44ed623da026ab9e1db80ab87fca93776cdd01674af18202354cf29d3e094b119c5ebb58cdaa71c6572ae89312d501941314f7fcf22acca2d9e17c482cd1c4a0a8cdb958c74564ac14094ddfa543d8e190600",
    "10": "9a65684d02f667921ad44971ff996412a01d4a367e4d748eb5847fbbde994b7c4d9d38786d772b8facb8909b4b176f5cb40f9f54571dc4c750ef08203afd8b4df330ae1f52296dde2a89652c21533db1824e3a258e60fddad0d033911bdf2da05a287624cf11cad696b93d633070f6edddeb533f74e03da284c645847242da684ae2d9e2abf7e1701d93ca5b90ef18f74d301ad58b6b519223a905a8f7c22970a0911ddca37afffd36858bd8e71ab013de612cf5a5a9f335cb04d81ff4cb87dfd2bb6977a4c5860960c6df0e54a615bca89ddbcc5661999c4c6195ee87656e33330581777365c4d3b711eb5f7760bd04423f49e8b38e01ee3259b9184b08059d",
    "50": "2a196f9d4bf028a3efe4876b29b9f0d4a49857807e9d7e4dbbf42776858c5596d24226c85511993f372009129580bd2a3b5996bec4ad7dd4894d34c0c000807ece19824f8a291dcc0b34adf0eb2831e7804c6dc24daf0778229123a6a28a038ee9005dd7a9ede4b1d166fd6550533627a0b4fb1c66a0fc955c23ba5b0550827958771259d6a99af8e6ae80affd99df28227aaab66fc87761fabdb729a9886d6c4100f584e57cb7aedebed9631b07f5f134cfed470531b1a047c5965c249770e309b724e0c15897cf58afbaacd732dced5914773301fdd825a9c92ade38f26002ebaed9aba29b98838f285fad152a5cbe76ebf91caa381e282698944ec8f0d129",
    "100": "9f1e85152000ad3d5ca7f5b33377d62ef3d159a218ef14f1350d9e34e922f6b00d49fab976a9d690cf0ea10f257283bc1374c36fb05960c41d04fae36e65f7c24aa8dfc1b987f8e43b95613575a716716ec5ad1708c0f56a7b9142fbd9987e0a1f8444889fbf94b6a32a56bb0bdf088eb48eae8ae633b62bfc22f0e7450771ca7f82ba13cdf9a7cfb3766f93dfb460de9441c464dc1596ed6dc6e62f4d09e5e8107bb4a4dd5584917e9bcb224760c523edda4ca7f741d8717563dfb0a6a8a8d69bbb3216f404e7528fa5276c2064c51abcdf263fe4f775a7d6987b2767b0c59c9eb18d9d8245743a9f39c1dfe4e82ef7758d7b29fa8f4114b959bb1b91505d7e",
    "500": "9f32f716497b528e5f7c31c566b09350e591b6eb9fd1eed23e8c81d38e533936213530cee0d9ace8872cdc05a342c8172fdb545e2acdfff46c3954c26a48ebd9ac1968066106c4db53a4758d0996eb9e24af2e278ca2290cecbd78c7563212c58c41098591c2b0e39271f2144d0a8270fe0ac43d680437a5ed0ec6e88d44d7943a2ccc8fa1f606d71bcb04d756ab06e1eb799b23210e8a552978b583564737496eec985ad3882429aa2e8e1875c08a1b8224e6bb1a96a6513acbd82a146153a1f400f791d6e887837c6647303ea94ceb809fc0a35aba6dc446a1092b8d9d1777a12201ad75f8515b6bd7c760f70083fbcb9067f4d149e8042039a03e09b402df",
    "1000": "26f887887a078af1629a46f42c6c6914f9ebee58fd0d192fcfb15d993e2e720aad867e4e962456ab8f3d453de00b7de58eb6d7189ff98ec5491968e0f69c5450c2899604605b0a6c111c60b802e148e05088c53b823346c5eb71f0bfec6f64df9e85beecb3901125422bfb8440e6db555d75f430c2225a7315ac1061e162d0040f2b2ca5d9589a768131f90c72669afd5fc901c670ae0345b08c44e904e66726977064104d214da5c389ad37a34576d4b57aefd7f1e7b5c99946ddf6ad41e70517fd4fe92b8fd9109c72e9a36d6f168a76014a163441974b471b4dbb4b87f56d76ea5cc276399e4da8398309da5f5f8d39dbd64c5891a18ea12f2f879efb67b2",
    "5000": "69d1ce4a8683627d1b94d36e1ae15f22647758c529b257e72049c8bfc948ed6a9e23930576cd1f745d0e0213d2ab530fa0352cdcb26da08bf04dfff10ca38eaf6fe13884a2fa68a3061793bd0826c4e49422a63193193433993e848c34d77345e60a61bbae82d9d0e34edcea1a390b5d26ac569a2b26fef8a381dc4f022682ee11159ca0f5efae03a2613b201c066579608b6f9a8deaf1ef199cd9612714a8b2ef7608d7c3da47efad5b0a4191c4ccaf189b8e3e99c2431caf30987a55d1cf36b39f8171e481be5c529c372915d8c0adfde0053a8ea193f003c8b7a40fc444dfbe9bce4caf14c53937a293a74612d13654368602f666a239f3432a634f3a540f"
  },
    "height": 350020,
    "1": "33e8ba006a0fb0be7d08778c1b3fe8c99b6f1b1d8fe4e498606d0bddf55ca5631ad562ac3a01166497298ec6b4e40fb61b7cb73a13e179af7e5913e94661082388d635b342612d94166f36282e14a7fc334fb242966aa428e290eef8662bb65d340c6b5506b5a16b4fc7ca7bbdd547c6dc49ca3043182b4a3759fb286ea0f1f7cfba252b138d6e54516da8908d171974e23569e87eed38826e7e8210ef50f445abd7c29f0ee91dd1bf634d38294731ec2c0de3518a71df9b6e6b91d32849a22b56196f2f801016da02c909caf706e268e1d26a1364ba3012914b5b4982eedbcf666f840702b2493f04f79850cd0daa2c0a9fe35cbc90e948af82857d86522c81",
    "5": "a6c624c7d76ab93366483eb2a0f7d7356c0d251a79a093fe1fb04640fd080f732990927c8d71d924391fd6125b56b330548154552036e9df58eafb76db0ddf56e459fc3ccc7f29d91c73c4fa7dc995d0cb442300532846b46f61a8b2d4ed9a84f02f6d79b2fb9754f2d5ddb2d3497edb30b59adc66f92da133411aa59b9e4ed137170e0cf4722d0d49c9218f48826fbd98e95d4808714b4e3f6cffcd345dc3612965ed6bc40a433a449c2647267325dbc4d59396843d8d783af13ad2c0de94e78a6f270e7ab135fdd765a1de7b9e5c10b5f8dbf86290764bc5144dad754a7a94c5b4e8a366264c5192e7c6af297eaed29a017055eba1ca039aaacddae7912128",
    "10": "1c46b5a003b54b53b7a4db0e4870d34ee1544761840d90beeb16557eae0f28c95bba6b9294a52e446279cd48918593211b67e48caca0219e73786b7c4974928dc33179e74d990660a3b03d8807f8a471c7329c6e966008e1fbe3b3cd3c48e0f0b53ec3f8964bf37b27aeab8dfb2e322e1c57a4ffd493d3ecab76f9928a6cdcb2778048dc561907979f588cf8d1efdef6cdf3d95eb146ecbbf72d37147446bd8375c27855851afc5ca6bdf73852f264a48962bb8b9cf56ee9b206cf25c509b347d4b6f527dd9da074b8cb94bd2e3fb305e9f6bbce6665cf7a9fbdf7837e0563ca03faa2da2c593de40ea2f21a708e17d46857bd2316f6dcb2b92cbfb34f8b1e8",
    "50": "a168ce941f23fab52b420df369aed23ee697daa0d44e21f218a4e9ccd1e7e5ac700dfc75a66607ba585673270db2562ee0f6a25f434ea8302d74b7f6869c1174560d42d5a59f8b9614360a3843c7c996365802860ed571e907abc2b1a587a7899e979578741d08bd38bffd2a5df37d61926f868bdcc02557ac4354c5fd8e4672a6bbdf16b79e3ed1fd375e9712910613524edd4b1dcfb95549380f0b1f61fba9dde35e98393fe94935da3611341a69431b93441c2b5df7b4513b2eebc8bd3704c8ed9636970f47dd3cf6afb2b364eea332df895e44178b2c9d8fb59e44aed2cdf43d02cd08ce65c49b2ad95a6c5355516b2b22ba394720fc1bb810e1cfad1eaa",
    "100": "31f5cae4a0c8599efd7c77b14ca6fc425bd80c2ef1a20e5f784337e238ca7c8e2a6d244028b91e45d2aac2318eaaeddc12b426a28808acd052659f72745e84f0421117b4f23931f7c969e78bfd414bd479d16d87c2bed0f8f1539b4091fbaa78a823e36c4b101b5f55a00a30134490958f91fba983104fc77ef808184eaf6d3a0835dc8dae793c27f9ec5facf4a1aa3f585f18f5a5fa44e3af0fc1a7e7c6abadc2ce0a07947dd754b804afe63d12000ac16295bda4f346a47325c8c65075d8513bb67eea34236443f10874055c69bd47c1590008c19408f2387ddb46e34470d083c940660a97998d11046d7aa408923507bdad47e144ea8146efa9e989484d4b",
    "500": "36441b5c0e5bc8ce81e6c21368814005b0dfb0d233ee030561e5751c98b602e1b06536f9c92c5b3c92036353581c6ae1412845440555d575c9474a5e77d20983c108cb3f69deb3f11050ae5ddd5ebe2ec2204af1f3106681dc35515c0b08f53ebbe3492077007aa40dd5724544a179d028388f10ed6f266317296af6e7a6be8d9e381a317e3e09dd5c507da98e046090f27cc4dfa3a144c01a999aef1ed9b53b21de20c8976acb52efb0c80aa0a7e02c2263257cecbb819863f84a6fe30cc05c3aeec8e7aacc2f2512debd21a5aa9b82553c5e185509f21a457198c52251fb50191dea1eb03134fd46df4fb1e667a3b93e81d8354033adec62a652cd5ff808ac",
    "1000": "14a809a7f809e0a3eaee4898957d3ac2a4e5cf73c48ff6245806f8cf5ae4ac88584729962b138560649ceea41bfbc076628b98c2eaf213dffc62242c0fe851591106abbcf77631516690c3c0a446a131d626c9b77cef57165f502e9572a3ae00e315736a488f4bae59a1ea01135031124cbc88e22af43e4360d6ea5ab574ee7f332a01a4fd557c18774e4bc3b328c4b187d7440093e487d01f1f32ac36fd9c3bf9c37bbc1efa3c8a2755faad0266d95ff2a086950cfafa7030d593693356de13d1a516830dde67f486b15aa624abe9c60115a045d4ab55fcf9f6ea8bb18b5578b9ef30bfae64e31eb78e369bf0889ac2b4808570b78bb3a5f9af26e9b8a5fa04",
    "5000": "69d1ce4a8683627d1b94d36e1ae15f22647758c529b257e72049c8bfc948ed6a9e23930576cd1f745d0e0213d2ab530fa0352cdcb26da08bf04dfff10ca38eaf6fe13884a2fa68a3061793bd0826c4e49422a63193193433993e848c34d77345e60a61bbae82d9d0e34edcea1a390b5d26ac569a2b26fef8a381dc4f022682ee11159ca0f5efae03a2613b201c066579608b6f9a8deaf1ef199cd9612714a8b2ef7608d7c3da47efad5b0a4191c4ccaf189b8e3e99c2431caf30987a55d1cf36b39f8171e481be5c529c372915d8c0adfde0053a8ea193f003c8b7a40fc444dfbe9bce4caf14c53937a293a74612d13654368602f666a239f3432a634f3a540f"
  },
    "height": 360020,
    "1": "50ddf8cdd248675270d29d7a78f5f6f67acff19b937f34a0a668b4e01647cee3d7e86f543b4da0e3419a6ee58110e94546d7a695458831c7d762431b7ccea1b40fa66674ba38841ff58d2606932f5ab00a950afaa592010572f88efb52db7ef4b882f9abbae6ae597d090ba583137cef65bc57500787d9db42aad0a5e2e6bd3dd9d383245d2446957afefe30e92e7c6a3b52344ab7c52505cd2d399dc9233e994d5a637ee2d6d34830abc53a33a31ae00fec1a515ae79bc583af235f4514efc39bab5cbd6d90cdeb7052b728dc18c9d35cc9d4a49111946eaa2a8f10511cb73ba7b2b5e816c2c6bf506392131b79bac4b65c224e6533984fe5e834fa974ac191",
    "5": "53db67e9e48d913847f3cc8fa1b126b64ff6d5c2d0f88a2e1369958d6e4c2455b5250972d8548d05e6872cc21c347c6d814e54854f04d901cf5b7cf29f35cfeeff3e10a07bd89967490640eed94e2f7181304865eb0081fd5139b9f2c7cf139a7f88d7c672b6d93e7418cfdd639df57b4da5bd962aca3c47fafae2bbeb4537890cb247e554a69070fed41ec2efdf9ec4830e579ef1e7b5666c022b3865bbbf14699558970e047b9218a52988f0530b9dfb5746285d19dd9e84ea9c2f3d155f09f0430197a8da1495840a68cef9697a56a2adc8fef7578324d102ec7d1257958478b63f74b3181eeedbc387ff3a635cb3e2b273432421cb26386f3aabaf03fc25",
    "10": "84f128d486faca8131940677ad9a07c03dabbbdacaa237c18f332b9ba0294e0b8f9c68b607cfafc366eacbc550082017f2fa84973263c2067fc735e51de3e6d3b7a39e41fee358baa31ecde216d1784d81cd1cad8276f2a33ce32f0bec864715a4e5355a3b8b5b41758a0bd26337c17ca350cdb58fcb8d53b27328d01bf025c5c84d49057fb64ee0fb5138eeafa9ba4da0bebe5b19ea3f5ef4bd95c91e9986d60f455ee3ed07932e08ab2a5543510b194636e657398c71c7874fcc173154c34fc6c960c50a91aea1a1dbcfb8e9b09e6c1159fb6393d7d6a6ac169c08d2c5acc204297f4032871320f19a36c9ca47382ecb60250367f47021bef3e8df01ab9672",
    "50": "88a570b6ee017cb3783aa1e46763ad5a7e07977f514fed619450157044cf47787bd09cf56f34d2b133e4690b26f4b57a84d802abca6224c9ab8ad7098ee424d837ae328f5697c1ac58529e58e9cc6be69f1bc25b4cee78a520385d16437b1ab12c74b065af1bfa9b24d44113e1547e9cd817cd35d9749be572df87649b71e6010f757d3746abe822add22340c2420b44b225bba894c7dd2e02c4e4648cfcc75c36e230453f4ade60d5adece326b6f0cc5608c6436a5247f5781481aa094d99b76434afaaa250c771dbd5a1c1ea90756fa28c7ddb6132a9d31440497a6924c00f60c1a36c25b3f2bf840402c709591afafcae8b18f71ae75a1202ea10b9db86e6",
    "100": "8c60c0509287b4e915116d9600fac62944334984eed83e2f7406b6b11844d0ee25b0864727a22e0a6cf67d302ec0416dbafc214842a3b7cf5d292ed35130d84ecfb30ccaec8633fa3f4918bced5ae2360d208572519d39fbf1cb5a91ad04c8e60f2591a66f9d5fc494686f9671bed639c4d27aae062143867551d854edb657aea7d1d6a4b99f285e772f197235cb9833900771aaa3a29d05f96c2c3657eaea25f0c5f5b886bdd0a643ba5779c510b05a06e95aa2ef77693269cf5772b49c614205ae95ec146e5e02d7edff8121fb6c4126f63e7ff14776ae51db6396e68e697c9791b97270733aa5a6846aca0d35586a5dcf9a6aacfcbec54e889d910cd0c437",
    "500": "b5210184490678a1e48c0c164ebdd8e3aaf1dd4c97fad97962737cf8139a7eefb37a6a48746bc2c76af356c69c53434305109eca29067985d842d0d17b2446655ae65f53c67379aaee9d5397eea83abe234a471d00225e7d192bc5385827f94bd63cfeb873c5feffa60610235c29808f41244e944f309e8ab6612604ad2ade0f5ec416f6a4402354ce7dd00e637e41b08ac07c800f185b70cc7af9b6281bb69c9176e38f72b803a326d8c34ae0183f9a5255fe11fb210300fb01ae9b7031fa2db7c9758052d2ca3acc7fbf2b134f4b9b47dd8f80ed0012f271e31a519521398db508fb164783f491472aa9f3740cb6e80c868392e21f9ce677992aacf8188ab7",
    "1000": "4ec9b427aea7ba5c6f5a6c870f7e1779eeca75303a71d31dcbbc0ce052b86a2c9e6106e57805e2084794526c4fd22a265b18b7b3348b95c9176ba86e8dcd940dcab05bb1a1048bb3dfa9707cdcc062d4ba3cff90e4bc0f51dcfe4370caf11a5099b667d286030000af6862c059be6246cb54b4807b79457795346d8570c0bea0e85f8429f65880dc431737efb76e90cf64f2cfdb48aa7b8892860c8c14e072c42eb72eca7950920e5a6feadc66a712c589527c80284e29b521944cc181d99954e6a4b4322394eb094f8c1a94a046143101da5d1d740929474f9c6bf0263f8d64a71c2b4abcc5dfcf1202ca56e120c2725a1c099e3b7a6b8e5d518307c149f641",
    "5000": "1e9e386deec2071c55dd044d8568f5868b5697cb25d680dd4f2541f19dec1229fd60b846de9cccdd50523f0c41762c4d33348521962bd684d5ae94e34dcbd4017eb3bb6ab32c5299e93bc51d948887cab7687aa3bfe07b803c96002363620e36131a4b253c2952be2245f0eebca6a49fa59dd72f243087441e78ef829613c7f1122676a3a6b0b8c341584f420f8c65c922e31615e9f96e88a47e489fe2d106ad70ad2ffe13936215029befdd97818456ae59ade356f18d38f4b5597a830bd2c0ae955464b082270e3e02510f3be19de71c30460e2668146638e09287a9cbdd1bf244601c59a953817661b67df8f234513333cf0d8f874eac0339a9dca4135cc4"
  },
    "height": 370020,
    "1": "4658fef8e30bcadc848049501314a44aa6dc0b40adf19a9e27373ecff172e4848d14b935ef68ec754e2a26e4b05ea647a782d76ac0d3070525e062abd5afbbc95ad3030f444c96b613ffd71d0889850636a4d6ac8ca232b3062a34838676005f6189e482906bc5c9217c1ed853a85ad65710ae3beb922008146ff8f3306ec8cb084d6b355db2dbbed13022f2f79f6d4e494b6eba2650366b7ce080210b38aa5b054070dd8bf53f2a77d7cca34aacb7a0da1bd88f0ef9293b6db34c3cf672946d13bca290c0b3512469929dacbbac05a7dd4f7a3bc4412d3fd0f64d7ceef71f94e61588d0f0e43fa548dc7e0ac7d0d371f7d9aa2d4e497d1e90a6d31198fa6fed",
    "5": "53db67e9e48d913847f3cc8fa1b126b64ff6d5c2d0f88a2e1369958d6e4c2455b5250972d8548d05e6872cc21c347c6d814e54854f04d901cf5b7cf29f35cfeeff3e10a07bd89967490640eed94e2f7181304865eb0081fd5139b9f2c7cf139a7f88d7c672b6d93e7418cfdd639df57b4da5bd962aca3c47fafae2bbeb4537890cb247e554a69070fed41ec2efdf9ec4830e579ef1e7b5666c022b3865bbbf14699558970e047b9218a52988f0530b9dfb5746285d19dd9e84ea9c2f3d155f09f0430197a8da1495840a68cef9697a56a2adc8fef7578324d102ec7d1257958478b63f74b3181eeedbc387ff3a635cb3e2b273432421cb26386f3aabaf03fc25",
    "10": "41b5536f28812703581191563db350ba73d67b8da5f08a9075f8f4d765286f546ef9471ad694c99a25225471088f3a2adeb53e63dc739dad1060bac1fb9c6825bf2b2c8007a799442a92cf54969b3e09e2d50bc539874bd22695ee718bd2565050ef283e74e7a6c2c6158bf9ab1cc808b7ac19dfb55924016f63d23cb187a7b924c79ad9a595dad70c6f62a9eb7423ad94618c7493d5e27bda79302133717d07c82871d5236ba0ba2e672f48229e6e061a5f9e0f72f63c885fbe6d421ea2cddb95c7a82146141325ffbc734c176fe138ac6852711e9e0c18284c8cbb9ac9a642c2fdef565449e4c12c802477e21c8e34f4be8740608ec3e81e681cceaaca10b2",
    "50": "62311352be5e4f29c6cb354ab2203e9fa456058899f2dceef52865548eef361b68434c07027c707c9c60be47c0c4d9892378a623157b8201f7c2df54989f163b4bbed86602afdb371671986cd248e547428e880bb2a89c9f1c65b2102e138cea774b0a922f69ed65650852b74b02611f0338f64ea96e3f723558f2687b7ea3b2970be306cca5bcb88bce5512d7b11d9783130574771c6dc9854f2413b474c25baaa1e3acc65edd59725e36b48996a9e42c5398fc41a9c95df9a8caa1ee6048a0415e8789d7445b26fc8978cd413fd8182b6b9e789d5e02d3e8c0b2f613377953912c941d5431048e5ff93c6ff5efb2879f0ba7e17567459ebd4cbe07e332f92e",
    "100": "562a9530569263ab2b26b98465ce1e22275d584719dd93c618de8baf393cfcdd5ae312c4df38aa050fa70b4376f017f899469697ca94266dec9ccdf543fb46deb559a36f579338c214bc1de7efa067a698844dec100ed14009968eb9ca347385fffd8b61ef330a2d0ec1149c28c539895d1fdc2ad835ce53893372a00d49eccce09858fcf3093c04b9e2893cc7c7e2f2028f650b99574e2e9692c211ab4e1d52d186692b29dcb53a6e100a7d3d3011c56721064a1811a1a0c4ad26d064cc4a2db87e8fb9f65f89b5ae66d99485f50293f922aebe98e594be0f3f5740fac14425b40d0a4c7a93bddc44d32d2bc7a95248e520a66db4643b1a050c3226826cbf60",
    "500": "629ee81ebc971926a985e7cc9cca9c61f285cba6405f8d8f2438d060c81d26503decc2989772fd5c7430b02ea28f7ef5df2b4120435df4b1f90fe4a3576fc7cf9e9118b7760fbd1881c20a9caade3ecdccd66819da161d51aa05215cf8ce3417df1bd3b044f0fdecbcc1b4dc919dcac35dea748a60422045152d9193291155943055650ecf8889e61663fc99c5e08ed3378bca7491a291bae873a15baadb19c61afff1a7740b3c11f989fc311f169e08e49445a57e5ae61028faf06a59c1656e8006bfe145a09015cc23344cf4732f1782da5b42e19b2c02604b1677299da0f41c43e7cad177d6c66c0652161ade2197d61d4d149d52721602c0a8a55a361562",
    "1000": "7721b34bdeb0a87c3ddc39c5d1fed11f9f93401112d3d4b0b52f47e32baa96d7d70d837bdbcf0477cb95da6163c9a4b2d9977cb6c3095330d0c9f6f39786e22b88419d9de7aad3c653d9d7bd0c551f0a8507d3a2082c83df276501d01a1c0ef98655db85d367e1afdfac0b5c8079b30490c4aaf57ddfada7808c2e82364bf81222922269d1bf1ae26629a2e548af2eba9a82c93597e5c83dab8a84a15f4e4ad5564ace288f5b09e6e01cb0739c1a679975c35718574fb0335653f6721101202a125c7667bf16cb470e13003e6fff1125d429fdba96fb82c87695b1f0155fe52da543ceb0a06a4c6ddc406cdaca061d9fd681205993b320ce2e700a3332a4099a",
    "5000": "6be1ad29961a58fb1d3e7a03939a83e615cc87cc99d592b008c63640e0286f4bc9e7f759143bcb3b741982941e7e52f85f50d4b62fbbaf2a07a9f19e3259dbe6541f66bec45617b15de41884b4b57d87dbbf5db37effefd66a00f342eeb3700bd633c8fc3ac07b6507ff3a73900328fd143d3429f4af1cad664c8265bcd03b721b6daf06e53dd3094f048dfb3b4a2e373e86722eff1d26c8e84547c67274975d31c1ab20b9c32be5440aef29c7f3a8a3503e2763a1e5011654381af5003d9bb230caf8161aefbb6cfc888a2f13c3cd5dad07ec07faeaf66acf39a09454f0337e2546aa376714fb5f7e0b0c778cc5cc9b7652f851f3ac431e875f85a7ea86050f"
  },
    "height": 380020,
    "1": "f32e420df0125f4a3b7d72e761e7b584f49e498720f0dc57af4d3127f2c8367c99fe6e33f3765d831930f63ce7b43db3f6568dc20c66f6990b551905d4d734bc21e56e8787acfb7077bfe901c7c48186e223b5c8433245ce4ef5ceae044512d3dbe36deea96813c797c7a33a7a88692fb2373850b0992f114221098177068430d417eb9865f753424fb33d49518b40a70f87cc06a0da41586f7321ed09922ef1bc4138b7c89d226f2f4dc30f42ebea6e17ed7003a5209d1872691a1f29cec189c736083a9ce074ab23ca89ff86e3c98b15cca208662eb22c5bb15abf2a49344cc0ec6f34a73a53aa76851e1ac6270b762f71d53d02550bb4e330d75e629f795",
    "5": "24770cbac7fc04e6ee9dcbd371bd8b077034e8e11c5d3033ffded93d2fe554ecd1d092988980e6ce0f568d036996c462a5745be5c9249196bb760fcd4b72d539f105b7a9709aac21c334e3168e5adb87f517e05706361beca468efc0b8f1edd542a0b5a998c1f369eb1e03b0667e17e8d746bd13a1117d0ed532c66bb945cb28f03fec5f12d79f6c6cc855945bff5ccddab2687c9ec9c5a34acca12e7febe02962724b71902a7f66e11e540ce848461959906e16a9f44b2255b78823b0bf13bbfb1aeff7d014545f2a816f88726e656059440a75e0e3514a5e6ab802ba1f0e1e2018c64fd88a4284523c142f64401cdc5b3a23788e48c32fba24c120769de452",
    "10": "1bb3b9e9ebb67031882c5578b7819e55bd0dc056d24c6e5317e98185463891424c2408fefde7ca3d0eacefe3f91abc1f9ea0aad2b29ffda9c89866f07b6f657b0fb907089e0ca2e453a883ed6296de088c84b6890a7a90cf5fb89633f5057fc8b984f3518312542d704a7cebfde801326826dba199b8fa7c9bc9d27e0bd611994357217abf216abc5df1cd9ac25bf23116f315b5210987cfb95b6208f1f253a367800e8c2218df70c0d13f1e51865ba67ab5c8dc34dbb78ffaad3dbdb67c2259ca469a4caf4ba5a60e2e77ba9270f46bc5a204b9dee1a9fc9e59b049f0097db425bae21a9bafc983e113134df5850e40d690fe624cf1b7bd1cfb569dd1687ed5",
    "50": "62311352be5e4f29c6cb354ab2203e9fa456058899f2dceef52865548eef361b68434c07027c707c9c60be47c0c4d9892378a623157b8201f7c2df54989f163b4bbed86602afdb371671986cd248e547428e880bb2a89c9f1c65b2102e138cea774b0a922f69ed65650852b74b02611f0338f64ea96e3f723558f2687b7ea3b2970be306cca5bcb88bce5512d7b11d9783130574771c6dc9854f2413b474c25baaa1e3acc65edd59725e36b48996a9e42c5398fc41a9c95df9a8caa1ee6048a0415e8789d7445b26fc8978cd413fd8182b6b9e789d5e02d3e8c0b2f613377953912c941d5431048e5ff93c6ff5efb2879f0ba7e17567459ebd4cbe07e332f92e",
    "100": "562a9530569263ab2b26b98465ce1e22275d584719dd93c618de8baf393cfcdd5ae312c4df38aa050fa70b4376f017f899469697ca94266dec9ccdf543fb46deb559a36f579338c214bc1de7efa067a698844dec100ed14009968eb9ca347385fffd8b61ef330a2d0ec1149c28c539895d1fdc2ad835ce53893372a00d49eccce09858fcf3093c04b9e2893cc7c7e2f2028f650b99574e2e9692c211ab4e1d52d186692b29dcb53a6e100a7d3d3011c56721064a1811a1a0c4ad26d064cc4a2db87e8fb9f65f89b5ae66d99485f50293f922aebe98e594be0f3f5740fac14425b40d0a4c7a93bddc44d32d2bc7a95248e520a66db4643b1a050c3226826cbf60",
    "500": "629ee81ebc971926a985e7cc9cca9c61f285cba6405f8d8f2438d060c81d26503decc2989772fd5c7430b02ea28f7ef5df2b4120435df4b1f90fe4a3576fc7cf9e9118b7760fbd1881c20a9caade3ecdccd66819da161d51aa05215cf8ce3417df1bd3b044f0fdecbcc1b4dc919dcac35dea748a60422045152d9193291155943055650ecf8889e61663fc99c5e08ed3378bca7491a291bae873a15baadb19c61afff1a7740b3c11f989fc311f169e08e49445a57e5ae61028faf06a59c1656e8006bfe145a09015cc23344cf4732f1782da5b42e19b2c02604b1677299da0f41c43e7cad177d6c66c0652161ade2197d61d4d149d52721602c0a8a55a361562",
    "1000": "2ca56582a828a99d6665713d0055ac81d4ace03ba50d748eef57c5ef0125a4949b99bc15af38002ee43a6027061095157e142d4fc1a3bf8a0e55a6af4b96142384ebcdc4625b073051e09fb5dd330a99eff854231ecebfe904f107037cfff996d9fb690eceb62821acea15e2114b50befed2b9960614b7ae54eeea47a5443c7e22841326175b5c029a3c84d281b04d4af52eb5155997325b98bf8c389b4c3d4476d5e44cd0229ef9eb1028fec72ad7147048eec08813ea48b1bf68143486fc614ab0888f775ebe9556b802d03311e399ff61f0b0ea30b5882f9fb58f9959be59e8a112172c01ed62f165db15f1a83b539089a137d8e9f8cb1a63b7f722907db7",
    "5000": "5921e3f63293ae927d9cd1f66859094fd7c9a7c92e7b5afe3cc73a19723297c09b3be869a20da1727ebfad77958d846bbd68e01609dfc0c9e404d61247e7ef985dbfa5a316973cb596a79a79f2e8d738eb9cb7756c60b9eb141919ed59e3b993986727ed65cdc7470f15aa2ea32e2d00ca34eb3d9e6cc6965abe51ea82e810d086ff81656a8abf466e8a81a806ba6d10f93e5898e34078aa71bd3788eedbf162f172d24f101b1eea0d83a68a232077a9b96656e159963528398a83c3dc6dfd31dff841481f6d3e2fd6ca983803fcbe4889ac2be52b904a0eb1ed97889e6849b4c1ee95272103b6688fad8a158e588b28b4fef7158c7662fe7fe6634705a6f43"
  },
    "height": 390020,
    "1": "b262571baf2ae260f52f0221b2af44f5789527fdb86b89538b1dec000d39b442af4f03717b6fbda90426993c61f1b43e9ceea1868b6c8e22d0acb4ea674dd7fe7291c10f18311896e4b61609c6cfcb991dc415fd5592a38e08e640ac85a27915e62a8f887a1ae59a8971a3be47f73e6bd125ddbd6b95763a3304f1d6ecaec2e238364628b36f7253da3af82fb940541d597b67e6fd7539b54fa2cb8f84fd6cdd18057ff1c32681f9e9d484e647f2b65934387078dfdf0ebb66077bef803824a67cc45cf6740299ee84b8862dc9e915b21072c83a5d8cf8aeccc8010dfa0519609e063b1be45acf60fadd080e780bed32409f9f064ee5aaa7fb2276036f488972",
    "5": "84395d8181e0ce4df3ba75b02f6a6b703583c482d8c52d323d91f00670ff2d46f4304a5e62e960fc19d8b915570a832ec1307f5463596ecea29ed815a453b8a400d1887f5a0936fae1e2491cbf900ad1ecbb694645d89b8e3e4fb397366e687927f1a56aca0f9b0f2b6eb0e75884736c84cfe082a258e8a36448362cd8988285337e7f8d09663f5182e7c90a79fc4d79674ef8ba7000222746e1e380113f6219f7eb4a4323f80228b33519e2db8762a859c2d8bee459b2f67c532093f2669847de8a2a6edc529efda76d797fdff280024264f0bee02ba777951d6ca032f8729d7c6a7cb2b4c970734b5dcc60bfb164573896f33951cc91466bdff95e18649f9e",
    "10": "354e735248b6febf880d13de41815629694694027c38cdcc3cbad93b07031c92fcac9b3623fb5fae41dd975f4273fc6ed60b16af62e82682407b030fb1bb7c0c12350a030b91e280b5d91636456b118e86bbbe58802d513ac3e115251b9188d7143eb727dc1ecdc01b9452bda33b329c8c6ab1659e9da734356aac341c1bb94b63057a2450fed00ebdfb94b886dcf27695c2e47da1476598055f88e198424e03ad1461143eabe5a0ea92df639fd3d95280467303f6388c06599b30d1bcab9610b0d25f5d6481b7dc715a556e232055fe3a6f57b6b60e2923330e4dd0494871d918580c2313f3d8efcc0255c8c7dfc28744ce282cefe0362dc8faa1f0271641d",
    "50": "3d3e428e33c750145bdde53fb49aa697f675b3455ece97f2894e6af92cba6ba8e82f91133bc1b5746c61e8f64dea7a22b393808b857405fde63fa015a8995cb28cc70a1d05ae19698de00534c991fa3aa05be30e53e23db88529e646f35a898bf725dfde0a8699be250b1d4fc29803378d30b68370a4df3a9fe81e00d81f3618cf7754ab4280c9845e5e11d0cc3ae4a984061d7beb54f1d8863649dfc4f2d6c5d1640b89373a7268f5c12bc052493cef2dccfa2eda1881464c39af1dc5c59de1299ba053daef255a9b8a644005f27be9202006a7e33563560f31c103a19ebe8e5c4f4d1de990f09dd745fe2dcf18e64d24842ea4d1c5fa984e86f3d0d3ad3507",
    "100": "b4e940aef8314bbd28db21164421cb3fce6a10b89d46fa11ec9f668b2ca3c91bbb197ad007359dbc06d2ca464c66307e8796e68c2d4ece1ed8b3fd33076946eb152dbbee00a3d2857ce227e3f489a3ec8ac3eb84eb57914ac5d966841bebb3cd0a88435d2a01239e9de5f3855c7a2d8d245966fb923950c8fbbeaab431000d2d2e6e7c24a53ccd7c04d30bd7482de4fd47739ba4ed33e8a71316f8164e178312c665bbd201f183db585d8703dcf796b542534451eef621a85cc298d36fa01feacc1b8ca8360ac8527f37fe565e3f680058239add81fb9ea568aa189971c7d54a84ff1f085eb2e992317c08af33cf087c441e6d0160e0d925545534976b5e1761",
    "500": "8677535449530fdeee7c63265056e41253fd3af8f5fc12bafb093f5e9b840f9d3a98641d5ac737772c350d984237ccbde229c07f992fd9854dc110907609b0687eee3c7bd21fd18af386302529526620328abb7f92e30cc39202b802a89a640b0306fdd855595864b04afcb35eb036a1129dc4c9c86747ad6315ca9af3d8962e27b87d65176f3abb8c3f160d9e75eee61fa1be79251102a5c393627260d4e89601f96a682d5df7196966f0f8aeaf4a451024791aa63cdb5bae1fdf8e030912be89616bb37ec177480e87654f355a27e82a7aeedc9443643da9f2ecb7ba307c173e054f1d56c5ca3bbe98d1902bf80de408d16474eca1d27615cd3610076681b9",
    "1000": "814dc032f60ba82bd2f74c6d261561b81a807ded2be8cfbe727f8b48c780548503c114a21fc05b6bc3278597f19b5de9adf7d3d1effd3d72237c2251129c7420a6d0bc0a0bd7311f5dd8a6560783405dc96b4f1497b14cc522330f81634371894264b3198a8d7647d0fe6723f19fc58aedb032383ee2d80d4e0e450195f892757a7ce8c32c8d1546ac3944b1a58985bda71befaa40a283e2091042746ec43d0b5e6ee4f77f1c434871ebdc2116d10743eb1740d18f4f3bdf17093f290a5b2a685f5592856c79869aa289af2cb4b028520380ca336fb0561c642a03981b387dc59f563a8a2c2d433dd4582feca250e8ad579e1c6b43989ea993e75bb6dbf84a99",
    "5000": "5921e3f63293ae927d9cd1f66859094fd7c9a7c92e7b5afe3cc73a19723297c09b3be869a20da1727ebfad77958d846bbd68e01609dfc0c9e404d61247e7ef985dbfa5a316973cb596a79a79f2e8d738eb9cb7756c60b9eb141919ed59e3b993986727ed65cdc7470f15aa2ea32e2d00ca34eb3d9e6cc6965abe51ea82e810d086ff81656a8abf466e8a81a806ba6d10f93e5898e34078aa71bd3788eedbf162f172d24f101b1eea0d83a68a232077a9b96656e159963528398a83c3dc6dfd31dff841481f6d3e2fd6ca983803fcbe4889ac2be52b904a0eb1ed97889e6849b4c1ee95272103b6688fad8a158e588b28b4fef7158c7662fe7fe6634705a6f43"
  },
    "height": 400020,
    "1": "bb15ace9493622ab7264be39ddcb4b16df0be586c465f5578a48747b6069176d35feb977c84d0c317036bd4d0b40b5b0ce03e70badd8e67cfd68302aeb3105d082f9dedaf3d083cfe23076d90edb1b1d4d4ea9c93df7c6cae5ea7f49266811011130ab29fbd4f087db1f2ab8ca8f81e9b1c4b0a3d96735a492bde334746d70623a42f504e35bfd48fc6c86a82b3895662c070ecccd75e0ad820265f0064cf3582b7601ddd49b96bbeb733bc5f6214af284bc579b5bece384a86b5f04381da02cd1fb012b8f6b2092766400de54dff2ed05fb2995e98b9df8fd4637188f8835ed5f8235715d4bac2d8b67044866c19a499ee0eae43857e93279e7c397b1f01a6e",
    "5": "2216ffe19fe23567e9bff01d4aaa18e632af7e77a5dc524a4716c14c01dd01887880a52648e80ace849fd4459f5afb98e644849a265e615210309ffb1d6d07903a94e50bd147f765809ac47ce3e7af246299a955e2bb98f5ee69dcb9e2828f43c38536cb606f9ce2e0dd397cecc7e440cccf3c207766c45c08f12d93a47a6415ef88b2ef9c9a60b549b62ef95c42e3430f95e5f4784e2e1ec3f3f7aaae18a0e899b6bf331187da75d737273cd65275df91f006e7a319f6f1ab12dd0f1bc0abc60d6b02a5244ae522ded444e419d320fe85ede772f004aeddaa8053c1be10569cc6173a157a35a44c862a8659ec4826ae0fd94caae74d8f93a99c1246d14cb3d0",
    "10": "84b2fb7c2f3cdf232bc7f4d4445a869d29741514330ffbcbc77ac676e0589d7c00e476e83a0e480ed5afe105838667d27db1c579869fce1570b28ee117f40a821d6ba2800027147fdc382feda19365f11d3cce8b5283c89bfea935c0de4420744df491d6acf0d251f83f9c03dbc8393ec39d7a65cb9f94d60d66808a36c5e3b2c48d71470136170388b448c2226cf7c248e3ba6bfba1f499c481d5ad4098e68dddbc6cc715eb0f819fff40289d45590c79f573fcc70f14a5929e6cbd95f489223f0914e3ddadbd3067bacad874377009b0a90ebb107b03717ae287071e092af8b4b7531ae33a0cd82b54fd2987a8e01d9c9ccffb7f525eeff4453013e24a09ce",
    "50": "bdc4477ea908873dba92ebe4c05b34a359f5430f7a0419d7298fa3c8cc97ed77de3dd64b8900c35499958451ea14c9c915fb81f5ceae86911b0c8563e32f87c451c6d2f64352af484cdb3286b6996342c2993af321691154f8c26c9943e03c162102f7da972f2448efe333a88b6107548c5f8d1d57b944186b11228497c506c5db2d39dd8e16d2d1e347654d1551b019e58cdd27d73c98993decbaa4f408c494896725b3838597d2b946159511e9bac594a956d34d59d59bc86b9614d99cd3ef777d18d3d0e5dc009a740810f998e99d2b35a1f44ad429026297935c3fbea15e3292e25318e9c96add1dfccc208b2e91c1dd039496e7b7fd2728ba4522a0113d",
    "100": "c58e051c5f582e13c78936ea2f9c713b54e5f18dea9148a2ea2da3b5217d4f968f87f5ca0d0ece7f02df87932a515e5396baee2f14e323dc40dd2689d8742f1c57c8f9b6e4a6d325c42d763251dfdba9ffdf6665500163973838f3b79541c975a93923d07342363e5e41128fc3495a663d5b2e5086cbf9b5bf3af8347e680c5a6069ff48cfc5d06d0ebed3d61b7fdaa11e933ac1cede9ee7e54f445c6553afc7faf74ccdc8317ebbcb6ce208d3dfb0d4ef0359329373e40438cc0ea783a1089420e7a2f3aa84c30a0275b21bbb9d7808c76e61dc047e7bc41b5f7dec80740ade4e90cbd56eb5ea5897dc14e59738407b359aee93cec6f4a3430954d65b4af04b",
    "500": "818a1c79a981fa9a8568c246c157e3cc653a3ebb4d6c9c7d61f1e7f222146af3069e70519d08e7b7ab178f18573f06cb38a2f10dafccd773862efc3ae7276e276fe08b6e9588e1a877893346157c6b8779825d766f36e553a1244f30a7c312c4fb2fd2153216ee5128a8a58b251e138e0437aed94f6552cb171b2bf83495556a4eeb25c8c3fdd66f36ebb8c6530e7aaf290e796ce918eb3a906c718bd5850b78bf019b44f72b891ab530424e6033336aae173afe38f201d9e36e7decb2061a1bfdea62bbf1cde8e20653367cb48a23c2a51443d0d8aa6577c0e5c4510b1454bb55cad56c1a69f51fd6649f865ba81e785140ec4d99c16524d0229dd6c05601ea",
    "1000": "3f22db0e52fe0e9796af0cb5c5e2f88b5b22d31aa6678378e7d120c2d82f35fdde98d01a5ff853f86c152489aa42a68b72ac87d891dd83ac9ae723e6fbd41b7190835cff2e47b33113a4b13a77ce38e11481acf14d9ec96a902bfdd67feb25b7c4909b2d109bdcd3518c0441e2164f535d318ae01cc62358dbef0b8b8ee71f6606ad7727a4120125d8b0e7c1daa0eba4009a5de6fb35c2604c22da5c920673c568ac0241aae4e47044d9a412f41b7270baff62f00b176f8b143ef3b6112a86fe76cff1b509f87edb0f43dbb4bb0d4f6a826fd32d24ba0c2e1904fa9ab505dbe90787699228dd3ac6852d0b86c4237f3fecaa2ee42b69e5e4d2aec04f0d0712ff",
    "5000": "1e368b65767a06721a051c547b7a72bf2ced7df1bb4ab90351905b480e705b47fc592d303ea2ff47bb44f17fd4f5bf2e8ee8b6939dfdb65f1da9e9edf462a34679917307cdb105dabc0ff21a4e480c04aa9b38700caf0dae4fed9347e575cda1ea84198d0a14b0dc47c1480e1eb144f52f7ab0d758fcbabd3174cb91d9ebf76231fff91b64e7f42bde6264004cde8c2258c9320c754c9627ed234f1567701b290171855c8cfa78ca7bba9bc9a9bb88a8a8d7c319d2e6beffe7c619fd7c79d3bf89a9144e9852b8b5b82e7aa1c27baac820368502988f3227a01375f5dd307468b0c54d9be761e079eaebd209ecffffd81e8535c110a1b77f23031af9a6b27841"
  },
    "height": 410020,
    "1": "98ca9a728a19821a98fba745c9fe53b532d287802a3a6de1667ac6f201d0327720001405ee63f41e17421f1838418e432e2c5fc6d265c9d3c519790906408d2e5e9bb51abd635187462f460dee2496b7982e640986dfde60f6e05c4a4190a9e76ef95fc84b1f1b2bbbc46ac6af91eab1b573bd314b37419b6b4f0226697b7fd6bbe103a7b34ff65890faae8b1165f2d6601a8041aa6cf61d1045da56a11167298efbb23d9fb8e9c243b4b251a6c0271bd192867907e4b4b22d1b326a76fdb1bb41e11a55dae67d008c45c7c20f48feaa2c8e52f1000fe274d960e7c8daab59fc2d65de62ec8f0c059f7d7d10364d0e6d44e3975841de67db005c77d50b1af9a0",
    "5": "b2d41860383aa19a096117caa382462ca0dce7d59bc655089eb0bafb9987dac81ae079b24c1f4bea55558c1e1e05345975fef0f4b724fced23331822966a1652126237f83cde55f39abc927c703491bf5223b80ccc0c4f400e36d3affa4aad30af455022beb76a09a4d955d48a9c3090bf727d8c31430e2b5bbdbfcf0089dedf08d95e0df73cf20f4ba686564e22464dae3c162303d1d7ed2dc181a049127ad53abaa952f9658cc6b88ece1c545eeeb876cd98d9f4a231cb5fbad743011e6bb4c997b5e44581ca691a64f5030a67b7774bfa18122163545dd05d5e5dcd2ed9b605c2a8663f282ce19601e220d13b9a7df4147710e0aec604ed52453f07493b56",
    "10": "6cd3b834e0c1619ff1d002dc0eab810e0e608d75e65dd9e499370807e12b17f3cab5993a9cc14ce8da0cd01f42acd3eeaf9e504bd1e30f3eecba54312435a240e0f8d635949bafae0d7d9cf6427220f9740a19cd0b6904436fd71a592a0623eed9b490ae5a9cb4db6ee0c3d49bd5905ad59b7bcb92d030a8a6a5b89c6959f59e4a330d5236c42d281c53dc3cf73a52cf5f3bfc5a10a0b5f0a7fdaa4252a71d22d2cf620564bb6d71c4e1cb5b95fd61368881208a816a298e7aa759106881ddb877cfe40290b917edcad6985b192fe3116f066900f0ef0cbe1484c71387a9fbf252521c7be70c1e974e4fe213fb738630505b63964d6ac096eeb99337e9af2a14",
    "50": "bc8bb0b28b526cce150b982ffbcebc8d17718e7aa5422dd05bc4fb1896ee84ac3ffdf7147efd2ae8a54ec8df3d3fed89d2f8c5331b343e3de3b42d07971439dcb8a5d3f2591cad3f62cd01bc6997a055ff1dfb0773aaa9a005c9215efaaa4b7501f40efd488a2f93ac3a995871b16a73dc087a47a561b526afd2aa3471811d4d21295ce5639826a1b61f36813a2f56af78601e05f62f6a8d5d2685ed2a42756b556e2be593246a5ca10b75b3ea406c35a8abf41c158932522b2c10eddd020dd6d094b778d991b7b1a30930424f629cf85770057b88311b8fe72f0e2e264dfed3608999af13d3eea53a4a6da5af35342b745335545810b22cf11954a5ad77e15f",
    "100": "519224e7c9c24cdbf6734e7be149d410a8b1f5066d0a7d5af7065d2457554a6b797613a6595221c33fb5a166d838f99c27132ce2483cedb8bb36b8e724eba207a073336729e7fa66e307e4533147524f531133ef12c0f47ed28736e20dc13696d9e6db8a13db38fdacd1d311dba4ea63b59d8ed16d8df704e1a8cf14fefd7a2a9fb9cdf32cdac82420cbded2751a8a68c3c9faec733614dd1b6a0eff989b66cb3b84c9be8c24cc928a24e5f05b63117f4f889d67a154e1b1d0cee7eba2ff9a8adb4073c0def5c7e3c4cd14c276a45a0cd334559998b8d013d91e13e89eb6bc472759f47ced1a97b32ba22f554e88c399b762ccd8d970bfefdad630490fe05cb5",
    "500": "71dc1ae65a293e3fb8dbb84ed11de55455e77ae333426a7623f6e338547a57479b56982f624961dd7f718a9c14d3f01e61848c458b74db0b4f418bf1ab6a746397b03b11c342e44c0bcb83ff8d7f67026ba2f26be9fb8421857520d9dc436dfae2dfe8bec916b8d01ba41437c501b2dfa03990ceb192204192bd58de34613c13ca425eeb4bac3dd0b2fbf66423fa5b2eb9eb34db099f5874dd02d3bdebb98268d12a655d30480b4732e445b586051c0d564b431352b982455a4dbca3a09daa7131b70f633696c30aba5f2bbecdfa699cec28adf66a6be187ffab89275fd2af848e15b5fbbd244d2f9144e1329559807727f09198889e0c0c002335ee5328ae5f",
    "1000": "b2c13dd782a0fa9691ff553060be38c49c20cac226747d272aa3050a85a92fee4833d97f069c144daa20249251afa6463cdb34449d466e704c82827ab7acd2fc91035e9a8f424ab08f17131d35fedbbfb6a8cf859e83dd6006134b3ee5e227c2f7a5b85d8b0cf628412a6ec837e8c342ed05b6a684a83106f9a2202d18d29d585eae1af0333e07aafabc83c2aa894c41b9db6fb0fbb99cf7d437f6f0f5e0c258d05c78602f69e9f956917a5b2d552771dd0729c7f41a0568d3a77c26816ceea7a26294f9eec796d8dcbc175fed1bf06bfe5f72e2899018289e1bd4f5d99f629b3cf986c652455091f565ff7085bd3d4c3eed2e3bb7222252f31a201afdbdd3db",
    "5000": "67d1df765b5133fa343a8b91a1d1c94ba2059eaa7523b0924a28e6ec325e01301384844878b4980690815f29f5fadbc55aa84a079ad033d4d6aaf597e8f0917150a4c67a5241f58d130e6a64985c73ea709378bdbaacc34f452464314bb3c605b1d2746c6a27f6e5797bb5649dbba7a98993121c416d44733b6fd8bf2c69d95463fdf51a9b4f961fc605dd60e794dc50dae417ff9f36487e4857d2200746bd94eb58262d70e774599079e51f08e36c99bc11f28095d23ef514f2ec7a01fe10ff91645e7002ee067b258386a7125ad8e1d9dd8cf1b7f80ed8a6ccd41543e6b7be509ab272a18f67cdf7d280aa3f7fab0c94ad02af7df33d8b1fe4c4224364f402"
    "height": 0,
    "1": "0",
    "5": "0",
    "10": "0",
    "50": "0",
    "100": "0",
    "500": "0",
    "1000": "0",
    "5000": "0"
test
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
uint256 AccumulatorMap::GetCheckpoint()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
Load
zgic/accumulatormap.cpp
zerocoinDenomList.size() == 8
%s : cannot find checksum %d
LockedPageManagerBase<Locker>::LockedPageManagerBase(size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
!(page_size & (page_size - 1))
%d.%08d GIC/kB
void boost::mutex::unlock()
bool DecodeBase58(const char*, std::vector<unsigned char>&)
std::__cxx11::string EncodeBase58(const unsigned char*, const unsigned char*)
void CBitcoinSecret::SetKey(const CKey&)
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
T boost::detail::variant::forced_return() [with T = bool]
CKey CBitcoinSecret::GetKey()
123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz
base58.cpp
carry == 0
vchSecret.IsValid()
vchData.size() >= 32
12CChainParams
17CModifiableParams
11CMainParams
14CTestNetParams
14CRegTestParams
15CUnitTestParams
CModifiableParams* ModifiableParams()
const CChainParams& Params()
CChainParams& Params(CBaseChainParams::Network)
CMainParams::CMainParams()
CTestNetParams::CTestNetParams()
?04d20b9320f2eb1808b01116dd5ada62edff469b609e894c15d5dc73e64f052887a800ba197a63c897ddc6729737dfc0db3ef7a138a47770ad96981d898141cf23
This is genesis block for Giant network
040cf8d9264dcec329e2108b58c174b6dd9da4e3af5263905548a6cbfabb6d7d79d6d55953bfce87bae7dede18cf0c4a8829733e9414edd38305ebaa74293b7d84
0x000007b556429edd30fc5a0736451513896ac7b5df3570f1b903d812b8d1f01f
hashGenesisBlock == uint256("0x000007b556429edd30fc5a0736451513896ac7b5df3570f1b903d812b8d1f01f")
0xbe4bc54189401e0ad95414f6e1f91d409f6784386d8c11fd672cd82168d619a9
genesis.hashMerkleRoot == uint256("0xbe4bc54189401e0ad95414f6e1f91d409f6784386d8c11fd672cd82168d619a9")
144.76.15.105
94.130.187.187
94.130.184.45
195.201.20.27
88.99.87.205
88.99.87.217
78.47.139.252
78.47.141.178
88.198.201.68
88.198.201.21
94.130.185.15
195.201.127.214
78.46.150.97
95.216.137.189
95.216.137.190
95.216.137.191
159.69.26.214
159.69.26.213
159.69.26.216
159.69.26.212
159.69.26.215
138.201.247.157
138.201.247.148
138.201.247.175
138.201.247.67
138.201.247.25
95.216.149.227
95.216.149.232
95.216.149.238
95.216.149.233
95.216.149.234
04cd66b21f8273bf8c6ddd2b97fe5f830271637ceb82bc6269b010fef7090aa05657b78178f3605c11abd8567dbca949012e864a5132b355dcfa4d33346eaeee1f
GNEZjVTQHjff8BoWvUhGMSg9KZA7QNEwUm
25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357
04e0670bd443a3991a00525c229e2501386d85ee44701023163fb87f5efdffb7774857e33d5db179d8b61b2b2c32a88b58e0c76138f50c58ae0fdc73469335ffa5
0x00000611e70d4994c41bbed65a959ecb1b44af4fc2927594c81fda438cd72ba7
hashGenesisBlock == uint256("0x00000611e70d4994c41bbed65a959ecb1b44af4fc2927594c81fda438cd72ba7")
049125884104cb4120b3f3dd309c5009a76d093bc69780d3be968bb0813bebde9c59d3e7aeb501a2297dfa96ba46147a09fe4b36ad27eb848cd3f89c00959b947d
chainparams.cpp
pCurrentParams
pCurrentParams == &unitTestParams
false && "Unimplemented network"
0x0000000000003b6e75d462fba032e235c76b20b4fe3854294ace55df08f2c7e3
0x0000000000008e907c7a9501673757a638d694f10762b169f588351e0a5584c8
0x6c971ab3bc3b43771c0a28047c32b82e50244c780c58ffad6ee41dfce52972cd
0x34446b0eda747c8780deb1064c35d312cfde10b7a80c0e32c594020d5c7e2694
0xa9809fcdbca926b3fc33112c0813119ef06a83940b2c51962885f3ebbd259f0b
0x4c0516ac931b3444968cebeff9694253e6afc1fe2f41d5a1d261c5bcf16b571d
0x9144cbb966ae2207e9737a1457eb5e91dabf9089e116e246cbf36f24417f1ee5
0x1da21460b75c0253842f846f58f42f1da47f060603df30e67584e7d609488ce7
0x8533aa929236537e8d8bad1a8305f207abcd313b0ed18ba0ae90fdfb5780717f
0x296cfeb18fe09c1a8211c419689b881fa534e7e1b8e0daed77b459438c0a02af
0xd36427c9c53efb684bf08a84faafb2a432042cace2edf9d45db057fa3436fda3
0xd93d9bfe056f427ecb5b8dafb6dcb886e82b3a72ec998a5c7bbcf26a647d599a
0x4fe34fc6ea68d2a058578d3a00f10ebfd474e0fe5681b534aae3adaec5950cff
0x9fc8f8f1ea522506661f833f0da4a50b6759f473f450b72a29a56fa656497e0a
0x6f26b090a92a89bc38f33bd6c9f472963e9e1a0edbec57adc84f259dba8877c5
0x000004b8ccbf64b6aa377f73992a707ae2a7040f1fdedca8f8b14b5ab3866f89
0x0000060689a63ee9b0699608e571122628ae466fee1bf98c6d82173d381bd3cb
unittest
10CCoinsView
16CCoinsViewBacked
15CCoinsViewCache
CCoinsModifier::CCoinsModifier(CCoinsViewCache&, boost::unordered::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher>::iterator)
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
boost::unordered::detail::node_constructor<NodeAlloc>::node_pointer boost::unordered::detail::node_constructor<NodeAlloc>::release() [with NodeAlloc = std::allocator<boost::unordered::detail::ptr_node<std::pair<const uint256, CCoinsCacheEntry> > >; boost::unordered::detail::node_constructor<NodeAlloc>::node_pointer = boost::unordered::detail::ptr_node<std::pair<const uint256, CCoinsCacheEntry> >*]
virtual CCoinsViewCache::~CCoinsViewCache()
std::size_t boost::unordered::detail::table<Types>::delete_nodes(boost::unordered::detail::table<Types>::link_pointer, boost::unordered::detail::table<Types>::link_pointer) [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >; std::size_t = long unsigned int; boost::unordered::detail::table<Types>::link_pointer = boost::unordered::detail::ptr_bucket*]
void boost::unordered::detail::table<Types>::delete_buckets() [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >]
void boost::unordered::detail::table<Types>::clear() [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >]
CCoinsModifier::~CCoinsModifier()
virtual bool CCoinsViewCache::BatchWrite(CCoinsMap&, const uint256&)
std::size_t boost::unordered::detail::table<Types>::min_buckets_for_size(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CCoinsCacheEntry> >, uint256, CCoinsCacheEntry, CCoinsKeyHasher, std::equal_to<uint256> >; std::size_t = long unsigned int]
const CTxOut& CCoinsViewCache::GetOutputFor(const CTxIn&) const
double CCoinsViewCache::GetPriority(const CTransaction&, int) const
CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256&)
coins.cpp
!cache.hasModifier
!hasModifier
cache.hasModifier
it->second.flags & CCoinsCacheEntry::FRESH
coins && coins->IsAvailable(input.prevout.n)
bool CScriptCompressor::Decompress(unsigned int, const std::vector<unsigned char>&)
compressor.cpp
pubkey.size() == 65
CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)
  vMerkleTree: 
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
CTransaction::GetValueOut() : value out of range : less than 0
COutPoint(%s, %u)
%s-%u
CTxIn(
, zerocoinspend %s...
, coinbase %s
, scriptSig=%s
, nSequence=%u
CTxOut(nValue=%d.%08d, scriptPubKey=%s)
CTransaction(hash=%s, ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)
    
CMutableTransaction(ver=%d, vin.size=%u, vout.size=%u, nLockTime=%u)
OP_UNKNOWN
CScript::operator<<() : invalid opcode
script parse error
T boost::detail::variant::forced_return() [with T = void]
0x%x 0x%x 
0x%x
0x%x 
locktime
    "s": "c9c868bb56eacfc4f3d829528a0ae812dff26619cd38e6c9a0eea1eacddc84"
  },
    "s": "17ab90c682a42d7a3b8bd1da019f6e788e82f25220a1cdaca242f15873ee553"
  },
    "s": "1aca2f77af39229578b4093855278a20569ae7ea81eeda1263eac8c2cc9fcf7"
  },
    "s": "4f3e09eab1981c715af9ec05d9c13bef831501250dbdd477c429329e837abf1"
  },
    "s": "62c55983e9c14261f52eb6c22a154ea0e1534a938ce97ab17d5d057bbda7d2d"
  },
    "s": "7075dcfbbcc32b6a871244635155b4f0a95146d7c0171c4eb5667120ab4d173"
  },
    "s": "7395cc3cc468e7e7c81f254fedfcc800089846f3eb34c9ba7846e8464396848"
  },
    "s": "7f7006bd50e72da2baaf386ac27e622b9872e696860322c8b8383d86049a9de"
  },
    "s": "801ac2f210fc601a7d200c361b79bb35ce195850e37c3e09d21e24d29b34b6c"
  },
    "s": "92b39170c2f2c05ec3260d39f5c66b068a588680ef3b7b0a2a06b63ee60f46d"
  },
    "s": "998a1079510f721ffcb2e15edcccf0df6d2d7febc26a1423aef0428967372e4"
  },
    "s": "9bbb102e23ffc1d462f96613ea655f4c4a90040bbf83e01783efe99f8f92eb7"
  },
    "s": "9fc4091d1d955e68118195b8c3f354a635719cc702c62757d47512179f10197"
  },
    "s": "a4f26c6962f2165ab31d746046ba6fb14eedcce9d40ad49b4d8ec5a59651767"
  },
    "s": "a5fe1c2dbfd3bcf54275ac8318c1d97892fd018b77d8480c4eda6d54c8f4b0e"
  },
    "s": "aaa7b123505df20ee582ee5af50c4b10b970e857322eaa5ff344806680e5ab3"
  },
    "s": "e0ad6aca02b6723b3b8d579bb36cea47734d65b20f2209db8a6882cf484beb0"
  },
    "s": "ec29d90e8a354484d995e80b61b87a35064b3c911904d81713bdbf5edb4acf5"
  },
    "s": "f0dd05b9cd83f5da08f4af4acddd6ff40580e2b2056bad1937567a54e883cbb"
  },
    "s": "115dec262441fda7533074b4bc0158b65bcf9d1a9a8ba5f76106e51700ccc975"
  },
    "s": "149341097087dea918d8102f82c3740e1b55030a6a785cc0231fdd4e4d0f03c5"
  },
    "s": "150f493cf5be73b78252344d27d1c7f2b45d7b3b6302a840d0031b3e1b6d2b78"
  },
    "s": "15e18c83e0343031d2c69383c01508e763629fc68783b2cb3d470726773c407c"
  },
    "s": "1824f506e590ce050e02a24af12d621684666b88da74a33bfc3ae19d92c0b093"
  },
    "s": "1a53f51c8a5a941e7c69ef8a7721cd686fc7dd4faabf9b70041c906a4f4833a0"
  },
    "s": "1befaae308e2a712277495fbb40c32c4d8ce9233ca39e01236635ee985971adb"
  },
    "s": "1ca4f1d724d87eb09230dee2a2dc1ca50b2a1669e82ffe933b347c2f227aab47"
  },
    "s": "1dbdbc8cf8b1f9bd367856162d8a53e379fac2487ae81553d5238c0ddb8c252f"
  },
    "s": "1eac21f759996dd4817aa17821b48e3bbe963ea611ace0861469b2416f42adb7"
  },
    "s": "1ef8dc687ffe2b2a9ad35453df4e383ab66d3f2c12dd8b46ed2a3cbfa7c67fc7"
  },
    "s": "1f2627c45af257b8be9cd97b8fc9e1d7f603df78d83c0599e9e72ba784b378ce"
  },
    "s": "206dbc1d0a1f4e180be5a0635e0ea4db27a248e520e1475b44f27d43b1b211d9"
  },
    "s": "23a277496c18e89fdfa16dd0add57e3d629a9043b44a00a2606bb624e71480cb"
  },
    "s": "24d23fb6bfb1ee09974afb8ef5dc3490e4dbafe8af94033b88593fbcaf7edccb"
  },
    "s": "26116f90dd5d5d378ef831b6cb6c8fab730009a7dd41e7508f454e978782faca"
  },
    "s": "26e7af28b1c1434bc940931e3b702d3149e33193dcef4004a4b1bbd5a639b605"
  },
    "s": "274cd2190936b541d92743221c9ba4c613175f112d52abf91ef2ce53002614f3"
  },
    "s": "2776d35d90167cfec476f435106faa91490c0b9fae26c4a8ecd3a0789942818b"
  },
    "s": "27d5123ce3c8ab80827632a3a95487cac4e6355bc08ad66c686e48eb182cafbe"
  },
    "s": "280114e59e04406a49d399b7dec260836868bd8f0e9aa81c89b5ec23d00bab78"
  },
    "s": "2809dc8b2f97cc1b96dc2b426bd26d2eff948f4637167268bf235db932c706c2"
  },
    "s": "28453be8fbb70c19f9818fdee57b5370cfcfa225dd8416c6535efad9ea0e5c0d"
  },
    "s": "29353340841fc5e9b613c9365d3dd48fa32bbb6342c19aa3eb6b0e2acf5d4934"
  },
    "s": "2b294dfe32fe935c5d97f181b0b9bd37c52692aebabbe276c5bdb3e40acd73b5"
  },
    "s": "2b9877df96ce356eeba1a17f40fec1a0fc88c11df47d8cb583f8fe1e32b90772"
  },
    "s": "2d4640795df9c9b7f31891e3b980763e004781112a9ff39cefa155d394e430dd"
  },
    "s": "2d822bbad09965a6e0dcd790f99ef3c1d32edc70130b7b320efe025107c1112a"
  },
    "s": "2e4d7765d98b3b1b832eda1e22f63c8d98b6f85dff35dca8f0070841d57d10b9"
  },
    "s": "2fbcfe92669d6a7b7ddef37fb1f26119465972454f291390e0e7baccc80c9b39"
  },
    "s": "30adc0e598fbbd407c0c7e0beda7c71b03d94e16b9436a5b44229f9e9943860d"
  },
    "s": "30c3cfffedc601c0da0d1d7410094db0653bc9c444609709cb82bd790bfea502"
  },
    "s": "32b72acb884c9577e9c9f44b22e97b02b6441cf8acdfad80dbb09ccc8d653fa1"
  },
    "s": "33ebbad0c298933362ae0a386945fd4a87da776173aa2264eb3742804d868e0a"
  },
    "s": "36326e3d2e11e23f8d26dde51da07c09a2027b86c0dc0aca3d7ba66bc7d996fa"
  },
    "s": "36f6249fd8228139e0de2caa33998d1f1f9a90202cc921cc187ad4b2c71f24f7"
  },
    "s": "37e0a27f70b19335723da1bd545fc3ffe43094ec4df736beafb87f1cb1b8defa"
  },
    "s": "384f72cabe2ec5648c34eae679021e0e34579ad9100fe1e9075bd120939671a9"
  },
    "s": "3bb0ee91b2d5346b8050b2e0bb2beab08ea11e53c1b03629e03ffa9f8f785547"
  },
    "s": "3c52a9a893cd868241b005518faa0813042efbd4e116a4479a628a9a1abdef10"
  },
    "s": "3d3d24ae893c6ce383c0bf4e8ee8bfd58c3928d5a912c5a98b5d79694529daf5"
  },
    "s": "3e767e84a99fff69dac06f4958b4399754b0d9d60faaff4e79a946b24e4205d3"
  },
    "s": "3ebd51ca9d0bfc09912caf90df75d9c4b89867a4eb993fadb3286a200f9c3b76"
  },
    "s": "3f6725381d45416203cd50e6b85523cdf813bc7d8d11fd502e01ce984a571dfb"
  },
    "s": "3fb4c149548816333378015629abcb8c5c286f0ae7ab5c47b08e34b4645c557b"
  },
    "s": "41838844b681337b2fcbcd1bdfe33fe14e9d6f4b9608de7c60f8f83f951d079f"
  },
    "s": "448caf70fe54fee7b6057557c54ad653a2684322fbb3c6551c860ad6779785f3"
  },
    "s": "44b98adcada8f4bd05902aa1e63f4ae45c1f44a39dddbf25c49eba983ab65178"
  },
    "s": "45de6b65065e6b14ef821fb37968b57af716ea2f96f60bdc07cc9f0f588c60f7"
  },
    "s": "4671127a7635ce22d403d1a396a7c8565f5ff3656b49913d916dad7e951266f5"
  },
    "s": "47d36daae743920ea121ec89dd43f0034e84a8e28340ee7d255768879f21be0f"
  },
    "s": "47eb13447a36b9abee1c1a129e5fa15ebe76bcc737a02f4168bf1ae1921c22ce"
  },
    "s": "499524459a9bd481194523d76ad6041c2db1ed80b063d3cccd9b29a07fecaace"
  },
    "s": "4ae33104e2f8688fcf5917bac70d32ccc89d84b3f40c7ea3475c754087df25cd"
  },
    "s": "4b5ad8a17a06e87a242b85f69f6b65d6ef04264a439fc9d3e1aeffe3acaeefb8"
  },
    "s": "4bb7ce3dc21531bee4d658c41f7e7641d90455d2c5b8d9324512b30e0cf8f8fa"
  },
    "s": "4cceca269074024d60086a6175172f5235083dd6173c9f8e9fcb26daac5c0010"
  },
    "s": "4d06a8164d290e101173fcbb054e6a8f4f964bb251f1406cc11b75569d747819"
  },
    "s": "4ed88b07f3d519d60ee38549c9688e8b17f18c39bb48aca82bf5643559b1c0cb"
  },
    "s": "5115cd14bbb0b65abc6779eaafb6f3945f6d449e9ec509bc1981a332343e0911"
  },
    "s": "516bf9c9afd37f7e397e7e2acbcf7b6671d571e2dd8c9a2d37c9ab9809844e04"
  },
    "s": "51ce13819aa5a747572fef35704e8a46227ccf430237c5e68022f43fb1e00c4f"
  },
    "s": "5462f25f65f5a5dd8f8d09c7b1b9093b7e8a63f5b585cad11c40ace5d8288a5b"
  },
    "s": "5586f27ba8cd3b91beec47524782fe61cdd949e5a14f049bec16bb929442f270"
  },
    "s": "595c00ad177207c061d35ba757430421c29ac5103f1b31ff57fd682153603b03"
  },
    "s": "5ae0656fe7b833ec250118f23528ccb95524179b99751fa25b4fdd0e049730be"
  },
    "s": "5b740b17cad4ca33e59b53ef26f596ecf04d836614e2dce891a7b8a159bca239"
  },
    "s": "5c879aab4c0fd6de9945a643bbf88ad5d826499c7772c6a3889bc660bdb477ed"
  },
    "s": "5cdcfeba8c5946a18a6d44a513be441096517730914a3171e36043ecaba37bbb"
  },
    "s": "5d0d85914902094a48cf1514a74bc3e347b00b72f371cbc6a4e25c629f5ef18e"
  },
    "s": "5db8cee927f751865ab4bb90c79843373a2433d44f842ea4eae9e31a4c44a664"
  },
    "s": "5e16b125f9330714616e3381dfcf513edd784d556211ffe27e85b4b3b34e1e2e"
  },
    "s": "5e60f377c0ddadb7f2e382c131701ccd903d014950452275ccd4452b574f298c"
  },
    "s": "5e8eb125709680f6699af55cdb2f2fbf56519854ee68d6787db46c53f81b86f5"
  },
    "s": "603d3c862f457f71e5847a62897fa63dcd8e2db9ec16bce1d38513fcd01ede5e"
  },
    "s": "6151e99e99234ece546b3a1fb3ab050a3b1bde28a2eef3b54d31ac31d5cd8852"
  },
    "s": "616e844c5f9ea004f38a8195ca5f3853695895507997ac17ebdd5c842196c416"
  },
    "s": "6348f92e233d0927958827e65798d6e5f3fc97edfd3a350cb075693bf0ccaf01"
  },
    "s": "63a12c7d5c53716dd895e3561960dfbf90e060c3df1ce42f11a7ae5a1a921a7d"
  },
    "s": "63aabe87ab73828f9a9e099f6706fa04af6570fc70bd6f39fb1b2aeb2a073d6f"
  },
    "s": "64b4cf57c4c98011d2ab2c3f7adec3950e1162735aabbcf158cfa5dff2d0e6b6"
  },
    "s": "64f641e2b08ee2655e742ba13a9287a925d021aa6e07e21df07d7e8dfbf377fb"
  },
    "s": "65557ff0516c0ae27c567cd16f18ce04af1183bf6aca068799c089c0a6264bf0"
  },
    "s": "6571480163823be7a53b57f2053e54b68afb202e3f105e1acdcbe68a5660323f"
  },
    "s": "662244aca40908699eede8081e5d8a831fb139ebd27c0cd16db636cd49fc52dd"
  },
    "s": "675eca33353c3ebf08dbe1429245d9711d3caf99d97f7aa671a73cd2e24fa409"
  },
    "s": "685aec4107566303f0803eb2c802a32cb4fbf695b73c09850315d977c3f678c1"
  },
    "s": "6bbcd96a09ebb08f4b3433f93a294e802140f5a32983259ff1f16eb16e437fac"
  },
    "s": "6cd6ff447b8a723eca481a8c7149ace94b8981e7bedf4c275a097e3e28b13845"
  },
    "s": "6d5289f5b37cfefb5d2fcb204738a4a1418eaa1d70181c00ca71ebdd4d84eeb4"
  },
    "s": "6ea031945b9ae626eaa0768a5745478682abc63cb6b0d3fd30b14b72be4b1eaf"
  },
    "s": "6f7e233d3e1d33a5aaa609659c31ba33e4b3645c555c618407702bc7fa1a4853"
  },
    "s": "70d0ec8d4c09c35c1bebc165a3ba6e33e9d8cd7c2ea16d6383f7a07b15cb96e6"
  },
    "s": "725c8f289b804d2e4db2b840b01059e4bb1d856c8c19d616a9c88842cf26f9f0"
  },
    "s": "72bed6a3a9998190d972ca56a647a4c6ede833ab393ec4a74bef22363fee104a"
  },
    "s": "72e62055964e78e6ae63f3e3a8daaa08fbee713ad3cc6f59e7a4532b79539505"
  },
    "s": "73147455370562f28ad019dedbe5101794faad50b5cff82a2588541041e0adb6"
  },
    "s": "73ebf3d966af3d028e004ab7caa54ec6c849afb49f3ba994629e1358fb1ea4b3"
  },
    "s": "75498f3a34ca40023269738d6805c1019b4994cd0d0018e56c831f50634ad98c"
  },
    "s": "77240e9747f8290558c545ac4b92c3a3e6d08d088b6c6538498f558bc379f625"
  },
    "s": "77c007f951781ec6646009c4710c26f43a6bc2c75e48b353bb72df98b80b11b2"
  },
    "s": "77fd2e9aeacd7c1871b213443efa6bb72b8ca5be379b6c750fba29a115a9fe19"
  },
    "s": "78052fda3fe229733e158f7862dd7506a3ecbaf3071d9b5e68a98f8215b9cc10"
  },
    "s": "79d5fb604c31b4416dd42835dbb8169efd489ed7b2571cd3d67948c8b14ddbad"
  },
    "s": "7e734f66c5f658296c7767ed5ef4bca128dbba954b1ab75d85ff1fa736c690c8"
  },
    "s": "80d4460423b6f3cd2b6650f65b991e4d70386fe13a8a3a7d69acfc6ea680aec3"
  },
    "s": "82906865f4988371335760918cb39913b55d28bbe0c6517ccf6c1336795023f7"
  },
    "s": "82acfa93d01e96295cf4b30b6338b71a853e8dcbca5c033b5478c9bee8ac6372"
  },
    "s": "84e647da5fe6386cf1429db6a3b5086217208a9edadc3910a0f9a22a099e1ef4"
  },
    "s": "851fe306d60566eeebd2e14bbb3b96d63c0a2bc19e0fca76e91edc52b455df9b"
  },
    "s": "875213f74d5b29ac443bfebaed0cb0276c0d21158d203a15a9062495b659e57f"
  },
    "s": "877e1a18dc2818c6e989934ac7785bb21a9d6f292160a4e936d97d9dea1c70d1"
  },
    "s": "87f4a792f5ded2e4c9bd9ad6901023ba0f7850be46f5fecab814e2f98fcbc937"
  },
    "s": "895f69760174853b31478fb13b209f68cdf01619bb1a1c298fa42474a6f46958"
  },
    "s": "8c3445af38857b1aac0ba9baace41eddd1bb2fe2b2510c8a84fc6c05390e314c"
  },
    "s": "8eb300cafc341f8b94e782101e3d4d1d627b2fd79491d67c59c6ced7ebe981d8"
  },
    "s": "8efc96414420a1b573e8e26a9c74d2c91f95efa95474a9978f936c555b4c6910"
  },
    "s": "8eff9382bd058f384065a050f1d3b11c425f4770d2b455fdc20260e349889966"
  },
    "s": "8f1e646d9e4a6e3f840e9bf385aa285db59ab5818324af508b08fd1dd32821d3"
  },
    "s": "8f9981325570929add0679b4c5e12d43c39fa5cfde580f386dead299726b5d10"
  },
    "s": "901530f89980abef9bb17b45e52f5ad7d19525a1194c389bebf8c83a7ee768f2"
  },
    "s": "90fd5408d8693ad1c6b17b45bd23147eed44d906df97a8b06a8e30c91e35a96a"
  },
    "s": "9155b6c1fa4c4acb6618e32c10b873adbb7d99cd8d8abd50b493ad1076a12e92"
  },
    "s": "91bdf0b8cbac56ed4199f15aec8411b5807cab4aea93ff49609a12eae52b20d6"
  },
    "s": "923c11ca96d6bee39a6c14de3321909eb134337616bcca26d6b5e1f464c53367"
  },
    "s": "92c112c43504ad27ae45fd19520c9441194fe9007ab5fb6f768ebcf170e8bec4"
  },
    "s": "962a2f4f6b85ce22ca8bf0326e43a2991f75cbc8ead7d9a404bf964b24376143"
  },
    "s": "96bac7c9fddbeb404f505c392a9f8c0ff085de03756b9e789f6f7629d95c4a48"
  },
    "s": "97da82393142a7b7c0037854fe26460b829ba767b65d1fa027a5847be19451de"
  },
    "s": "99607a75ff5451beb8c7f1f68a12f7948f43e71f958df270dc13b06656360389"
  },
    "s": "99f7f18cee159c64f9a68fb4bb4a6d8d0cd76a504ce0fcd69c3fa1da216cb274"
  },
    "s": "9ad31ea8df8626855664cd99eeeb77d2fe786167eddc313ac3984aec79013c27"
  },
    "s": "9b36d1ce6ef2ff08a79b5027561583e222141622521be8b84244161ff70ad0d5"
  },
    "s": "9c03332c6a46f1715067adf0f0bca51b036526af7ae6b8f0431403d739eb2e2b"
  },
    "s": "9cd41db3d347f278e223c54a2433895c4d805753f3f0d1d03af8fa7daf16d07b"
  },
    "s": "9cf99eeb4690b3b4d92d87dafab8cf442e888ccd2896ce508625c86ff65cc6c9"
  },
    "s": "9e1ca93326c00bab6fe4b21f425928fa3f44d5623c54c9c6dd7ddb08823ad84d"
  },
    "s": "a0737c11c43ccb5ad12869ab78970ab27cb346b39b973888e88c89d1c097c18c"
  },
    "s": "a12cc8b123f03ce76883bae2e925009aa41f948a2670c36826760adcd11a7327"
  },
    "s": "a16f6aca4f7c26f004c0f0956b746c12e627e9b42cc85c4288390b8b074b01fd"
  },
    "s": "a435f2e742de70066a1819f624f6fdeff5faf36c8ee6ed67173577a9551bf2d4"
  },
    "s": "a956c9e1efac7f1326ec5b8275d8c52162d070cfd578f28a2b5023744acfbd1b"
  },
    "s": "a9f61da6729a0803acc9181cf667bf75e5e6936f076aedfa73e9918be6ab807c"
  },
    "s": "ab99ca019c5f24e1730c4bac043700332bc6eafefb873557d0b587c2f17f1686"
  },
    "s": "aba262178dd5c21f9070f48b078a47d099fb7e319b612ba78e626cbd7b42944a"
  },
    "s": "acb20da730190d69a0b18d32ea5dd10a23c73d645228223ae6ee13749b24de1d"
  },
    "s": "ad6bf7a1620c0e7affbd3fcd0b090ab226240d603f5276541006c4cc0c7f4afb"
  },
    "s": "aebdcce0db51b47da1d25e6735fe18fe8882ba76b186dc152ac47ed47c496ea4"
  },
    "s": "b1035d369a22885c8437999e5f2fe3893b62948c420f2b891057dd83eda08b84"
  },
    "s": "b2ef15f316d151640e03c78e936042e79e95788fe5ad704b16c283ee01a262d7"
  },
    "s": "b34a7dc6efd04a1661b553f11c5852921f9d735696fb9ab83ad4a05698435f17"
  },
    "s": "b3ecd3f7c2807058647131b2293fdfa6401d39559d61e300d4466be020bc6cb6"
  },
    "s": "b499f298f138aad71fd7e1c8e9e0dc29078e72e550c1d4d762aefd2df119c4ee"
  },
    "s": "b56bb873e4dfe65bcc577d556e9855acce5259192f44da85f532e326a4021be0"
  },
    "s": "b5a0eef68c172b7550f39f1b28ad55baf276ea73f434131ba8a4b10df80e6419"
  },
    "s": "b652afc4705436e3b2d7309853ae57a9ff813f903e628a3441972f9f794675f9"
  },
    "s": "b68b1b3e7f319f890245984c59b63b0fe91fcdafff76087531aa676b6fd8d1f2"
  },
    "s": "b696d3f8b7985d9e5999cdc8888fec2a74d9ca1570bda93b67139f5da2a0f071"
  },
    "s": "b88649d422a39be2772f51ae7ecd5c9faed47a47c6ad082c26ac3ed119649946"
  },
    "s": "b9d78a2580d588439e70445dcce3f80157a2a3f56cd0aff291d4a4d368e02bea"
  },
    "s": "ba5fbd2fb3505693b01698e772ca4fa6eb7061ad053e92f5bf2010b4d666eb08"
  },
    "s": "bc3960393ca02ff2cee222c74a45ab3efe562134fd752b1e07892d728fa6e0ec"
  },
    "s": "bd8cb2973fdd456c0a74130a9b03e9eeb726e624e7b5f7d557050947aeef4dfe"
  },
    "s": "bda28351a208b39cecb387bb4a8671383933903461fb65ba746e64ddd0ef9e7b"
  },
    "s": "be1ffd893a3570579f98f31b0ec77e86b9b530553baf149f6bc0a8f48a4b8005"
  },
    "s": "be58e559a5db6c755b71d2245204dd7e2ca4b837548b7a3204a56f4b004444fe"
  },
    "s": "c1ced7a4a739960663a5afb7207eb90c8cf07021455f2da6b8f4fbca890fe358"
  },
    "s": "c68cc01fcab3f41d17e79886e1f3871827aae3e0f9f4c86bae22e9af2d3c8489"
  },
    "s": "c72ab51324754a4aa84148862b435fcfc77dac135740c3c6857f7b2fba04b781"
  },
    "s": "c73e72505fa96c333e42c34f8dd8a63b8df15f9c363adc2f22e6fa9a5615822d"
  },
    "s": "c7745fb347f95e7aca5ef5e962da1191a365ef3bb9613dbd4a71f059daa763cb"
  },
    "s": "c90233f1164b6b7628c9cea9affc2fd0937302e78806054cf0549c25878383dd"
  },
    "s": "c9b24f371005cbd97852e6bf237d315027d2f898a64c3d2a7fc7c4850dfd591b"
  },
    "s": "ca3a1bb927fa2371ed11d34f6f8033544e191a63650cc7e38638f61097e4b767"
  },
    "s": "ca8a0048323989a3fc65fa8387c5443c5d219e7ecd9db7341f12fb8983222f6a"
  },
    "s": "cb697a1ab429e78a1d844d182f9e6ec0e103f015a2390c70efd93d14a5a89e34"
  },
    "s": "ce1670a1289d044152e94af5df2d25e8ade43f1b28a9b2e4f08731c68b87af57"
  },
    "s": "cec76144d5705c4931ae2fea2cbd11e823ec7bda30e696d8f10a723a27f8b826"
  },
    "s": "cef94b2fe839ab9ae580b36011f593a2a06dfb33b6fb679f4d24efb0cd83cfca"
  },
    "s": "d24088d7185f9b38a3a5118cea3f2ebf93359cc75fb85745a328d64e88f17ec4"
  },
    "s": "d378fdd0abe22d97ad485e38af446feaa919815e47ab11a93ebc137c5c945000"
  },
    "s": "d454060829124c2836669712c1b8764fa59961228addebc3123caa36ab6ea446"
  },
    "s": "d48604fc398ca7f00a7765218b82e7809b8dd1244d8fc699ce6ab1a904f33b1b"
  },
    "s": "d543a8a442548c4bb9a0665338cb0123548b7b1e773cac2ab269c6fd01037cb1"
  },
    "s": "d54e54678e55df7335c7738fee5ab6b3f7e5e23a1d143ddec4082571ca6d1e3f"
  },
    "s": "d677e14f797545777a27d3a02bff81b103a9d51d1dd031aec986ae888f1ac740"
  },
    "s": "d6e54940025710938dc0a0e27a6fea0e91d724b3cb031b4061d5474d372d45b7"
  },
    "s": "d708593b4f86158ed425092dcb4970f55fad4cf5cad4b7ff9f2541be99b3018a"
  },
    "s": "d748e8ca3f1f6f580f0d8c2818e2504afe5b66817f08dc73a42d94461aaad46a"
  },
    "s": "d79bceff03753ad739274a12910ec1fbaff32983ac1d2747dbbf2f7efa1eea3a"
  },
    "s": "d7ac89fb49435540e21ccd94be2f389824341ccdc659fe7eebd3e9f9ed491de1"
  },
    "s": "d7f7234aa24bf8927c4da1b23bf3dfb1a69b5b3a81ff64a4261a8b2b08c82d86"
  },
    "s": "db577ee50d71809541ae484647d9e9a5123923102fce9a9bdf8ccb51953e9183"
  },
    "s": "dc0f45c955e96db9db8ed14d42bea2a3eb69007e206cc77f98221f1a8e6e7fc8"
  },
    "s": "dc5a78940a1e58cf2e84bdc13980f1ffdb5c5ae02f3334cfba5baac9ef420f8e"
  },
    "s": "deaa945e91881718e125e78148a473b6f6d3e9cfa9681ff587ed283ba1869c48"
  },
    "s": "e1dfe941ddcdf81aa6cd82fc0f668f0eb6594fbf7954d6be4a062072edc8d698"
  },
    "s": "e25bf17563048d291047a719b474e2f34f61c7f071df223ef6e95e62bc26fe4b"
  },
    "s": "e32e34bc4d7a49a360bc06504cb823e7fe66ec7b96602cc9642d4a4b17f6134f"
  },
    "s": "e5719d3f52d6e7769bf815177dd07d171f6ab83de9511d3a232124c2337a8366"
  },
    "s": "e7a09d54f7a0ad900a5f625703c4e8690acc2a04b99c156e2b02d38ef0020673"
  },
    "s": "e93c531b7628c083b56a08c840af4dc573d2dee8d9165a105d49a20e2650edae"
  },
    "s": "e9f19a0f921e9822202651af2f7f37a5a62e631ef70c7891621abf53c3347e1a"
  },
    "s": "eb0a64c565f8132ec46dc8e2ba2d6ee414ff0efd89c48f51fc09cf327c45f802"
  },
    "s": "ebf8ca2fc6df87460f701444ae57a93c599a8b5b20895a843b4ff5660ffc808a"
  },
    "s": "ec4584a0ed44449c28c8c7206bf1533b51718be121ba054514107fe44880529a"
  },
    "s": "ec72cffcc838712a4c924c481c6cfcd891082c2de7187f9810cd6ecc256d4ba1"
  },
    "s": "edba64557765678999db132feab1bfdbc2a6959a2fbdc1596bd8c068526be4ac"
  },
    "s": "f0ef1f81d95f02116d96e09d3a78993dfd9edcf8c3267aa08751f94987ce539e"
  },
    "s": "f21ee7ef2cf8077b25406e5b827f4f917fdffc9dbe707d39af3f82e15038af9e"
  },
    "s": "f35e17c94aa376a91ceda483580faaac0e04565cec1e614eb62b91bc283ccd9d"
  },
    "s": "f43457611f075cbd573605eac8134831e4e77e48ebcbba02cb97fefa46f388d8"
  },
    "s": "f4997a51767cceb3671cb5eea93ebfc6ae1babc63c2f25f745d91177a0dfe7c6"
  },
    "s": "f4c37b95fd5c9670526c67019d12c591e4105854bd033ea713b9e39d39fc545e"
  },
    "s": "f521ba75510ec4f2106ba57035f7a2cb5fea8210cf67506a8f548c0fb8e68291"
  },
    "s": "f54dbd1e0b4a59dbd7c90c846b657b84036d0a441d77221ab09c2f4870c57e4b"
  },
    "s": "f55684c39cdde58d24d19e0ef875882f9a98dbfb45f2ec66e609a0ddd380d995"
  },
    "s": "f591e42168fd258b877702ab721e6e716ad3eedaec6090c47a453dfe8ac82ee0"
  },
    "s": "f681db78f165df5b44093c02e9e0ef903e300818519e14a21251514f70171c07"
  },
    "s": "f875f636a044accdeb8d644e3d5cd838602adf63c9985c74eca3f708ab874688"
  },
    "s": "f8e5201804144ee07997144bcda1dca1978d0dd3035a06b3aadf4142d372da45"
  },
    "s": "fa92e8b1cb3fe329810e04b04623913e9b4bcdc6397c6d9b168798f8359e03b0"
  },
    "s": "faced3f33ddf7f186ed24a5d86420ec26e33292521e7f53035e44575a87ae3fd"
  },
    "s": "fb9a1f9e46d1548d11244ceaaf99578e33bb45130e1256a716ed4b667636e38c"
  },
    "s": "fd09a6cad3e383ed0bd4664c3e957c19e15dbefa5e058d8f07cdfdf168c66e0c"
  },
    "s": "fdfa691e0641d6b20a01f0d87a4ae21b9edd9acbc81fe4596b08e2c339fd58e0"
  },
    "s": "fe1078385b0c1b32680290409cac68b100401679533d1107f269009dacb877d5"
  },
    "s": "10003d303f592aee977bf6717af8c9603514869adbbbc277f0296dff12e1f1274"
  },
    "s": "1013863092fdeaca4f0a37d04f5e9184b22dec41682869c63121d85a4ee4060dd"
  },
    "s": "1037f16759b57fbb11b1c50b1aa43970a3d06c83bcfb884c86461e990689369cd"
  },
    "s": "10442ccd845689aab6ed39f76c03ca81fba9edcd53ba59bca3f6117d767d8f7ca"
  },
    "s": "1052d4ab7ddf7aca700331489e102df007f34e1a15cd3b0bcd69ec2415272b1cd"
  },
    "s": "1059c1b032b74ded61a2a5db305a5390ecf5be78e1eec5be72e4214453450447c"
  },
    "s": "108fd96ca201b4ddd0e4625ad47cf05b129a56b08d08cb02807263dc43032281a"
  },
    "s": "1099f51e101139ff3cfa5781e1c4d23139f334889eff31e45c148cdbebb77c1e3"
  },
    "s": "10a89cce6f682865511b6321b1b8bdad6273d758ab7ef3fa7b243bc8de5e3adc8"
  },
    "s": "10bc326bd16e618db68b5e215e5575497efb5268b1e87794ca08f89d6eefbd8a6"
  },
    "s": "10c09fa030a52157b1f22225d6c18f4c5539cb459fa75b9abda0ead44b0560e49"
  },
    "s": "10cb3cd708a8b5ad391c2c3b344f83ece931809329bee774e54e811bceb10f0ce"
  },
    "s": "10d016981c1ce2fa4c16d7422b64ee68cf72cbbbff687d645d77477d90516284e"
  },
    "s": "10ed0307d23c74cecbdc13fe86c865ae1e9a1bc00a4e5587a87df3b6435d6da72"
  },
    "s": "111d957a96b9b185943fae82451edf1543d6c8fd80a904053436c4dfb185158c6"
  },
    "s": "1120633151aef0e2e93859d6e72e265e4f7239158acba3923eb84fdbcdb70244b"
  },
    "s": "1132b139d73a484867d779280060bd07b921b36e4a5d285da2eb2e233f94633ca"
  },
    "s": "113bdbab2e37be79461f94470234ae356fa64401a7a260b3bb853f0a335cc39c8"
  },
    "s": "1152015e35489ab802f175f5669e70b03e988f597921d687b4c3dabac3fdb90e2"
  },
    "s": "11537bb7ce77cd31d7c118cdf2b02bc5f597b097c467ca93f8fa55e0632d5f5a1"
  },
    "s": "116e1cc7e07e1edf2a73a96a3f7791f1cc8b63a35bf404dcaf4816cc520a67da1"
  },
    "s": "1182fd93d503e82015d4e8a8753b04dcd63a1d16902e8f8a16e42b8652898f8a0"
  },
    "s": "118a780d9e74d01ebb220f8c32c0e80d78a0872ff527c43d2089543084d68c28b"
  },
    "s": "1190476762f5b4b3072cbcb90ac2191427408a287d49553306bf8f632adb2cbcd"
  },
    "s": "11a1b725efdba1bbeedfddd2e01ba4a52d00c8a8b2619198cc6b169ff4d15d2e3"
  },
    "s": "11a53504eba6f27819f696f8791f1858fea9a986760cdba6ae801b87b3e2e4aec"
  },
    "s": "11c253340611b33479cd8f816560ba98bb2f5d8eeca2526a652dba759fa6b939e"
  },
    "s": "11e62754d28f6cfcc4a5cecb73c5a0e94fa719153ada183ba4067e656d4f7dbe4"
  },
    "s": "11eb8a2021d1998efc773f0f7587296670cd9be97ec69142b5eafeebcaa3e20d7"
  },
    "s": "11f1abbba07ebc0b8e5256201fcf1a546bd811bf811143fe4a70937645299df22"
  },
    "s": "121af9a97d33bbf4f1d827c943e5c243c198eb0aac46244cf4326f00a78e25d2e"
  },
    "s": "122d39ab4161355034ce1ba1ed426196268dd969ab02b7e9a12fcfeb734fcc543"
  },
    "s": "126a8a8e584b82131efc8ce73e3e61f225d9f11c54df7abfd7ee3ab45f41a0dd6"
  },
    "s": "1282d0da854fe4d5db2f68bbec1cbe7b9f0286450a85199a082362032a5510391"
  },
    "s": "128c0b350381ae3a57390c6bbb398b1ed8b51d01b23bf56e6b88dfbc5fa76750c"
  },
    "s": "129d442e3b955f050273b1910489ba5d6732a9651864f40a1af8209855e6e4ac0"
  },
    "s": "12a29a6f2f99f60131862b771a0615f113155c3e5a026ab700a4687114c5d4e8e"
  },
    "s": "12a5a2dc9b64822bbd6c487e133eedee3e2b45828024e45c4cbc89f874018c461"
  },
    "s": "12b057721953d6af7e8aa2e5d543b5e37d52880895e60a8a311d0263eecfe7937"
  },
    "s": "12b63595e66792085ef63a64e6c726c3f787c9a0a70ee79e0a56bf7d85407f101"
  },
    "s": "12bad9bb02e23c72980d8f58dbe1337ce2b414dfe5f219c73f3ba884ff808fc5f"
  },
    "s": "12bdb595ddddc9a67f790682967d24abff155e509fd455076a49aaf7898d559c8"
  },
    "s": "12d89e4be9c8b98e37379ed2f1622c13e68927a6efaf336dffa6b572170d8b131"
  },
    "s": "12e9e91d70669683fe260acec404e200ad6202addb1cb6db37417ef5676875b25"
  },
    "s": "12ebb2c84cce4b976817ff46257025354045ce2058874261612c39fa8c25096e9"
  },
    "s": "13095a16690832299237d9ab2e43bf1e68f00e4a30c16af0ad75bac60918681d4"
  },
    "s": "130edd4b5c9998adf668b5622a603fac02be4ad78edf95e2d388df17ebb4bed50"
  },
    "s": "130f766c018b99c0128937c6bf3aa15054a69bdb17f99e93822016e0fcac11042"
  },
    "s": "132017790320f998360a09f0c0781de95a915af28698836ef7fb5e904938ab989"
  },
    "s": "13242ea1b1dd4fbd6ec699e6dc735a2a9c0d46e5f7ce45c1c1763c1b29cad4ace"
  },
    "s": "132a22828beb224540a4bef9dfbbbe9054a15d07479a68085c0a6cce546e01ec3"
  },
    "s": "132bdf039d0c855593330cabe91e16fb725ff6ce34decd818f4b229aef71a0512"
  },
    "s": "1336eece5114f21db2ce35ad4ab00a583bab586a0e15886cf949c79f1eab625b0"
  },
    "s": "134ab726ba282583096d1540f1ee8f471b840fc4ee85bf4a4988d7ff7830976dc"
  },
    "s": "135a79479749c7c757e75b17f54a5be2d5000434ac618838329fc1c9c64b04b94"
  },
    "s": "1390981a27731ca00d929a6c5c6cc6980bc454258385f9f9e18d7b1d60efd527f"
  },
    "s": "13a23a77ce8d08bb0583d8d58fdecc7e9e68dce9ccdbbc62580efc162c96b0b18"
  },
    "s": "13a9f322e20c3186ceb253decd3dbbfa1dc92f6d27ef495fef1582f01ee3ec187"
  },
    "s": "13becd9ccc8e0ff987895e956e3e862871db012f1c58d4dfb57978e975f04f182"
  },
    "s": "13ccacb75ab634d17389b7c3228d4d5347fb7b1116438db822e566eec9ad41b26"
  },
    "s": "13e1d94c5b94fdccda9e13432305d893484dd1a313d7de761aadde39fb68569b9"
  },
    "s": "13fa9376108c6669fdba82b0d3cb374e55621d2219af65014d0aecb676fe0ccc3"
  },
    "s": "1400b7edc16df9b0267683d2332eabfc788ec8060481b3ea572d5655ae0a7e31d"
  },
    "s": "14032c88e039492583c5966b0357dc50996f2bdefe2a8e9580e8a96501a0d67d8"
  },
    "s": "140611c8da44b7c6418c58cab68882b182ffefa05c4ac72284c6e9734e29a8089"
  },
    "s": "141389c11d3f556741bf5bd84574869c7634dfc69ae1823928984567d9bd87786"
  },
    "s": "142963772a2105973c05ee659f4a8dc02364de1821bdc92e3936962750404ac5f"
  },
    "s": "14470b6cfb53e4276e6bab878d835dea481d4d9bd9a48df36707598b06433c8f8"
  },
    "s": "1450cb031bebe3837f2557c90fdaf41f4d5700f7c6d252d51e25922bd58c4e485"
  },
    "s": "14549d6d358139589ffa78610cb9d86b7c690f2734677e67336a06cc5b663d0ec"
  },
    "s": "14551d812ad2842e4cc0b0244ef8090073ef107a815fa155c8f8fd2a6b6739ee3"
  },
    "s": "14722a398b977cdb2fbc99b02685b319f984ceb8cc13396d1fd5f8bed5207ae80"
  },
    "s": "14bbff79f333c719afa6cdab9eb97d7a1c3e0074a59f7315bace562cbd780639b"
  },
    "s": "14e20ee3c90fd0d3eb95bc3c2e83c394e0b3cbc964966b47b90933f93473a8196"
  },
    "s": "14fdd109e61de9ce2c14cd35e1956b41450617570efa2cb7af652565b1a09f6ca"
  },
    "s": "14ff9a2cc3d64af9aeaea25d7efdbd21b2042da80d9387d397b5f0ce389663645"
  },
    "s": "15232f012cd2c51de7f38108330582362b224d753e9b8b30ec7dfe54eaa57f1c7"
  },
    "s": "1526c8b3f434b806079c8541847deb1d6d70e7876acec447510051f77550fb26e"
  },
    "s": "1549ebc2fbaa1431dd231718779afcb2807116dca9bfcb413cfec67ba5713b852"
  },
    "s": "154cac251496e3238777f0617541b76b2b5a1bbde303d1ee75dbfc0c28ad643a4"
  },
    "s": "155414fcb6324ec5657b30da31cb33ebaaa7c9d7355d278c8defb261e30859c0a"
  },
    "s": "156ac11ae6eba9eacbf3d027dc7c3ba6968f462cec9f69627b68a679947ae3c2b"
  },
    "s": "15980ede7a5cb948c3a011c87398739de6cbf7c97c12d8688abe2af29d9c8041f"
  },
    "s": "15bffa903697a38fd22dcf4dcaae0681dfd7f7c8ca36e507a80ad11fc8ca354ab"
  },
    "s": "15c493e79b166bb2701de55372917edc9ba9a3c5e63512395b679af79fc063be3"
  },
    "s": "15c4c3bbb2a4ba8a9ce5b131d7e76cc1cdd639425e190cffbe8e8a407ea426c39"
  },
    "s": "15c6b0ca60b9087b112040ec0124d435e509f02369201294eb1ef404273e1f4a6"
  },
    "s": "15ce6296ac2b6ac0c6afbec81528448445ea3f284ed34893694d115be13252fe3"
  },
    "s": "15d61d93106c6c56129a6ee1271d275d86c9972562828b29a12df0b5f1fa13bc5"
  },
    "s": "15e49fc4145af544354a6ee1249c62f7f884925bbee7422ae917473edbeef7c3d"
  },
    "s": "15ea25efa6792643cf40e55f89d5b8eae5681e6829c67374edb79f035175b0165"
  },
    "s": "15f0a98f138f2705ecf8f642779272cb61b80f7fff97079478780560f85e4f3a9"
  },
    "s": "15f88ba03041cd855286187aabfc4ab9f4c38802b25994424fd9c2519057f063a"
  },
    "s": "1600dbafca24ac6993c3b6fe5deafaf41b45435b58992756d9d75001611a29197"
  },
    "s": "16376d787d8cbe794588162fefae6bd99ba7a187df9b453a22ba5d96fc4f13416"
  },
    "s": "1640770026b2204b1dd45cf05b742a7108b8a2ab884481876c655b94e7a161d1b"
  },
    "s": "165272a719e88c1294df8eb218ac9610c1d9ff41cc539999e4e8bc7a0824e24b1"
  },
    "s": "166ad22ae6c9a6b3046bd64c316b612952a4833d4a46a6c6f02f9f38af6efd65c"
  },
    "s": "1674499c55b5bb5d6879c028147ed888da7dbb7055bbd76d4c325e4fec2268547"
  },
    "s": "1681fc6e14ccc3ff6e45a40667b8e92d3997cae1cfcb8ab38ea7e8e1119bb0efa"
  },
    "s": "168837a06dc39187a3590c2f3e2b89ee2bd1862d760f862b6692a594497c4a3a8"
  },
    "s": "1694fdb64d78d0ae2de5d20bd7d5fc01b9e69736489c332ee69fa46fbdaa500fe"
  },
    "s": "16a20c5ec408e0bea70193816b0d6a45ce884a40902cd4bce61df3da24fd0a34e"
  },
    "s": "16a464723b3d6cd266722faa7875bea44c98cd9823773484ead0c0b949716999c"
  },
    "s": "16b69516b9406251cfdda24ebcefc43fada4922174b3143c504641e2d22f4ab20"
  },
    "s": "16dc0244a3182e4cc5f1ddc78053a25b317b79368aa73b2870f72ccf66151945f"
  },
    "s": "16e7970e991365658f6792daf75c81b9b3f23e13f354d3d664d5c4e0171d445fa"
  },
    "s": "16ebc1302bcc2406192b66361f8178713812c36693ba4d640af1f4eafa804d4d0"
  },
    "s": "171829b1fb0248977f80d8cc2b19a18f090ff40219dc367653e1bbacdf5d5c5a7"
  },
    "s": "176a3721a5cf29884b4e1ce4f027be021fdd4bd84e4556c8852366698eb898fee"
  },
    "s": "17742c5dedfe021753abe8ae9830ada7680eae024164767f89acfd4b08765534f"
  },
    "s": "178e6723a09a53e530101be7890da1b33c6cb37b40a63af55f79bcae79238e959"
  },
    "s": "178ef0a4ffb1bdb911e666757942d62d134ffcae6aa3da5a5b548afe21bfc671d"
  },
    "s": "179feb5df9d5f26db2ea6ffff7700ec0abecb8a1961049c390dd456993bdeb0f0"
  },
    "s": "17ab89fd9cf5227ec8db2b29997ac25b2c1285a154e2ef05236ed07f0ad391dce"
  },
    "s": "17c0a75194897cdef2fc7d133c2a133ff2387072bc063561351aac1f91d034177"
  },
    "s": "17e50056f0768a1ce122d0c6aebd2fe89d666e14150eba587373e20a88e5a5e57"
  },
    "s": "1803bbe2b84176ad59bf93a5b20035de83999c544f489ea493da8c712a25c35aa"
  },
    "s": "1809725ff5d166387efaac6bda8fb6d92baa1c00ba5d814b661bae37b38fd31ea"
  },
    "s": "181397c302fc689c9f266a47eb5e2faa6db21860aac3e5cfefb2caf04c1763f89"
  },
    "s": "181e69ad15e7ec448adcd54957683f729a292bf9a5f9e4ed58995405291d397c1"
  },
    "s": "182b860ac5225ffcd5a4cf021fb3b70ad6956a5ce3e2154841c19264b44bbeeb3"
  },
    "s": "182ed972ef95d44e6dee911e7b55070bb8d7b372903108d19cf8af43298c836ec"
  },
    "s": "1839f57fcdd9a505540cca364e05172aa9a858c454d3f0432687d72c41a0048cc"
  },
    "s": "183d7c376ec77b8fa903b0b18e659561084241a650e5282735890aa901092a4c5"
  },
    "s": "183e37c3124de770fe78f40951533072b0fde16ca7f9a23398df9e282435ac344"
  },
    "s": "185d2f20c8fe9b5540524c47b0b7077a049d8c6fcd589822a4d9281f5ba1e6c19"
  },
    "s": "18724325dee1ba1b52c65b72a59871301f2a6f0aa7bad29f0b8bae7f80999febd"
  },
    "s": "1876774781515872cb1d39e4c3d73885567dc4be924edf393c19930e2fe3e4922"
  },
    "s": "187ac6568209670053e0c0bb3ff6d6aa78674ae62141b0cf3e60653d97720bddb"
  },
    "s": "189860871a9e649645cd79593d6e8c63f995a6dea0c51a51c2e6f70973060b3bf"
  },
    "s": "18ad95acfad235edd986985d727a704ef522b32d9f69271d37deb4c6c4fa920d1"
  },
    "s": "18aef2b8a0f4ecd0e7aa8fa87d7298c38d437dce970d7dfb89b54a80271a9714e"
  },
    "s": "18b6ca5c1a77b89c92d8e65e79b6a998754b97d0a4a8b8e9d92a6ec192b0552d8"
  },
    "s": "18ba58d92132185e6e96744f0dea7f87ec7a904ec6367f4302b8bb26fa0fe17d1"
  },
    "s": "18f1b7fdd147faf77f19b2283ad21d40d27f4bcd6543ba7a4dfdb3eef29c9b62b"
  },
    "s": "193d9685837fa0d8ea5dd0b536e96a218c2af309608d14269d5092cd3cdf6575c"
  },
    "s": "194775d4b91bb63bc3636bb52b7e67ad06281f8c8661d3dc4ac65be545abe8a54"
  },
    "s": "1948b1a88ccef85a4cc38361c1a7bc13c28f5ac514517562d49cd3dbef6cf5500"
  },
    "s": "194c107ebb53f77ec585468b5ef7d2c923e6a3bf0c83db7bb7158337e7b61369e"
  },
    "s": "1964edc29839184e7b6bf41763c9f4ad12e774f9c96e27f4b173adf4a283d56b0"
  },
    "s": "196fef76f7d4be54b0648598bb0204c50c2d7454db528b728a6ae07a9aeb72bee"
  },
    "s": "19786c3f195403ce37b07461bfc234e54e91d671873e941e1ad1f3935389e8a3a"
  },
    "s": "197d6a8809f7fa3158a5b6d5014685f3cf825eb33dc7a313245f93eae23dc023d"
  },
    "s": "198b62253217000fbab79bfe4bc4189c17c083ccab115866f16bf803946627107"
    "txid": "00405ad8cc4ec7b6be27dedc6bf19f2febf8e338031fe552d7bf5c0dfd6e67de",
    "n": 0
  },
    "txid": "00438a4c089b31f8b12c75c274eed5914a0e78f91bb8bb8cf52f2194b8190cdb",
    "n": 0
  },
    "txid": "00438a4c089b31f8b12c75c274eed5914a0e78f91bb8bb8cf52f2194b8190cdb",
    "n": 1
  },
    "txid": "0091d20a2af5f54e1cf5cd27cb5b7d2fe928db4cb9c40987d8ba8f206cff225a",
    "n": 0
  },
    "txid": "0091d20a2af5f54e1cf5cd27cb5b7d2fe928db4cb9c40987d8ba8f206cff225a",
    "n": 1
  },
    "txid": "0139e44f59fee4052d43cf709f3078cf489304d6107e9d7a0885b466a3a22dc6",
    "n": 0
  },
    "txid": "0139e44f59fee4052d43cf709f3078cf489304d6107e9d7a0885b466a3a22dc6",
    "n": 1
  },
    "txid": "017ad2f684700eb538484231e5455d7613867cc4772c468d03e5bd99e8eb8e23",
    "n": 0
  },
    "txid": "01d0113c48e1dfc08bff37faaeaa50a1eb98e26da20e860a2991a4dd3d2f3e61",
    "n": 0
  },
    "txid": "01e74cc60b380a1102103f7df14bb8972b43fc2e3781a65920bf40c0e4b012e9",
    "n": 0
  },
    "txid": "01e74cc60b380a1102103f7df14bb8972b43fc2e3781a65920bf40c0e4b012e9",
    "n": 1
  },
    "txid": "02484718907a39f8caa13d61a52e4e977d7bfe4703bda0b4a680e65e379b7eae",
    "n": 0
  },
    "txid": "02484718907a39f8caa13d61a52e4e977d7bfe4703bda0b4a680e65e379b7eae",
    "n": 1
  },
    "txid": "02ec53a6da7c0dcd662a4fd7d6af199ab48caf1d921aa1953e7ce110083cfcf9",
    "n": 0
  },
    "txid": "0357a0a5011e8bd34d767b8aae1d5872edef12f668d84b5d4787c8f0b4b52746",
    "n": 0
  },
    "txid": "0357a0a5011e8bd34d767b8aae1d5872edef12f668d84b5d4787c8f0b4b52746",
    "n": 1
  },
    "txid": "03bcbaf2c42a271ce5b1b0080c0bb57cd2f59dbbe71bb0170d0bf6a4f0c743f7",
    "n": 0
  },
    "txid": "040361e86ebd598eb580a9d3d00d482b55d793816b50882d5ce64dd1869a70e9",
    "n": 0
  },
    "txid": "040361e86ebd598eb580a9d3d00d482b55d793816b50882d5ce64dd1869a70e9",
    "n": 1
  },
    "txid": "0489446611c91f4e4c605e572e924871eb028643fa215a55f5464f77002c773c",
    "n": 0
  },
    "txid": "0489446611c91f4e4c605e572e924871eb028643fa215a55f5464f77002c773c",
    "n": 1
  },
    "txid": "04ac31cd61ac6fd317e58b90e9a32ef6b03c067880bf27c055330742a1d2f019",
    "n": 0
  },
    "txid": "04ac31cd61ac6fd317e58b90e9a32ef6b03c067880bf27c055330742a1d2f019",
    "n": 1
  },
    "txid": "05661cbaf57d69e77fc7f721554bc0b073a0cb17a4f6ff91bd9555bd55bf5254",
    "n": 0
  },
    "txid": "05730ffc2f0f00683c6ee8662dde8f6cd166ccd8f0597484b32aebe8e05104aa",
    "n": 0
  },
    "txid": "0583ae0ba9983215be2e1f2d67da43b3b37d1805d17811d81bdf9ae8699c8cf1",
    "n": 0
  },
    "txid": "05db42a11a2d59213c138764fb4a14ee50cb27ad8564685adc830cce0cd67815",
    "n": 0
  },
    "txid": "06175aea562856aac029c14187624106a5e14552cbab440b4aa81c63329c35dc",
    "n": 0
  },
    "txid": "06175aea562856aac029c14187624106a5e14552cbab440b4aa81c63329c35dc",
    "n": 1
  },
    "txid": "0622cac4d75cae612a717a192a5b36d5d7c7d5d195db76c8bb2da5770ab79a1d",
    "n": 0
  },
    "txid": "06468b85a292d3176a17c3452f46d9d2f090c11e6af7c358440543f36dbddcc5",
    "n": 0
  },
    "txid": "06468b85a292d3176a17c3452f46d9d2f090c11e6af7c358440543f36dbddcc5",
    "n": 1
  },
    "txid": "065619befdddb2e6a5637e912c87cbff0d9678de5ebda22914f330bdba637da0",
    "n": 0
  },
    "txid": "06628c6e7bab04018035707554b5b32c6fad371bd549e36ea863b9abb2194e1c",
    "n": 0
  },
    "txid": "06628c6e7bab04018035707554b5b32c6fad371bd549e36ea863b9abb2194e1c",
    "n": 1
  },
    "txid": "06895aa5d28b45fb2f66a6a658b9c42a40c72d29f930969e573bdf4f2c65d19f",
    "n": 0
  },
    "txid": "071a08099310da3c409e2579c3bdcf9cfb854ccd9766b42ddaa4ad344509b891",
    "n": 0
  },
    "txid": "07ae9fe0c4daf8c3a2d464c51ef2a90c4d0b79004326991ed84bb57ccd07aa75",
    "n": 0
  },
    "txid": "07ae9fe0c4daf8c3a2d464c51ef2a90c4d0b79004326991ed84bb57ccd07aa75",
    "n": 1
  },
    "txid": "0812a19701fa062bfe20de85d5e21a897c9181a4e1a534339923b6f726130e35",
    "n": 0
  },
    "txid": "081a70e987901b32bedbd6e65d8db3cb69bd6028fdf5484345e101849331a63f",
    "n": 0
  },
    "txid": "081a70e987901b32bedbd6e65d8db3cb69bd6028fdf5484345e101849331a63f",
    "n": 1
  },
    "txid": "08501c017c5a66f99a34d4719df9192e292a67d7e39bbc30cce0b0524cbfb321",
    "n": 0
  },
    "txid": "08501c017c5a66f99a34d4719df9192e292a67d7e39bbc30cce0b0524cbfb321",
    "n": 1
  },
    "txid": "089e44127ae51cf5d5882089f241fc1e1cc22b852d8f7f5f6f8dc91e4c4037f5",
    "n": 0
  },
    "txid": "089e44127ae51cf5d5882089f241fc1e1cc22b852d8f7f5f6f8dc91e4c4037f5",
    "n": 1
  },
    "txid": "08c1035b5302e3d73ab06bb6e9c20d736d1e02d8c10669dcf475958c9d5a9fba",
    "n": 0
  },
    "txid": "09669ccfd0e55ee8f97a6e9295d697ced19a0e83fddc9d93c118ef580b9464de",
    "n": 0
  },
    "txid": "09669ccfd0e55ee8f97a6e9295d697ced19a0e83fddc9d93c118ef580b9464de",
    "n": 1
  },
    "txid": "0993240231eccb835c0371088cfc7ee86885ba566adbf5ee206af121da9bf348",
    "n": 0
  },
    "txid": "0993240231eccb835c0371088cfc7ee86885ba566adbf5ee206af121da9bf348",
    "n": 1
  },
    "txid": "0a2df0ef5ac5db86869b4e118f45ef72421140635156ef424de907dc1d0165b3",
    "n": 0
  },
    "txid": "0a2df0ef5ac5db86869b4e118f45ef72421140635156ef424de907dc1d0165b3",
    "n": 1
  },
    "txid": "0a3d864593f59085f5b62e47af10769fec4a68ab03a116695c37a33d318cd1ba",
    "n": 0
  },
    "txid": "0a3d864593f59085f5b62e47af10769fec4a68ab03a116695c37a33d318cd1ba",
    "n": 1
  },
    "txid": "0a6099002810dc4065cec3bffa07c876e451b22b9c2700ebd29366846577661e",
    "n": 0
  },
    "txid": "0a6099002810dc4065cec3bffa07c876e451b22b9c2700ebd29366846577661e",
    "n": 1
  },
    "txid": "0a67f3b8210e12c4e4cbed5d9a46a3e07938d2af8dcfb5549c6ac4f873b2bc44",
    "n": 0
  },
    "txid": "0b88115d9645a51d9fa56f84e1d05b927949b933f6159c4eda6f304e4326d192",
    "n": 0
  },
    "txid": "0bd97e3d96405f80d736f292c05ef8d89ca4dc07c5e366e8e72c70fa0c73069f",
    "n": 0
  },
    "txid": "0bd97e3d96405f80d736f292c05ef8d89ca4dc07c5e366e8e72c70fa0c73069f",
    "n": 1
  },
    "txid": "0bf42890cc5957e41a04c88e167babed0857597163892ac53b1c46c6f5ed49e0",
    "n": 0
  },
    "txid": "0bf42890cc5957e41a04c88e167babed0857597163892ac53b1c46c6f5ed49e0",
    "n": 1
  },
    "txid": "0d08120f32d32e9d35c0f793e9c2dec52eb864caa085103056bfe7d813b24ddf",
    "n": 0
  },
    "txid": "0d08120f32d32e9d35c0f793e9c2dec52eb864caa085103056bfe7d813b24ddf",
    "n": 1
  },
    "txid": "0d241b451d17e435e61a196cd275ef0034d1f101307859abafc3539646c85d0c",
    "n": 0
  },
    "txid": "0d241b451d17e435e61a196cd275ef0034d1f101307859abafc3539646c85d0c",
    "n": 1
  },
    "txid": "0d3f317455116bf3b05b0d9f0ab8cdb8ac2aa31b2c131ba38e17322f42ad8b82",
    "n": 0
  },
    "txid": "0d3f317455116bf3b05b0d9f0ab8cdb8ac2aa31b2c131ba38e17322f42ad8b82",
    "n": 1
  },
    "txid": "0dd771ea116c69ac2f42a4809f6207fe302532b963596226a1ee07dbf3ba4a8d",
    "n": 0
  },
    "txid": "0dd771ea116c69ac2f42a4809f6207fe302532b963596226a1ee07dbf3ba4a8d",
    "n": 1
  },
    "txid": "0df13e1ede2d64503dcd75b756a46a13658b91a6cf97465f424fb6e2287c52f9",
    "n": 0
  },
    "txid": "0e2e43e761a0bc371a37f9dc3b0a02e4e6902a373de06d2e4e87e9a7b1e97bcc",
    "n": 0
  },
    "txid": "0eb93ac17ae304f4bd175cc14296fef5acc52c14fa0afd75d9cd8b37a11a4ab2",
    "n": 0
  },
    "txid": "0eb93ac17ae304f4bd175cc14296fef5acc52c14fa0afd75d9cd8b37a11a4ab2",
    "n": 1
  },
    "txid": "0ebde08b36f3e1699b26b7e2b93f4a20d5280b1d419da4c2ec20beab18f22930",
    "n": 0
  },
    "txid": "0ebde08b36f3e1699b26b7e2b93f4a20d5280b1d419da4c2ec20beab18f22930",
    "n": 1
  },
    "txid": "0f036a997354c93f9ca34d70ad0ff5988bd0e28b2d89b1f57d05df37ff57ba5f",
    "n": 0
  },
    "txid": "0f50959e88bc2dd96835f0dee3ccd9ff0832d66b7f3f2fdb99c25ada3e5899bd",
    "n": 0
  },
    "txid": "0f50959e88bc2dd96835f0dee3ccd9ff0832d66b7f3f2fdb99c25ada3e5899bd",
    "n": 1
  },
    "txid": "0f50fde9dbec1fa5418947e426dec21941de384c21dd61a6d5023294c94897f6",
    "n": 0
  },
    "txid": "0f50fde9dbec1fa5418947e426dec21941de384c21dd61a6d5023294c94897f6",
    "n": 1
  },
    "txid": "0fc7311433f8e2931dbdd5aaae15e97e42cc3f474ae539f8f8eddfa032336fc8",
    "n": 0
  },
    "txid": "0fc7311433f8e2931dbdd5aaae15e97e42cc3f474ae539f8f8eddfa032336fc8",
    "n": 1
  },
    "txid": "107757d0e2b6f9613401cc1c50dcd35c0c056c09a817f0549fa85ce60ef89d25",
    "n": 0
  },
    "txid": "1088aebc92c20c31f55a12e6c014360d50c97b2034d3a89e80fd53b43ec840b1",
    "n": 0
  },
    "txid": "108abf02d81486a1c6c33d96436cc0498f39233dee394ad1ad05e7a5e31d3779",
    "n": 0
  },
    "txid": "10a83415a1fd677ec66da06bbeb4bb7fe691326960c2343b0ab4123d6012c86d",
    "n": 0
  },
    "txid": "10a83415a1fd677ec66da06bbeb4bb7fe691326960c2343b0ab4123d6012c86d",
    "n": 1
  },
    "txid": "111214208503954bc40a95382ab3c12e221718a3dd12f8800d607f05f691fab0",
    "n": 0
  },
    "txid": "111214208503954bc40a95382ab3c12e221718a3dd12f8800d607f05f691fab0",
    "n": 1
  },
    "txid": "11c7c35990a2e94f4440a8c9fb5b77de9bf7fc3adcfa35d5bfd3509cc2dbe1ad",
    "n": 0
  },
    "txid": "11f1a21c092236a90c10e0202e1490e6e0336cef2727527a4518419346da0312",
    "n": 0
  },
    "txid": "11f1a21c092236a90c10e0202e1490e6e0336cef2727527a4518419346da0312",
    "n": 1
  },
    "txid": "11f2838ad108074df8b7adabaed73bf8c764ac2a116d525fcc7accfd02ecc38d",
    "n": 0
  },
    "txid": "12049cdd325438cb011787f8f59cd18111209fabbaabfa8f100c35522024f2f3",
    "n": 0
  },
    "txid": "121832beb663b51a7c03aa9a3800b1b74698c19095ffc93e9de97e066ef8f833",
    "n": 0
  },
    "txid": "1253897c64d0d87103f3824cb6e1886c5eb8f5cffbab62554bd4ba04a5b03aff",
    "n": 0
  },
    "txid": "1253897c64d0d87103f3824cb6e1886c5eb8f5cffbab62554bd4ba04a5b03aff",
    "n": 1
  },
    "txid": "12600a57dab7c8d3cedfd5784716a6396eb1e0c1b25c0d09a746fceb9a0ee7fa",
    "n": 0
  },
    "txid": "12cf428509f09983a15c00d443253515d874940d555cc3acf0035c0674ee60a1",
    "n": 0
  },
    "txid": "12cf428509f09983a15c00d443253515d874940d555cc3acf0035c0674ee60a1",
    "n": 1
  },
    "txid": "130bf14fd44a22f4d033dc057b9e20b829211e415f12adafcfbb326303bc92c8",
    "n": 0
  },
    "txid": "130e0295094e83e23c204e3bdd13a6a6a6b07f4bda51ad533200ea9a30a78dde",
    "n": 0
  },
    "txid": "1314219afcbf6f3fb185f4fd52ab03bcea04c0140b591888e2a35a1c5a95f420",
    "n": 0
  },
    "txid": "1314219afcbf6f3fb185f4fd52ab03bcea04c0140b591888e2a35a1c5a95f420",
    "n": 1
  },
    "txid": "13b77e12b54aaff0e45b883bdcc7373fbb010cdb34001ef4e028fbc446ca6144",
    "n": 0
  },
    "txid": "13fa26c0ed5f516c317c76dc32f907bc24cb5b23b9b32babe3b4d2a1f3e038c2",
    "n": 0
  },
    "txid": "13fa26c0ed5f516c317c76dc32f907bc24cb5b23b9b32babe3b4d2a1f3e038c2",
    "n": 1
  },
    "txid": "14084ac4fc5e1abec5da9168e06244785acb55825b6c5bf4342a9ee7aacb2211",
    "n": 0
  },
    "txid": "14084ac4fc5e1abec5da9168e06244785acb55825b6c5bf4342a9ee7aacb2211",
    "n": 1
  },
    "txid": "14d173bd618007c8f96121981d6271f9e1d26a7e224f207991dae6f4d759efad",
    "n": 0
  },
    "txid": "14f775627b5e9b18cbd63a91f0b537649238d5a3654eaf0d9cd01b00e9929838",
    "n": 0
  },
    "txid": "15566bd86e03604a46383d2b65fa619e5eae7ad88c5d88fdd8b80861176df6fa",
    "n": 0
  },
    "txid": "15566bd86e03604a46383d2b65fa619e5eae7ad88c5d88fdd8b80861176df6fa",
    "n": 1
  },
    "txid": "158e1e5e396e99b9e7b9e39853fca437a5dbbd4bf3a1e6d3aa90bed923ef0e99",
    "n": 0
  },
    "txid": "158e1e5e396e99b9e7b9e39853fca437a5dbbd4bf3a1e6d3aa90bed923ef0e99",
    "n": 1
  },
    "txid": "159591f7b062a198221deac1cbfe612458b24a8e91150980eec5d451b91657f7",
    "n": 0
  },
    "txid": "159591f7b062a198221deac1cbfe612458b24a8e91150980eec5d451b91657f7",
    "n": 1
  },
    "txid": "15f6651e62ff25ed50338765e44e948a8baf735de01f99a093b4609bd4cd008f",
    "n": 0
  },
    "txid": "1648b142fe68303c5195a630c2eee0143ff1fa74087db0958ed3a6338253be60",
    "n": 0
  },
    "txid": "166aacbae84f7fdce526de92849c72a9e8d4c863427d67ee1450fe934653d2ac",
    "n": 0
  },
    "txid": "166aacbae84f7fdce526de92849c72a9e8d4c863427d67ee1450fe934653d2ac",
    "n": 1
  },
    "txid": "16d27ac809bb613026f18a3255c941c5cdb14589a02d11fe0b48e845d8312689",
    "n": 0
  },
    "txid": "177829c7de9b480b81927f80ab005cc9e7ba58a10a8d6b5908db95b8e54eac18",
    "n": 1
  },
    "txid": "177829c7de9b480b81927f80ab005cc9e7ba58a10a8d6b5908db95b8e54eac18",
    "n": 2
  },
    "txid": "18665cfb229c4933caf048ce2b95e066bc854596bb81d62c9dabe985e9635cd5",
    "n": 0
  },
    "txid": "19134f4d27a5402ef2b82d96b83f478b17798cfadc323c071dc74ed7ec7165fa",
    "n": 0
  },
    "txid": "19134f4d27a5402ef2b82d96b83f478b17798cfadc323c071dc74ed7ec7165fa",
    "n": 1
  },
    "txid": "196dae0b5880bc0b9015502298adf1a65b0ac2b391c0696530404d644bb127ba",
    "n": 0
  },
    "txid": "197e857cc16314f156b68122695291e0721c440bf2fff5ca0120e47f1da358d1",
    "n": 0
  },
    "txid": "197e857cc16314f156b68122695291e0721c440bf2fff5ca0120e47f1da358d1",
    "n": 1
  },
    "txid": "19923ee0897ba0e3beb4683c2e5df8f956181feb1c49fddf6f6b44f28bb83cf5",
    "n": 0
  },
    "txid": "19923ee0897ba0e3beb4683c2e5df8f956181feb1c49fddf6f6b44f28bb83cf5",
    "n": 1
  },
    "txid": "199b9b2c5b96736c19a13f9f07365d8ec1b4bb56d8c0fa7dab6bd1bc50d8c522",
    "n": 0
  },
    "txid": "199b9b2c5b96736c19a13f9f07365d8ec1b4bb56d8c0fa7dab6bd1bc50d8c522",
    "n": 1
  },
    "txid": "19da31c5c53961c9c29abd76fe8fe2c55e73cf4e4a1936dff8b879bb13844f43",
    "n": 0
  },
    "txid": "19da31c5c53961c9c29abd76fe8fe2c55e73cf4e4a1936dff8b879bb13844f43",
    "n": 1
  },
    "txid": "1a0910c3ca9a01a34706b53318d991bb1bdb1313f120701e9c6d89605c96ee97",
    "n": 0
  },
    "txid": "1a33e5140fac18a334315612940b2cded7418228e24e4712a1a874e05017070a",
    "n": 0
  },
    "txid": "1a57e43844d2670839190c3617f027cc23110404d4c6f5b85ff73fce2e7028b8",
    "n": 0
  },
    "txid": "1a69f50a7f1c197853fc146b3cb1c278f89b1a72aea7c9d1d64b75acd53eb2d7",
    "n": 0
  },
    "txid": "1a69f50a7f1c197853fc146b3cb1c278f89b1a72aea7c9d1d64b75acd53eb2d7",
    "n": 1
  },
    "txid": "1a96a2fb4fe59ae80190e15e87e4eac7c604b998b4d3f78cbffb95d6e4ea671b",
    "n": 0
  },
    "txid": "1a96a2fb4fe59ae80190e15e87e4eac7c604b998b4d3f78cbffb95d6e4ea671b",
    "n": 1
  },
    "txid": "1ae0ac2f6ba92760c36856b1f3dfc01026d75abfdf8c00621bc28a2db2c380e9",
    "n": 0
  },
    "txid": "1ae0ac2f6ba92760c36856b1f3dfc01026d75abfdf8c00621bc28a2db2c380e9",
    "n": 1
  },
    "txid": "1b01e7daaed504b1dab238caa2369fa585c4ce5d22cccba3a5cc39df6a0d780d",
    "n": 0
  },
    "txid": "1b01e7daaed504b1dab238caa2369fa585c4ce5d22cccba3a5cc39df6a0d780d",
    "n": 1
  },
    "txid": "1b0d95efd87a9604d99402b5f2ef58fed33d94aae216b938979883a9639153ef",
    "n": 0
  },
    "txid": "1b0d95efd87a9604d99402b5f2ef58fed33d94aae216b938979883a9639153ef",
    "n": 1
  },
    "txid": "1b2dfb3c8824b5a93c28f63c226675762e1d401dfaa8cbd4380c15f40b8fd44e",
    "n": 0
  },
    "txid": "1b2dfb3c8824b5a93c28f63c226675762e1d401dfaa8cbd4380c15f40b8fd44e",
    "n": 1
  },
    "txid": "1b2e1983481f6c4b9da5460b9169b92031ee6b4d03eaccba246e5bdddef1f3dc",
    "n": 0
  },
    "txid": "1ba5bdde0f31ac1e581aedf6da1229fb6c38176be43382494061f9690cf2869a",
    "n": 0
  },
    "txid": "1ba5bdde0f31ac1e581aedf6da1229fb6c38176be43382494061f9690cf2869a",
    "n": 1
  },
    "txid": "1bf2cfd9cedb058caee02f6c561a3df026f66f1cd3aebea5c131532c35ce8f64",
    "n": 0
  },
    "txid": "1c3ac61aead677c04bee734f29f1bfd896b8edf232c63c717460e7845256e3ed",
    "n": 0
  },
    "txid": "1c3ac61aead677c04bee734f29f1bfd896b8edf232c63c717460e7845256e3ed",
    "n": 1
  },
    "txid": "1c64d62fdbda9b0b6730152e7866576cb09fce1ea3e39cc3f2048f373d51338f",
    "n": 0
  },
    "txid": "1c64d62fdbda9b0b6730152e7866576cb09fce1ea3e39cc3f2048f373d51338f",
    "n": 1
  },
    "txid": "1cb84da323c53cb49294d5e00965d95801c0b28514322130357313770e0ab240",
    "n": 0
  },
    "txid": "1cb84da323c53cb49294d5e00965d95801c0b28514322130357313770e0ab240",
    "n": 1
  },
    "txid": "1cd0c0df697ecce58d7371e255fd452b6040d6ab5dd39575b5a984c332279333",
    "n": 0
  },
    "txid": "1cd0c0df697ecce58d7371e255fd452b6040d6ab5dd39575b5a984c332279333",
    "n": 1
  },
    "txid": "1d0da20ac550fc0dcae078ea8118d7d2d3ee0331e4f2fa1f68a4e3105a26b638",
    "n": 0
  },
    "txid": "1d0da20ac550fc0dcae078ea8118d7d2d3ee0331e4f2fa1f68a4e3105a26b638",
    "n": 1
  },
    "txid": "1d28a9f6a8ff5c4fabf1457f3def15586bf9452fb31fe6ed22c499792ecfe5c6",
    "n": 0
  },
    "txid": "1d28a9f6a8ff5c4fabf1457f3def15586bf9452fb31fe6ed22c499792ecfe5c6",
    "n": 1
  },
    "txid": "1d306a7d07aece5546f594e54eedccfacb27332149e3cc7ecfbbe8c4c4b20f0f",
    "n": 0
  },
    "txid": "1d306a7d07aece5546f594e54eedccfacb27332149e3cc7ecfbbe8c4c4b20f0f",
    "n": 1
  },
    "txid": "1d398e40c5e5ca00fc5e60b35a4eef15c86ee2a1d98bf11b0b3281e956b97482",
    "n": 0
  },
    "txid": "1d398e40c5e5ca00fc5e60b35a4eef15c86ee2a1d98bf11b0b3281e956b97482",
    "n": 1
  },
    "txid": "1e2caee2e2add82506213a6bebe22c0ae9517ed561cc2574f96f6846c3d69990",
    "n": 0
  },
    "txid": "1e4df7992c08783ab9c3252de58ddb58abd74103f03ec00568e066396de4aa45",
    "n": 0
  },
    "txid": "1e4df7992c08783ab9c3252de58ddb58abd74103f03ec00568e066396de4aa45",
    "n": 1
  },
    "txid": "1ed44f23e384722d04836b9f68a848216d419201cf512b3e98e1c92878e87c66",
    "n": 0
  },
    "txid": "1ed44f23e384722d04836b9f68a848216d419201cf512b3e98e1c92878e87c66",
    "n": 1
  },
    "txid": "1f20d7962b019613a16a5fae6c589d58f4dc111e309d16a97e02d1fa373f811d",
    "n": 0
  },
    "txid": "1f619fb622c58ac5eb47ede8aa4d9381e71375c89835f752d7aecca6558f2dee",
    "n": 0
  },
    "txid": "1f619fb622c58ac5eb47ede8aa4d9381e71375c89835f752d7aecca6558f2dee",
    "n": 1
  },
    "txid": "1f788a2449cb7686ab5f87735093b229b4739c138c409c6213a7865304556aa0",
    "n": 0
  },
    "txid": "1f788a2449cb7686ab5f87735093b229b4739c138c409c6213a7865304556aa0",
    "n": 1
  },
    "txid": "203f2fa072dec16b9025453c2bb54695dabdd5a458bd63dd32253862cd248bbe",
    "n": 0
  },
    "txid": "203f2fa072dec16b9025453c2bb54695dabdd5a458bd63dd32253862cd248bbe",
    "n": 1
  },
    "txid": "20f8762ca75f932edd0e922b934ad54be82a6a5cb7a3fdeda6b6fe2af9dedee8",
    "n": 0
  },
    "txid": "217e665294b5f43977f53dd34a030be6f813f9bc2f6c88402c769bab44c10395",
    "n": 0
  },
    "txid": "217e665294b5f43977f53dd34a030be6f813f9bc2f6c88402c769bab44c10395",
    "n": 1
  },
    "txid": "228115a174a51c23b5a7baf6d0de7be7654875486df843a98ee3c3c447992b46",
    "n": 0
  },
    "txid": "228115a174a51c23b5a7baf6d0de7be7654875486df843a98ee3c3c447992b46",
    "n": 1
  },
    "txid": "22b9ad2b0a376c135b9763e4e65ca9a8dbd07492c954046e3e0ec33a6c4b556c",
    "n": 0
  },
    "txid": "22b9ad2b0a376c135b9763e4e65ca9a8dbd07492c954046e3e0ec33a6c4b556c",
    "n": 1
  },
    "txid": "22c759a214d532c0fdce60758adc7dce600f365ae696038a503567333b06abd5",
    "n": 0
  },
    "txid": "22c759a214d532c0fdce60758adc7dce600f365ae696038a503567333b06abd5",
    "n": 1
  },
    "txid": "23486925a2cea21f4a5eef18040e4356174dd316c3d99ea4a7b2a5482febf62e",
    "n": 0
  },
    "txid": "2372cdd7ea5c4491f67988262f68d3f531b130092e67e55f5d9b9dc82bd4d843",
    "n": 0
  },
    "txid": "237d8eb09f2e691fb0c4d8793e1d84ff8407ce543e202a56fe00c462e770291b",
    "n": 0
  },
    "txid": "238c15f6bef55a1a450d94ee7af95cc285a287090efde788a7dd55c95d728c94",
    "n": 1
  },
    "txid": "238c15f6bef55a1a450d94ee7af95cc285a287090efde788a7dd55c95d728c94",
    "n": 2
  },
    "txid": "238f528f048ef8c40636e8bb56f12676b494f79f344677852f5876e5b185d8f7",
    "n": 0
  },
    "txid": "238f528f048ef8c40636e8bb56f12676b494f79f344677852f5876e5b185d8f7",
    "n": 1
  },
    "txid": "24678445b4c24dd0786de6115452bf64f616ad31aa03c51004ac4028b6f1f43c",
    "n": 0
  },
    "txid": "24678445b4c24dd0786de6115452bf64f616ad31aa03c51004ac4028b6f1f43c",
    "n": 1
  },
    "txid": "24a595be809e552319cd5b4f264be3b053fe8c780d843dd81a7b45282ed360bc",
    "n": 0
  },
    "txid": "24a595be809e552319cd5b4f264be3b053fe8c780d843dd81a7b45282ed360bc",
    "n": 1
  },
    "txid": "24ba685f8bd3f4fd806e7f85864b9796ff9a889f2496362791b2101b1777be83",
    "n": 0
  },
    "txid": "24ba685f8bd3f4fd806e7f85864b9796ff9a889f2496362791b2101b1777be83",
    "n": 1
  },
    "txid": "253e1c05d09a9e77b2cc6c8c98315e0d522be2d9b8bbf976c00e0dbb1a6bddab",
    "n": 0
  },
    "txid": "256b0da6517ad9a051202c183fa40823b06c70daafc3c48e6f2103b91706c921",
    "n": 0
  },
    "txid": "256c9146466b57ad90a139cf1589164fa626217ae12b86d0177ca2e1464af060",
    "n": 0
  },
    "txid": "256c9146466b57ad90a139cf1589164fa626217ae12b86d0177ca2e1464af060",
    "n": 1
  },
    "txid": "259c8189b207af99686ee4129b1fd3a3c08163140d048a1eb0aa7ccb56198296",
    "n": 0
  },
    "txid": "25af4a63ad75515616bc7be30c3e318e256292e275b62315d8a77511ea3c4f4c",
    "n": 0
  },
    "txid": "25d2e52bd41a76ac6284b975f72de0e49a78ebe72c7ce9d0141dcf6aea82f3af",
    "n": 0
  },
    "txid": "25d2e52bd41a76ac6284b975f72de0e49a78ebe72c7ce9d0141dcf6aea82f3af",
    "n": 1
  },
    "txid": "25f3ca7699d60bfba5e2c43a8795d5b26c0bdaf08f74f5998de1ea6049695eee",
    "n": 0
  },
    "txid": "25f3ca7699d60bfba5e2c43a8795d5b26c0bdaf08f74f5998de1ea6049695eee",
    "n": 1
  },
    "txid": "25f81c6be419a368abafc8a7e8926f90b579760c06ab26739b6f615c511c631c",
    "n": 0
  },
    "txid": "263ad4802d845502b5e68e8c38166e4b8a529e5d0b1769e9418db8173aed3b8c",
    "n": 0
  },
    "txid": "263ad4802d845502b5e68e8c38166e4b8a529e5d0b1769e9418db8173aed3b8c",
    "n": 1
  },
    "txid": "264f518f51f4d6529c06d5c9aab3b736d9c7af2197c372253be243adaffe1bf6",
    "n": 0
  },
    "txid": "264f518f51f4d6529c06d5c9aab3b736d9c7af2197c372253be243adaffe1bf6",
    "n": 1
  },
    "txid": "26717856eef42334c6c96d2e2c514dd7810fad1862592607767595d24edcfa0e",
    "n": 0
  },
    "txid": "26717856eef42334c6c96d2e2c514dd7810fad1862592607767595d24edcfa0e",
    "n": 1
  },
    "txid": "2694d0c9f34def2f6e1b6b989ae3f6dfd2bde036834cffb2d014e7c3f01e8851",
    "n": 0
  },
    "txid": "2694d0c9f34def2f6e1b6b989ae3f6dfd2bde036834cffb2d014e7c3f01e8851",
    "n": 1
  },
    "txid": "273226384a1f303f94d943e43b58b1a8f845be9894f404ee628a161eb36bc6ba",
    "n": 0
  },
    "txid": "273226384a1f303f94d943e43b58b1a8f845be9894f404ee628a161eb36bc6ba",
    "n": 1
  },
    "txid": "274c7c852ecd9675bfe009111b4d1a32bade381a1144124e8fecc266925cc320",
    "n": 0
  },
    "txid": "274c7c852ecd9675bfe009111b4d1a32bade381a1144124e8fecc266925cc320",
    "n": 1
  },
    "txid": "276adafb859206731fe91f78fccb70bc1c1bb5994e43811748c3a1274044cac8",
    "n": 0
  },
    "txid": "276adafb859206731fe91f78fccb70bc1c1bb5994e43811748c3a1274044cac8",
    "n": 1
  },
    "txid": "281937915e6f100b7cfc375c2628dc65263eff1f95ff7eb90a040db4b09c6d94",
    "n": 0
  },
    "txid": "286e660127a8bacf3b887285ada924447bffc3432cb94cc0d3c00d2fd6e123a2",
    "n": 0
  },
    "txid": "286e660127a8bacf3b887285ada924447bffc3432cb94cc0d3c00d2fd6e123a2",
    "n": 1
  },
    "txid": "28c08b2ad6aa361394cc42e6dcf6d453ca0e1855d58f1d998df4e706bd7afa21",
    "n": 0
  },
    "txid": "28c08b2ad6aa361394cc42e6dcf6d453ca0e1855d58f1d998df4e706bd7afa21",
    "n": 1
  },
    "txid": "29166d34a31a0ccdc42254c0f1533435d5f4e662d16652cc9c6eb2f3639ba8ba",
    "n": 0
  },
    "txid": "29166d34a31a0ccdc42254c0f1533435d5f4e662d16652cc9c6eb2f3639ba8ba",
    "n": 1
  },
    "txid": "29dcde5bdb4f0fe0983d38669ee5ceb9578f994df26c4c5ee0fe4527cc5c0d46",
    "n": 0
  },
    "txid": "29dcde5bdb4f0fe0983d38669ee5ceb9578f994df26c4c5ee0fe4527cc5c0d46",
    "n": 1
  },
    "txid": "29fe4707ddb1cd29a457dcb358a870c99e45af75336c45eae4a89a1a07800612",
    "n": 0
  },
    "txid": "2a295568d66aa2cd06fb2d89089f2616dfbaec10132d7c97f1232cc10891cc79",
    "n": 0
  },
    "txid": "2a7391913dc72ecde8973e4192eb4dbff3ee6d6472185093638f7aeeef78a800",
    "n": 0
  },
    "txid": "2a77be1aaf39825def6c77f447d6767043c5c21578113406b40b5a5b85f86a56",
    "n": 0
  },
    "txid": "2a77be1aaf39825def6c77f447d6767043c5c21578113406b40b5a5b85f86a56",
    "n": 1
  },
    "txid": "2ab0fbebe325d8a178b586523dd669adbc4e89ef95e3e64528625f0d6b5e896f",
    "n": 0
  },
    "txid": "2ae82c8413426bbf0daa707970c01c7a72043f5cfa46d2d954a4c66a939c666a",
    "n": 0
  },
    "txid": "2ae82c8413426bbf0daa707970c01c7a72043f5cfa46d2d954a4c66a939c666a",
    "n": 1
  },
    "txid": "2af91c06d73b7139b333030639cf4ea7b159b56b26aaf4f6ecaf082d37c5f34c",
    "n": 0
  },
    "txid": "2af91c06d73b7139b333030639cf4ea7b159b56b26aaf4f6ecaf082d37c5f34c",
    "n": 1
  },
    "txid": "2b07dabbab647ee8658a3ed4c0e5e5f0a0e2e166985346921d1f674216006b5d",
    "n": 0
  },
    "txid": "2b07dabbab647ee8658a3ed4c0e5e5f0a0e2e166985346921d1f674216006b5d",
    "n": 1
  },
    "txid": "2bd381aaa5dcbea056cea479b1de373cdf4a01a7c89e61bc39ecaceacd0b5ba1",
    "n": 0
  },
    "txid": "2bf190f07a2f8834940d3238182ddae2abde6532681fc9b0d35defa9bd999e14",
    "n": 0
  },
    "txid": "2bf190f07a2f8834940d3238182ddae2abde6532681fc9b0d35defa9bd999e14",
    "n": 1
  },
    "txid": "2bfdb0bd5b52c6abf7fab382b25111756ff308843a4069d5515fa13ab44d4761",
    "n": 0
  },
    "txid": "2bfdb0bd5b52c6abf7fab382b25111756ff308843a4069d5515fa13ab44d4761",
    "n": 1
  },
    "txid": "2c00e9693f85468daabf07f4e7ff36182814a2123baf17225aea584f2ca0830b",
    "n": 0
  },
    "txid": "2c00e9693f85468daabf07f4e7ff36182814a2123baf17225aea584f2ca0830b",
    "n": 1
  },
    "txid": "2c0c08652ecd0378d0adf80208cbb1ce89e8f448dbc50733fe20be6271631313",
    "n": 0
  },
    "txid": "2c0c08652ecd0378d0adf80208cbb1ce89e8f448dbc50733fe20be6271631313",
    "n": 1
  },
    "txid": "2c684582cf3228672baac8db0b35c436f5115fe6d51c73e046667483d58a05e9",
    "n": 0
  },
    "txid": "2c684582cf3228672baac8db0b35c436f5115fe6d51c73e046667483d58a05e9",
    "n": 1
  },
    "txid": "2ce55c8d4dd3862685e3a3d490cc930d9f69e04696fa0febc1a41546066c4cdd",
    "n": 0
  },
    "txid": "2d6fe7120112ec95877e9bb9a6b22b94e926b3f6de31254eb560a05ff17317fd",
    "n": 0
  },
    "txid": "2d6fe7120112ec95877e9bb9a6b22b94e926b3f6de31254eb560a05ff17317fd",
    "n": 1
  },
    "txid": "2e08fd6abc3ef4e6d069d1eeaf301ac638c2a9e2017d2d3e45c793ec753042ba",
    "n": 0
  },
    "txid": "2e08fd6abc3ef4e6d069d1eeaf301ac638c2a9e2017d2d3e45c793ec753042ba",
    "n": 1
  },
    "txid": "2e1108dd8df3acf59d77d23eb557b959e9cc5bf506c8e14079bda9a41b1ae29f",
    "n": 0
  },
    "txid": "2e1108dd8df3acf59d77d23eb557b959e9cc5bf506c8e14079bda9a41b1ae29f",
    "n": 1
  },
    "txid": "2e3b7806b8ab75063c2a86fc0587ab0f8b72e005e809aa826dedfaf28f06e05b",
    "n": 0
  },
    "txid": "2e3b7806b8ab75063c2a86fc0587ab0f8b72e005e809aa826dedfaf28f06e05b",
    "n": 1
  },
    "txid": "2e930e51a46ee8904654e66ecb4067519ca1a59577798b42e4c90f127e6a2305",
    "n": 0
  },
    "txid": "2e9da2ea1fd94e7527d58658c94b684a756e4108218d97c6065a4fb74a423ccc",
    "n": 0
  },
    "txid": "2e9da2ea1fd94e7527d58658c94b684a756e4108218d97c6065a4fb74a423ccc",
    "n": 1
  },
    "txid": "2eed33f1f1524e302765d0504962071e21b2ca7ec2c17b5d3eb2561592bece07",
    "n": 0
  },
    "txid": "2eed33f1f1524e302765d0504962071e21b2ca7ec2c17b5d3eb2561592bece07",
    "n": 1
  },
    "txid": "2f0c506d3a98018195c0d99b51afe33369d82104f3e2cb2ba6a65bd8eb981282",
    "n": 0
  },
    "txid": "2f2c78c8c300e8d31670edc55b7a55d8263dd146a2fcc38313f5ff5072694886",
    "n": 0
  },
    "txid": "2f2c78c8c300e8d31670edc55b7a55d8263dd146a2fcc38313f5ff5072694886",
    "n": 1
  },
    "txid": "2fda819426d12459be8730c8c3e697abb81fdcdef15f74f32d704e9e646f41a8",
    "n": 0
  },
    "txid": "2fda819426d12459be8730c8c3e697abb81fdcdef15f74f32d704e9e646f41a8",
    "n": 1
  },
    "txid": "3034ffa2738687797af85ab0e5f2ec1d6d38fd61babff364611567d02ae687e6",
    "n": 0
  },
    "txid": "3034ffa2738687797af85ab0e5f2ec1d6d38fd61babff364611567d02ae687e6",
    "n": 1
  },
    "txid": "303cdb125293d7f4f0a5a5d2337f0e91e75d4b33a7e27fac40c74555f4ce16a1",
    "n": 0
  },
    "txid": "303cdb125293d7f4f0a5a5d2337f0e91e75d4b33a7e27fac40c74555f4ce16a1",
    "n": 1
  },
    "txid": "305f457b2309c655962d252f42efd960d7e4699ffc7dbcca637e460e98586ea6",
    "n": 0
  },
    "txid": "30a92b814fd10b4c4f9329f474de5b5806f4d5a00217216471f16bfe7f80ac7a",
    "n": 0
  },
    "txid": "30a92b814fd10b4c4f9329f474de5b5806f4d5a00217216471f16bfe7f80ac7a",
    "n": 1
  },
    "txid": "314be7b6d4574fac048e2c97eddd011e809b804da7341676f63a501bf18d2386",
    "n": 0
  },
    "txid": "314be7b6d4574fac048e2c97eddd011e809b804da7341676f63a501bf18d2386",
    "n": 1
  },
    "txid": "31ef92733fb5ea8b0da45258d2aaf67ff255d4f05a5bfe84e0f144dc434c6f50",
    "n": 0
  },
    "txid": "31ef92733fb5ea8b0da45258d2aaf67ff255d4f05a5bfe84e0f144dc434c6f50",
    "n": 1
  },
    "txid": "3210f61ceccec3bde42490c267373ada61ce6ed0f7204ab76681ee966de732c1",
    "n": 0
  },
    "txid": "3210f61ceccec3bde42490c267373ada61ce6ed0f7204ab76681ee966de732c1",
    "n": 1
  },
    "txid": "324dcad13a5cea1ba08cd7a27d4559b7c8f321b61d8b2e04907a7821323819c6",
    "n": 0
  },
    "txid": "324dcad13a5cea1ba08cd7a27d4559b7c8f321b61d8b2e04907a7821323819c6",
    "n": 1
  },
    "txid": "3295926f48ce12a3445e3aa5412087d2a5dae4dee039add0c5a859cb6582b9f2",
    "n": 0
  },
    "txid": "32c8c2f00b864ddaf1887fc2c1029f7a562e3712d2f42022bfd209b99025d4e7",
    "n": 0
  },
    "txid": "32c8c2f00b864ddaf1887fc2c1029f7a562e3712d2f42022bfd209b99025d4e7",
    "n": 1
  },
    "txid": "3302fdd27067f17c81145ebc39d84137216afe371c1c660177496293ce52a70a",
    "n": 0
  },
    "txid": "3302fdd27067f17c81145ebc39d84137216afe371c1c660177496293ce52a70a",
    "n": 1
  },
    "txid": "3310efe747db9bdca25ba6e6fee9233862620956ab82b5188f849fdfb9808eaf",
    "n": 0
  },
    "txid": "3310efe747db9bdca25ba6e6fee9233862620956ab82b5188f849fdfb9808eaf",
    "n": 1
  },
    "txid": "3367dd22a7d180cdc7ce2ad4781b1f9350a17ed252cb030c23e944d9fd67c50e",
    "n": 0
  },
    "txid": "33a5edfe20ddcbc65653047fe029ffdff9a08656c056fe773b2128b4e7240f98",
    "n": 0
  },
    "txid": "33a5edfe20ddcbc65653047fe029ffdff9a08656c056fe773b2128b4e7240f98",
    "n": 1
  },
    "txid": "3423753ded761fb2b353c3cca0868edb6692decfcffcfeef372b70b4b646c9b3",
    "n": 0
  },
    "txid": "3423753ded761fb2b353c3cca0868edb6692decfcffcfeef372b70b4b646c9b3",
    "n": 1
  },
    "txid": "3493e2d113bafcd645a3f0b2b872a44df0d16b1828fa3bf3a0ebc4d4be3fa96e",
    "n": 0
  },
    "txid": "353bc1160164eca3c00974ed637f2df3ef4d628c25d91af9f0c4e0d857053443",
    "n": 0
  },
    "txid": "353bc1160164eca3c00974ed637f2df3ef4d628c25d91af9f0c4e0d857053443",
    "n": 1
  },
    "txid": "353c3efbe42b4179b872e151a53687c3448e91e99e1782993de9ac6e7ac66907",
    "n": 1
  },
    "txid": "353fd3bb12bf0912497131ece5af831f867e076e89539a2ff3324b37b025519a",
    "n": 0
  },
    "txid": "353fd3bb12bf0912497131ece5af831f867e076e89539a2ff3324b37b025519a",
    "n": 1
  },
    "txid": "3551d10ff3ac0c7f7c51f81fcb20a01876778eb316986afb3fbbbf7dce0924ab",
    "n": 0
  },
    "txid": "35758c96296b89ab39013c0c08aff917a3907e5c4b516cf088543460e6d1e0ac",
    "n": 0
  },
    "txid": "35d3f5548b496f115b6a62a0ace40123e1f8ad9618f86710099b0eab801901fd",
    "n": 0
  },
    "txid": "35ea61ffbafdf497a9570e079e9820afb6d57bb9ad7ea4184b7378cbccc92081",
    "n": 0
  },
    "txid": "35ea61ffbafdf497a9570e079e9820afb6d57bb9ad7ea4184b7378cbccc92081",
    "n": 1
  },
    "txid": "35eaf70bd70e6ef92c15a2a056bd1eaff91c310f5156ac45f979fa7c30b80f3b",
    "n": 0
  },
    "txid": "35eaf70bd70e6ef92c15a2a056bd1eaff91c310f5156ac45f979fa7c30b80f3b",
    "n": 1
  },
    "txid": "3728f895d1fcfbcacb98853e5aa92a2e2294817e70fe1b91f2a9e384c2333714",
    "n": 0
  },
    "txid": "3728f895d1fcfbcacb98853e5aa92a2e2294817e70fe1b91f2a9e384c2333714",
    "n": 1
  },
    "txid": "3760fdcefd3aa2c9f44541f1111fd774480a82ed5b5170a08d4fa81c42ca2727",
    "n": 0
  },
    "txid": "37b1fae4fd0e8dd448977a9320ef20707d0d909f3e2257e8b5456ca056e513f3",
    "n": 0
  },
    "txid": "37b5e8f91004a59e577ebb3eda1f055fbb044f849b338dc51e12224b0dc3c2c4",
    "n": 0
  },
    "txid": "38032efcfc820a70bd039f84fde45e3b168d78212005bcf7ea97033871981ff6",
    "n": 0
  },
    "txid": "38032efcfc820a70bd039f84fde45e3b168d78212005bcf7ea97033871981ff6",
    "n": 1
  },
    "txid": "38447dab6074aecf97cc464146691a2c1777b332197b9101c1eaae5d1cd297ce",
    "n": 0
  },
    "txid": "3854c928b2adb416e57d338d5cab5b4ce1a3f47497242cf5bd5df2ea55872fee",
    "n": 0
  },
    "txid": "3854c928b2adb416e57d338d5cab5b4ce1a3f47497242cf5bd5df2ea55872fee",
    "n": 1
  },
    "txid": "3888892374e263be121b40dc008ccd6f0644435632643a7f3f213195bac60887",
    "n": 0
  },
    "txid": "38a4008e0bb6bcf413bfb6a24090ba87ab845634964f5c9462f4109f23badd0a",
    "n": 0
  },
    "txid": "38a4008e0bb6bcf413bfb6a24090ba87ab845634964f5c9462f4109f23badd0a",
    "n": 1
  },
    "txid": "38a831395c02d661a2231e24374f7b40a7953c45200e0832dd90bb9b10950f6b",
    "n": 0
  },
    "txid": "38a831395c02d661a2231e24374f7b40a7953c45200e0832dd90bb9b10950f6b",
    "n": 1
  },
    "txid": "38b776da06f979925b22db7a19e9933092b5029980693a89698081daa8c55c64",
    "n": 0
  },
    "txid": "38b776da06f979925b22db7a19e9933092b5029980693a89698081daa8c55c64",
    "n": 1
  },
    "txid": "38eb88f71c91d5e281b203a170ce46bac91b81f295de889ab7d1d9f4711cb9b1",
    "n": 0
  },
    "txid": "3943bb560d531e4f988ccd47896b3c4dc47fa740cd34fa694a4798c6127f47b8",
    "n": 0
  },
    "txid": "396171b3f42e100fa29a303efb7abf82312384a4e7ee2e51a55b49033f224321",
    "n": 0
  },
    "txid": "396171b3f42e100fa29a303efb7abf82312384a4e7ee2e51a55b49033f224321",
    "n": 1
  },
    "txid": "39762718a9ed6cc48266a48ccb1b0075efcb086487c403deb484e8288fe9652f",
    "n": 0
  },
    "txid": "39b68a2c6b67bc5cca12c43a58070fab7c847852e2bd95370afddccec567bef7",
    "n": 0
  },
    "txid": "39b68a2c6b67bc5cca12c43a58070fab7c847852e2bd95370afddccec567bef7",
    "n": 1
  },
    "txid": "3a27e02a5ed7f9104e08846364eec0254f925d621751fd18f5105eac8ecfc544",
    "n": 0
  },
    "txid": "3a27e02a5ed7f9104e08846364eec0254f925d621751fd18f5105eac8ecfc544",
    "n": 1
  },
    "txid": "3a59c0a7b99030389f13d844554612e4fa0d7c0f6768a2339569708ea7a76475",
    "n": 0
  },
    "txid": "3a85be3170d1505cc7fd4be1f5302e851b5d0a025d87a2367f66a1aa3df0754a",
    "n": 0
  },
    "txid": "3a85be3170d1505cc7fd4be1f5302e851b5d0a025d87a2367f66a1aa3df0754a",
    "n": 1
  },
    "txid": "3b457d2ef1d9529af63b4bd2612f0faa64914b0e51d7a062e72dc26f549b1d59",
    "n": 0
  },
    "txid": "3b55c35db1961e338a837327f3e959798bfd43146c69a4b61d0b8cc24f7c726d",
    "n": 0
  },
    "txid": "3b55c35db1961e338a837327f3e959798bfd43146c69a4b61d0b8cc24f7c726d",
    "n": 1
  },
    "txid": "3b6400e3a8d72b71a9494c8f24a26c4c7644d3828ff6d38c9589fed135b1f9de",
    "n": 0
  },
    "txid": "3b9c7a4fc9eb0cefd3f40be45b8054884d86da1a4358bae15133015a4967ad3b",
    "n": 0
  },
    "txid": "3ba707c1910ae8b86818170baf7306b861c58c6d0cfdc70af7a5e2efd6f5049a",
    "n": 0
  },
    "txid": "3ba707c1910ae8b86818170baf7306b861c58c6d0cfdc70af7a5e2efd6f5049a",
    "n": 1
  },
    "txid": "3baf760020881cc9ed516ec8928f47d241bf075fcb9d0706c15eab79ecf88830",
    "n": 0
  },
    "txid": "3bb4751e54c38a3cca9522ed49341d95b29bb9d8a3aaea7284940fbdf6ecc4e9",
    "n": 1
  },
    "txid": "3bb4751e54c38a3cca9522ed49341d95b29bb9d8a3aaea7284940fbdf6ecc4e9",
    "n": 2
  },
    "txid": "3bcccff7cb1894be9a37ebd93f784cf0efbbc939ed86191033a391eb7088d6a1",
    "n": 0
  },
    "txid": "3bcccff7cb1894be9a37ebd93f784cf0efbbc939ed86191033a391eb7088d6a1",
    "n": 1
  },
    "txid": "3c5d1c9091c8112b121b53fbc8947b6b357241d49667c43ecaa615acc880ea47",
    "n": 0
  },
    "txid": "3c606b6c26dad2d55986604e70b37bd27e4815f757fbb4c92aa03036a7d5a006",
    "n": 0
  },
    "txid": "3c606b6c26dad2d55986604e70b37bd27e4815f757fbb4c92aa03036a7d5a006",
    "n": 1
  },
    "txid": "3d5dae6644616f0afb4c17cad8623d9a242f3cd14380121350686006547fc9a2",
    "n": 0
  },
    "txid": "3d9a3b3e0c90b349644585c3ec06e41b034da7bcff7245d079ef05fb513cdefd",
    "n": 0
  },
    "txid": "3db7dbcedb913c41237515b2c1abe0e69f09e36d33c6c91ea11d2cbe1bc47c05",
    "n": 0
  },
    "txid": "3db7dbcedb913c41237515b2c1abe0e69f09e36d33c6c91ea11d2cbe1bc47c05",
    "n": 1
  },
    "txid": "3df0e0b627247ced549498b67b3525d49d420a97130180980d92cadeec4658f5",
    "n": 0
  },
    "txid": "3df0e0b627247ced549498b67b3525d49d420a97130180980d92cadeec4658f5",
    "n": 1
  },
    "txid": "3e64214b169f6164918ac96da7c2f17599981410993ef2b36b1015453870754f",
    "n": 0
  },
    "txid": "3ed15809c9819ab996f1a1740bd132b127b0bec4e94f3ca0fff606cda3282b15",
    "n": 0
  },
    "txid": "3ed15809c9819ab996f1a1740bd132b127b0bec4e94f3ca0fff606cda3282b15",
    "n": 1
  },
    "txid": "3ed3db178be348fb83ea2a96ced5453460bf35522d78c8c0fb3bff77ff4111af",
    "n": 0
  },
    "txid": "3ed3db178be348fb83ea2a96ced5453460bf35522d78c8c0fb3bff77ff4111af",
    "n": 1
  },
    "txid": "3f4da8b86ac4f1086d7abdba738c821d6b05cc4c4abe5fe941444f6bb6a10f1c",
    "n": 0
  },
    "txid": "3f532b62dc44d542930549dd53c060ae0d5b81510ceb5325b49ef06eb7277a2a",
    "n": 0
  },
    "txid": "3f532b62dc44d542930549dd53c060ae0d5b81510ceb5325b49ef06eb7277a2a",
    "n": 1
  },
    "txid": "3f79af6fd74215200acf22b7fe22071dc14315fd3efed71b976694f4efffc211",
    "n": 0
  },
    "txid": "3fb7ec8cc84adfb889da2972c2fc3ac3107053f312dc6734d987b108ff0a11c1",
    "n": 0
  },
    "txid": "3fe5c9c0df766f5c92051431051022dbbbf7c1f06783f992429ba79214e2c36c",
    "n": 0
  },
    "txid": "3fe5c9c0df766f5c92051431051022dbbbf7c1f06783f992429ba79214e2c36c",
    "n": 1
  },
    "txid": "405f1a268a38ed898618cc3e693192e100bcf59953f931bf80c9c0494ccfefa4",
    "n": 0
  },
    "txid": "405f1a268a38ed898618cc3e693192e100bcf59953f931bf80c9c0494ccfefa4",
    "n": 1
  },
    "txid": "40e83b8e2320fa89b560f42f276374c4431b9f4de625491627e06ef1c813cbfd",
    "n": 0
  },
    "txid": "40e83b8e2320fa89b560f42f276374c4431b9f4de625491627e06ef1c813cbfd",
    "n": 1
  },
    "txid": "40f01268e852fa9479c851a4ad35b73c3ea9c5fd5c874f888b1808121eaaab8e",
    "n": 0
  },
    "txid": "40fdf22559523786d6d90bb20699f70c45f7ba26c97729a47ad33eb713d56211",
    "n": 0
  },
    "txid": "41e08e8641f1ba803b41402902b2606ca158b467f509aca2bbb674b3c70c7715",
    "n": 0
  },
    "txid": "41e08e8641f1ba803b41402902b2606ca158b467f509aca2bbb674b3c70c7715",
    "n": 1
  },
    "txid": "42100de8a02827d7fbddb1dca908ae31b25ddce07b74640e03ce5adacfc84b9a",
    "n": 0
  },
    "txid": "42100de8a02827d7fbddb1dca908ae31b25ddce07b74640e03ce5adacfc84b9a",
    "n": 1
  },
    "txid": "4246278f8f01e48fdb85be9d6b3ef7851385fd40cd135bfff18267f38f276aac",
    "n": 0
  },
    "txid": "425ab0bd4390e9eb23a511c2b7869d3af9d2b6ea6415516caa8dee78f7c2e682",
    "n": 0
  },
    "txid": "425ab0bd4390e9eb23a511c2b7869d3af9d2b6ea6415516caa8dee78f7c2e682",
    "n": 1
  },
    "txid": "42c5caf2a895ba6292be46abce93e6f0e960bca696e0a7f47eaf47961cea0e2e",
    "n": 0
  },
    "txid": "42c5caf2a895ba6292be46abce93e6f0e960bca696e0a7f47eaf47961cea0e2e",
    "n": 1
  },
    "txid": "42ccf80d5b9e0a8e900131bd39b623d7539a61015c4ec18c5adfda0e8cc19db3",
    "n": 0
  },
    "txid": "42fed751a1878f27c8616e6a19e43a79ba824184f2ac9f4027d2b2204277196c",
    "n": 0
  },
    "txid": "42fed751a1878f27c8616e6a19e43a79ba824184f2ac9f4027d2b2204277196c",
    "n": 1
  },
    "txid": "434a02d607e4c2fc7420e3eb7e5d16fb68c871a7c3d7d1240d297ed9e363170a",
    "n": 0
  },
    "txid": "435ab9860930a11eeef78e347bc1c39c66b4fa3fabffba7634c894014a77cc4f",
    "n": 0
  },
    "txid": "435ab9860930a11eeef78e347bc1c39c66b4fa3fabffba7634c894014a77cc4f",
    "n": 1
  },
    "txid": "439759d0e722f730c30fac7983a5e642cafe1343c828ca4248a0d07107d8a0f4",
    "n": 0
  },
    "txid": "439759d0e722f730c30fac7983a5e642cafe1343c828ca4248a0d07107d8a0f4",
    "n": 1
  },
    "txid": "43e50cad7097eb57b3e672fb46dc11215d99ded634fb29abf65068e30919366c",
    "n": 0
  },
    "txid": "43e50cad7097eb57b3e672fb46dc11215d99ded634fb29abf65068e30919366c",
    "n": 1
  },
    "txid": "43ea5c5a5edee112288db368bba3df4d4faff593145ffb28acf94efe8015d258",
    "n": 0
  },
    "txid": "43ea5c5a5edee112288db368bba3df4d4faff593145ffb28acf94efe8015d258",
    "n": 1
  },
    "txid": "43f66ff2029169dc5e00cd8e54cf53f688b69fda8c741f5021d2ea93aaa5992e",
    "n": 0
  },
    "txid": "43f66ff2029169dc5e00cd8e54cf53f688b69fda8c741f5021d2ea93aaa5992e",
    "n": 1
  },
    "txid": "43feb89bf957b2eff5654fd1f1e9f9b72ee48be70d1f16dd0da4d9b6bde02d7f",
    "n": 0
  },
    "txid": "43feb89bf957b2eff5654fd1f1e9f9b72ee48be70d1f16dd0da4d9b6bde02d7f",
    "n": 1
  },
    "txid": "44068ba68efeef1a6605b5ea100feb523733c757b8243b42b874ea4ee9b9d569",
    "n": 0
  },
    "txid": "4433b96cfeee3e2c0984b3dc342fe342ec3a9481deca3c52b69e661a1a5bfc9a",
    "n": 0
  },
    "txid": "4433b96cfeee3e2c0984b3dc342fe342ec3a9481deca3c52b69e661a1a5bfc9a",
    "n": 1
  },
    "txid": "4452bfde6b20f68e5a4d2ded55f69d200d21608e965662268a8ce745002d282a",
    "n": 0
  },
    "txid": "4452bfde6b20f68e5a4d2ded55f69d200d21608e965662268a8ce745002d282a",
    "n": 1
  },
    "txid": "44e5bdf9e8ef7f8c6f21a161e2a34e21ab50cc383d97ba894e3c0d169bd9f45e",
    "n": 0
  },
    "txid": "44e5bdf9e8ef7f8c6f21a161e2a34e21ab50cc383d97ba894e3c0d169bd9f45e",
    "n": 1
  },
    "txid": "44e75cd3d95ef4719f318ba9d5af0a636c2d28dbe9e1c4fba0a842a894627de5",
    "n": 0
  },
    "txid": "44e75cd3d95ef4719f318ba9d5af0a636c2d28dbe9e1c4fba0a842a894627de5",
    "n": 1
  },
    "txid": "45625bbc31e6055a3d7ac9109c415245566be8b7f02e30e6db275183280bda22",
    "n": 0
  },
    "txid": "45625bbc31e6055a3d7ac9109c415245566be8b7f02e30e6db275183280bda22",
    "n": 1
  },
    "txid": "469f132fc523fa6840967a9a7ec7b794cca5fea7f368c7c50552b68c556bf7e5",
    "n": 0
  },
    "txid": "469f132fc523fa6840967a9a7ec7b794cca5fea7f368c7c50552b68c556bf7e5",
    "n": 1
  },
    "txid": "46e6e427d397c1c3e85791c91848aa2e814cb1bc982df40107d863be8ef15672",
    "n": 0
  },
    "txid": "47893a8ba11a2e958c1809525f366afa07f6ebc35b1a88b25410c8dabda2a3b4",
    "n": 0
  },
    "txid": "47d200757556febf055f8caf9f3f1f36fcb7a64c9ef2fb5096b8850a0ed422d7",
    "n": 0
  },
    "txid": "47d200757556febf055f8caf9f3f1f36fcb7a64c9ef2fb5096b8850a0ed422d7",
    "n": 1
  },
    "txid": "47ee069817a05be7694448834b51485d94c59b211b0a78a5960bcf4fb63cb784",
    "n": 0
  },
    "txid": "48176cb0c7ee5e8eb8bdc4ed0fc7099421d24b1bdefda228004360da0c7e2128",
    "n": 0
  },
    "txid": "48176cb0c7ee5e8eb8bdc4ed0fc7099421d24b1bdefda228004360da0c7e2128",
    "n": 1
  },
    "txid": "481f5c7a55e1c54ded35e61fe71c21d72ab0df0f1a303bd8876f35370671ddfd",
    "n": 0
  },
    "txid": "481f5c7a55e1c54ded35e61fe71c21d72ab0df0f1a303bd8876f35370671ddfd",
    "n": 1
  },
    "txid": "483f4fbc09217bbce226e49bd499fff71a04f51caacad559421766ff14022cef",
    "n": 0
  },
    "txid": "4841ba39c65183a86bbed010b79fba504f59dda4bb531b6c2d7aabaaa9de2f3a",
    "n": 0
  },
    "txid": "4841ba39c65183a86bbed010b79fba504f59dda4bb531b6c2d7aabaaa9de2f3a",
    "n": 1
  },
    "txid": "4848331591cadc3f7652c1191232c01264412dd0b3239ac62a7605655201ee38",
    "n": 0
  },
    "txid": "485039c53471026b90a334a6949e8cb8b62d39586219a2f1533f0b274c0a58db",
    "n": 0
  },
    "txid": "491b5a5fffc4aab3546c0b65cad05052fbe2817ea7ad556446315bc6ab74934f",
    "n": 0
  },
    "txid": "4a91fb0549f50ce6cb23c366b7126d9ca2861ddcd45f479e5b49d3fff36ed3c4",
    "n": 0
  },
    "txid": "4ac3621ab50aebcb2943e031ab798f482769f762c586e3cddd3c1342924c2e0c",
    "n": 0
  },
    "txid": "4ac3621ab50aebcb2943e031ab798f482769f762c586e3cddd3c1342924c2e0c",
    "n": 1
  },
    "txid": "4ae3bf1ac3ece330a2559ba0f3ffe8649a3833e8ea0c1929f861674535a3579a",
    "n": 0
  },
    "txid": "4b220399906ac10d91e771e47061b5f9e2808dde07873a014fe8da47a219b923",
    "n": 0
  },
    "txid": "4b220399906ac10d91e771e47061b5f9e2808dde07873a014fe8da47a219b923",
    "n": 1
  },
    "txid": "4c19502fdeb8f9c2b9b2237ec12156b3a351a707dc923e705775a2387ade4ceb",
    "n": 0
  },
    "txid": "4c4c05d8f1088ba48aeefd97f5c099e11809f5bf7a4be38b62acb4bbcbe508b6",
    "n": 0
  },
    "txid": "4c4c05d8f1088ba48aeefd97f5c099e11809f5bf7a4be38b62acb4bbcbe508b6",
    "n": 1
  },
    "txid": "4cb11b9b413941012ebd193225bdef7f6d274069a0086ef3586293dfe801aca2",
    "n": 0
  },
    "txid": "4cddca53263879d2b1e702050c50198b860642b72d83d93a83868d513684cd2e",
    "n": 0
  },
    "txid": "4cddca53263879d2b1e702050c50198b860642b72d83d93a83868d513684cd2e",
    "n": 1
  },
    "txid": "4cfbf7c1eb054602fcd3179383e0bc2c68a7645b5f686d29afb24f9205aae581",
    "n": 0
  },
    "txid": "4d69dee6979eedd85e8982925c0bb97205a1d59f25187a358110d2b0972ff19d",
    "n": 0
  },
    "txid": "4d69dee6979eedd85e8982925c0bb97205a1d59f25187a358110d2b0972ff19d",
    "n": 1
  },
    "txid": "4d849a2595a6b48794b6df37c338b570a439b21add6add10bb2a76f26172ee16",
    "n": 0
  },
    "txid": "4d849a2595a6b48794b6df37c338b570a439b21add6add10bb2a76f26172ee16",
    "n": 1
  },
    "txid": "4da77f6330ff9d4d7a2fc80721c82ff67ed0ac858626417c4729add2491fddb2",
    "n": 0
  },
    "txid": "4dc3341e77b4c6e87c99b0b0a90f1e0a5179eb5daf0f317f2e2436b1e892e8dd",
    "n": 0
  },
    "txid": "4dc3341e77b4c6e87c99b0b0a90f1e0a5179eb5daf0f317f2e2436b1e892e8dd",
    "n": 1
  },
    "txid": "4dc779bdabfcbb4225f65ddef8c58da74e689ecc38490c2ee775880710793eef",
    "n": 1
  },
    "txid": "4e10a192f2753953b93ab702fdd0ba4a3d5e0241ca45f7ba23c5f2d3fbc7d407",
    "n": 0
  },
    "txid": "4e3087f36b432f2df21d385142d78e7cc79132d73294e2834ab68665d755683b",
    "n": 0
  },
    "txid": "4e3087f36b432f2df21d385142d78e7cc79132d73294e2834ab68665d755683b",
    "n": 1
  },
    "txid": "4e375ae141842eab3e18b5e08f3226fa07d24eed680328cf8f1a11632937589f",
    "n": 0
  },
    "txid": "4e375ae141842eab3e18b5e08f3226fa07d24eed680328cf8f1a11632937589f",
    "n": 1
  },
    "txid": "4e7a54153e334d72a4eaa9c945488e560d92849bae16d1430e069d2b9d981049",
    "n": 0
  },
    "txid": "4e8e6a38d5ac76f8c213b42fcf89c8eb96aaace9341e5bebe4ade79e651bba35",
    "n": 0
  },
    "txid": "4e8e6a38d5ac76f8c213b42fcf89c8eb96aaace9341e5bebe4ade79e651bba35",
    "n": 1
  },
    "txid": "4e977ce4e374a81a5973aaa2ac423cd25d9b2289e4b30190ae87404b832e8b8f",
    "n": 0
  },
    "txid": "4f22ff85f0ed6509d179af63d38cfd0dfb1b5505194b8e8ffd9e60802be5e03b",
    "n": 0
  },
    "txid": "4f22ff85f0ed6509d179af63d38cfd0dfb1b5505194b8e8ffd9e60802be5e03b",
    "n": 1
  },
    "txid": "4f7c10e21d1884f5aca7d559baf24c18321ca7d9eb160fb029d5fe515dc7c1a3",
    "n": 0
  },
    "txid": "4f7c10e21d1884f5aca7d559baf24c18321ca7d9eb160fb029d5fe515dc7c1a3",
    "n": 1
  },
    "txid": "4fb601b049196af7f1638c7103db4a2ed67cf12fe9bd2933d230f44356b5ab08",
    "n": 0
  },
    "txid": "4fff0840c662b1d70e17fcc1cc1577bdf29733d5c79b7206cd96a6146eb764bb",
    "n": 0
  },
    "txid": "4fff0840c662b1d70e17fcc1cc1577bdf29733d5c79b7206cd96a6146eb764bb",
    "n": 1
  },
    "txid": "5041a7f4ea272edea8de7ab3d734681a529715c7b9fef656f848e6fe58e05d1a",
    "n": 0
  },
    "txid": "5041a7f4ea272edea8de7ab3d734681a529715c7b9fef656f848e6fe58e05d1a",
    "n": 1
  },
    "txid": "50642d6ff4b7d3755972d0e3bf6f9f2d30592a7dddc215d23965fa7ecb2a8f82",
    "n": 0
  },
    "txid": "50882812dbb6483045e03667309e308541c7560061ebc961f37a34a94e93a3a3",
    "n": 0
  },
    "txid": "508d49cac08f9bba48d86f15a2a6bf5480bf6abc66064828b5f13a03692101d7",
    "n": 0
  },
    "txid": "508d49cac08f9bba48d86f15a2a6bf5480bf6abc66064828b5f13a03692101d7",
    "n": 1
  },
    "txid": "50ab1335d959dfa6e1a9ed3735b00b88db138e1daa8a4dc302fe506124dfc59b",
    "n": 0
  },
    "txid": "50ab1335d959dfa6e1a9ed3735b00b88db138e1daa8a4dc302fe506124dfc59b",
    "n": 1
  },
    "txid": "50d30175c01d5c3d69d29e640762cd3960d153066791b996ddb80b69bc9b4d3a",
    "n": 0
  },
    "txid": "50d30175c01d5c3d69d29e640762cd3960d153066791b996ddb80b69bc9b4d3a",
    "n": 1
  },
    "txid": "50dbbb8df930eabb2434858590c9e6c668bdee04b1f172ce094fb39d1c67653f",
    "n": 0
  },
    "txid": "50dbbb8df930eabb2434858590c9e6c668bdee04b1f172ce094fb39d1c67653f",
    "n": 1
  },
    "txid": "517450cb537fb08fb40e049019d9fcbe94f29a2a0561a70bb2e47eb8de672b76",
    "n": 0
  },
    "txid": "517450cb537fb08fb40e049019d9fcbe94f29a2a0561a70bb2e47eb8de672b76",
    "n": 1
  },
    "txid": "51b1a748f04661a80be181b8ebda97066a89bd7a898454caf0ddc227cf5c56a9",
    "n": 0
  },
    "txid": "51b1a748f04661a80be181b8ebda97066a89bd7a898454caf0ddc227cf5c56a9",
    "n": 1
  },
    "txid": "51f4c79ba77bb02d2c6dadf47b70b1a182113e47b3ee66bbbfd65c783fdc4427",
    "n": 0
  },
    "txid": "51f4c79ba77bb02d2c6dadf47b70b1a182113e47b3ee66bbbfd65c783fdc4427",
    "n": 1
  },
    "txid": "5228184ac758345b49495d93d612e21408577ff2cb2f855b7789baceefdfd559",
    "n": 0
  },
    "txid": "5228184ac758345b49495d93d612e21408577ff2cb2f855b7789baceefdfd559",
    "n": 1
  },
    "txid": "5240857ececcfdbc1ebd19cd6591318461359bab81977a2188d767dfbe1f40dd",
    "n": 0
  },
    "txid": "5276b4d90ee0fe88cf81bd6a10225726b6e216a963fd4cd2921d35f155e754d6",
    "n": 0
  },
    "txid": "52813e1bee7625edded6d0762d102cb7821053ef8d6e5116f8873151d68f5e15",
    "n": 0
  },
    "txid": "52813e1bee7625edded6d0762d102cb7821053ef8d6e5116f8873151d68f5e15",
    "n": 1
  },
    "txid": "529b6a26bf4be72ef946ce455e49e0a5a799da19e18e662b8972239085935004",
    "n": 0
  },
    "txid": "529b6a26bf4be72ef946ce455e49e0a5a799da19e18e662b8972239085935004",
    "n": 1
  },
    "txid": "52a1e12eebf5d75f444f86dd79661b0ea2be081a86f1c9d592c5addadd3fc640",
    "n": 0
  },
    "txid": "52a1e12eebf5d75f444f86dd79661b0ea2be081a86f1c9d592c5addadd3fc640",
    "n": 1
  },
    "txid": "5342c66da4f5e2815988997c9e9d1eb352ee56e879817a3d886ae26dacc0aa72",
    "n": 0
  },
    "txid": "53506911b957884d191b5a3250fca9ebf1dc5d2851b4d833da32c3813669b405",
    "n": 0
  },
    "txid": "5361cd5119cfacf86a9533eacf70bb996770ba074708f271794a1f2a1cfcfdbe",
    "n": 0
  },
    "txid": "537be66a0ec501e3ffbbd0bf0828bebb54b71e840454806e40818726cfca41d4",
    "n": 0
  },
    "txid": "537be66a0ec501e3ffbbd0bf0828bebb54b71e840454806e40818726cfca41d4",
    "n": 1
  },
    "txid": "53f4d04f29f282102441232ab92ac7170bb1ac432553f5be780beda06e142bff",
    "n": 0
  },
    "txid": "542e2fb5cae3e7054dec931bd0309d54e633a508f78c89115c8aaf43094998a8",
    "n": 0
  },
    "txid": "545a1424626a8a44bfeffa80a71534a1ccf6849514f8e97487e9d017ba22db75",
    "n": 0
  },
    "txid": "54612b75bea0281037758f008837567344ed2351d147849b4e724146092047c5",
    "n": 0
  },
    "txid": "54612b75bea0281037758f008837567344ed2351d147849b4e724146092047c5",
    "n": 1
  },
    "txid": "546311dbb2579bf0560f2daed29fc2b8340731b18ab7bf0547523c00d9d179c5",
    "n": 0
  },
    "txid": "546311dbb2579bf0560f2daed29fc2b8340731b18ab7bf0547523c00d9d179c5",
    "n": 1
  },
    "txid": "5540c32978054ad9fa7a96c87c1b9e7aa78526274645031899022b04acfa6af2",
    "n": 1
  },
    "txid": "5540c32978054ad9fa7a96c87c1b9e7aa78526274645031899022b04acfa6af2",
    "n": 2
  },
    "txid": "55a30705d650b26b786298f0c2d28b88ebcb8186e62b964fcf7a090fae88a43b",
    "n": 0
  },
    "txid": "55a30705d650b26b786298f0c2d28b88ebcb8186e62b964fcf7a090fae88a43b",
    "n": 1
  },
    "txid": "55a8378207a9782f4dc9989c0f7c5c11f84c5d712ebd0aee23263179aab60adb",
    "n": 0
  },
    "txid": "55a8378207a9782f4dc9989c0f7c5c11f84c5d712ebd0aee23263179aab60adb",
    "n": 1
  },
    "txid": "55e8cfc66a6ec21831f53b33217ada8b53ddfc1db8056284c74599107271901b",
    "n": 0
  },
    "txid": "55e8cfc66a6ec21831f53b33217ada8b53ddfc1db8056284c74599107271901b",
    "n": 1
  },
    "txid": "5608cd60edf5a8f4ead8e4f50ce223f8deb891e4ef1e149fc46948054d5bed7a",
    "n": 0
  },
    "txid": "5651039f94ac9a496efa5eedab605b757a174b9aafdf64f2f8b35bea71bbe7b6",
    "n": 0
  },
    "txid": "5651039f94ac9a496efa5eedab605b757a174b9aafdf64f2f8b35bea71bbe7b6",
    "n": 1
  },
    "txid": "567c924692cf4d82b9022f1c30fb05402c6c96ac2789ca295886b99b781c796b",
    "n": 0
  },
    "txid": "567c924692cf4d82b9022f1c30fb05402c6c96ac2789ca295886b99b781c796b",
    "n": 1
  },
    "txid": "569dfce553adf9b50fb2d1ba24743ce084e5ffd7ce6340511b9dba1619328080",
    "n": 0
  },
    "txid": "56ffe6bd02b018a997eefb09928d133027059b43e1524242a6cc334a53436db6",
    "n": 0
  },
    "txid": "570339ab5f2ca985468c03ec2693c2e23177bde7f6d8094894deb98c36244aa7",
    "n": 0
  },
    "txid": "570339ab5f2ca985468c03ec2693c2e23177bde7f6d8094894deb98c36244aa7",
    "n": 1
  },
    "txid": "571104d5e24e59875a40f6c6c8d516d7e95eb0c542bb825e746bd03a8958e3ac",
    "n": 0
  },
    "txid": "571104d5e24e59875a40f6c6c8d516d7e95eb0c542bb825e746bd03a8958e3ac",
    "n": 1
  },
    "txid": "573ecad79bd034468108c4ac0be233418b0d77bb33dc455496b31a0f97917b7d",
    "n": 0
  },
    "txid": "573ecad79bd034468108c4ac0be233418b0d77bb33dc455496b31a0f97917b7d",
    "n": 1
  },
    "txid": "574a32dcbb5560d3f37ace8b77f556a26c4d954c8ad7cc6559c64a546bf89aa3",
    "n": 0
  },
    "txid": "57c24941680a641c431ac0f539210f0f51b0ef51a2969f7ad7da9a0e77268a41",
    "n": 0
  },
    "txid": "57d568a775ef279d37322a5c4ae260c9cee6d938445db5f4c07f7888a4ff561b",
    "n": 0
  },
    "txid": "582bd6c31f994bd845215040714329bfe78fe308ceb198730f89713971db3f91",
    "n": 0
  },
    "txid": "582bd6c31f994bd845215040714329bfe78fe308ceb198730f89713971db3f91",
    "n": 1
  },
    "txid": "584079d79b64b16b7012160e0c03dfe5879fa42618d8b4e65d34c11b4427f036",
    "n": 0
  },
    "txid": "584079d79b64b16b7012160e0c03dfe5879fa42618d8b4e65d34c11b4427f036",
    "n": 1
  },
    "txid": "5854bbf06906dbf0dfb31f9bd8a119d759272b68e37c823c6fdd367ee19c8d5d",
    "n": 0
  },
    "txid": "585ba50393aec105273057517e361b7946ba626af7674e5829f83bad80c3438e",
    "n": 0
  },
    "txid": "585f5b22c89a42a3bd38ae8fc4c77759e7ac091c04dccb953ab30da1dfc69a82",
    "n": 0
  },
    "txid": "58be9b9fe0487283f7fbf3c284da12e784ff43f9e0d1f8ea9c8c3bd12f8847b2",
    "n": 0
  },
    "txid": "593ae31619f3b83573aa4f978d6fe685306b708e2a2aa9f9e23c416fd0d30c01",
    "n": 0
  },
    "txid": "593ae31619f3b83573aa4f978d6fe685306b708e2a2aa9f9e23c416fd0d30c01",
    "n": 1
  },
    "txid": "59b03d13ab92475ab541104ef6a0e1432feacbe6497d57c352f69897f33ad510",
    "n": 0
  },
    "txid": "59b03d13ab92475ab541104ef6a0e1432feacbe6497d57c352f69897f33ad510",
    "n": 1
  },
    "txid": "5a1e993558a51a9c2aff820d542c6d980b83d4db7e13a148a32ff507f382870b",
    "n": 0
  },
    "txid": "5a1e993558a51a9c2aff820d542c6d980b83d4db7e13a148a32ff507f382870b",
    "n": 1
  },
    "txid": "5a33e2d61b4e284e81e30b7737a6f98be6399cd9ad42f00fe6698a0d18b315ec",
    "n": 0
  },
    "txid": "5a4867cf77c11836c8ca55de9aaf2c90b6692b89c85c3f5e5c12f264df824a5e",
    "n": 0
  },
    "txid": "5a4867cf77c11836c8ca55de9aaf2c90b6692b89c85c3f5e5c12f264df824a5e",
    "n": 1
  },
    "txid": "5a4f5d25e4f1422b7945432d38bda3ed1a8879b1a77f68dca0b3eb1c5ba1d413",
    "n": 0
  },
    "txid": "5a4f5d25e4f1422b7945432d38bda3ed1a8879b1a77f68dca0b3eb1c5ba1d413",
    "n": 1
  },
    "txid": "5aac64cdcdf10d96ea74881408c1f8c9047e5509b46bf56235929d03d2499d20",
    "n": 0
  },
    "txid": "5aac64cdcdf10d96ea74881408c1f8c9047e5509b46bf56235929d03d2499d20",
    "n": 1
  },
    "txid": "5ac9cb846292705dd5bdf21d8eed87e906f5c7b6b808d38eb64145bd50e2560a",
    "n": 0
  },
    "txid": "5afee9e834a8155e073033fcecd79632bc57bb11d268fa7e4bbbde86e2806f3f",
    "n": 0
  },
    "txid": "5b3427239eeaf56f7c962ca752a4fee083e58f33c9f44e0a8ed1a95f0badd0f6",
    "n": 0
  },
    "txid": "5b3e3f38abb481d8281fee5edeca88dc225de9f51f562f02d41798bc0db62c89",
    "n": 0
  },
    "txid": "5b3e3f38abb481d8281fee5edeca88dc225de9f51f562f02d41798bc0db62c89",
    "n": 1
  },
    "txid": "5bb58db2b176e4fb7b499e3746f15dcffb847303e1f455ccc56e83148750bc7b",
    "n": 0
  },
    "txid": "5c491c16fdaad031a1217cfc4252298e8bd7fa96a08dbc6507bbef3846ceda2b",
    "n": 0
  },
    "txid": "5c491c16fdaad031a1217cfc4252298e8bd7fa96a08dbc6507bbef3846ceda2b",
    "n": 1
  },
    "txid": "5d5ebdddbf76a652265050383e6c7a613b1ce41a0e50d1cd6aae55dfd3c950b4",
    "n": 0
  },
    "txid": "5d85f853a5e817c96725345900b80984af463be8f052bbe982e84ba5a50f0c7e",
    "n": 1
  },
    "txid": "5db3d4cd885c2b28cf68bd7c32309f5281111842722333ed4cf6ecfbe7c000fd",
    "n": 0
  },
    "txid": "5f3731d419c42e2be8f561fbbebead2ed9b66c5f413d399688b5e09164f9d377",
    "n": 0
  },
    "txid": "5f801292e023ed5f0705267498e289881e97371676dd06d695e05adf69adff33",
    "n": 0
  },
    "txid": "5fcbb13db805876800d2a23199a48cb675387bf1e4d8c52e3d1aab4f6e511a0c",
    "n": 0
  },
    "txid": "5fcbb13db805876800d2a23199a48cb675387bf1e4d8c52e3d1aab4f6e511a0c",
    "n": 1
  },
    "txid": "5fd9ca4b9a4fad91713046520ea53d45a63abb01731e29b763026ee19ae5c38d",
    "n": 0
  },
    "txid": "5fd9ca4b9a4fad91713046520ea53d45a63abb01731e29b763026ee19ae5c38d",
    "n": 1
  },
    "txid": "5ffea7afa62cf8c69597ad8a75b9c61fc188432800b52b1c43c4d02fd0fd0f0f",
    "n": 0
  },
    "txid": "5ffea7afa62cf8c69597ad8a75b9c61fc188432800b52b1c43c4d02fd0fd0f0f",
    "n": 1
  },
    "txid": "6061c3730066be56959952afab7b99a6216a0f7322d51cde70e2a30c007ef67c",
    "n": 0
  },
    "txid": "608714b28727941bba1c55231a3c285103bc7292104f4331bae8d2773dd88f4b",
    "n": 0
  },
    "txid": "608714b28727941bba1c55231a3c285103bc7292104f4331bae8d2773dd88f4b",
    "n": 1
  },
    "txid": "610af482b729b031cd82a9926a8cf28c61388cbed07112a7eb329c7465ca217a",
    "n": 0
  },
    "txid": "611ac48a86e3b3f0cdaa6d5ea173d7525bdd3dfa6ff743760cf52948e41998a9",
    "n": 0
  },
    "txid": "615fb586cd822be3ef426fdcb05cc5b32adcc3544d213f731310e532a9290bda",
    "n": 0
  },
    "txid": "6183a2611361c3a66d5bd1b14cc0123fb34825bd9693e7335abfea3a03b9e866",
    "n": 0
  },
    "txid": "6183a2611361c3a66d5bd1b14cc0123fb34825bd9693e7335abfea3a03b9e866",
    "n": 1
  },
    "txid": "6216b98bbc54eb3a08052cba9e0c79ba61eb9dc309881c0267fc0702b1ae1915",
    "n": 0
  },
    "txid": "6216b98bbc54eb3a08052cba9e0c79ba61eb9dc309881c0267fc0702b1ae1915",
    "n": 1
  },
    "txid": "62bde2a6c8c26ddd795450a6bea76923b70b5a4bb647610bea5ac7f2059463e0",
    "n": 1
  },
    "txid": "62bde2a6c8c26ddd795450a6bea76923b70b5a4bb647610bea5ac7f2059463e0",
    "n": 2
  },
    "txid": "630f774d6dbd622386ca98be314959563ccba07b90bbb285c8eb0fcaf7817b65",
    "n": 0
  },
    "txid": "632c060a82be441a339bcd671468c63ec6498b46bbe589b31985d291ae92e397",
    "n": 0
  },
    "txid": "636b44b9408a667f06885d3150e9c6f41ef1f973d3c151564fcfb2f38b3316f8",
    "n": 0
  },
    "txid": "63a8fbbb623064265d84f1567500aef8a0233a0797cd09cefd8c2914a499334f",
    "n": 0
  },
    "txid": "63a9619c62d77632c577a7936be5be2f4db9fb970a9301920b5bea3ec154e0a5",
    "n": 0
  },
    "txid": "63ec73d20eca16117b5cf831e61939be71c4df794f8a78bd47bc9ac2c588c815",
    "n": 0
  },
    "txid": "64ab1a87c00292c80c265847e29128ad5ac695b06c1cb7b05871e18b8eaefafc",
    "n": 0
  },
    "txid": "64ab1a87c00292c80c265847e29128ad5ac695b06c1cb7b05871e18b8eaefafc",
    "n": 1
  },
    "txid": "6512f784abacb9a7e65a9e0289d24ad8b699f6075b18f68d8c1559adc0343a0c",
    "n": 0
  },
    "txid": "6512f784abacb9a7e65a9e0289d24ad8b699f6075b18f68d8c1559adc0343a0c",
    "n": 1
  },
    "txid": "65208ba1183e8900dd553e8798884662d789c15c793fbb9d154d5f46c07eec08",
    "n": 0
  },
    "txid": "65208ba1183e8900dd553e8798884662d789c15c793fbb9d154d5f46c07eec08",
    "n": 1
  },
    "txid": "652e644f0428dd0e0448eaeefd6b4b33fe65d43c3f4ae8f36e363c0d25e42e7c",
    "n": 0
  },
    "txid": "652e885b739a914d64bba6b4fd4a42b0398983c5a1e578d52ce6b4ebec84b51c",
    "n": 0
  },
    "txid": "652e885b739a914d64bba6b4fd4a42b0398983c5a1e578d52ce6b4ebec84b51c",
    "n": 1
  },
    "txid": "65901aac5b76337c1a39e1489d040b93a4d3a49373ced6c6524cd61d69dd2877",
    "n": 0
  },
    "txid": "65901aac5b76337c1a39e1489d040b93a4d3a49373ced6c6524cd61d69dd2877",
    "n": 1
  },
    "txid": "6637bf10326df2b05eed0ef1ff96147574c2f9f20d6ebc5664bf65a3de3c6654",
    "n": 0
  },
    "txid": "66613cf7746aa26577019a96ab35dfb0d15a593188c9a4a517cf815fb0752ed2",
    "n": 0
  },
    "txid": "66613cf7746aa26577019a96ab35dfb0d15a593188c9a4a517cf815fb0752ed2",
    "n": 1
  },
    "txid": "6664a1611fac6bbd921d40da4be788f3fd6ab7af6ab48f03594f52022c810a74",
    "n": 0
  },
    "txid": "6664a1611fac6bbd921d40da4be788f3fd6ab7af6ab48f03594f52022c810a74",
    "n": 1
  },
    "txid": "66811c923a7a8a16672d663507fd61f66962ebc64e2bd33955c9749751ae36c9",
    "n": 0
  },
    "txid": "66a22776a87aba2796ddb34e71a64cca2d27ca9f83cd2a5ebf40e1d5f391c4d6",
    "n": 0
  },
    "txid": "67057f1e20dcf3d804408fae0807109c7270d7d3ef53e0482007058da67c7f5b",
    "n": 0
  },
    "txid": "67057f1e20dcf3d804408fae0807109c7270d7d3ef53e0482007058da67c7f5b",
    "n": 1
  },
    "txid": "6722c37c865bdd8219c74eed434504e9c8cc20c324eccd809fbf038f56ec7b6f",
    "n": 0
  },
    "txid": "672f48a29149c12ec613a55dd714fc3b9ffc08a1d3a503d97e8f51caed3d17e3",
    "n": 0
  },
    "txid": "672f48a29149c12ec613a55dd714fc3b9ffc08a1d3a503d97e8f51caed3d17e3",
    "n": 1
  },
    "txid": "67371af05b63a2867b068f7f9137c9b5ecf7faff1a62333ac09d733fd4e7f5d1",
    "n": 0
  },
    "txid": "67371af05b63a2867b068f7f9137c9b5ecf7faff1a62333ac09d733fd4e7f5d1",
    "n": 1
  },
    "txid": "679c42133f006600be6c1d5ff941abdb3237e5c0dca61db2acbc933f3d81c562",
    "n": 0
  },
    "txid": "67c0f1837506419f823febab55479c267ff460668246c916bd8de5bd6fb103b6",
    "n": 0
  },
    "txid": "6837b82c53dc6a70bef2b8226295fd58fc2a9f5d73b4509843ff493f84d90ff9",
    "n": 0
  },
    "txid": "6837b82c53dc6a70bef2b8226295fd58fc2a9f5d73b4509843ff493f84d90ff9",
    "n": 1
  },
    "txid": "684f636d61329dadeddc41188b68e03a5b2eb9df29ce2b5a0a869106140d3fe1",
    "n": 0
  },
    "txid": "684f636d61329dadeddc41188b68e03a5b2eb9df29ce2b5a0a869106140d3fe1",
    "n": 1
  },
    "txid": "687da84d0fb5f9990cfc3cb692fd21cdf9963a6414fcdf03a4f42a0fc5287703",
    "n": 0
  },
    "txid": "6896aad77d808edcee14d2999cf1024b9d7076e234302f86f40e388d6e3a1131",
    "n": 0
  },
    "txid": "6896aad77d808edcee14d2999cf1024b9d7076e234302f86f40e388d6e3a1131",
    "n": 1
  },
    "txid": "68a4bcc0d11cbfd9bfa099585e2b2243a125156654fefb836743e76b2a1cb83f",
    "n": 0
  },
    "txid": "68a4bcc0d11cbfd9bfa099585e2b2243a125156654fefb836743e76b2a1cb83f",
    "n": 1
  },
    "txid": "68f0ef9b2945ff55a341691618a780a02d2f9604f1edf010fcb6679b831577db",
    "n": 0
  },
    "txid": "68f0ef9b2945ff55a341691618a780a02d2f9604f1edf010fcb6679b831577db",
    "n": 1
  },
    "txid": "691f6578158f99655720073b4e68a4ae89718e793df1d6609bce76da09c90df3",
    "n": 0
  },
    "txid": "691f6578158f99655720073b4e68a4ae89718e793df1d6609bce76da09c90df3",
    "n": 1
  },
    "txid": "692b9a63a3fb0a0e5c0ad47e6f722c74bade8369451b12fc686375ab06f40cc5",
    "n": 0
  },
    "txid": "692b9a63a3fb0a0e5c0ad47e6f722c74bade8369451b12fc686375ab06f40cc5",
    "n": 1
  },
    "txid": "692e1d1ba0486db815c8fddf8fed85d4ea600259dc81d3229772fe57a85317a7",
    "n": 0
  },
    "txid": "692e1d1ba0486db815c8fddf8fed85d4ea600259dc81d3229772fe57a85317a7",
    "n": 1
  },
    "txid": "6968d05d597f83425c9eb8c9427df5ce95d933089198f04eb6b24a0e3e7edaae",
    "n": 0
  },
    "txid": "6968d05d597f83425c9eb8c9427df5ce95d933089198f04eb6b24a0e3e7edaae",
    "n": 1
  },
    "txid": "6a4d689d480e2a2310a53e87dc7d0a0adb327bd34dbb06f46a85ea82ffa9b336",
    "n": 0
  },
    "txid": "6a4d689d480e2a2310a53e87dc7d0a0adb327bd34dbb06f46a85ea82ffa9b336",
    "n": 1
  },
    "txid": "6af9f6d34fd89ee0a87ecda011c4eaebcb1c78798604d65b4e57106f2ac165e3",
    "n": 0
  },
    "txid": "6af9f6d34fd89ee0a87ecda011c4eaebcb1c78798604d65b4e57106f2ac165e3",
    "n": 1
  },
    "txid": "6b37c84b18d7ae48cb9b4774ac7ecd25a0bbf87a98c02341ba482b9293379ae3",
    "n": 0
  },
    "txid": "6b532339b025eba1831f5319e1384dd56d8491aa3708ec83eda3acc166d0796d",
    "n": 0
  },
    "txid": "6b532339b025eba1831f5319e1384dd56d8491aa3708ec83eda3acc166d0796d",
    "n": 1
  },
    "txid": "6b95665dd506bda092c19691a5cc87f4e753de32c997cd4409f218fd64c3298c",
    "n": 0
  },
    "txid": "6b95665dd506bda092c19691a5cc87f4e753de32c997cd4409f218fd64c3298c",
    "n": 1
  },
    "txid": "6bd6034d5e222fa4af3cbd8587b05e018edae111a3585ffe0eeb2f0ee1dac669",
    "n": 0
  },
    "txid": "6bd856f458896f35a369d08326f1ce87108da375eea930c13cfb6fed6284f0c8",
    "n": 0
  },
    "txid": "6bd856f458896f35a369d08326f1ce87108da375eea930c13cfb6fed6284f0c8",
    "n": 1
  },
    "txid": "6bdf9741511cf965136096e88b9606c799249d59de9d711814d5ae645676ae00",
    "n": 0
  },
    "txid": "6bdf9741511cf965136096e88b9606c799249d59de9d711814d5ae645676ae00",
    "n": 1
  },
    "txid": "6be1dec83b4c2ff4a0f9a62983fbcd6e7e78e1993c9ed6e77fec7fa8e227f65d",
    "n": 0
  },
    "txid": "6be1dec83b4c2ff4a0f9a62983fbcd6e7e78e1993c9ed6e77fec7fa8e227f65d",
    "n": 1
  },
    "txid": "6cd971e3c5d9b41730ba29f25f1a64c5544ce8302550688a3c890ebcd62c8afa",
    "n": 0
  },
    "txid": "6cd971e3c5d9b41730ba29f25f1a64c5544ce8302550688a3c890ebcd62c8afa",
    "n": 1
  },
    "txid": "6cf06800ecf05cfe0c2b30f7332c0f5759106951ba418935a62ba1667669891b",
    "n": 0
  },
    "txid": "6cf06800ecf05cfe0c2b30f7332c0f5759106951ba418935a62ba1667669891b",
    "n": 1
  },
    "txid": "6d18d0129196db41ac9bd4bfa133be6df87869b1d9335219a751ae35a9f805cf",
    "n": 0
  },
    "txid": "6d18d0129196db41ac9bd4bfa133be6df87869b1d9335219a751ae35a9f805cf",
    "n": 1
  },
    "txid": "6ea93292703185c9a7bd6aa08a5ae909c6ca316441a356426fef1d53fd18bf07",
    "n": 0
  },
    "txid": "6eadffe19c6765d6ceaf3699dcdadb6a032eedd3678f79555aed2255751a86cf",
    "n": 0
  },
    "txid": "6eadffe19c6765d6ceaf3699dcdadb6a032eedd3678f79555aed2255751a86cf",
    "n": 1
  },
    "txid": "6ec9aa04ef693737a7ceb5681791db07b8f40b93a5ca10c1867eb71ac8242878",
    "n": 0
  },
    "txid": "6ec9aa04ef693737a7ceb5681791db07b8f40b93a5ca10c1867eb71ac8242878",
    "n": 1
  },
    "txid": "6ecb01e9960aaa6101a8da56dc25f87beb4f1fa945ca5f4cf5245e710ded845c",
    "n": 0
  },
    "txid": "6ecb01e9960aaa6101a8da56dc25f87beb4f1fa945ca5f4cf5245e710ded845c",
    "n": 1
  },
    "txid": "6ecc45242878169fd1c9bfbc199f5c5c53f5c2c6daae99dbe0395a1f5ef70d3b",
    "n": 0
  },
    "txid": "6f649b96cab5b1e6e117c3072d5aac8ed27742deef527ec6c898135ad354da81",
    "n": 0
  },
    "txid": "6f649b96cab5b1e6e117c3072d5aac8ed27742deef527ec6c898135ad354da81",
    "n": 1
  },
    "txid": "6f6d4686822e9ceb7618c9e347f7869699faedfab2eeab01abb978bb429cf868",
    "n": 0
  },
    "txid": "6fc05c15e0da3aced31e5bcf5c8a37504e19ca84575384c15aa23dad8d4f864b",
    "n": 0
  },
    "txid": "702a6cb8e2109cb40c69fb83e9dcc4a929ea47682ebccf0845c48dbee35cf6b3",
    "n": 0
  },
    "txid": "702de787b5251cb0981e5276e509302afa4a96259529aaf8f18536caf7d490be",
    "n": 0
  },
    "txid": "708a02402e6ad00548ffcbf4b50777f73863a61f3781371c105823fb5f312e81",
    "n": 0
  },
    "txid": "708a02402e6ad00548ffcbf4b50777f73863a61f3781371c105823fb5f312e81",
    "n": 1
  },
    "txid": "7105ee48abbcdf5c344976c5215babdaa6b4f39324ac5b85dfeec01e6d7742c0",
    "n": 0
  },
    "txid": "7105ee48abbcdf5c344976c5215babdaa6b4f39324ac5b85dfeec01e6d7742c0",
    "n": 1
  },
    "txid": "719278b368e3aaa1e714d35f06a34d52c227ce2ffd92aa6cbba485ecd16e99a3",
    "n": 0
  },
    "txid": "719278b368e3aaa1e714d35f06a34d52c227ce2ffd92aa6cbba485ecd16e99a3",
    "n": 1
  },
    "txid": "71978ddfcb8190632b260cbbd2001f8160fc1be8fc2d91cce30759636b88daa8",
    "n": 0
  },
    "txid": "71df05ace2283a3add7767b37072f7be070b21068243b288f5f6f82f6c81b45c",
    "n": 0
  },
    "txid": "71df05ace2283a3add7767b37072f7be070b21068243b288f5f6f82f6c81b45c",
    "n": 1
  },
    "txid": "72fbc333a43cabac8796a0d447ccfa960ede098d3c954e865e53d8146da1a99f",
    "n": 0
  },
    "txid": "72fbc333a43cabac8796a0d447ccfa960ede098d3c954e865e53d8146da1a99f",
    "n": 1
  },
    "txid": "73b0bebcaa46a0bcdf134390b405925f9092afc82a62c744502e628ab773b30d",
    "n": 0
  },
    "txid": "73b0bebcaa46a0bcdf134390b405925f9092afc82a62c744502e628ab773b30d",
    "n": 1
  },
    "txid": "73bbafc7cdd484672a47dc142696c7d57ebe15f7a68f8809c14bc5f33eac31af",
    "n": 0
  },
    "txid": "73f0180ef587718635e0d81a54e7ae7af5827ebf3d6691f5744a128d3879b93a",
    "n": 0
  },
    "txid": "74029b878f32196e774053bb081e233ef1ecc4c27b558952e858e0221b64881b",
    "n": 0
  },
    "txid": "7412d9706651766616e576c6391cb2e4a3146de3aee27ef849b3c455ad1caa63",
    "n": 0
  },
    "txid": "7412d9706651766616e576c6391cb2e4a3146de3aee27ef849b3c455ad1caa63",
    "n": 1
  },
    "txid": "7478a7bfd7df747db30c2b2df75a67b44fa8cb80cd196174dbe00b1b58346e54",
    "n": 0
  },
    "txid": "7478a7bfd7df747db30c2b2df75a67b44fa8cb80cd196174dbe00b1b58346e54",
    "n": 1
  },
    "txid": "750accc52c659986e304cb87f95d4f63a39da24544980b43a9184eb9d9bd5255",
    "n": 0
  },
    "txid": "750accc52c659986e304cb87f95d4f63a39da24544980b43a9184eb9d9bd5255",
    "n": 1
  },
    "txid": "7537bf02ea43559f17d191011679d6dc210169b7f269f5f702940548ba718b1b",
    "n": 0
  },
    "txid": "7537bf02ea43559f17d191011679d6dc210169b7f269f5f702940548ba718b1b",
    "n": 1
  },
    "txid": "75d313b10840414efa36df21d4f961114be6a8c74953a7f4fcc3241d11220920",
    "n": 0
  },
    "txid": "75d313b10840414efa36df21d4f961114be6a8c74953a7f4fcc3241d11220920",
    "n": 1
  },
    "txid": "75dd7331746540b84bfcf57113a656cef26867634c59a3352c77874fd90b6a31",
    "n": 0
  },
    "txid": "75dd7331746540b84bfcf57113a656cef26867634c59a3352c77874fd90b6a31",
    "n": 1
  },
    "txid": "75fdd94eedb1a88d792982fcdb7f3e6d99ca88138920960ae99adb4fb77625a7",
    "n": 0
  },
    "txid": "75fdd94eedb1a88d792982fcdb7f3e6d99ca88138920960ae99adb4fb77625a7",
    "n": 1
  },
    "txid": "760f2e55bf8f853764bb6aaa045c646175b7b6b8ac9e87f000588b0352d380dc",
    "n": 0
  },
    "txid": "7649b82eb6b19b3024bccb5a546704f7a0b7107d591eed36a2bc43e52e622d76",
    "n": 0
  },
    "txid": "76855db74eaad3d0c073c15f4598e4e95dfbc21afecfe21f9ee479ef8e13e9c2",
    "n": 0
  },
    "txid": "76855db74eaad3d0c073c15f4598e4e95dfbc21afecfe21f9ee479ef8e13e9c2",
    "n": 1
  },
    "txid": "769973bbb28fb4e8f7fcd7b78d4f09723c0f6f58b3c88d7b05d5d9cecf1eb93d",
    "n": 0
  },
    "txid": "769973bbb28fb4e8f7fcd7b78d4f09723c0f6f58b3c88d7b05d5d9cecf1eb93d",
    "n": 1
  },
    "txid": "769b731d16e5934147dca77e3533b6490d1947c9889a5d67cc6671b636eab67a",
    "n": 0
  },
    "txid": "769b731d16e5934147dca77e3533b6490d1947c9889a5d67cc6671b636eab67a",
    "n": 1
  },
    "txid": "76c42080e52f8167d1d50a4e8fcc95c49afa8d4769fe7637ed4848f3f9cf9806",
    "n": 0
  },
    "txid": "76c42080e52f8167d1d50a4e8fcc95c49afa8d4769fe7637ed4848f3f9cf9806",
    "n": 1
  },
    "txid": "76ec2d1610f5d7a458583c3dde10eb8a7dbfaaed52873268a6a6011bd45616a2",
    "n": 0
  },
    "txid": "76ec2d1610f5d7a458583c3dde10eb8a7dbfaaed52873268a6a6011bd45616a2",
    "n": 1
  },
    "txid": "77150aa1e37a625e4b52fdf5c208687d559199442e920ceedab15f51149823df",
    "n": 0
  },
    "txid": "77797cb9c641059209b2060a35decbfd314e6075a563efcd68a39c9059a29c72",
    "n": 0
  },
    "txid": "7785f0edd6b775f4e58ae168c579f66edfb6c23dbc938a9b8bd66c5ce8b85cef",
    "n": 0
  },
    "txid": "7785f0edd6b775f4e58ae168c579f66edfb6c23dbc938a9b8bd66c5ce8b85cef",
    "n": 1
  },
    "txid": "78479bf14fffef4e9dcfe3356e695beebbcee953cd507c95b9e046b140d64a24",
    "n": 0
  },
    "txid": "78479bf14fffef4e9dcfe3356e695beebbcee953cd507c95b9e046b140d64a24",
    "n": 1
  },
    "txid": "786cb4c80da17cad6d6a39c6658accf08dd173da2a2ea18fa7489e6fb788922d",
    "n": 0
  },
    "txid": "786cb4c80da17cad6d6a39c6658accf08dd173da2a2ea18fa7489e6fb788922d",
    "n": 1
  },
    "txid": "7898c406060efcd78fb246cb56ecba7d9dcf59605b4f479638e783455c4e2015",
    "n": 0
  },
    "txid": "7898c406060efcd78fb246cb56ecba7d9dcf59605b4f479638e783455c4e2015",
    "n": 1
  },
    "txid": "78a152ba8b6331bb710ed263b4af90a08c9d74df4ca9b868c7c03f0ee475c6a8",
    "n": 0
  },
    "txid": "78a152ba8b6331bb710ed263b4af90a08c9d74df4ca9b868c7c03f0ee475c6a8",
    "n": 1
  },
    "txid": "797786296a0c7b4ece42f473fa1d081240b1add0cb9d8d58502328a1e50afd4a",
    "n": 0
  },
    "txid": "797786296a0c7b4ece42f473fa1d081240b1add0cb9d8d58502328a1e50afd4a",
    "n": 1
  },
    "txid": "797d8aa18719be9f08b698accdd97171875ce6a5547d85703e49844827790784",
    "n": 0
  },
    "txid": "797d8aa18719be9f08b698accdd97171875ce6a5547d85703e49844827790784",
    "n": 1
  },
    "txid": "7a51693996f04de3ea8e1a6b3b722d7b169a01d1aec51c033e5efbdeb4442147",
    "n": 0
  },
    "txid": "7a51693996f04de3ea8e1a6b3b722d7b169a01d1aec51c033e5efbdeb4442147",
    "n": 1
  },
    "txid": "7b17e7fde99ceb7f5b4db0cd492353c06fce1d49f162f937113e7c0b9cfe8ed1",
    "n": 0
  },
    "txid": "7b17e7fde99ceb7f5b4db0cd492353c06fce1d49f162f937113e7c0b9cfe8ed1",
    "n": 1
  },
    "txid": "7b6dc7723982e7594776d445b60c99c7d133c9e71c1667bec6d85dc04cb1f5dd",
    "n": 0
  },
    "txid": "7b6dc7723982e7594776d445b60c99c7d133c9e71c1667bec6d85dc04cb1f5dd",
    "n": 1
  },
    "txid": "7b9e84c4b06f2493e417bba3158ee3ebe7fc8982a80fbfb3340bdefe3f1272e8",
    "n": 0
  },
    "txid": "7b9e84c4b06f2493e417bba3158ee3ebe7fc8982a80fbfb3340bdefe3f1272e8",
    "n": 1
  },
    "txid": "7bd34101e21e676796eeeb27ff54cce2ff35ddc9a762a82c211515f82d97e92e",
    "n": 0
  },
    "txid": "7bd34101e21e676796eeeb27ff54cce2ff35ddc9a762a82c211515f82d97e92e",
    "n": 1
  },
    "txid": "7ce356b6e57fabc1f9203db4cd055da749de3c575bd85386de842dc99eab20fc",
    "n": 0
  },
    "txid": "7ce356b6e57fabc1f9203db4cd055da749de3c575bd85386de842dc99eab20fc",
    "n": 1
  },
    "txid": "7d21a0eb030fb6925fc3f56282443fa02e4896020c72fd54b8f8c997743586e7",
    "n": 0
  },
    "txid": "7d81c8619324ff1ee062f6cf2a7e64de2261faa27d8da6e941c66bc72e323d53",
    "n": 0
  },
    "txid": "7dcf74eb40517011aabd8462c3617a90081a4a2662bb54c5c04d4f3171f9a09d",
    "n": 0
  },
    "txid": "7e0f1920c491cd7471c2e390ebf4b24344cb5b7c9b53082ba20b5b2d4c753049",
    "n": 0
  },
    "txid": "7e0f1920c491cd7471c2e390ebf4b24344cb5b7c9b53082ba20b5b2d4c753049",
    "n": 1
  },
    "txid": "7e24b40f2935dd39029e20a2a423cd965667bd9b33665a4365ebbc2fe12331b2",
    "n": 0
  },
    "txid": "7e24b40f2935dd39029e20a2a423cd965667bd9b33665a4365ebbc2fe12331b2",
    "n": 1
  },
    "txid": "7e535a21dce242e2f067ff80906106cf8617c3b506f491f4d5644e4b92eee9a8",
    "n": 0
  },
    "txid": "7e535a21dce242e2f067ff80906106cf8617c3b506f491f4d5644e4b92eee9a8",
    "n": 1
  },
    "txid": "7e768a2b5362cb24e1359449c91f1a2c542f9687764e6bdf1c96f0963423549e",
    "n": 1
  },
    "txid": "7e768a2b5362cb24e1359449c91f1a2c542f9687764e6bdf1c96f0963423549e",
    "n": 2
  },
    "txid": "7ea5dd47421dc7a3c6b8c29dbf7ed9e7509a6e4190caced821a8713b125e80c1",
    "n": 0
  },
    "txid": "7ea5dd47421dc7a3c6b8c29dbf7ed9e7509a6e4190caced821a8713b125e80c1",
    "n": 1
  },
    "txid": "7eeadda268e8dc1f3c72356dd50679ebcc8cc83967e5ce0b16cf123f1a81409c",
    "n": 0
  },
    "txid": "7eeadda268e8dc1f3c72356dd50679ebcc8cc83967e5ce0b16cf123f1a81409c",
    "n": 1
  },
    "txid": "7f2d899006b921f7b55208309f6abb2b21c5fbbfc8f49b0385ae22ab54509f91",
    "n": 0
  },
    "txid": "7f3616eee230938622257b1b40be1e9b10d702ebe69b0161f5089c6ae8a9a79a",
    "n": 0
  },
    "txid": "7f3616eee230938622257b1b40be1e9b10d702ebe69b0161f5089c6ae8a9a79a",
    "n": 1
  },
    "txid": "7f3d232ccce6c533b530e68a84d5256786c4d37f031db1b4232dc5e118185276",
    "n": 0
  },
    "txid": "7f70d17472d0f6adb7bac1616c8321690308b624f7a297f7ac9c11d0b0d4dac7",
    "n": 0
  },
    "txid": "7f70d17472d0f6adb7bac1616c8321690308b624f7a297f7ac9c11d0b0d4dac7",
    "n": 1
  },
    "txid": "7fd8d13ae58013d3c0c7bc056ce75d599e2dd4a6bb5b72ac582a8302ada1032a",
    "n": 0
  },
    "txid": "7fd8d13ae58013d3c0c7bc056ce75d599e2dd4a6bb5b72ac582a8302ada1032a",
    "n": 1
  },
    "txid": "7fe047ce9ec9b0a9899341650578e131197fb4d0451df572e10254cdb7b0f5a9",
    "n": 0
  },
    "txid": "805ff6ddb99854304639e9b99ebe29c40d82a2e04c13f30a90da094d14b509b0",
    "n": 0
  },
    "txid": "807365467c86dfbdbd7f5b5433e57ccec0a547c94eb561dce2e29e29cfd86017",
    "n": 0
  },
    "txid": "807f37da41b3451cf9108954db417bee28985af895b8ffeb4f38b41adbf1741c",
    "n": 0
  },
    "txid": "807f37da41b3451cf9108954db417bee28985af895b8ffeb4f38b41adbf1741c",
    "n": 1
  },
    "txid": "80c7e9be47436a176bd951e493337249be23329d51b23bca1bff5b6868f47064",
    "n": 0
  },
    "txid": "80cd0023c262cebd85ef1387b825c061614321752bec59d54fcede3c41b8da60",
    "n": 0
  },
    "txid": "80cd0023c262cebd85ef1387b825c061614321752bec59d54fcede3c41b8da60",
    "n": 1
  },
    "txid": "812bb53f772c9ef32543963dbf9877ac0a151b05d8ff4083e22a9e01dbe17ae2",
    "n": 0
  },
    "txid": "812bb53f772c9ef32543963dbf9877ac0a151b05d8ff4083e22a9e01dbe17ae2",
    "n": 1
  },
    "txid": "814b29424bae2297439bcd8d699d2f4e90813a7ef95742954d73e62719b66498",
    "n": 0
  },
    "txid": "814b29424bae2297439bcd8d699d2f4e90813a7ef95742954d73e62719b66498",
    "n": 1
  },
    "txid": "814d7b3548395e53ddc378e3c5ec95e453239deb5b805786224810e6288f6f73",
    "n": 0
  },
    "txid": "817593043b13c1b0c70efdc28359efd19efd0d170fd9a261eb664cc09fe54751",
    "n": 0
  },
    "txid": "817593043b13c1b0c70efdc28359efd19efd0d170fd9a261eb664cc09fe54751",
    "n": 1
  },
    "txid": "818b11fba6b18e69caa96542ddb70bfea0c308d90c0f93bd321a2727318cbd1d",
    "n": 0
  },
    "txid": "818b11fba6b18e69caa96542ddb70bfea0c308d90c0f93bd321a2727318cbd1d",
    "n": 1
  },
    "txid": "81a1401feda7332bd6472803d127e25fd931ec8600384bfa3c8ede6469a74121",
    "n": 0
  },
    "txid": "81a1401feda7332bd6472803d127e25fd931ec8600384bfa3c8ede6469a74121",
    "n": 1
  },
    "txid": "81c65cd176edeb7d981ccbc6b5b278cbaeeed8f02fed9b9e624b052b66da837c",
    "n": 0
  },
    "txid": "82345b7a7d3d4689ff252f0fc2de7970524efd97e939b377fd2ccd08f9ea60e3",
    "n": 0
  },
    "txid": "82345b7a7d3d4689ff252f0fc2de7970524efd97e939b377fd2ccd08f9ea60e3",
    "n": 1
  },
    "txid": "8326537cf9783acf65effcfd81e65ef75bc534faad226450cd9d253131085fc0",
    "n": 0
  },
    "txid": "83385bb17ee0382c94fbb720413de0e22bb480d775393f55074cfcd8d38dc483",
    "n": 0
  },
    "txid": "83385bb17ee0382c94fbb720413de0e22bb480d775393f55074cfcd8d38dc483",
    "n": 1
  },
    "txid": "837751d330c50582fbd0d9e198db93df071e30ed73c3844f006e63276e239943",
    "n": 0
  },
    "txid": "839d23c0aa8cc0e628acfa1d9b58046f3639bdb0d8f67387c4671fd99dffb91b",
    "n": 0
  },
    "txid": "839d23c0aa8cc0e628acfa1d9b58046f3639bdb0d8f67387c4671fd99dffb91b",
    "n": 1
  },
    "txid": "842353acbc854de24407d7783426fde916ed45f12579504ba9c1df125355c7ab",
    "n": 0
  },
    "txid": "842353acbc854de24407d7783426fde916ed45f12579504ba9c1df125355c7ab",
    "n": 1
  },
    "txid": "84267d238856bea4e3db9593ac30dfd4cc4997ef0dcbaf27f49edfd748c7efa3",
    "n": 0
  },
    "txid": "84267d238856bea4e3db9593ac30dfd4cc4997ef0dcbaf27f49edfd748c7efa3",
    "n": 1
  },
    "txid": "84743a8f5b6315f6727d92f3f15812e8d00059d928bc9de8a90d23a24a9f48be",
    "n": 0
  },
    "txid": "84743a8f5b6315f6727d92f3f15812e8d00059d928bc9de8a90d23a24a9f48be",
    "n": 1
  },
    "txid": "8484d2cdc33f31fa610e22d593fa9c2b1e2e4b6c2ea53612612c479ab6f7aad0",
    "n": 0
  },
    "txid": "8484d2cdc33f31fa610e22d593fa9c2b1e2e4b6c2ea53612612c479ab6f7aad0",
    "n": 1
  },
    "txid": "8487ce4090a111761324f6365743702fd9c89db20617ce5e6a0e291ac6086367",
    "n": 0
  },
    "txid": "8487ce4090a111761324f6365743702fd9c89db20617ce5e6a0e291ac6086367",
    "n": 1
  },
    "txid": "84e55508662585626bfa27452321a1df254a65bd1e49d5c9fccfee0a4c665ee5",
    "n": 0
  },
    "txid": "84e55508662585626bfa27452321a1df254a65bd1e49d5c9fccfee0a4c665ee5",
    "n": 1
  },
    "txid": "84f98ba34966cb0bffbb2326f1fc755b75666a750bb188350c8ee85f1352e701",
    "n": 0
  },
    "txid": "84f98ba34966cb0bffbb2326f1fc755b75666a750bb188350c8ee85f1352e701",
    "n": 1
  },
    "txid": "856fcb43e0394eedb3ec0978618e47d6030ebdfda606f4cae9cfe5bd4bc3eeaf",
    "n": 0
  },
    "txid": "85b92a25a307c61cf18530912e3a7e3bc88098f33eb3d46400df22d254954bda",
    "n": 0
  },
    "txid": "86158ccdcc8b793606209489a71a36312c3ee5f0694de6a2a3d847913c2158f1",
    "n": 0
  },
    "txid": "862a81a5d571f293b0b0e8401c56b673a089aae4819a3647fd13a1cd074443a9",
    "n": 0
  },
    "txid": "862a81a5d571f293b0b0e8401c56b673a089aae4819a3647fd13a1cd074443a9",
    "n": 1
  },
    "txid": "8640dd92617e4e8f00a113a6a19646b99a2fdaf46672b7e9a6486f28d97cfb14",
    "n": 1
  },
    "txid": "8640dd92617e4e8f00a113a6a19646b99a2fdaf46672b7e9a6486f28d97cfb14",
    "n": 2
  },
    "txid": "8661b26e97e29d121d5d71893f375b4ad144b68dd1d7a9b4ef374eb1e75cf496",
    "n": 0
  },
    "txid": "86761d63d54e527cdd3f571de4c4c6aef6e98f737e3b29244053c850da8d7370",
    "n": 0
  },
    "txid": "86761d63d54e527cdd3f571de4c4c6aef6e98f737e3b29244053c850da8d7370",
    "n": 1
  },
    "txid": "86911926ccc5541d068b505d4cf1ec66d244a8341f8509b0e3a1301c2813ac94",
    "n": 0
  },
    "txid": "86911926ccc5541d068b505d4cf1ec66d244a8341f8509b0e3a1301c2813ac94",
    "n": 1
  },
    "txid": "86a0afe2ddec131720a18718463cd5cc5143ca137ad164ad5697edccdaa0e200",
    "n": 0
  },
    "txid": "86a0afe2ddec131720a18718463cd5cc5143ca137ad164ad5697edccdaa0e200",
    "n": 1
  },
    "txid": "86e88a8d06e58d4d6ef008884477b4efbfd7178054f7318cf06f0d1a09493e8a",
    "n": 0
  },
    "txid": "873bc3779d833fe0056cff40c9cee9d029c89c838faa85f2ed6bb529ca24ae1a",
    "n": 0
  },
    "txid": "873bc3779d833fe0056cff40c9cee9d029c89c838faa85f2ed6bb529ca24ae1a",
    "n": 1
  },
    "txid": "8750e8a4be84726d0c08317d7d11b7de0d683b185eb7f25a80a0a9ebffbec697",
    "n": 0
  },
    "txid": "8750e8a4be84726d0c08317d7d11b7de0d683b185eb7f25a80a0a9ebffbec697",
    "n": 1
  },
    "txid": "875600bafd06aed1e4e42f7dd7fee16a0c45f5551e3cb320fd1e1309de8c5dbb",
    "n": 0
  },
    "txid": "876ba70665d500eadd485ab1c986f610e61ea07592f9a43ec716a3c58fbd8a5a",
    "n": 0
  },
    "txid": "87b8d532519414c94517792336e079cf0ffa3f60f3f374885bc12ff4f86fbe77",
    "n": 0
  },
    "txid": "8823dfc5ac80f998b5659c73ae37ffc9fca1a5c921cdc368e07e3eb03e52466e",
    "n": 0
  },
    "txid": "888fd2342e0a61bc6419f20434c18d2b41e9745a43f68dc6deb58ecc99d5ec5d",
    "n": 0
  },
    "txid": "88dc55677b2af96b9ef9cf26fd4a6a17b320959573305a71cbd41c02c283025f",
    "n": 0
  },
    "txid": "88dc55677b2af96b9ef9cf26fd4a6a17b320959573305a71cbd41c02c283025f",
    "n": 1
  },
    "txid": "88e140031b8960f3b3fcd4eb0f771d97d579d727a168b8ebfb6d52e2149d3ecd",
    "n": 0
  },
    "txid": "88e140031b8960f3b3fcd4eb0f771d97d579d727a168b8ebfb6d52e2149d3ecd",
    "n": 1
  },
    "txid": "890ea2598f25f46615a02912a0be60b385c17afc80c1f817eb0f7b88f4dd84df",
    "n": 0
  },
    "txid": "8965f6fe407668a91c4925893347ca0951d78c8337aef4d25e98babc7e9fe06d",
    "n": 0
  },
    "txid": "8965f6fe407668a91c4925893347ca0951d78c8337aef4d25e98babc7e9fe06d",
    "n": 1
  },
    "txid": "8980b46aac5b8b7ebed22d4d551b33a99f933873fd8eaa58b627ad214876f643",
    "n": 0
  },
    "txid": "8980b46aac5b8b7ebed22d4d551b33a99f933873fd8eaa58b627ad214876f643",
    "n": 1
  },
    "txid": "89d60009530f522c708aadd49f3ef7375cad58bea0be6b515d045e5cfd078369",
    "n": 0
  },
    "txid": "8ad8f6e7d0211be7053dd29c98c736e6303eade6b2c9f8572accd9b41a5ddda6",
    "n": 0
  },
    "txid": "8ae7bca02bb3102f7255e7021ec61265a0b4db67cd0588d37320145713f8b7e9",
    "n": 0
  },
    "txid": "8b346fdc8b824d94c271db13c1fea4af14ce91f10901df978a6c8d108657f453",
    "n": 0
  },
    "txid": "8b6362c0b6bff7019d6221824f8ca36535db2ab14d06916ca3c2152fa53e9f7d",
    "n": 0
  },
    "txid": "8b8806e1e72d7011ce5f8ad6069cb9924594969f2a06ea06c3678930a1445fbc",
    "n": 0
  },
    "txid": "8b8806e1e72d7011ce5f8ad6069cb9924594969f2a06ea06c3678930a1445fbc",
    "n": 1
  },
    "txid": "8b9b056e6831ef00a133a3257f0acba13b8a6b4f27fc63c2985e99ca4199c1cb",
    "n": 0
  },
    "txid": "8b9b056e6831ef00a133a3257f0acba13b8a6b4f27fc63c2985e99ca4199c1cb",
    "n": 1
  },
    "txid": "8c54ccd7789d8e2bc5f979a430b1d015a90f1eebc73414eeea0951de5bac5362",
    "n": 0
  },
    "txid": "8c6728cd48f657ab56b1150b0fc5ce29ae304d8461052077df4c6dafa08277d8",
    "n": 0
  },
    "txid": "8cdceec796f1476b72ece392c4c69f87376c76915b1cf966029a47955233d7bd",
    "n": 0
  },
    "txid": "8cdceec796f1476b72ece392c4c69f87376c76915b1cf966029a47955233d7bd",
    "n": 1
  },
    "txid": "8d6e89d12d51d7103b05959fa414794af18624d066f0497002903e84a13c3224",
    "n": 0
  },
    "txid": "8d6e89d12d51d7103b05959fa414794af18624d066f0497002903e84a13c3224",
    "n": 1
  },
    "txid": "8dbe9fca4cd19082b31cde4642c206ff4049ffb8e732fa2c22499dd0fe74b2bf",
    "n": 0
  },
    "txid": "8dcbb3585bf6c357702f37fc9c45eb70bcc7999faf18d04404aa41b28f614bbd",
    "n": 0
  },
    "txid": "8e2ede8e862750af5836adff85fba81568873b40ed9648c26a0f3cfa0eb9fafe",
    "n": 0
  },
    "txid": "8e6b9a3f109663a835b9a008371a45ae6106d9d256876db4eb6f63f94e5d2f79",
    "n": 0
  },
    "txid": "8ead2c0c76615db9f26178ebaf221718a1db9838b1567e21d7bcad507cc3e9c6",
    "n": 0
  },
    "txid": "8f374c3c60407c60c779fa4bf61a5f88150845edeaaa350bb02b8c45fd037571",
    "n": 0
  },
    "txid": "8f5905e499b14146918fee18aa68557c08b617028d2f37120bd66dcf10fc2fc5",
    "n": 0
  },
    "txid": "8f5905e499b14146918fee18aa68557c08b617028d2f37120bd66dcf10fc2fc5",
    "n": 1
  },
    "txid": "8fbfa9eaf8da790e35edc03e047e7188196fc8797882a182a53dbfa89911cca6",
    "n": 0
  },
    "txid": "8fceafc50fc743340b972c600302f8ae6fb471bff1e652febeab3c85c982d176",
    "n": 0
  },
    "txid": "8fceafc50fc743340b972c600302f8ae6fb471bff1e652febeab3c85c982d176",
    "n": 1
  },
    "txid": "8fcf90c801fad679eed6e765c4f9fab867d136c88ef9359ac8a540854c29b99e",
    "n": 0
  },
    "txid": "8fd1ffe62f9fd0d1cc336d12ff0b7feb8ba540b73396a2b8717d59cb584482b7",
    "n": 0
  },
    "txid": "8fd1ffe62f9fd0d1cc336d12ff0b7feb8ba540b73396a2b8717d59cb584482b7",
    "n": 1
  },
    "txid": "8fe93eeaa43d17a71083fb06985d70163f15201a4273d767b2e1f9eeb27eac67",
    "n": 0
  },
    "txid": "90155cc74eb0a980452d1b9bdd5c1da839ee0d560ee54eecfd4e6f8419374078",
    "n": 0
  },
    "txid": "904babe3cc4a6523f6c7d7bb4fa8178c2c955c89d81a14dde3234ff0f34318f2",
    "n": 0
  },
    "txid": "904babe3cc4a6523f6c7d7bb4fa8178c2c955c89d81a14dde3234ff0f34318f2",
    "n": 1
  },
    "txid": "905ba432e164950576b11a851bf9e20da65a563ed1f7c48c70e08195cea64910",
    "n": 0
  },
    "txid": "905bee529096fffcd9db5df6412c01a8fcb7e3b278d40577424787a92c2184c4",
    "n": 0
  },
    "txid": "905bee529096fffcd9db5df6412c01a8fcb7e3b278d40577424787a92c2184c4",
    "n": 1
  },
    "txid": "90710a52375ee50ccc9acc02613bee5347650b9f2161c75678983d4b51716e6f",
    "n": 0
  },
    "txid": "90ee0000e5ab9ac3f4408f6b4d27fa4eedcb2c52c6cf614e6dd347634fede04e",
    "n": 0
  },
    "txid": "90ee0000e5ab9ac3f4408f6b4d27fa4eedcb2c52c6cf614e6dd347634fede04e",
    "n": 1
  },
    "txid": "91b2f175d0fc88146369f84ca6c239ca1a6ed98829ef62482a99547730a9ebea",
    "n": 0
  },
    "txid": "91f9f6cc669facd111f878e457fda05584815afe9cf23b6405fd48dfe20633d1",
    "n": 0
  },
    "txid": "91f9f6cc669facd111f878e457fda05584815afe9cf23b6405fd48dfe20633d1",
    "n": 1
  },
    "txid": "9263e34378d30e333d08476050a49cc27cd37184536134598ecc1f304b6ed93f",
    "n": 0
  },
    "txid": "9263e34378d30e333d08476050a49cc27cd37184536134598ecc1f304b6ed93f",
    "n": 1
  },
    "txid": "9299bf498fb56be00833487fbec77f2bd83d642e13a9e3bfd859df5e89080e05",
    "n": 1
  },
    "txid": "92c7be3c98c57372e1db4afa66055e16e1a76e295d6aa6c6e078629cf56faf70",
    "n": 0
  },
    "txid": "92c7be3c98c57372e1db4afa66055e16e1a76e295d6aa6c6e078629cf56faf70",
    "n": 1
  },
    "txid": "92dc617893c552bbff8cc6cbba564452e8a81ef994ac2230f6c922b6c498c756",
    "n": 0
  },
    "txid": "92dc617893c552bbff8cc6cbba564452e8a81ef994ac2230f6c922b6c498c756",
    "n": 1
  },
    "txid": "932f62162bcacb82fba8da45b4dfb5791a84217f1025305e7b7aa4000c3b84e0",
    "n": 0
  },
    "txid": "932f62162bcacb82fba8da45b4dfb5791a84217f1025305e7b7aa4000c3b84e0",
    "n": 1
  },
    "txid": "933874d8bff04df6747bca29582974990978827cbda5760ec9cceeeeb54f9566",
    "n": 0
  },
    "txid": "933874d8bff04df6747bca29582974990978827cbda5760ec9cceeeeb54f9566",
    "n": 1
  },
    "txid": "9367c8794fa89f465e17385e0a07d4a51d6170835cb1a3408bd26cbac6f703ff",
    "n": 0
  },
    "txid": "9367c8794fa89f465e17385e0a07d4a51d6170835cb1a3408bd26cbac6f703ff",
    "n": 1
  },
    "txid": "94069ffcadfec40d2a4242158dc78ae8c6cc384a85f7fbd71d7ef26028ead3f5",
    "n": 0
  },
    "txid": "943a14e24f551013929c65f7f048e2824da2a2ed3e361344b3be6d481f3d7bd4",
    "n": 0
  },
    "txid": "945044b2c9942caf7757f3388ba99ee66146257e5f59e8ed393c02755253734d",
    "n": 0
  },
    "txid": "945044b2c9942caf7757f3388ba99ee66146257e5f59e8ed393c02755253734d",
    "n": 1
  },
    "txid": "945335aef9b3ad2d1c90b835f16e2d67ca04388d000a475324071c932a1068cf",
    "n": 0
  },
    "txid": "945335aef9b3ad2d1c90b835f16e2d67ca04388d000a475324071c932a1068cf",
    "n": 1
  },
    "txid": "945ec1d29b9c8b6c6e9b4b8ac93a1734fb391a0baa6998a8a19750088b58de7a",
    "n": 0
  },
    "txid": "945ec1d29b9c8b6c6e9b4b8ac93a1734fb391a0baa6998a8a19750088b58de7a",
    "n": 1
  },
    "txid": "948f7027b4ef9e19eeb9596f048adcadb7d54842ec2cc8f46f64d7d670deaa44",
    "n": 0
  },
    "txid": "948f7027b4ef9e19eeb9596f048adcadb7d54842ec2cc8f46f64d7d670deaa44",
    "n": 1
  },
    "txid": "94a7153361e6cc2d9252d4a58616cca087bda7c7b3288a865e3fbb145ab308bd",
    "n": 0
  },
    "txid": "94a7153361e6cc2d9252d4a58616cca087bda7c7b3288a865e3fbb145ab308bd",
    "n": 1
  },
    "txid": "94ea15df80b1ca7344b5f410f2b8e108780b94686e0d5e54efc448d1ba01e760",
    "n": 0
  },
    "txid": "94ea15df80b1ca7344b5f410f2b8e108780b94686e0d5e54efc448d1ba01e760",
    "n": 1
  },
    "txid": "9503bb92a882ea713afeee49e0b40361693e6a1ed93b596b30222a033ac2e74a",
    "n": 0
  },
    "txid": "9503bb92a882ea713afeee49e0b40361693e6a1ed93b596b30222a033ac2e74a",
    "n": 1
  },
    "txid": "9514a9c891d5e68930081876ae8afdb9b3f721935dc534b8d224b6dc2ad0d630",
    "n": 0
  },
    "txid": "9514a9c891d5e68930081876ae8afdb9b3f721935dc534b8d224b6dc2ad0d630",
    "n": 1
  },
    "txid": "95935e3663e1ad9c9ba0a4317586f009430cb8bc0b8db47cee4f247c9227e97f",
    "n": 0
  },
    "txid": "959980bc960f19db95720458de60c8b950bfbf3b5c484772a6b0f6114ee2ddbb",
    "n": 0
  },
    "txid": "959980bc960f19db95720458de60c8b950bfbf3b5c484772a6b0f6114ee2ddbb",
    "n": 1
  },
    "txid": "95f7d5eeb7a5982f97093adcec5127c63b635c34f70d08a2e139993601973109",
    "n": 0
  },
    "txid": "96aa87400ad8ddd8195ad282be1141207509e72c706908207d0902847c6cdae9",
    "n": 0
  },
    "txid": "96d7617fd1d78090cb94a711663eb326f52160ae05fb213b6e28ed601ffcc31b",
    "n": 0
  },
    "txid": "97b4112fc338bcc79a3f8c176ce0afa0884d9fa56507ded405c6f7c352feb64a",
    "n": 0
  },
    "txid": "97b4112fc338bcc79a3f8c176ce0afa0884d9fa56507ded405c6f7c352feb64a",
    "n": 1
  },
    "txid": "9878361067c6bce87245517f833c2c7d90edfe40c167941d5554fbc044fcc691",
    "n": 0
  },
    "txid": "9878361067c6bce87245517f833c2c7d90edfe40c167941d5554fbc044fcc691",
    "n": 1
  },
    "txid": "98cd917fd42973dbbffa561e647fa4d593287e62b2407fccca9638e67d7e42bf",
    "n": 0
  },
    "txid": "993a54d3efd0c82b25649bf5d6f77a44f6f5959531e2854530b260dae328bfd6",
    "n": 0
  },
    "txid": "997bc50b09f1455e793c76527c37ab1c718702bcabd6eac8dc368d3ed9bfe112",
    "n": 0
  },
    "txid": "997bc50b09f1455e793c76527c37ab1c718702bcabd6eac8dc368d3ed9bfe112",
    "n": 1
  },
    "txid": "9981d353d3eb06e784c456f0f48ee6ff6b143dbf0653bd64e8025f3931f2d6de",
    "n": 0
  },
    "txid": "99980e7a29ba0c4322b7e9c1e499ec49a693513130ea9b33d47c3b0df4a1e1bf",
    "n": 0
  },
    "txid": "99980e7a29ba0c4322b7e9c1e499ec49a693513130ea9b33d47c3b0df4a1e1bf",
    "n": 1
  },
    "txid": "99bd3ba73a331a89e5b357026befe087bfdba2f9fac2a2c6c4c8ce9975ab5995",
    "n": 0
  },
    "txid": "99bd3ba73a331a89e5b357026befe087bfdba2f9fac2a2c6c4c8ce9975ab5995",
    "n": 1
  },
    "txid": "99c04aabd8efb2c5519d8f52ac68b591a12f06d55d3e186abd442a81ce8d2461",
    "n": 0
  },
    "txid": "99c04aabd8efb2c5519d8f52ac68b591a12f06d55d3e186abd442a81ce8d2461",
    "n": 1
  },
    "txid": "99de55232a7fc6b42f26ab0ce288da3cfadac6a950e9138032df1647198446c8",
    "n": 0
  },
    "txid": "99de55232a7fc6b42f26ab0ce288da3cfadac6a950e9138032df1647198446c8",
    "n": 1
  },
    "txid": "9a08ed8c04586931c290272ece669475358cf2f77bf755c2cdaf6cc9c3536a85",
    "n": 0
  },
    "txid": "9a1b8b8f337770317f8b8f3ef555f2940ff06d5688c90d4a7d0f40163812a517",
    "n": 0
  },
    "txid": "9a731ceef4d0a084fa06f3bd4e49d4d4ff4a4fec70db7ffc90bc9972386833dc",
    "n": 0
  },
    "txid": "9a731ceef4d0a084fa06f3bd4e49d4d4ff4a4fec70db7ffc90bc9972386833dc",
    "n": 1
  },
    "txid": "9aab7d19824f70181766e0eb2656f415557ba71a3185173c41c08a142f5fd2e5",
    "n": 0
  },
    "txid": "9ad16daec8f9de33895305754859028993ebf3801552ae38bc88f20342dabe74",
    "n": 0
  },
    "txid": "9ad6403e3d82b33a48cb96ae7af73cc2cc3406d070535f4c348443207148a4de",
    "n": 0
  },
    "txid": "9ad6403e3d82b33a48cb96ae7af73cc2cc3406d070535f4c348443207148a4de",
    "n": 1
  },
    "txid": "9b2fad5c6cd158e209a0f3f15a4f83bb22b79493893100ce2f05075bcb7cf572",
    "n": 0
  },
    "txid": "9b2fad5c6cd158e209a0f3f15a4f83bb22b79493893100ce2f05075bcb7cf572",
    "n": 1
  },
    "txid": "9b45979f1bbea7a9706e149bf0efe723ebb46cadc7816b1d1fedb43667e18f07",
    "n": 0
  },
    "txid": "9b45979f1bbea7a9706e149bf0efe723ebb46cadc7816b1d1fedb43667e18f07",
    "n": 1
  },
    "txid": "9b49d44aa9b7032782bd0e44303d8f8b08518b43af8e60e458e66ae1c192fc2b",
    "n": 0
  },
    "txid": "9b6d96fb7663a94fec0fb84898f066a9c6811fa047f8afa63d8f70ba6f67f3fc",
    "n": 0
  },
    "txid": "9b73cf6e01f775b3afb6f8ec10102653726cdd8a091190c60a1da03ef3227e26",
    "n": 0
  },
    "txid": "9b73cf6e01f775b3afb6f8ec10102653726cdd8a091190c60a1da03ef3227e26",
    "n": 1
  },
    "txid": "9b7db5b76b6d4b158193904a2b366509689bc655e5edef11831b441718a60071",
    "n": 0
  },
    "txid": "9bc597f389d9802379250b4ebd989ded9fa054f3184b0f17bd4aab6f5b79ac1f",
    "n": 0
  },
    "txid": "9bc597f389d9802379250b4ebd989ded9fa054f3184b0f17bd4aab6f5b79ac1f",
    "n": 1
  },
    "txid": "9bc946f72e5bf19fc5ce1613a6c9f810247b5913b74bc8522ae70835b8b5812a",
    "n": 0
  },
    "txid": "9bc946f72e5bf19fc5ce1613a6c9f810247b5913b74bc8522ae70835b8b5812a",
    "n": 1
  },
    "txid": "9bcb62c0f2979b6bfb86249a5a606962a05f6146753f2ea95e83da0b33d72385",
    "n": 0
  },
    "txid": "9bcb62c0f2979b6bfb86249a5a606962a05f6146753f2ea95e83da0b33d72385",
    "n": 1
  },
    "txid": "9bd8903fb8bb64f659777019eb8c7c8181913a816bbf595ae83c26aa99e6f74a",
    "n": 0
  },
    "txid": "9be54f301af3b5f2ce391b84b32689174cfc835bd9092d67e4826250a8b3b8b4",
    "n": 0
  },
    "txid": "9be54f301af3b5f2ce391b84b32689174cfc835bd9092d67e4826250a8b3b8b4",
    "n": 1
  },
    "txid": "9bfd904d20b458c9f2c6dad2f2f2c5fc76aaea16c6e49aa31e62a8e42e627920",
    "n": 0
  },
    "txid": "9bfd904d20b458c9f2c6dad2f2f2c5fc76aaea16c6e49aa31e62a8e42e627920",
    "n": 1
  },
    "txid": "9bfff64bbcf2bf73aa7c7b6358a7d858b5ddc83b19b619e74e35942e0f636505",
    "n": 0
  },
    "txid": "9c1571b5589b1681a47d2b02c3531702ebb7d466476fd0062a92a3ce12a6e835",
    "n": 0
  },
    "txid": "9c2bdc667c4a8a5ed0d71bc3cfe299182ce5676e139dcf7a0706fbc2377c72ac",
    "n": 0
  },
    "txid": "9c2bdc667c4a8a5ed0d71bc3cfe299182ce5676e139dcf7a0706fbc2377c72ac",
    "n": 1
  },
    "txid": "9d1f6ff2e2e56d8b56f8d92a5474f47860f13d3625ee8bdce14f3cbc955c595f",
    "n": 0
  },
    "txid": "9d493a1dd3914989bc2ba3673dd5c9b17587059c1ae62f75c4c85a145bcfd940",
    "n": 0
  },
    "txid": "9d9427938b52114be9f67a17ba6b34d61cbf2e082f3bec7f961fd305664f1d41",
    "n": 0
  },
    "txid": "9da96c251bccb6378b0d4d87f3594b5ea314a26b18a7937cea0517e4967493d4",
    "n": 0
  },
    "txid": "9da96c251bccb6378b0d4d87f3594b5ea314a26b18a7937cea0517e4967493d4",
    "n": 1
  },
    "txid": "9df4adb6cc5f7610024dabe9635e2ae8eda58ffe64f7076d01cdcf7a0887a61b",
    "n": 0
  },
    "txid": "9df4adb6cc5f7610024dabe9635e2ae8eda58ffe64f7076d01cdcf7a0887a61b",
    "n": 1
  },
    "txid": "9e0f2050079eeb149e37209bcc6e99c111f4c25f7acf0d516b884234aa92cec1",
    "n": 0
  },
    "txid": "9e2435d8b8362c29f89b99ba41036a127d1bf8ab92ec0014301e7dc8c991adaa",
    "n": 0
  },
    "txid": "9e2435d8b8362c29f89b99ba41036a127d1bf8ab92ec0014301e7dc8c991adaa",
    "n": 1
  },
    "txid": "9e9c645a3d70e6a36353ffd50b3ec189c935dd71e67e8495f3184d17aa6cf694",
    "n": 0
  },
    "txid": "9e9db48c147c52ad17a5b4fc061d0271b27a595e82b31124437b55d8785337f2",
    "n": 0
  },
    "txid": "9e9db48c147c52ad17a5b4fc061d0271b27a595e82b31124437b55d8785337f2",
    "n": 1
  },
    "txid": "9eb216d271c30702016518e385e60b01f85fdbe3c7d895a65ff69b336f825832",
    "n": 0
  },
    "txid": "9ecd5f5a65f394d4c0c4ca15720bd921c75c9872f69429c9f66348129c9e62ef",
    "n": 0
  },
    "txid": "9ecd5f5a65f394d4c0c4ca15720bd921c75c9872f69429c9f66348129c9e62ef",
    "n": 1
  },
    "txid": "9f02cd2f75557b4a6828f380713866af3ceb9adf6a5bfa86e03e5e6de4499146",
    "n": 0
  },
    "txid": "9f505e538cbe5fde83ffec8451ee7504f97904cb23cfcb4b9c477fcade8cee95",
    "n": 0
  },
    "txid": "9f505e538cbe5fde83ffec8451ee7504f97904cb23cfcb4b9c477fcade8cee95",
    "n": 1
  },
    "txid": "9f7aecdfe133935e62d0ae7b3635fa46b9e4ad37ec7331471cb842ce0e28fedb",
    "n": 0
  },
    "txid": "9f7aecdfe133935e62d0ae7b3635fa46b9e4ad37ec7331471cb842ce0e28fedb",
    "n": 1
  },
    "txid": "9f8680d54c4d0bc9d6cab09251116c75194ad2b4831ca600f43a5d32249fa6ae",
    "n": 0
  },
    "txid": "9f8680d54c4d0bc9d6cab09251116c75194ad2b4831ca600f43a5d32249fa6ae",
    "n": 1
  },
    "txid": "a0050cda9c4eb183a8f61172d629bd46049f4a0644f656f244b4ff5f87ee734c",
    "n": 0
  },
    "txid": "a01b2b6d91324c0311cf2ca5f999fb785e56c41e1ace8d001603185477eb558e",
    "n": 0
  },
    "txid": "a01b2b6d91324c0311cf2ca5f999fb785e56c41e1ace8d001603185477eb558e",
    "n": 1
  },
    "txid": "a03093b69670a7da46c1791ff9fc878462cc1e4c2199cc6590a5e779dd8c9f2b",
    "n": 0
  },
    "txid": "a03093b69670a7da46c1791ff9fc878462cc1e4c2199cc6590a5e779dd8c9f2b",
    "n": 1
  },
    "txid": "a096fe6e67040329ef3cb2d0700d72d582ff266ce896736f0ead9b5b3ee75e4e",
    "n": 0
  },
    "txid": "a0c09e73fd8712f3518093b655ce2bd8addcd576fa535be03ae2e7d1789db2b6",
    "n": 0
  },
    "txid": "a0c09e73fd8712f3518093b655ce2bd8addcd576fa535be03ae2e7d1789db2b6",
    "n": 1
  },
    "txid": "a1365d3de681150177c616185ea3b177ebbe2380cc3a996bfff1918b720f8985",
    "n": 0
  },
    "txid": "a221125f67135f8911deda466cdf04d1f0d427709fdc0a5593952cac96710a79",
    "n": 0
  },
    "txid": "a221125f67135f8911deda466cdf04d1f0d427709fdc0a5593952cac96710a79",
    "n": 1
  },
    "txid": "a241a9a8fa3e707a0ae7ec8338dc1882c2a2dc483c74c82861a6f43a83265d3e",
    "n": 0
  },
    "txid": "a36925323012601afad090c115879c26cf13463ad72799abb118d72dafcc0db0",
    "n": 0
  },
    "txid": "a36925323012601afad090c115879c26cf13463ad72799abb118d72dafcc0db0",
    "n": 1
  },
    "txid": "a387bfaf79a959e2d01178d03bd3c5db897405a425cdbb28f9c897353588036a",
    "n": 0
  },
    "txid": "a3a819f687663c5f7ef51185da8bdf80e39d28e309786465544133f3fe42a507",
    "n": 0
  },
    "txid": "a3a819f687663c5f7ef51185da8bdf80e39d28e309786465544133f3fe42a507",
    "n": 1
  },
    "txid": "a3f3f38715d12bc2cfae5b9436c5d167cc31d4d0517d30fda9180189739cbbc8",
    "n": 0
  },
    "txid": "a3f3f38715d12bc2cfae5b9436c5d167cc31d4d0517d30fda9180189739cbbc8",
    "n": 1
  },
    "txid": "a43b66ed29f27c1a23452668dcef172bc14949000fc73e1f4cc0b05b14d5b0ed",
    "n": 0
  },
    "txid": "a43b66ed29f27c1a23452668dcef172bc14949000fc73e1f4cc0b05b14d5b0ed",
    "n": 1
  },
    "txid": "a4cb494da978d469f21c5f833ec8cc6099496c23be7e2d3b0dfe8664b634c660",
    "n": 0
  },
    "txid": "a4cb494da978d469f21c5f833ec8cc6099496c23be7e2d3b0dfe8664b634c660",
    "n": 1
  },
    "txid": "a4ed9a4290cc71715f33300740ea12e41151dfd51aca34283a1edb2bfed8a3ff",
    "n": 0
  },
    "txid": "a4ed9a4290cc71715f33300740ea12e41151dfd51aca34283a1edb2bfed8a3ff",
    "n": 1
  },
    "txid": "a50a2088a34ead7648f741f1e31eb5db9125e0d52075b56c4de2324382544094",
    "n": 0
  },
    "txid": "a50a2088a34ead7648f741f1e31eb5db9125e0d52075b56c4de2324382544094",
    "n": 1
  },
    "txid": "a53b2fcb5a64f6bcfe2dd7d643d9dc32ec8f8f297fe7e52c70b1fec94ee2cac1",
    "n": 0
  },
    "txid": "a53b2fcb5a64f6bcfe2dd7d643d9dc32ec8f8f297fe7e52c70b1fec94ee2cac1",
    "n": 1
  },
    "txid": "a584cd123b4ff5a838c28fb8f457c7caaad6e5c57ea65c7e11488aee936fcdf5",
    "n": 0
  },
    "txid": "a584cd123b4ff5a838c28fb8f457c7caaad6e5c57ea65c7e11488aee936fcdf5",
    "n": 1
  },
    "txid": "a5856f046635f2738d944a840a2fc9219f61db3cd56d298fa731b00ea240fe24",
    "n": 0
  },
    "txid": "a5856f046635f2738d944a840a2fc9219f61db3cd56d298fa731b00ea240fe24",
    "n": 1
  },
    "txid": "a5a30ff7cd68dad335f7920f32e9c167ff320264550c2eda5a1e260c8fa09d31",
    "n": 0
  },
    "txid": "a5d75b7f99edfc8259580285999197eb755b7e20342cfa0731b09f5b0b3635a7",
    "n": 0
  },
    "txid": "a5d75b7f99edfc8259580285999197eb755b7e20342cfa0731b09f5b0b3635a7",
    "n": 1
  },
    "txid": "a604c5b7aba60b1cbbcf1c7eb238a3004474269a7f909276e775fc613b9ffc42",
    "n": 0
  },
    "txid": "a696c99d14a137e488a33e1fb43e968b361e2b721d43a9d08e90c0e15fadfd5e",
    "n": 0
  },
    "txid": "a696c99d14a137e488a33e1fb43e968b361e2b721d43a9d08e90c0e15fadfd5e",
    "n": 1
  },
    "txid": "a6a24d42e32a5c8494d1f85827bcf448a3a34561fec7c58ab4f75cdf7ae97a97",
    "n": 0
  },
    "txid": "a6a24d42e32a5c8494d1f85827bcf448a3a34561fec7c58ab4f75cdf7ae97a97",
    "n": 1
  },
    "txid": "a6df1d401691587652f121c224c5d092e23306b2250afebb8e89c9956e0ee20c",
    "n": 0
  },
    "txid": "a6df1d401691587652f121c224c5d092e23306b2250afebb8e89c9956e0ee20c",
    "n": 1
  },
    "txid": "a6e1c305f5467e3f2586e682576e98668ad39ed0ebc88eed0bc8a535bcc4c625",
    "n": 1
  },
    "txid": "a6f0458546b1bf81fc3ca27b08ac594be6e1a03771c7c748b527ba2f91ab0409",
    "n": 0
  },
    "txid": "a716aa42cc7c39aa132d3b1be001f17227096c0213101f3ed9242c068e631ca5",
    "n": 0
  },
    "txid": "a716aa42cc7c39aa132d3b1be001f17227096c0213101f3ed9242c068e631ca5",
    "n": 1
  },
    "txid": "a79978cf20ebb26a8922f7b3d127890170f2798536743be6e61c8bfe0216ed9b",
    "n": 0
  },
    "txid": "a7ddcee8b5497d97f52944d0960adc5c304d87318d91521aeec5c8668dba3206",
    "n": 0
  },
    "txid": "a80ac1efe83ee257fea41999f12c9d883f4fddadb3e06927bee1a3eca1d19af6",
    "n": 0
  },
    "txid": "a80ac1efe83ee257fea41999f12c9d883f4fddadb3e06927bee1a3eca1d19af6",
    "n": 1
  },
    "txid": "a813125dc76d576690b4d8c145cb37bd2f6d2f45079ef69fbe5a84619727e12b",
    "n": 0
  },
    "txid": "a813125dc76d576690b4d8c145cb37bd2f6d2f45079ef69fbe5a84619727e12b",
    "n": 1
  },
    "txid": "a88baa5db0855e6e6e2d7992b645c3e8440e06883232650cb4652f616bda44dd",
    "n": 0
  },
    "txid": "a89852c0e5a59147d11ceb766417d8393f9b9cad207cddd1e32eec724e484446",
    "n": 0
  },
    "txid": "a89852c0e5a59147d11ceb766417d8393f9b9cad207cddd1e32eec724e484446",
    "n": 1
  },
    "txid": "a8ed2bca36d7d5336417189b42e7f2c326144959fd6446449e9d1d900f3edf94",
    "n": 0
  },
    "txid": "a8ed2bca36d7d5336417189b42e7f2c326144959fd6446449e9d1d900f3edf94",
    "n": 1
  },
    "txid": "a8f96842a48580747e35131ca35df8ab24a8dcb863b4628c6cf612b06e6932a0",
    "n": 0
  },
    "txid": "a8f9f78fa9821254967bc1bec6d5761bdb7f70383a378c6f4636ec75297e0d0b",
    "n": 0
  },
    "txid": "a8f9f78fa9821254967bc1bec6d5761bdb7f70383a378c6f4636ec75297e0d0b",
    "n": 1
  },
    "txid": "a90607a69b81e9fc903b36bfbb165ef125b94ce3a997a39ce8fdd5bdb80f8a52",
    "n": 0
  },
    "txid": "a910426b67b8457c1ef4c06a8ae59afcefee37d8d8bd7226f96fe06e4e47012c",
    "n": 0
  },
    "txid": "a9461384072083f90f8ca51b121030ac75c63111c7f037474d8b244796185bc0",
    "n": 0
  },
    "txid": "a9461384072083f90f8ca51b121030ac75c63111c7f037474d8b244796185bc0",
    "n": 1
  },
    "txid": "a978aabaa9771b07279153920e1428ab4300416e87b3173a92ab61f1d69d2ffe",
    "n": 0
  },
    "txid": "a978aabaa9771b07279153920e1428ab4300416e87b3173a92ab61f1d69d2ffe",
    "n": 1
  },
    "txid": "a980d197c6f9ffae90152e91e1f57d002f4993793084d3c1465ab423a1c10c21",
    "n": 0
  },
    "txid": "aa1fa52c55078fd26b654b398f8b67505e05bfcaaa6d56d24c854a7e2887f97e",
    "n": 0
  },
    "txid": "aa1fa52c55078fd26b654b398f8b67505e05bfcaaa6d56d24c854a7e2887f97e",
    "n": 1
  },
    "txid": "aacebbabf46073e3bcce0f68f4f87905655448e7d8701d7761ef188e26464136",
    "n": 0
  },
    "txid": "aaf75023618fb7a8dce3cb4e3738304791255912d026bc8d470cfec00d0fb5aa",
    "n": 0
  },
    "txid": "ab552312967c8122d40332c7541ccf987f92bc306dfbe65d4120a7e55426790a",
    "n": 0
  },
    "txid": "abc9acf8b5d0e3354fd4e6c24a2cbc17c46fb1ce0980f7af4fad295e5a88fe46",
    "n": 0
  },
    "txid": "abc9acf8b5d0e3354fd4e6c24a2cbc17c46fb1ce0980f7af4fad295e5a88fe46",
    "n": 1
  },
    "txid": "abcd9d6cc5710ddb438445ac21a633fbabdccfef70210a37c8166fbb20fadb47",
    "n": 0
  },
    "txid": "abf71224c81a3e898998218a31051a90f139594746260f6003b81a479074d4d0",
    "n": 0
  },
    "txid": "abf71224c81a3e898998218a31051a90f139594746260f6003b81a479074d4d0",
    "n": 1
  },
    "txid": "ac0067502beb16a07232266ddce50474527f4783e3f8fcf44b19aadcdb22ef92",
    "n": 0
  },
    "txid": "ac0067502beb16a07232266ddce50474527f4783e3f8fcf44b19aadcdb22ef92",
    "n": 1
  },
    "txid": "ac2f4c1722cfda11e2af1899e50e6d60088702447d44cf423f3ee4e2e7f62fdf",
    "n": 0
  },
    "txid": "ac6f0cc6b92030c420d1539c3714aafdc9cd624d889ced2240a6136b92eef61f",
    "n": 0
  },
    "txid": "ac7627e96c65c5376687667311100e10584cc6f4b9aca8b905d0e2a0391f7216",
    "n": 0
  },
    "txid": "ac7627e96c65c5376687667311100e10584cc6f4b9aca8b905d0e2a0391f7216",
    "n": 1
  },
    "txid": "ad4c70a297cd8c5b957573cb24c749b880b0f368f6e2de5da8b633bdcf5013ab",
    "n": 0
  },
    "txid": "ad4c70a297cd8c5b957573cb24c749b880b0f368f6e2de5da8b633bdcf5013ab",
    "n": 1
  },
    "txid": "ad5a3178a54124465c248c0fb661b4ee5cb925fbef0be5105b283d32fbf15a1b",
    "n": 0
  },
    "txid": "ad5a3178a54124465c248c0fb661b4ee5cb925fbef0be5105b283d32fbf15a1b",
    "n": 1
  },
    "txid": "ae04a3ad33ae5921641b3ebdf63404d5a74b3286935e721147841cec2fedc816",
    "n": 0
  },
    "txid": "ae5e4247a2961097f366fda62d9b0ed4104b106e9c4783d841617c49546a8bab",
    "n": 0
  },
    "txid": "ae5e4247a2961097f366fda62d9b0ed4104b106e9c4783d841617c49546a8bab",
    "n": 1
  },
    "txid": "ae63eda1add69d4a372b7a1996375a0110b07ae8c0a19283cd3da04cac33063b",
    "n": 0
  },
    "txid": "ae63eda1add69d4a372b7a1996375a0110b07ae8c0a19283cd3da04cac33063b",
    "n": 1
  },
    "txid": "af0ec6c24987a4da4dc5c5b795f325229bdb00064e87db8c63b17b91145a58f5",
    "n": 0
  },
    "txid": "af0ec6c24987a4da4dc5c5b795f325229bdb00064e87db8c63b17b91145a58f5",
    "n": 1
  },
    "txid": "af4ac127005b6ab3548638dda6da8dcbe8ddb8a2c139d1766de907b34ab75d29",
    "n": 0
  },
    "txid": "af4ac127005b6ab3548638dda6da8dcbe8ddb8a2c139d1766de907b34ab75d29",
    "n": 1
  },
    "txid": "af6db883ae117063a76b00a36757ba9656d88311dac1ec8228d5456197a6ee7a",
    "n": 0
  },
    "txid": "b018e10d28f9b078a4b9e90225f633487dcfe2ffdb6d1dd28fabc70c520a38fd",
    "n": 0
  },
    "txid": "b018e10d28f9b078a4b9e90225f633487dcfe2ffdb6d1dd28fabc70c520a38fd",
    "n": 1
  },
    "txid": "b06e76b6317585626d348e799847d4f9cedd86e677076fd9117d5fb67e79a4e0",
    "n": 0
  },
    "txid": "b07006b1221af5b2a3ffd255db9b59b8ccbc9f81122d933d98bfda7feb696de4",
    "n": 0
  },
    "txid": "b095be90160dea1ecb5fc109a5830aab173e280bb133cfd36e5de48545abaf78",
    "n": 0
  },
    "txid": "b0b94dd3dd8480939dbee300412961f20633f6d86db3ccabf2050c4ebb7006f5",
    "n": 0
  },
    "txid": "b1063bda261988af8b7bb6c9809bc827ed1e607757e49815d7a935bd792c7b23",
    "n": 0
  },
    "txid": "b15083cec87c0c17c95d37190847ebb94357a068c2e5b4b6b5be10877a61a79d",
    "n": 0
  },
    "txid": "b15083cec87c0c17c95d37190847ebb94357a068c2e5b4b6b5be10877a61a79d",
    "n": 1
  },
    "txid": "b1a74afd501322dda231fc9a0fcdde416b26e0c847f269784da2411d94a7f5d0",
    "n": 0
  },
    "txid": "b1d23ec12c279bd2b5e35800b54970f1bdf1750a0bc10b58a46ccfcbc5694bb1",
    "n": 0
  },
    "txid": "b1d6cae38b455aeca550fd0ad1597ed18e2750eeae36803ada54329e8d237a71",
    "n": 0
  },
    "txid": "b224b423bdfc465b6327cfeb9caf2c85573366ea7c369a50aa946603057c1540",
    "n": 0
  },
    "txid": "b224b423bdfc465b6327cfeb9caf2c85573366ea7c369a50aa946603057c1540",
    "n": 1
  },
    "txid": "b2c0bde3696f8a654001c5a70a2424878745cbb055a55a0cbaa802201e0e7ad0",
    "n": 0
  },
    "txid": "b2c0bde3696f8a654001c5a70a2424878745cbb055a55a0cbaa802201e0e7ad0",
    "n": 1
  },
    "txid": "b2cb314586787e7b2ffc9ace5d6592ad21e746ea75998f2c6fb4beb27c7d86e7",
    "n": 0
  },
    "txid": "b2cb314586787e7b2ffc9ace5d6592ad21e746ea75998f2c6fb4beb27c7d86e7",
    "n": 1
  },
    "txid": "b2de81c1b7935c8cb5625327f283642d695a19e06af2c635ef87c84785380852",
    "n": 0
  },
    "txid": "b2de81c1b7935c8cb5625327f283642d695a19e06af2c635ef87c84785380852",
    "n": 1
  },
    "txid": "b33817c3565f6699be4f7466fe71c03396725222ce9a57702536832593fbdc77",
    "n": 0
  },
    "txid": "b33817c3565f6699be4f7466fe71c03396725222ce9a57702536832593fbdc77",
    "n": 1
  },
    "txid": "b34954420f7f26190828e2f966b836e7f6fe9ba64bf34d9ec69e51a90b6ee1de",
    "n": 0
  },
    "txid": "b3a745848b4f9878bce42c7eb0ec1afe7725844a2fdfbb0373fb9f9624b9ebbd",
    "n": 0
  },
    "txid": "b3cd3a9fb78054e584bb73734129c0ae6ef542de97be3b5807acf6cbe08db5f1",
    "n": 0
  },
    "txid": "b3cd3a9fb78054e584bb73734129c0ae6ef542de97be3b5807acf6cbe08db5f1",
    "n": 1
  },
    "txid": "b3cd6283f8cdfdc9a8a09b884a77e5dc8eb1ab4e50b20cbe18a87dcac59ca588",
    "n": 0
  },
    "txid": "b3cd6283f8cdfdc9a8a09b884a77e5dc8eb1ab4e50b20cbe18a87dcac59ca588",
    "n": 1
  },
    "txid": "b3d89e99e26d7051ccbfd6b95cd4b6962bc5d7bb41740c0ddc417494d53dcf36",
    "n": 0
  },
    "txid": "b3d89e99e26d7051ccbfd6b95cd4b6962bc5d7bb41740c0ddc417494d53dcf36",
    "n": 1
  },
    "txid": "b426a470293e28c94587d9635bbe99d80b6b8980510b28baec34b88f17822af8",
    "n": 0
  },
    "txid": "b45add1669563b46bfa2f7bc2bc2faefeb190448e2c434d5221f387ee16bf4cb",
    "n": 0
  },
    "txid": "b45add1669563b46bfa2f7bc2bc2faefeb190448e2c434d5221f387ee16bf4cb",
    "n": 1
  },
    "txid": "b45bc84185d05773b96be450ca41f551f6390f1638de17e9e9087c33dc107530",
    "n": 0
  },
    "txid": "b46dafc3a62fac3b560e8edd9564588944e325014afce45a428ed00c21d22165",
    "n": 0
  },
    "txid": "b46dafc3a62fac3b560e8edd9564588944e325014afce45a428ed00c21d22165",
    "n": 1
  },
    "txid": "b48b048cd808a7b24d690988ff84cb70db34d15eb8d3c25005c54ad3b29ee9cc",
    "n": 0
  },
    "txid": "b49671affc884dc5ede0c156e669618e2edcde1fced956c7e92eea62ee49e983",
    "n": 0
  },
    "txid": "b49671affc884dc5ede0c156e669618e2edcde1fced956c7e92eea62ee49e983",
    "n": 1
  },
    "txid": "b4b1a514ac84da09adcfec5514e40a1c0f731e780c399da33c7b5ad80a001211",
    "n": 0
  },
    "txid": "b4b1a514ac84da09adcfec5514e40a1c0f731e780c399da33c7b5ad80a001211",
    "n": 1
  },
    "txid": "b4e786a3a96f9cc24fbd330c0a6abc7a44fdf2a3916e589ed06b653517b61375",
    "n": 0
  },
    "txid": "b53d3c1684bc3b95017d989be3936f9cdf9d535aef81fc78753db2d34c263d9a",
    "n": 0
  },
    "txid": "b55d3aa4315df8588abe7de95abcc4583197d731311b11a62b149033a116669b",
    "n": 0
  },
    "txid": "b56e14004540e55c04b666c25a9bd53e51d618d8fb0285e7caed7d8e040e2296",
    "n": 0
  },
    "txid": "b56e14004540e55c04b666c25a9bd53e51d618d8fb0285e7caed7d8e040e2296",
    "n": 1
  },
    "txid": "b56e5b9560f4d8939a73d0a6d72cde189daffeb512ba0b5c03af533ddd3eebe1",
    "n": 0
  },
    "txid": "b5aa8ab6303fe01f1733936550c8269e26ff4e19b89e3732df671e1e97427806",
    "n": 0
  },
    "txid": "b5b601b5b73faffc8f9663d8a966b7d06addbe35e247daa073e3142709a2a8c2",
    "n": 0
  },
    "txid": "b5b601b5b73faffc8f9663d8a966b7d06addbe35e247daa073e3142709a2a8c2",
    "n": 1
  },
    "txid": "b5d8961c153194bc3331e8c165c9942ab7897d644ce8ffcc898ff9919b7a273f",
    "n": 0
  },
    "txid": "b62b09a067dde81d6bacb59b0aab6f772678e97074a8625ded566c8da335a165",
    "n": 0
  },
    "txid": "b62b09a067dde81d6bacb59b0aab6f772678e97074a8625ded566c8da335a165",
    "n": 1
  },
    "txid": "b67e52cac7bb7a51e9d8a41332f9aba833c15e3cd5896675ecd927706bb72011",
    "n": 0
  },
    "txid": "b67fb2258f1cd76d574e12ef2ef4b1c9ac3bc522aedcece20a229bbaadfa7394",
    "n": 0
  },
    "txid": "b6d3a190ee7d9c22fe618cd43df4283d2f9b7f9eee988201eeb5abdaf9254b8a",
    "n": 0
  },
    "txid": "b6d3a190ee7d9c22fe618cd43df4283d2f9b7f9eee988201eeb5abdaf9254b8a",
    "n": 1
  },
    "txid": "b708bda582cb3c453b8a0ff341c31d5ff2316db79418060880bcdca96d4905a3",
    "n": 0
  },
    "txid": "b743c030780658e545254049cf912040e0bbfe3d7c01db9cd373fb712e0fdfe3",
    "n": 0
  },
    "txid": "b766d5e507fe4a8da54d0b9899aefe18ea4a5969a0ee477d74c50ee937593e2e",
    "n": 0
  },
    "txid": "b766d5e507fe4a8da54d0b9899aefe18ea4a5969a0ee477d74c50ee937593e2e",
    "n": 1
  },
    "txid": "b774b9cc1794163bc39cbcab5dc7faaa89d1f182af3b6ebe76fc4102cd5e1d90",
    "n": 0
  },
    "txid": "b774b9cc1794163bc39cbcab5dc7faaa89d1f182af3b6ebe76fc4102cd5e1d90",
    "n": 1
  },
    "txid": "b787110bee085ee57e4b5c1094ec5908e2f4c848d85ab1049791b114f9557f2f",
    "n": 0
  },
    "txid": "b787110bee085ee57e4b5c1094ec5908e2f4c848d85ab1049791b114f9557f2f",
    "n": 1
  },
    "txid": "b7ab2a4d72b9d76c3fdf5da8ea80d1d788c13482ae91646cadedc3c3fa04b351",
    "n": 0
  },
    "txid": "b7ab2a4d72b9d76c3fdf5da8ea80d1d788c13482ae91646cadedc3c3fa04b351",
    "n": 1
  },
    "txid": "b810f8b10e66549e6352aef85c3e91a368620830f79fc2f0c1d8f02623171c5b",
    "n": 0
  },
    "txid": "b810f8b10e66549e6352aef85c3e91a368620830f79fc2f0c1d8f02623171c5b",
    "n": 1
  },
    "txid": "b829f89bb21eeb80def156e234b073e2d32b73656f5b40055b574f703504f6b6",
    "n": 0
  },
    "txid": "b829f89bb21eeb80def156e234b073e2d32b73656f5b40055b574f703504f6b6",
    "n": 1
  },
    "txid": "b83324c9c95a814faf2b8edbcaf8ecc0b527627d577df8ed3d8ac8690d802b2c",
    "n": 0
  },
    "txid": "b87a2777a26a6704bc9a78e636556e756cfe10e830bddec094d3321cfa606c66",
    "n": 0
  },
    "txid": "b8d97619bf9aa796f886039e860f5df15a06783b3992c09f2da0f3c59b4eea7b",
    "n": 0
  },
    "txid": "b985f0a236f8fa618da05cf7f41bea134778c7f5634dc093deae024ae00d1673",
    "n": 0
  },
    "txid": "b9b1dbc073cd884e43de60a54740ac2a933bb72fc67418a78471225ebce090c3",
    "n": 0
  },
    "txid": "b9c684e7ac76819af0d48bf512f15584461e975105986e410a5b70f27abd76ae",
    "n": 0
  },
    "txid": "b9e8c669cd0632c5caab476baf1e92c0b2eba6ee5fe42d55fd7ace2dd34e3ce0",
    "n": 0
  },
    "txid": "b9f7a239c5354c61d1908288657bed1db2c75735fdec2e8735cba71dddf082d9",
    "n": 0
  },
    "txid": "b9f7a239c5354c61d1908288657bed1db2c75735fdec2e8735cba71dddf082d9",
    "n": 1
  },
    "txid": "ba8420e86ac64e832fedf277ae96f993c31a2dd763a6e1751b551214f47adf9e",
    "n": 0
  },
    "txid": "ba8420e86ac64e832fedf277ae96f993c31a2dd763a6e1751b551214f47adf9e",
    "n": 1
  },
    "txid": "bb17bb3e92c64253a2efd2ca5a6440e534ca5a315a473e9453a2bbccca4a56ac",
    "n": 0
  },
    "txid": "bb1884975a6052d6d4349af2cb9191436823e62b416e253518341be4ed9876d1",
    "n": 0
  },
    "txid": "bb1884975a6052d6d4349af2cb9191436823e62b416e253518341be4ed9876d1",
    "n": 1
  },
    "txid": "bb18e778e6399de6d09264cb56af2377ff95422b109f2ee768ce24f3b3a04e25",
    "n": 0
  },
    "txid": "bb18e778e6399de6d09264cb56af2377ff95422b109f2ee768ce24f3b3a04e25",
    "n": 1
  },
    "txid": "bbcc99724217e318fe3eaf4026cb1232758547f9548efe85c369ec4a26a37a85",
    "n": 0
  },
    "txid": "bbcc99724217e318fe3eaf4026cb1232758547f9548efe85c369ec4a26a37a85",
    "n": 1
  },
    "txid": "bc06be26e5799ee3c37db58d6e75130b0942d427ca49a7e3d3bd77266d9dbe64",
    "n": 0
  },
    "txid": "bccdbf464dd63d979e940f52e56aa23e5b17daa212b9bbf10fec3dcd3b58b8c6",
    "n": 0
  },
    "txid": "bcdad12a62679cf86849e628934070015d00121a46e578ed0e0feeb3fa95fe9b",
    "n": 0
  },
    "txid": "bcdad12a62679cf86849e628934070015d00121a46e578ed0e0feeb3fa95fe9b",
    "n": 1
  },
    "txid": "bd058cd6a2be72c35da186d629aaef878ea886d351cccfdfff9ee2809864fc7e",
    "n": 0
  },
    "txid": "bd058cd6a2be72c35da186d629aaef878ea886d351cccfdfff9ee2809864fc7e",
    "n": 1
  },
    "txid": "bd1a00c318c94718801cb07548090af2f8894b460f577e31fbefcfabc5c6c758",
    "n": 0
  },
    "txid": "bd1a00c318c94718801cb07548090af2f8894b460f577e31fbefcfabc5c6c758",
    "n": 1
  },
    "txid": "bd73bcbb8d393adc4f5120c676f4d67bd53dcc5d8b3a070745c94287db0a07a5",
    "n": 0
  },
    "txid": "bd73bcbb8d393adc4f5120c676f4d67bd53dcc5d8b3a070745c94287db0a07a5",
    "n": 1
  },
    "txid": "bdc16073ac24c9872eaa6a98b651361f648149442e11ce3943b381c05582e949",
    "n": 0
  },
    "txid": "bdd19b3eecdf791e711be15206ce6a15706fd96a280aa6f6eac220bc31025459",
    "n": 0
  },
    "txid": "bdd19b3eecdf791e711be15206ce6a15706fd96a280aa6f6eac220bc31025459",
    "n": 1
  },
    "txid": "bdfa051092d2babc9300f8e4cd7dd9bfe6a4997d6c1e07e9143178f9580a0481",
    "n": 0
  },
    "txid": "bdfa051092d2babc9300f8e4cd7dd9bfe6a4997d6c1e07e9143178f9580a0481",
    "n": 1
  },
    "txid": "be17de87dc6cc7ce502b3d520bea286347f5b10c5adac50263e75f951362cbb8",
    "n": 0
  },
    "txid": "be17de87dc6cc7ce502b3d520bea286347f5b10c5adac50263e75f951362cbb8",
    "n": 1
  },
    "txid": "be26967b810b7fb9ded92f4680e73187514b47f71a7bfcf030dcf56ae4354ec4",
    "n": 0
  },
    "txid": "be5b1cf2281e0e9a1b103e18ee725939d436d3a7d1a7ab5d1251ebaf7ad93cc7",
    "n": 0
  },
    "txid": "be5b1cf2281e0e9a1b103e18ee725939d436d3a7d1a7ab5d1251ebaf7ad93cc7",
    "n": 1
  },
    "txid": "bebd8cae739717fa4d7310d43392800d6a909848ad6db670d69f39d31b65f24c",
    "n": 0
  },
    "txid": "bebd8cae739717fa4d7310d43392800d6a909848ad6db670d69f39d31b65f24c",
    "n": 1
  },
    "txid": "becad120746afbd01c3ef82573c4ac6a4cba9f9923058f573ea61e29f60bef9c",
    "n": 0
  },
    "txid": "beeb92632f365fe4c66c99e779f2a2023c5327d1cc48fdd15c9181de206c9bb5",
    "n": 0
  },
    "txid": "bf0a9913cace279d3af6cce68d812b882220263cd7fd71db06f98184285820dc",
    "n": 0
  },
    "txid": "bf5c70d8885ff9277ec3288db6a73bcef1bc0d8543324214f464bdc1945406a3",
    "n": 0
  },
    "txid": "bf5c70d8885ff9277ec3288db6a73bcef1bc0d8543324214f464bdc1945406a3",
    "n": 1
  },
    "txid": "bf694f11fd359fb79778de9aab9be32761f4677cb006ee4a98cf306d06586b4c",
    "n": 0
  },
    "txid": "bf694f11fd359fb79778de9aab9be32761f4677cb006ee4a98cf306d06586b4c",
    "n": 1
  },
    "txid": "bfa66f05f098539a0adf3ef352165ab924d6a6ef4f0d237b7e8c87d769dfec1b",
    "n": 0
  },
    "txid": "bfa66f05f098539a0adf3ef352165ab924d6a6ef4f0d237b7e8c87d769dfec1b",
    "n": 1
  },
    "txid": "bfad3de231296e59d577dda7ea989f8ef3ec7c06bee3c8ceab3f6a6a3bb2b9b1",
    "n": 0
  },
    "txid": "bfc76a529ce1925c33fccfe3d12ffc6c08345442791503ec172889dd4bec27e9",
    "n": 0
  },
    "txid": "bfc76a529ce1925c33fccfe3d12ffc6c08345442791503ec172889dd4bec27e9",
    "n": 1
  },
    "txid": "bfdd597d3710daebdd8d2a624cab25f0af3c9780d84748dcd2f753bf87cd27c5",
    "n": 0
  },
    "txid": "bfdd597d3710daebdd8d2a624cab25f0af3c9780d84748dcd2f753bf87cd27c5",
    "n": 1
  },
    "txid": "bfe410bf701133744e8630380b6efebe601fb6c53aef92de723c219c9c7bd7f9",
    "n": 0
  },
    "txid": "c0e0740c3e13754ed94cea9038ee42b78b8286b9e8b5e92d71f10908db787254",
    "n": 0
  },
    "txid": "c1390606a734274e8f175f55e6c0ad62c8c9c6fbb9856f2067db107c15835681",
    "n": 0
  },
    "txid": "c1390606a734274e8f175f55e6c0ad62c8c9c6fbb9856f2067db107c15835681",
    "n": 1
  },
    "txid": "c18e0e0cfd53d38cf65fb811a8a54af6a08f36a6fea1638052e8643f8b12b6a4",
    "n": 0
  },
    "txid": "c18e0e0cfd53d38cf65fb811a8a54af6a08f36a6fea1638052e8643f8b12b6a4",
    "n": 1
  },
    "txid": "c195f015d88a6eff5f8f099d06a7570a5d055a83df1b1a32113cbb0eacd10bce",
    "n": 0
  },
    "txid": "c1b8e5839a60e9d19dd8d5773daf5ad552698df17d95a4f539fbf0ae2b841050",
    "n": 0
  },
    "txid": "c1b8e5839a60e9d19dd8d5773daf5ad552698df17d95a4f539fbf0ae2b841050",
    "n": 1
  },
    "txid": "c1c452bacc0004c8b058b1beb6d97038a95749c357297a3f5cebba2f0a5feb63",
    "n": 0
  },
    "txid": "c1c452bacc0004c8b058b1beb6d97038a95749c357297a3f5cebba2f0a5feb63",
    "n": 1
  },
    "txid": "c219f090a8c38a00035b7071e18ca19e9b36f38895ade8b8fcee0cd127358aa5",
    "n": 0
  },
    "txid": "c219f090a8c38a00035b7071e18ca19e9b36f38895ade8b8fcee0cd127358aa5",
    "n": 1
  },
    "txid": "c22c3ef6229d9a225f62e09cab34398436aa5dc20da80c979262905465e5f109",
    "n": 0
  },
    "txid": "c26d391f7401643f07dcf950f8742844278c168cbbdfc140709957c4670503e6",
    "n": 0
  },
    "txid": "c26d391f7401643f07dcf950f8742844278c168cbbdfc140709957c4670503e6",
    "n": 1
  },
    "txid": "c27a29db4de3a70f40b485a8cc5e806698e8dcdd944fbcfc97b1e27a1cb682ed",
    "n": 0
  },
    "txid": "c27a29db4de3a70f40b485a8cc5e806698e8dcdd944fbcfc97b1e27a1cb682ed",
    "n": 1
  },
    "txid": "c2a3abc6b085765c074c60af17b92c76dccb6566bb3aa3215ebf1b01f13092f1",
    "n": 0
  },
    "txid": "c2a3abc6b085765c074c60af17b92c76dccb6566bb3aa3215ebf1b01f13092f1",
    "n": 1
  },
    "txid": "c2c730d2714a6c30d24fd2e0bdd0e7964312c8fd1cabadee23e2c14c4c9b4e16",
    "n": 0
  },
    "txid": "c2c730d2714a6c30d24fd2e0bdd0e7964312c8fd1cabadee23e2c14c4c9b4e16",
    "n": 1
  },
    "txid": "c3538f527c0167ab34baa366aefc27e95bb69a651c07d3f8f34f070c21f6d8f4",
    "n": 0
  },
    "txid": "c3538f527c0167ab34baa366aefc27e95bb69a651c07d3f8f34f070c21f6d8f4",
    "n": 1
  },
    "txid": "c36522995d12d5a05a8ede4b6db764c5767d27f549c003b4589f8d7ac3cdf05d",
    "n": 0
  },
    "txid": "c36522995d12d5a05a8ede4b6db764c5767d27f549c003b4589f8d7ac3cdf05d",
    "n": 1
  },
    "txid": "c4333b74d1a5d07be3b697bfbaa3f11cfcf894431bddda5f1278d8640347b57e",
    "n": 0
  },
    "txid": "c43aec554fa65cdc2b1ccdaa467c7b9ea33aaa37503e00cc41f6ca38255a9db2",
    "n": 0
  },
    "txid": "c43aec554fa65cdc2b1ccdaa467c7b9ea33aaa37503e00cc41f6ca38255a9db2",
    "n": 1
  },
    "txid": "c4861cc6ccdf538d44444ab422be8e2f33c4bade36f6847dcc8fc114d6d0e1c9",
    "n": 0
  },
    "txid": "c4add2bc61ffe21158912b43614c234b0b4ef937bc532a961041e05f823e466a",
    "n": 0
  },
    "txid": "c4dc132629f6e7e4ec1ef35ae6d4efec060292dba5b187f2bdc004f54283d0bb",
    "n": 0
  },
    "txid": "c51a96f8b0ce6d000b267316d8bdbfe733e8d4e2a4165871a9fe9a71109c74b1",
    "n": 0
  },
    "txid": "c51a96f8b0ce6d000b267316d8bdbfe733e8d4e2a4165871a9fe9a71109c74b1",
    "n": 1
  },
    "txid": "c52bfafb9e23350846391149691c5bedab066adf2ab7bec407de492125024124",
    "n": 0
  },
    "txid": "c596a8815125072fff1ff577f66a3a772520258b7fe9aa7eae380031b61d8c73",
    "n": 0
  },
    "txid": "c596a8815125072fff1ff577f66a3a772520258b7fe9aa7eae380031b61d8c73",
    "n": 1
  },
    "txid": "c628a737aed380f79be65e9dc151963bf1cf13b398eb714dd6d0fbbd67f424b7",
    "n": 0
  },
    "txid": "c69f4f37fdc4b1b58d69413d3b85fe7743706a7c1d5bcea45e9b6222e1600998",
    "n": 0
  },
    "txid": "c69f4f37fdc4b1b58d69413d3b85fe7743706a7c1d5bcea45e9b6222e1600998",
    "n": 1
  },
    "txid": "c6a6d79116d7bae68c5fcc4e752a9ba4000ceac6ce05bed43cd23e6addc29bc7",
    "n": 0
  },
    "txid": "c6a6d79116d7bae68c5fcc4e752a9ba4000ceac6ce05bed43cd23e6addc29bc7",
    "n": 1
  },
    "txid": "c6ba421b1fed9d1127f68a628235cdd5c7d3e7ed30b4e539b70ac40b94814d84",
    "n": 0
  },
    "txid": "c6ba421b1fed9d1127f68a628235cdd5c7d3e7ed30b4e539b70ac40b94814d84",
    "n": 1
  },
    "txid": "c6c443d49b41af350f10a4ef3f2d59783bceb56605e0252ba18d17c2fd67fb8c",
    "n": 0
  },
    "txid": "c6c443d49b41af350f10a4ef3f2d59783bceb56605e0252ba18d17c2fd67fb8c",
    "n": 1
  },
    "txid": "c6d1d3cb34c514190a99213b0601de612af42ac477ff5cffbc3641742540785c",
    "n": 0
  },
    "txid": "c7244a0c1c142739267639d8cc3fda3c7396a95873df132126da4ddd2fee4075",
    "n": 0
  },
    "txid": "c73ce0cb4673eb1405eb68b1c6063e04e2a5ee1e301232cd803bda860e45b2e8",
    "n": 0
  },
    "txid": "c75e5c5646efc15b227508eb0c1f57cf006254e74890558ff359378641ef5dc3",
    "n": 0
  },
    "txid": "c80446a75b926ee0a35adbb58953911c844c05f54c93cbda734c2419b726dcf1",
    "n": 0
  },
    "txid": "c80446a75b926ee0a35adbb58953911c844c05f54c93cbda734c2419b726dcf1",
    "n": 1
  },
    "txid": "c811d237e4e24c5e84bc69807eb23f9a3d56fcd862937d4e87a0cd01f21a2564",
    "n": 0
  },
    "txid": "c83fc7ab4b6b0860545c1d06d5cbf0754e19b283adab6d301c80aa962ae084e5",
    "n": 0
  },
    "txid": "c88a7d807f95a03e94fc0f8da6c1fecbb9f3d32f4e414846b502fdb37238f480",
    "n": 0
  },
    "txid": "c88a7d807f95a03e94fc0f8da6c1fecbb9f3d32f4e414846b502fdb37238f480",
    "n": 1
  },
    "txid": "c89751a65975168177aeea2c15778b50142ffa572291448e0aeec09e1d2ef572",
    "n": 0
  },
    "txid": "c89751a65975168177aeea2c15778b50142ffa572291448e0aeec09e1d2ef572",
    "n": 1
  },
    "txid": "c8c52830f536f0c95cc8ac94fc02fb723457ef4cd702c812eda32666d1c05f17",
    "n": 0
  },
    "txid": "c8c52830f536f0c95cc8ac94fc02fb723457ef4cd702c812eda32666d1c05f17",
    "n": 1
  },
    "txid": "c8d298fc3d2ea7c7954e0afc0b5c918b0ab685b077a223f0de87e66ac2e683b7",
    "n": 0
  },
    "txid": "c8d298fc3d2ea7c7954e0afc0b5c918b0ab685b077a223f0de87e66ac2e683b7",
    "n": 1
  },
    "txid": "c8e9f1f9d6e69f4def12da6cd92c4f07a7c1f08ab0047e664abe45295f05142a",
    "n": 0
  },
    "txid": "c8e9f1f9d6e69f4def12da6cd92c4f07a7c1f08ab0047e664abe45295f05142a",
    "n": 1
  },
    "txid": "c90ef905c7f29ba823c208b0cda2cd09646bceef523a0a91f04210649c8f6c0f",
    "n": 0
  },
    "txid": "c90ef905c7f29ba823c208b0cda2cd09646bceef523a0a91f04210649c8f6c0f",
    "n": 1
  },
    "txid": "ca1e645af1f7340ded2d71410a54bdb07932c0e1a84f2bf31a60c7ddf552fa3d",
    "n": 0
  },
    "txid": "ca49119b314a7557370ce1d0db4b15a3bb8c5f313e34a45cbecc2048485dfaa3",
    "n": 0
  },
    "txid": "ca49119b314a7557370ce1d0db4b15a3bb8c5f313e34a45cbecc2048485dfaa3",
    "n": 1
  },
    "txid": "ca94eb10b4fc9e70826964060712a64989acb2cc21e3db0d1c5f8153e8647b73",
    "n": 0
  },
    "txid": "ca94eb10b4fc9e70826964060712a64989acb2cc21e3db0d1c5f8153e8647b73",
    "n": 1
  },
    "txid": "caa2275e034bd11d8d464ea3b613c585044504b4583450e527d5681976a6b009",
    "n": 0
  },
    "txid": "caa2275e034bd11d8d464ea3b613c585044504b4583450e527d5681976a6b009",
    "n": 1
  },
    "txid": "cb098e4a084189fa762357bbfdef9998a008557599b7a431c9c6ad6189df69e7",
    "n": 0
  },
    "txid": "cb0d426f88887d4034ae7e507da54f0764dfdd027b04ce1bb5a6eb40b8ffbb7e",
    "n": 0
  },
    "txid": "cb0d426f88887d4034ae7e507da54f0764dfdd027b04ce1bb5a6eb40b8ffbb7e",
    "n": 1
  },
    "txid": "cb3daf843f1c09fcc41573e776f59329661077afaec038755c0a0a6a9b78ac7d",
    "n": 0
  },
    "txid": "cb7b5dbd1eea03dee6ed77da080a8bb737b78ea8b0b68afbacd82bde1a447985",
    "n": 0
  },
    "txid": "cbb89f66196879b92e8a4145835026fd261c313739158e15aa439c09830a8875",
    "n": 0
  },
    "txid": "cbb89f66196879b92e8a4145835026fd261c313739158e15aa439c09830a8875",
    "n": 1
  },
    "txid": "cbc8b1ffdf1fd3dc8e79328723f0fc75996deae69d8c36be2c315663c0d0da79",
    "n": 0
  },
    "txid": "cbc8b1ffdf1fd3dc8e79328723f0fc75996deae69d8c36be2c315663c0d0da79",
    "n": 1
  },
    "txid": "ccf0ec5a3c5af3ab5807346922f85b7e0adbe3594e6561c77d3a80f43f51cbdd",
    "n": 0
  },
    "txid": "ccf0ec5a3c5af3ab5807346922f85b7e0adbe3594e6561c77d3a80f43f51cbdd",
    "n": 1
  },
    "txid": "cd43a3185b9c63c74ef3c51e75f7958875f0ea7623fda47955364f3320acf6b6",
    "n": 0
  },
    "txid": "cd43a3185b9c63c74ef3c51e75f7958875f0ea7623fda47955364f3320acf6b6",
    "n": 1
  },
    "txid": "cd4f629d985fabfb1658db5fce2319f6374432344fe55674a84d4dfbe3887f3a",
    "n": 0
  },
    "txid": "cd4f629d985fabfb1658db5fce2319f6374432344fe55674a84d4dfbe3887f3a",
    "n": 1
  },
    "txid": "cd584797eff833d1eeca42e7226f67caaa8ae4fa1fd77cb09a720e472f38bea6",
    "n": 0
  },
    "txid": "cd584797eff833d1eeca42e7226f67caaa8ae4fa1fd77cb09a720e472f38bea6",
    "n": 1
  },
    "txid": "cd5dea3a9f11a68a4ca38de01814268ec0cd3349e20a075ba6d9a9600021d70a",
    "n": 0
  },
    "txid": "cd5dea3a9f11a68a4ca38de01814268ec0cd3349e20a075ba6d9a9600021d70a",
    "n": 1
  },
    "txid": "cd9c7de770746850a5c826527151f7b38c2b8cb9fe1c202ec4380161bd532381",
    "n": 0
  },
    "txid": "cd9c7de770746850a5c826527151f7b38c2b8cb9fe1c202ec4380161bd532381",
    "n": 1
  },
    "txid": "cdb7e430981358a356131c77d93f2db1219ff9c0473077494a55d8fc5679b1f2",
    "n": 0
  },
    "txid": "cdb7e430981358a356131c77d93f2db1219ff9c0473077494a55d8fc5679b1f2",
    "n": 1
  },
    "txid": "cdd83d7d843fe2b7bac04fbcaf0bbaea155661b7ded34c0e1b67d39890f2d038",
    "n": 0
  },
    "txid": "ce0287a5b058492d25ff0bd6635540b953f19cefa95ea880054e8162ac1f228c",
    "n": 0
  },
    "txid": "ce9a1294400da1a2a434e31ba07e86e15b1bbfdbce7f67eb6f8f044c296b50a3",
    "n": 0
  },
    "txid": "ce9a1294400da1a2a434e31ba07e86e15b1bbfdbce7f67eb6f8f044c296b50a3",
    "n": 1
  },
    "txid": "ceb514a72f2ae9599fcb22ee30162ba8833a39160e2dc21a2f03296ebbc6c6c5",
    "n": 0
  },
    "txid": "cec2c1e893366588fe7bd8d7d8f7c4430216890122362fe698fdc5dd7763e27e",
    "n": 0
  },
    "txid": "cec2c1e893366588fe7bd8d7d8f7c4430216890122362fe698fdc5dd7763e27e",
    "n": 1
  },
    "txid": "cec6842760cefe0d744be627e45b22a06640984e7d15610eb6f5cf6685844dd8",
    "n": 0
  },
    "txid": "ceda5647d3259d47de91a79a1b3c559119fe2d4f08dfc24a061291c1dbd45e74",
    "n": 0
  },
    "txid": "ceda5647d3259d47de91a79a1b3c559119fe2d4f08dfc24a061291c1dbd45e74",
    "n": 1
  },
    "txid": "cee99c73193e17894de50dad3f857be837ee5124e93757c6eb60db99ad9dc783",
    "n": 0
  },
    "txid": "cf47d8f022100422f4bc8dfcbdb276f048ac01847020f4ab4ae1cc3eccb70957",
    "n": 0
  },
    "txid": "cf47d8f022100422f4bc8dfcbdb276f048ac01847020f4ab4ae1cc3eccb70957",
    "n": 1
  },
    "txid": "cf8180211e5a74253931ff031ae6d22c2ea4a278ad271acc64156ae37e489961",
    "n": 0
  },
    "txid": "cf8180211e5a74253931ff031ae6d22c2ea4a278ad271acc64156ae37e489961",
    "n": 1
  },
    "txid": "cf89118479d1595bf0cb468c18e3b732aa3f298c80c559c5e284dcb32f05dd6e",
    "n": 1
  },
    "txid": "cf89118479d1595bf0cb468c18e3b732aa3f298c80c559c5e284dcb32f05dd6e",
    "n": 2
  },
    "txid": "d01b9debad7a8f2f7cd9d11e5a1eafd77863b0108a7ec3738377ff255c9aafb3",
    "n": 0
  },
    "txid": "d01b9debad7a8f2f7cd9d11e5a1eafd77863b0108a7ec3738377ff255c9aafb3",
    "n": 1
  },
    "txid": "d0b6ec0413d08a2def7e1300c7dfcd71773a54d2addd91448628a22c8e48a6e0",
    "n": 0
  },
    "txid": "d0b6ec0413d08a2def7e1300c7dfcd71773a54d2addd91448628a22c8e48a6e0",
    "n": 1
  },
    "txid": "d129b29dd54f4b4a2f7e358148a06ad742235942a2937fac7676fefe1e481f36",
    "n": 0
  },
    "txid": "d129b29dd54f4b4a2f7e358148a06ad742235942a2937fac7676fefe1e481f36",
    "n": 1
  },
    "txid": "d14b70fbad9e9c0d6276d265d65b28de5891aa25b57770f17ab1f44cdc795db3",
    "n": 0
  },
    "txid": "d14b70fbad9e9c0d6276d265d65b28de5891aa25b57770f17ab1f44cdc795db3",
    "n": 1
  },
    "txid": "d20e2b27524ae5e0ae6bb88bda962b6be52f9de3dd01119799983d7bcf63edda",
    "n": 0
  },
    "txid": "d20e2b27524ae5e0ae6bb88bda962b6be52f9de3dd01119799983d7bcf63edda",
    "n": 1
  },
    "txid": "d21d1be0078efea5354bd7c8be32d1f401f50aa3e3e8fef1f3903d87f2972594",
    "n": 0
  },
    "txid": "d21d1be0078efea5354bd7c8be32d1f401f50aa3e3e8fef1f3903d87f2972594",
    "n": 1
  },
    "txid": "d26e7c779feac7d034d4458f1efa0483394c4eda3d13c04f1ab0534237441d06",
    "n": 0
  },
    "txid": "d2cb1023435f02dfed4b59c3df6c6940b9222ffa7c1c172a41b1260dbe1e03c3",
    "n": 0
  },
    "txid": "d308e352332ed6e05c806e52b23b5bb50a7349a35d6d72a1b8a5c30f3aa6ba98",
    "n": 0
  },
    "txid": "d308e352332ed6e05c806e52b23b5bb50a7349a35d6d72a1b8a5c30f3aa6ba98",
    "n": 1
  },
    "txid": "d3596c441f818c00dd3364253a0e7665691993873c70a2fc8e60bfc3205157a2",
    "n": 0
  },
    "txid": "d3596c441f818c00dd3364253a0e7665691993873c70a2fc8e60bfc3205157a2",
    "n": 1
  },
    "txid": "d38f9b57764b36dd20b7fd8302110dadca3532e4e2e03ef17a355d0a5a00df0e",
    "n": 0
  },
    "txid": "d38f9b57764b36dd20b7fd8302110dadca3532e4e2e03ef17a355d0a5a00df0e",
    "n": 1
  },
    "txid": "d3a1580be28c4eed3d10cc765a7d8100789b42dec383ce7c6307d2845662fe6f",
    "n": 0
  },
    "txid": "d3b1a559f02bb02b1c24e572204899d2191c411341eca5b7ac887fb782ad9e93",
    "n": 0
  },
    "txid": "d3efce64fe3882c13438f540bdd37d56f53a2d60f590194aa6bf4892eddb776f",
    "n": 0
  },
    "txid": "d3efce64fe3882c13438f540bdd37d56f53a2d60f590194aa6bf4892eddb776f",
    "n": 1
  },
    "txid": "d3fabd32237b179b8cbd04559f52951fe7f102a7e879e20f50a69c6d88a7b49d",
    "n": 0
  },
    "txid": "d3fabd32237b179b8cbd04559f52951fe7f102a7e879e20f50a69c6d88a7b49d",
    "n": 1
  },
    "txid": "d40e350bf75c4bbe8a7c6045502ec777e61128b404c13e1576e2005730546d81",
    "n": 0
  },
    "txid": "d40e350bf75c4bbe8a7c6045502ec777e61128b404c13e1576e2005730546d81",
    "n": 1
  },
    "txid": "d4a149540a6440a00bffe196349aae1c12828399109651a4bf47c178e1b45b27",
    "n": 1
  },
    "txid": "d4a21d736af5dad8b3e6ffe3e3a625a24d1ad6ebf2c43ac75314d62627e429e8",
    "n": 0
  },
    "txid": "d4a21d736af5dad8b3e6ffe3e3a625a24d1ad6ebf2c43ac75314d62627e429e8",
    "n": 1
  },
    "txid": "d4bda8fb7c36c11fed6ca36f46cb85c55061054da538b84b47e1fcf83023ca13",
    "n": 0
  },
    "txid": "d4bda8fb7c36c11fed6ca36f46cb85c55061054da538b84b47e1fcf83023ca13",
    "n": 1
  },
    "txid": "d4d4d2fdc6cb51e99a01d491f0e20159caa5172960bc259d050af920fd413b55",
    "n": 0
  },
    "txid": "d4d4d2fdc6cb51e99a01d491f0e20159caa5172960bc259d050af920fd413b55",
    "n": 1
  },
    "txid": "d53908b8644f3c41c0cb45e6a790e95c5b380b9818e2c59dfc3d6ca40587b0fe",
    "n": 0
  },
    "txid": "d53908b8644f3c41c0cb45e6a790e95c5b380b9818e2c59dfc3d6ca40587b0fe",
    "n": 1
  },
    "txid": "d54f5ce88490e0da743c2124f335a6f79feeac0dfa52b1566deb88c70dfcfbee",
    "n": 0
  },
    "txid": "d550a43130242c6fee4e9ca2883890775dbf70d2e1ff4a42a8f185e92a21df44",
    "n": 0
  },
    "txid": "d550a43130242c6fee4e9ca2883890775dbf70d2e1ff4a42a8f185e92a21df44",
    "n": 1
  },
    "txid": "d59b5c13af2bf192028567021e93fde8b7b524eb782183363d3a990204dede57",
    "n": 0
  },
    "txid": "d59b5c13af2bf192028567021e93fde8b7b524eb782183363d3a990204dede57",
    "n": 1
  },
    "txid": "d5d7adb58a54c6f7f210f467d8f55863e88140c075462c4ac622be0ead5a463c",
    "n": 0
  },
    "txid": "d617bb33082f9cd4074e1994eee3f208c1b3e910590a6213077f57f91d7a7220",
    "n": 0
  },
    "txid": "d617bb33082f9cd4074e1994eee3f208c1b3e910590a6213077f57f91d7a7220",
    "n": 1
  },
    "txid": "d61eae768d453e45caa2a3bde4ac2c18e5acecff6d062344d339bc8e9024f623",
    "n": 0
  },
    "txid": "d61eae768d453e45caa2a3bde4ac2c18e5acecff6d062344d339bc8e9024f623",
    "n": 1
  },
    "txid": "d7289dd0f83e5a52582c2273cd20f8b6a131f8d90a07e8014baaf9be7a334b00",
    "n": 0
  },
    "txid": "d7289dd0f83e5a52582c2273cd20f8b6a131f8d90a07e8014baaf9be7a334b00",
    "n": 1
  },
    "txid": "d76d86ec8a11d7e590620560274a2e8660f3516a9eb21a0632abe7c9c787cd95",
    "n": 0
  },
    "txid": "d76d86ec8a11d7e590620560274a2e8660f3516a9eb21a0632abe7c9c787cd95",
    "n": 1
  },
    "txid": "d78b3f9366f4a4f5db58818f474cfe4699d0638c45ecfb9715399c5c686e63f6",
    "n": 0
  },
    "txid": "d7de918fe1bd71ee60118b1ed59ad91d3cfbb1be95bbdff33fb06955551af990",
    "n": 0
  },
    "txid": "d7de918fe1bd71ee60118b1ed59ad91d3cfbb1be95bbdff33fb06955551af990",
    "n": 1
  },
    "txid": "d7e18e4c093d120549bef64c7745e9dc271c6ae59b96d3d54741446e5a8cbbd2",
    "n": 0
  },
    "txid": "d7e18e4c093d120549bef64c7745e9dc271c6ae59b96d3d54741446e5a8cbbd2",
    "n": 1
  },
    "txid": "d8a1c2d72ac8b2076a2eaa7f5a451d89fbff9d422ce7628c96b3dc984ce0ff05",
    "n": 0
  },
    "txid": "d93149f195af396f1fc509db8b866b4bf74be7b64308ffba8e1724b3f3848869",
    "n": 0
  },
    "txid": "d93149f195af396f1fc509db8b866b4bf74be7b64308ffba8e1724b3f3848869",
    "n": 1
  },
    "txid": "d9590bdce161020ee7412d5bcaeac8478be1bade58c1c730f2277ea92588873a",
    "n": 0
  },
    "txid": "d9590bdce161020ee7412d5bcaeac8478be1bade58c1c730f2277ea92588873a",
    "n": 1
  },
    "txid": "d9f8985e249884063c6d5e7ae87155f54b64bd5c6420ef06b68e4e1fa5a5211e",
    "n": 0
  },
    "txid": "da284d09b58348556e605d1b0556d86659d94afcbfa48ff34f73bb8244004ad1",
    "n": 0
  },
    "txid": "da4a5486633a3da02a17d16436c9f3587c7751e5e0e6c7810faa99eb8a3aea59",
    "n": 0
  },
    "txid": "da4a5486633a3da02a17d16436c9f3587c7751e5e0e6c7810faa99eb8a3aea59",
    "n": 1
  },
    "txid": "da6ecc4a6fef24b06ed14a93dafc8f559a2bcf282b347ef93d4732d1e5ad49a3",
    "n": 0
  },
    "txid": "da7f674d51f3bbc1d3cedd48e80f1895d893dc1161d7b840d5a0189202195022",
    "n": 0
  },
    "txid": "da9155a7cf03a2daa0f5208688a356a6bcec979aa9c85f6251ee9b63bb933155",
    "n": 0
  },
    "txid": "da9155a7cf03a2daa0f5208688a356a6bcec979aa9c85f6251ee9b63bb933155",
    "n": 1
  },
    "txid": "dabff835bb4aedf7717d5b723d8b0c7325fe522a649c9ceeb52293264020693d",
    "n": 0
  },
    "txid": "db3c18efaa65eb30976ebf7ae2072fae9beda2ee5a3456c84cfeb2e657d8981a",
    "n": 0
  },
    "txid": "db4377dda3d5281d768b23740abb812ff1ec85089f3f21392918e1112ed4508f",
    "n": 0
  },
    "txid": "db4377dda3d5281d768b23740abb812ff1ec85089f3f21392918e1112ed4508f",
    "n": 1
  },
    "txid": "db54f0b2d978c68d6619281949ddc445f56c13206a0483d70d6710be3010928f",
    "n": 0
  },
    "txid": "db54f0b2d978c68d6619281949ddc445f56c13206a0483d70d6710be3010928f",
    "n": 1
  },
    "txid": "dbbd0191b33bfcb1352f3f1c9f59753770ffbbfc7fc61c721fc58acdbf3c94ec",
    "n": 0
  },
    "txid": "dbc70ed820dc2f0f12f2ccfd949aa65f6674dd5827495b6120b72144ac3ed18a",
    "n": 0
  },
    "txid": "dbc70ed820dc2f0f12f2ccfd949aa65f6674dd5827495b6120b72144ac3ed18a",
    "n": 1
  },
    "txid": "dc7fa3fe778c8cd7e345d9dbb9b61c7011f52b7a6671ac4700acecbfd4fbd443",
    "n": 0
  },
    "txid": "dca6075f7c5ff80d53d977316d60488e3a654ce917c031e6f04af55779778d50",
    "n": 0
  },
    "txid": "dca6075f7c5ff80d53d977316d60488e3a654ce917c031e6f04af55779778d50",
    "n": 1
  },
    "txid": "dcc42559e5b2f5ff71d35cb6740790c23c63b5314edc9e0de265f0d9f1d4461f",
    "n": 0
  },
    "txid": "dcf359021b6d536317f390652b328619d3738b2217bce3b9c27aa81d33bed521",
    "n": 0
  },
    "txid": "dcf359021b6d536317f390652b328619d3738b2217bce3b9c27aa81d33bed521",
    "n": 1
  },
    "txid": "dd09599622463c502322fd15f55651d5c7c3db7deda6abe0a0792828f7edfb4d",
    "n": 0
  },
    "txid": "dd09599622463c502322fd15f55651d5c7c3db7deda6abe0a0792828f7edfb4d",
    "n": 1
  },
    "txid": "dd716f997c988e39e3e4e6848f3efa1a5dfef26040220f140d622579166a17ee",
    "n": 0
  },
    "txid": "ddddc29fa950a163b041c92a6b07cd429e824a2e89c7df66cbd3ea85b2692511",
    "n": 0
  },
    "txid": "ddddc29fa950a163b041c92a6b07cd429e824a2e89c7df66cbd3ea85b2692511",
    "n": 1
  },
    "txid": "ddde91527aa587d9c7095f22480f9639fdc68677dd895ab9127d5340671f0d8d",
    "n": 0
  },
    "txid": "ddde91527aa587d9c7095f22480f9639fdc68677dd895ab9127d5340671f0d8d",
    "n": 1
  },
    "txid": "ddea6fdf1d9b1a443e9d5f3164d2e06f9cc1106bd817121b6f96249958084e92",
    "n": 0
  },
    "txid": "ddea6fdf1d9b1a443e9d5f3164d2e06f9cc1106bd817121b6f96249958084e92",
    "n": 1
  },
    "txid": "de1ac60603d78fa6b6889870cf01451e7c864503a82d2f52a1b33ad37e849959",
    "n": 0
  },
    "txid": "de1ac60603d78fa6b6889870cf01451e7c864503a82d2f52a1b33ad37e849959",
    "n": 1
  },
    "txid": "de2cc88c885eb34cb2c62e2bd3085f6d683f5c5d94170e5f97842542a9815902",
    "n": 0
  },
    "txid": "de36d28a6e1cb739b7a1e5d90cabe1fe40539912ee9053eb5b09b38d1942f16f",
    "n": 0
  },
    "txid": "de36d28a6e1cb739b7a1e5d90cabe1fe40539912ee9053eb5b09b38d1942f16f",
    "n": 1
  },
    "txid": "defdd76a23abb5b7875c78c37f068b601eda22c50e0f86e16787085a8629e3c5",
    "n": 0
  },
    "txid": "df0047b50d1035e471e9d11d1334e6b95cb2eae93dae35e5d79592352373bc02",
    "n": 0
  },
    "txid": "df0047b50d1035e471e9d11d1334e6b95cb2eae93dae35e5d79592352373bc02",
    "n": 1
  },
    "txid": "df08eb9c7db5f119c84525cdc50aa145f87bcb300ad5bf0e84b8a2cb691b9817",
    "n": 0
  },
    "txid": "df2847cec96be42f94818722f41b2db75ce0cbec627eb78d5f617bedb58fe433",
    "n": 0
  },
    "txid": "df2847cec96be42f94818722f41b2db75ce0cbec627eb78d5f617bedb58fe433",
    "n": 1
  },
    "txid": "df494494825744b0c86c3326a32f204701e34737f1cc05f0a3d493f89a00990f",
    "n": 0
  },
    "txid": "df494494825744b0c86c3326a32f204701e34737f1cc05f0a3d493f89a00990f",
    "n": 1
  },
    "txid": "df664562b35697a3282a16f46b7888b83e005e93a94555758bb3c31d25e3f0b1",
    "n": 0
  },
    "txid": "df7155f1e4dbb734ebe6411bc96f9a4274a4b2069d0d456198836bdd5ccc50cc",
    "n": 0
  },
    "txid": "df7155f1e4dbb734ebe6411bc96f9a4274a4b2069d0d456198836bdd5ccc50cc",
    "n": 1
  },
    "txid": "dffae00e0057727f18fa32eb7039f9b8b0ce42531ac69c1ba3b70b4b2d8c9d83",
    "n": 0
  },
    "txid": "dffae00e0057727f18fa32eb7039f9b8b0ce42531ac69c1ba3b70b4b2d8c9d83",
    "n": 1
  },
    "txid": "e04ab336e8f4c7df454f04a76e27533e7b4d48a99279758aa6614e2a0619f7ec",
    "n": 0
  },
    "txid": "e06bc37fb1296f87aea6e79d194789d4444a8adbee41407e2af06673e9ed3fd1",
    "n": 0
  },
    "txid": "e06bc37fb1296f87aea6e79d194789d4444a8adbee41407e2af06673e9ed3fd1",
    "n": 1
  },
    "txid": "e0bfe37c9fed2cfb4babecf3089c9a01ca0b20fb7b6ebb30318b2d7ed159d13c",
    "n": 0
  },
    "txid": "e0bfe37c9fed2cfb4babecf3089c9a01ca0b20fb7b6ebb30318b2d7ed159d13c",
    "n": 1
  },
    "txid": "e0c1701b1aa692d7373b4439b58814a2747f862e1cfeed81fb906ed75e03299e",
    "n": 0
  },
    "txid": "e0c1701b1aa692d7373b4439b58814a2747f862e1cfeed81fb906ed75e03299e",
    "n": 1
  },
    "txid": "e0f632361a4237b0f67ff890b5027db0d22f812f60a62fade39fb4915d3bca94",
    "n": 0
  },
    "txid": "e0f632361a4237b0f67ff890b5027db0d22f812f60a62fade39fb4915d3bca94",
    "n": 1
  },
    "txid": "e1392e1583180e67d2ee5337cd3f0c22053943193e0ee9419c109a15707f0ddb",
    "n": 0
  },
    "txid": "e155228e471f9e58e9d7991e4352dd6d92227c0a2f34888f68a265fe8c0dc033",
    "n": 0
  },
    "txid": "e155228e471f9e58e9d7991e4352dd6d92227c0a2f34888f68a265fe8c0dc033",
    "n": 1
  },
    "txid": "e19970465d03f9959e01f3b622358bf46a68d471a4f6b701e69e536cb21a614e",
    "n": 0
  },
    "txid": "e285e1c3a5018eb875a4fadec2b482b88e59546fff8447e43e7e1b12cff6bc8d",
    "n": 0
  },
    "txid": "e2a9acdd1f279ff6a955925c4f41cee2ab0512183ba89c3761acf4a5ace90baa",
    "n": 0
  },
    "txid": "e2a9acdd1f279ff6a955925c4f41cee2ab0512183ba89c3761acf4a5ace90baa",
    "n": 1
  },
    "txid": "e2b148721bd4afc2b8898e5e0bc68c36f4e639473418d770b676b4d8aa29adcf",
    "n": 0
  },
    "txid": "e2ba402d580acc288d48deb07b5190b36c2bdbb8a74a0195b97c1f837d5bd24c",
    "n": 0
  },
    "txid": "e2bf83855ff1260ddffca69728b79524ecf6804c0935f2c2e584616ecbd7d549",
    "n": 0
  },
    "txid": "e2bf83855ff1260ddffca69728b79524ecf6804c0935f2c2e584616ecbd7d549",
    "n": 1
  },
    "txid": "e2e91670786874cd4dcecf1597be5e23b1f9ec533f45670ecb73274fe040da32",
    "n": 0
  },
    "txid": "e2e91670786874cd4dcecf1597be5e23b1f9ec533f45670ecb73274fe040da32",
    "n": 1
  },
    "txid": "e2f65f395955aa117b40345232ee5d662fb2b1a99555a846f69a1747a2417b8b",
    "n": 0
  },
    "txid": "e2f65f395955aa117b40345232ee5d662fb2b1a99555a846f69a1747a2417b8b",
    "n": 1
  },
    "txid": "e355bed94ee9520895d1cedcc3e9c5f14d962ac1006e4314c190ea26ba229a67",
    "n": 0
  },
    "txid": "e355bed94ee9520895d1cedcc3e9c5f14d962ac1006e4314c190ea26ba229a67",
    "n": 1
  },
    "txid": "e35f54b7d398c6e3862bd4b052da89c2e867f97b8b9448766290897b30369972",
    "n": 0
  },
    "txid": "e371e5394603accbddf9208790ff7599f8d67b5daf0d2a0041c327bf13070bd7",
    "n": 0
  },
    "txid": "e371e5394603accbddf9208790ff7599f8d67b5daf0d2a0041c327bf13070bd7",
    "n": 1
  },
    "txid": "e3821d74ab5e7d2f6f08ae1975d9d92451b60dea5fe7875c5a9a5b745d4a90f6",
    "n": 0
  },
    "txid": "e3821d74ab5e7d2f6f08ae1975d9d92451b60dea5fe7875c5a9a5b745d4a90f6",
    "n": 1
  },
    "txid": "e38338f78e41e1304c58bf73b7ee3d3f76586b8c909641d929e7d0a595a4044c",
    "n": 0
  },
    "txid": "e38338f78e41e1304c58bf73b7ee3d3f76586b8c909641d929e7d0a595a4044c",
    "n": 1
  },
    "txid": "e38bc5d19be4d15493d81655c8077fd5f86ca8ed33258ddad9d561a576f80ffa",
    "n": 0
  },
    "txid": "e38bc5d19be4d15493d81655c8077fd5f86ca8ed33258ddad9d561a576f80ffa",
    "n": 1
  },
    "txid": "e38e99bd62b6b8c178aab34d5cab1334f45fda54fff5b2c9af8bfcb237ff55ca",
    "n": 0
  },
    "txid": "e392f1b5877a554954df8b84a349252b91db4f06fe00f9f2b0f38906c6060a0a",
    "n": 0
  },
    "txid": "e3d4fbc141fd6d9a23c4df2e5a6cb520bcac624b31512ac9d546312d4c957af5",
    "n": 0
  },
    "txid": "e400c331e876818ab15f74e60292f935995f5fa77bb6619284c1ca5f67f50e1b",
    "n": 0
  },
    "txid": "e409bfddb916606553c4fa87e1ff030f6f6fa00e3caee03b1ebe371a4d6a07ab",
    "n": 0
  },
    "txid": "e438a25429d1a6ad008e808796f231848532acd0ce730436c9136b53c22e73a7",
    "n": 0
  },
    "txid": "e438a25429d1a6ad008e808796f231848532acd0ce730436c9136b53c22e73a7",
    "n": 1
  },
    "txid": "e4a765c940afbac650ffe661153b4e719a0326fc1c87d20185a7862ff772e9eb",
    "n": 0
  },
    "txid": "e4a765c940afbac650ffe661153b4e719a0326fc1c87d20185a7862ff772e9eb",
    "n": 1
  },
    "txid": "e4efac582d63a964f6a932426fcbf7c7a26072d73803548055a01ac2d64eaad5",
    "n": 0
  },
    "txid": "e4efac582d63a964f6a932426fcbf7c7a26072d73803548055a01ac2d64eaad5",
    "n": 1
  },
    "txid": "e5025b2ca865ea2e23e3e71015f29083559a8e67afc3ad6b056f8d24aca55f2d",
    "n": 0
  },
    "txid": "e507a89623fe0af85de3e5dd62edd00a506277488c97ac9d21aa617986135eba",
    "n": 0
  },
    "txid": "e507a89623fe0af85de3e5dd62edd00a506277488c97ac9d21aa617986135eba",
    "n": 1
  },
    "txid": "e57710c11225e45c173a960221edc25c83f107fd15fc528ee47e10788d4846b9",
    "n": 0
  },
    "txid": "e57710c11225e45c173a960221edc25c83f107fd15fc528ee47e10788d4846b9",
    "n": 1
  },
    "txid": "e579d07c3986d83e03fcb029d9f2b10ac088c32f2eab380b775c218fbd380c31",
    "n": 0
  },
    "txid": "e579d07c3986d83e03fcb029d9f2b10ac088c32f2eab380b775c218fbd380c31",
    "n": 1
  },
    "txid": "e57d393f8b1a5141fcf66149cef2d09c05fecc052b96c126656211df4dcba067",
    "n": 0
  },
    "txid": "e57d393f8b1a5141fcf66149cef2d09c05fecc052b96c126656211df4dcba067",
    "n": 1
  },
    "txid": "e6f67985a957b67a91044ab2fcc9987cc4ac1ff185610437e5dd7695e318b24b",
    "n": 0
  },
    "txid": "e6f67985a957b67a91044ab2fcc9987cc4ac1ff185610437e5dd7695e318b24b",
    "n": 1
  },
    "txid": "e7e16a7df47f41ba1ec3653bb5f4d8e84fbaa6d2ba0696fe675b4781e930899c",
    "n": 0
  },
    "txid": "e7e16a7df47f41ba1ec3653bb5f4d8e84fbaa6d2ba0696fe675b4781e930899c",
    "n": 1
  },
    "txid": "e85cbcf8e30ea30f8d3a37ea08da714ab129af104bb08a9e8abeddf4f2626cda",
    "n": 0
  },
    "txid": "e87c35505f0adbeb4d8e4af3bb5e1c32075e87660b6d3f1f1c9ba9accc547507",
    "n": 0
  },
    "txid": "e87c35505f0adbeb4d8e4af3bb5e1c32075e87660b6d3f1f1c9ba9accc547507",
    "n": 1
  },
    "txid": "e89e864b9d18a06be1a32f5876f22874af435a92dbee70c674a09a770ae3fe9b",
    "n": 0
  },
    "txid": "e89e864b9d18a06be1a32f5876f22874af435a92dbee70c674a09a770ae3fe9b",
    "n": 1
  },
    "txid": "e8bbd9ba2c2dd5a30062fb45adfdf74004a077e3104a10af8e7f9e7aed259c4e",
    "n": 0
  },
    "txid": "e8bbd9ba2c2dd5a30062fb45adfdf74004a077e3104a10af8e7f9e7aed259c4e",
    "n": 1
  },
    "txid": "e8ef4ced962ab8dcd1808c633cc03542f36f94f3e009883da4d956f97bdab072",
    "n": 0
  },
    "txid": "e90a8da17dbe955e1e739495073c37e9d17b9d8b5f3c57b7d9e6c9b41b5e7806",
    "n": 0
  },
    "txid": "e90a8da17dbe955e1e739495073c37e9d17b9d8b5f3c57b7d9e6c9b41b5e7806",
    "n": 1
  },
    "txid": "e92158cfcc390a64415f36fdf17dbdece413e4e55eee017aebb60226e852c1e2",
    "n": 0
  },
    "txid": "e92158cfcc390a64415f36fdf17dbdece413e4e55eee017aebb60226e852c1e2",
    "n": 1
  },
    "txid": "e92fd5c27b38503c286aa3871a0912a7f61b6a253c96e1ff6100247753a0514e",
    "n": 0
  },
    "txid": "e9c30a8a9c68c776b82a73aa4510cfc53bcfc8ec80ec447abc6e5ac961598cac",
    "n": 0
  },
    "txid": "e9c30a8a9c68c776b82a73aa4510cfc53bcfc8ec80ec447abc6e5ac961598cac",
    "n": 1
  },
    "txid": "e9de1d488ce9cdf97f4887d0e98c99ca3cc15ba3df468f040820c3322f156857",
    "n": 0
  },
    "txid": "ea069f8ac6096fdb6a0fe13d4a457a20dffec2f69e22469506b3ecbb8c0544eb",
    "n": 0
  },
    "txid": "ea069f8ac6096fdb6a0fe13d4a457a20dffec2f69e22469506b3ecbb8c0544eb",
    "n": 1
  },
    "txid": "ea9f1a9004bf61053aa026931fc5c2ec0853c94e418c04c22beb6b88e93dbf4c",
    "n": 0
  },
    "txid": "ea9f1a9004bf61053aa026931fc5c2ec0853c94e418c04c22beb6b88e93dbf4c",
    "n": 1
  },
    "txid": "eb394a9bf15fcf34004ea86d4d3517a67ab2fe43d0f4bcadc169f6aba1fd6334",
    "n": 0
  },
    "txid": "eb394a9bf15fcf34004ea86d4d3517a67ab2fe43d0f4bcadc169f6aba1fd6334",
    "n": 1
  },
    "txid": "eb523a3d692347befa7021a8338dbce56b36d1d03f513503aaaab08da6bdb941",
    "n": 0
  },
    "txid": "eb523a3d692347befa7021a8338dbce56b36d1d03f513503aaaab08da6bdb941",
    "n": 1
  },
    "txid": "eba6e81f599a55f44a80f2bbc36aa2f5eb6f582c3558b1122f3be5aebdf5a2b4",
    "n": 0
  },
    "txid": "eba6e81f599a55f44a80f2bbc36aa2f5eb6f582c3558b1122f3be5aebdf5a2b4",
    "n": 1
  },
    "txid": "ebab71a510cabb9dd7ba5646ad2706ffd85fd3ef538dff2feb4aeb606df5b03e",
    "n": 0
  },
    "txid": "ec1a40654a868737cda76b1d77c9a003060ffd7fa938323ead8233f2fbdfa10f",
    "n": 0
  },
    "txid": "ec1a40654a868737cda76b1d77c9a003060ffd7fa938323ead8233f2fbdfa10f",
    "n": 1
  },
    "txid": "ec56dd89cec7ebc236d1f127c32357099236b76104c3c2d7f29acc948e67d7ad",
    "n": 0
  },
    "txid": "ec56dd89cec7ebc236d1f127c32357099236b76104c3c2d7f29acc948e67d7ad",
    "n": 1
  },
    "txid": "ec6889a604d8971591e05f6d01bdc2789615103a86db75a7ea01c7ce7e9d3d56",
    "n": 0
  },
    "txid": "ec73649f8cb12c4cadc3fe5f4765feb9d783e0c7f70993a90c88cdcca4fad0ad",
    "n": 0
  },
    "txid": "ecbf018ca42347f067082016964bdc63769dd26df9eb24a0d0d2d651fcdb4c17",
    "n": 0
  },
    "txid": "ecbf018ca42347f067082016964bdc63769dd26df9eb24a0d0d2d651fcdb4c17",
    "n": 1
  },
    "txid": "ecf5c60db8b16686ac68452883ce5a53e7c866e3ebe864d6e17393d082dfc3fd",
    "n": 0
  },
    "txid": "ecf5c60db8b16686ac68452883ce5a53e7c866e3ebe864d6e17393d082dfc3fd",
    "n": 1
  },
    "txid": "ed3e1d4485fc2bb02a68e862413b1f52b2fc2ea0ebe52a33bd819e53470c91cd",
    "n": 0
  },
    "txid": "ed890fb44dee6e293036116d775e281e734d7ac695b7678e68d98f086756d7aa",
    "n": 0
  },
    "txid": "ed890fb44dee6e293036116d775e281e734d7ac695b7678e68d98f086756d7aa",
    "n": 1
  },
    "txid": "eda3b9a64f9bbb930b6bbff1c1397c88fa6c75ea1cf576a92f84b17e87ecfba5",
    "n": 0
  },
    "txid": "eda3b9a64f9bbb930b6bbff1c1397c88fa6c75ea1cf576a92f84b17e87ecfba5",
    "n": 1
  },
    "txid": "edaae0ecac1b1f02273069c95de214bc5116b46d6f5f432b9050924c7c920bf0",
    "n": 0
  },
    "txid": "edaae0ecac1b1f02273069c95de214bc5116b46d6f5f432b9050924c7c920bf0",
    "n": 1
  },
    "txid": "ee2143d0efad27f2af65866218e92e0ce74bbb6a0f72542a5707a553ae4a6cba",
    "n": 0
  },
    "txid": "ee2143d0efad27f2af65866218e92e0ce74bbb6a0f72542a5707a553ae4a6cba",
    "n": 1
  },
    "txid": "ee21e82fb71757839e8bdb0fb14bce747911922402d0680d6122512e45512959",
    "n": 0
  },
    "txid": "ee4548d056f0c6f5eecc02fd0d0274a9c5bb6819196e4d2be7183f183e9ea8a8",
    "n": 0
  },
    "txid": "ee4548d056f0c6f5eecc02fd0d0274a9c5bb6819196e4d2be7183f183e9ea8a8",
    "n": 1
  },
    "txid": "eed388fb3a9423bc64743ef5e61e98d11d3b4e1b2e27cfee0e008aaf646a1f73",
    "n": 0
  },
    "txid": "eed388fb3a9423bc64743ef5e61e98d11d3b4e1b2e27cfee0e008aaf646a1f73",
    "n": 1
  },
    "txid": "eed937b31de430f26e5983f2c59410ed4368280ee8b916626ed33420db85335a",
    "n": 0
  },
    "txid": "eeecaa503c50df22a85de6b2298c2a3e39a66d5ad8ee9d177c95d56f7426325b",
    "n": 0
  },
    "txid": "eeecaa503c50df22a85de6b2298c2a3e39a66d5ad8ee9d177c95d56f7426325b",
    "n": 1
  },
    "txid": "ef1ef81237a9dc8ac56ea438e4b7cecf6d1706f79d1c195e35b20d0fca26c931",
    "n": 0
  },
    "txid": "f01274450b65dacbe63b1855ae18929c854e6558ff7183eaa2b27ad5ebfee2ba",
    "n": 0
  },
    "txid": "f01274450b65dacbe63b1855ae18929c854e6558ff7183eaa2b27ad5ebfee2ba",
    "n": 1
  },
    "txid": "f07cbb9a0b0bfdd9b9a6ed25c3528b3d95759a8f23820a73e93dd981ac6acee7",
    "n": 0
  },
    "txid": "f07cbb9a0b0bfdd9b9a6ed25c3528b3d95759a8f23820a73e93dd981ac6acee7",
    "n": 1
  },
    "txid": "f0f25ff526e1fe78f818d3d6d23230015b88f093858273db9c3b29f63cc69201",
    "n": 0
  },
    "txid": "f0f25ff526e1fe78f818d3d6d23230015b88f093858273db9c3b29f63cc69201",
    "n": 1
  },
    "txid": "f11d337d96933ecb10d79bf56aad315fa6484af173c87f9c7a9ab05ea34633d9",
    "n": 0
  },
    "txid": "f11d337d96933ecb10d79bf56aad315fa6484af173c87f9c7a9ab05ea34633d9",
    "n": 1
  },
    "txid": "f18db0569cd480c577e5ddc29db43092042c660375de09f10b8a82816132ece2",
    "n": 0
  },
    "txid": "f1b82ebaace87cd4a9d3f47ad7640665e24dd3cab20409fbff7286d802599357",
    "n": 0
  },
    "txid": "f1c25b581bade13be5d9434b4bc4fe601c061bbe8cbf264f72463bfb24256047",
    "n": 0
  },
    "txid": "f23d986d803f0470ace110ff85505a316928bd7ee201db3e95632a654293159b",
    "n": 0
  },
    "txid": "f23d986d803f0470ace110ff85505a316928bd7ee201db3e95632a654293159b",
    "n": 1
  },
    "txid": "f2a6a406cb9068596378c03c91829020fe8b9b2cd6ca75c563a5fd56daa61412",
    "n": 0
  },
    "txid": "f2b4d9b00ec88216e1a5940e62cb758ee8c7d52bbf1c9be7148d2f7b583e0a98",
    "n": 0
  },
    "txid": "f2b4d9b00ec88216e1a5940e62cb758ee8c7d52bbf1c9be7148d2f7b583e0a98",
    "n": 1
  },
    "txid": "f2ea7df6aae538af9a86ff58e08da1204c49a97b056b078075e39f79cf28a36c",
    "n": 0
  },
    "txid": "f2ea7df6aae538af9a86ff58e08da1204c49a97b056b078075e39f79cf28a36c",
    "n": 1
  },
    "txid": "f32214553d4a9f4f931c35e7071bfdf1410da95a92bd22c45fe2241f47f40d08",
    "n": 0
  },
    "txid": "f3271e1f6e66125d9cf05f8e0593bb06345e0c0a0524e2f00d240090ae074644",
    "n": 0
  },
    "txid": "f3271e1f6e66125d9cf05f8e0593bb06345e0c0a0524e2f00d240090ae074644",
    "n": 1
  },
    "txid": "f340868f924d36051265cac75c7d69c77090410a972f4bbcf354a8c4e12c2b38",
    "n": 0
  },
    "txid": "f340868f924d36051265cac75c7d69c77090410a972f4bbcf354a8c4e12c2b38",
    "n": 1
  },
    "txid": "f34ecafed6eec137553915b3595eab82d38031335bbfdea594e8bd6db2819600",
    "n": 0
  },
    "txid": "f34ecafed6eec137553915b3595eab82d38031335bbfdea594e8bd6db2819600",
    "n": 1
  },
    "txid": "f3583eb013eac568f51b457c54a050eb450013cfc46ecaa829226efb9ef6ca4d",
    "n": 0
  },
    "txid": "f3583eb013eac568f51b457c54a050eb450013cfc46ecaa829226efb9ef6ca4d",
    "n": 1
  },
    "txid": "f3ec8eb0910557a8f996781d2934ad61c179610c2c0d38cc6fbbb1aa008b879f",
    "n": 0
  },
    "txid": "f3ec8eb0910557a8f996781d2934ad61c179610c2c0d38cc6fbbb1aa008b879f",
    "n": 1
  },
    "txid": "f46ad5e8b73a8d994a8007b4e1a43e125c37dcd9eea4383f463f8bb02bf14483",
    "n": 0
  },
    "txid": "f46ad5e8b73a8d994a8007b4e1a43e125c37dcd9eea4383f463f8bb02bf14483",
    "n": 1
  },
    "txid": "f4c6fb6a95ea944ec7fdb382ff68c4217b39177cfa2ec426405fcc66174af66a",
    "n": 0
  },
    "txid": "f4c6fb6a95ea944ec7fdb382ff68c4217b39177cfa2ec426405fcc66174af66a",
    "n": 1
  },
    "txid": "f4f8610928be83755404771c0d3c799bc864924f92521abd6b813eeb30908b77",
    "n": 0
  },
    "txid": "f50cc3f39fed9dc4fa78806101e8e571ee911a3413e839eea848682623a1452c",
    "n": 0
  },
    "txid": "f50cc3f39fed9dc4fa78806101e8e571ee911a3413e839eea848682623a1452c",
    "n": 1
  },
    "txid": "f5a0fd710d8ad80cbed09d69ad6f9c5e714cd700964c10ef2156ac1df07e852c",
    "n": 0
  },
    "txid": "f5a27c5e1e7e8708c23a1d3cf5f0f0b1f70e80639051df1ed3f7a7e1eaa3de37",
    "n": 0
  },
    "txid": "f5a27c5e1e7e8708c23a1d3cf5f0f0b1f70e80639051df1ed3f7a7e1eaa3de37",
    "n": 1
  },
    "txid": "f62eddb5df36cbe4447f643385aa597a61f5023caa11f3f541563419e95996cf",
    "n": 0
  },
    "txid": "f66faea1c9ab023562cc8ce32f91821ad62b30a7fe83ef381628b22104d5e798",
    "n": 0
  },
    "txid": "f66faea1c9ab023562cc8ce32f91821ad62b30a7fe83ef381628b22104d5e798",
    "n": 1
  },
    "txid": "f68c59cfb5cfa5f763ec3d5fcbbe88ccc0a37ebff62d6e229485afc0b32f8667",
    "n": 0
  },
    "txid": "f68c59cfb5cfa5f763ec3d5fcbbe88ccc0a37ebff62d6e229485afc0b32f8667",
    "n": 1
  },
    "txid": "f6b111b5dd954fbbd6161bd5b181c8de68d0f427c2d3c675ee73c440b31b31d3",
    "n": 0
  },
    "txid": "f6b111b5dd954fbbd6161bd5b181c8de68d0f427c2d3c675ee73c440b31b31d3",
    "n": 1
  },
    "txid": "f6eef0f05efe5abdf649f176dbaa3c2b7859ac9905403494fb638c20b5c52814",
    "n": 0
  },
    "txid": "f6f57f1c4b95cc4a29af777b28056bd0dc57ffae70ed601bb15027094c67242d",
    "n": 1
  },
    "txid": "f6f57f1c4b95cc4a29af777b28056bd0dc57ffae70ed601bb15027094c67242d",
    "n": 2
  },
    "txid": "f7504dc2bffaff4af878e48d932739bc6b882cc38f91ec4f1aec38dc93d72dd0",
    "n": 0
  },
    "txid": "f7504dc2bffaff4af878e48d932739bc6b882cc38f91ec4f1aec38dc93d72dd0",
    "n": 1
  },
    "txid": "f75b6c0a93ae6ea1871cd96bd050f30f925cb4fda7c26c227e99ebddc5ef2940",
    "n": 0
  },
    "txid": "f77729c5aa1294da9fab83d4b4c6ca6317706e216c1ab1b0f33964852068616e",
    "n": 0
  },
    "txid": "f78d483909e1db4aac2c41eabf8809a81c5882b1d28cbfa37b5ff91714390549",
    "n": 0
  },
    "txid": "f78d483909e1db4aac2c41eabf8809a81c5882b1d28cbfa37b5ff91714390549",
    "n": 1
  },
    "txid": "f793f8ce409b22e5684e13e43a923cd5e7fa74c853c1d10f52c169a4fff06f78",
    "n": 0
  },
    "txid": "f87200e4e44c4bbd4f62ec07448a623a200804ddf79236bc5947896591f2afdd",
    "n": 0
  },
    "txid": "f87200e4e44c4bbd4f62ec07448a623a200804ddf79236bc5947896591f2afdd",
    "n": 1
  },
    "txid": "f891496db9be5e3aaaa0d9cc0d19d6f7834e820e00d63e2af013af6d16d7395e",
    "n": 0
  },
    "txid": "f89eba8b9150604add1d26b632bec964027cae464c48940cc9186227186d027d",
    "n": 0
  },
    "txid": "f89eba8b9150604add1d26b632bec964027cae464c48940cc9186227186d027d",
    "n": 1
  },
    "txid": "f922e719d01b7214436afbf272a9c7b2c5e24bb1cc946daaed33c4b2f53d9dcb",
    "n": 0
  },
    "txid": "f922e719d01b7214436afbf272a9c7b2c5e24bb1cc946daaed33c4b2f53d9dcb",
    "n": 1
  },
    "txid": "f9578addf100907492a87a0dee93761953662663dbce8e08a73227847378e9c6",
    "n": 0
  },
    "txid": "f9578addf100907492a87a0dee93761953662663dbce8e08a73227847378e9c6",
    "n": 1
  },
    "txid": "f9b4a7de5f85e86c22bd61942e0de7955940e3ec8b5dd3c48cad1b9f0f15ceef",
    "n": 0
  },
    "txid": "f9b4a7de5f85e86c22bd61942e0de7955940e3ec8b5dd3c48cad1b9f0f15ceef",
    "n": 1
  },
    "txid": "f9b92416eb79387b33e0f56eef435d252b472d8cd38eac8124cdcd94256717da",
    "n": 0
  },
    "txid": "f9cfc1b31340a4a16046f61109ac03350f9a475e63c97b306d33f2b82e60d613",
    "n": 0
  },
    "txid": "f9f220823ca5e9010621c9d70bc2bde242f2144f0f9197facdae20c2707c4dfb",
    "n": 0
  },
    "txid": "fa2c41d3b5075b470898efe496de7bef1a08170594d7017b512bb6ca5d1fcb8e",
    "n": 0
  },
    "txid": "fa2c41d3b5075b470898efe496de7bef1a08170594d7017b512bb6ca5d1fcb8e",
    "n": 1
  },
    "txid": "fa44afffc0facfbf33220ad2c46d9502c501b6b6832d7ba7e01c92ab12293457",
    "n": 0
  },
    "txid": "fa6f52a8685e5653a0c8cf93397947a63b5fe4c204c188ed8c3fe9109b12d669",
    "n": 0
  },
    "txid": "fa6f52a8685e5653a0c8cf93397947a63b5fe4c204c188ed8c3fe9109b12d669",
    "n": 1
  },
    "txid": "fadb123e439fa3ff8a7af185628f7d7fc6ed14e08408be2460080a9bcb7e0917",
    "n": 0
  },
    "txid": "fadb123e439fa3ff8a7af185628f7d7fc6ed14e08408be2460080a9bcb7e0917",
    "n": 1
  },
    "txid": "faefce14269139531a87832181b0cdcc1b9a2b0512de05f8aa4e194cf5a5c0dc",
    "n": 0
  },
    "txid": "faefce14269139531a87832181b0cdcc1b9a2b0512de05f8aa4e194cf5a5c0dc",
    "n": 1
  },
    "txid": "faf98468cba9c2e1f7e8412f98fb0b9d3e283b4899b652c5d022129bdf62445a",
    "n": 0
  },
    "txid": "faf98468cba9c2e1f7e8412f98fb0b9d3e283b4899b652c5d022129bdf62445a",
    "n": 1
  },
    "txid": "fb04513b447b3a2dd9a05ee6aaf21a5930e333514900c78ab6bc9fb9f59c4641",
    "n": 0
  },
    "txid": "fb04513b447b3a2dd9a05ee6aaf21a5930e333514900c78ab6bc9fb9f59c4641",
    "n": 1
  },
    "txid": "fbc5c77f09278a0dfcf27850af17cd87ea45cce54a42099f795df46e38494f1e",
    "n": 0
  },
    "txid": "fbcd0e8d1c4294913e501d2f211b98a26f9cb6f2caee5f85477481e38bffc949",
    "n": 0
  },
    "txid": "fbcd0e8d1c4294913e501d2f211b98a26f9cb6f2caee5f85477481e38bffc949",
    "n": 1
  },
    "txid": "fbd2f9ff17ae6044e9dbfc74d5373b952087719388a686d721cf21eddd245293",
    "n": 0
  },
    "txid": "fbe4873146d77f5906c930401cda16a480713b829e0d04d5a9300861eeea0508",
    "n": 0
  },
    "txid": "fbe4873146d77f5906c930401cda16a480713b829e0d04d5a9300861eeea0508",
    "n": 1
  },
    "txid": "fbf0061ec89b2be70dafc78e219c1a68a085f8b5040aecd5295e4dd4270a48a0",
    "n": 0
  },
    "txid": "fbf0061ec89b2be70dafc78e219c1a68a085f8b5040aecd5295e4dd4270a48a0",
    "n": 1
  },
    "txid": "fc29357f7d5b007fe406dca83c028b2f64f0e641488323fc125a0f98683be3b9",
    "n": 0
  },
    "txid": "fc5ed1cad7abda03588ce2c42bc19079e93495d26cc9ea23b3185220bd7b90d6",
    "n": 0
  },
    "txid": "fc6bdf20d19a29a7badf69d275ae90fcee180e0e1a2c225bada97b4a43004053",
    "n": 0
  },
    "txid": "fc6bdf20d19a29a7badf69d275ae90fcee180e0e1a2c225bada97b4a43004053",
    "n": 1
  },
    "txid": "fc9539c5c8647da533665a617303cae3598de9ca9602f22f47b403a43f3917bf",
    "n": 0
  },
    "txid": "fc9539c5c8647da533665a617303cae3598de9ca9602f22f47b403a43f3917bf",
    "n": 1
  },
    "txid": "fcc078f2fd881acc9e59d4cad23e67757ade61155ce0fb1031fd94cd771ab442",
    "n": 0
  },
    "txid": "fcc078f2fd881acc9e59d4cad23e67757ade61155ce0fb1031fd94cd771ab442",
    "n": 1
  },
    "txid": "fcc697cd0cf8e1d827dd04e2321c67962583d4497f6dad2da2916e416413c697",
    "n": 0
  },
    "txid": "fcc697cd0cf8e1d827dd04e2321c67962583d4497f6dad2da2916e416413c697",
    "n": 1
  },
    "txid": "fd4bb45888a1c05c26f3f5e0a74c72bbf8d8398c8c0b166c5b2013b91aa69894",
    "n": 0
  },
    "txid": "fd4bb45888a1c05c26f3f5e0a74c72bbf8d8398c8c0b166c5b2013b91aa69894",
    "n": 1
  },
    "txid": "fd553ba535204e1959ad479d461f897afa1c30c1ba5e433ff695bf439c539072",
    "n": 0
  },
    "txid": "fd553ba535204e1959ad479d461f897afa1c30c1ba5e433ff695bf439c539072",
    "n": 1
  },
    "txid": "fd830f72967ce3b18b0e0cb3752971a7345123ddce1fdafab3d4d0d535952578",
    "n": 0
  },
    "txid": "fd830f72967ce3b18b0e0cb3752971a7345123ddce1fdafab3d4d0d535952578",
    "n": 1
  },
    "txid": "fd9b287069b1cd37cd6ca3acad9745360188c669f0aea13b8f40607973b42a01",
    "n": 0
  },
    "txid": "fd9b287069b1cd37cd6ca3acad9745360188c669f0aea13b8f40607973b42a01",
    "n": 1
  },
    "txid": "fdb7217e1c8fb7621c0a301756e53b6603f78e919bfb8380051009134c0e8e4c",
    "n": 0
  },
    "txid": "fdb7217e1c8fb7621c0a301756e53b6603f78e919bfb8380051009134c0e8e4c",
    "n": 1
  },
    "txid": "fdf6f835f928c964c3c0c8eae7f38dd5af46bebd767315c3557456773ad44768",
    "n": 0
  },
    "txid": "fdf7dcf77f8448d7e7806e0e30b38348882a2773c05e6b18664268e728e790a2",
    "n": 0
  },
    "txid": "fe2d16bff14cb0284f8fbc8cbf70645c147c07d0d9ba2a18c6c5efbfddb49d8b",
    "n": 0
  },
    "txid": "fe2d16bff14cb0284f8fbc8cbf70645c147c07d0d9ba2a18c6c5efbfddb49d8b",
    "n": 1
  },
    "txid": "fe34f4b21f7bdf6d0d17e9f68bb919c44d2921480cfd6441f71a5e61a7418f70",
    "n": 0
  },
    "txid": "fe34f4b21f7bdf6d0d17e9f68bb919c44d2921480cfd6441f71a5e61a7418f70",
    "n": 1
  },
    "txid": "fe38cd0a2a3110922b1b55c4d8e6f9ecd56c5bac61ec7b8c4e168063c019a403",
    "n": 0
  },
    "txid": "fe38cd0a2a3110922b1b55c4d8e6f9ecd56c5bac61ec7b8c4e168063c019a403",
    "n": 1
  },
    "txid": "fe8b78fe29f2846e90608d83a975577710fa9c1e94ef713c4866d6680ff96a54",
    "n": 1
  },
    "txid": "fee425420215cca74d1eafebcad0dbfb98a3393130a8700e09d2e9f37b22901c",
    "n": 0
  },
    "txid": "fee425420215cca74d1eafebcad0dbfb98a3393130a8700e09d2e9f37b22901c",
    "n": 1
  },
    "txid": "ff094c52d9dc5908abc6f2106e4c6e824ee1b4dfb1e73f485ef76faa2eac62c6",
    "n": 0
  },
    "txid": "ff094c52d9dc5908abc6f2106e4c6e824ee1b4dfb1e73f485ef76faa2eac62c6",
    "n": 1
  },
    "txid": "ff6809528d69e1745dd5f979c77f1a7b55f97fc28c4ad937392b45d312d049c4",
    "n": 0
  },
    "txid": "ff952cd968917f1e88068743e825371ad2f548e133903a068dd64e10d8ebfa3d",
    "n": 1
  },
    "txid": "ffcafd056bbb50b8c37a8205bc8621c7c36bab70939d4d6d6e7c56d8767e8856",
    "n": 0
  },
    "txid": "ffcafd056bbb50b8c37a8205bc8621c7c36bab70939d4d6d6e7c56d8767e8856",
    "n": 1
  },
    "txid": "fff7164737e3437fd27b3787edeb2650eddd07966c492ffb7e0eb537c0a5b850",
    "n": 0
  },
    "txid": "fff7164737e3437fd27b3787edeb2650eddd07966c492ffb7e0eb537c0a5b850",
    "n": 1
void boost::mutex::unlock()
CPubKey CKey::GetPubKey() const
void CExtKey::Encode(unsigned char*) const
bool CKey::SignCompact(const uint256&, std::vector<unsigned char>&) const
bool CKey::Sign(const uint256&, std::vector<unsigned char>&, uint32_t) const
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
CPrivKey CKey::GetPrivKey() const
int ec_privkey_export_der(const secp256k1_context*, unsigned char*, size_t*, const unsigned char*, int)
Bitcoin seed
void ECC_Start()
bool CKey::Derive(CKey&, ChainCode&, unsigned int, const ChainCode&) const
key.cpp
result.size() == clen
result.IsValid()
key.size() == 32
rec != -1
Bitcoin key verification
*privkeylen == CKey::COMPRESSED_PRIVATE_KEY_SIZE
secp256k1_context_sign == nullptr
IsValid()
IsCompressed()
pubkey.size() == CPubKey::COMPRESSED_PUBLIC_KEY_SIZE
size() == 32
9CKeyStore
14CBasicKeyStore
void boost::mutex::unlock()
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void CNetAddr::SetRaw(Network, const uint8_t*)
bool SetProxy(Network, const proxyType&)
bool GetProxy(Network, proxyType&)
CService::CService(const sockaddr_in&)
CService::CService(const sockaddr_in6&)
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
bool LookupIntern(const char*, std::vector<CNetAddr>&, unsigned int, bool)
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
netbase.cpp
!"invalid network"
net >= 0 && net < NET_MAX
addr.sin_family == AF_INET
addr.sin6_family == AF_INET6
aiTrav->ai_addrlen >= sizeof(sockaddr_in)
aiTrav->ai_addrlen >= sizeof(sockaddr_in6)
%s (%d)
SOCKS5 connecting %s
Hostname too long
Error sending to proxy
Error reading proxy response
Proxy failed to initialize
Proxy username or password too long
Error sending authentication to proxy
SOCKS5 sending proxy authentication %s:%s
Error reading proxy authentication response
Proxy authentication unsuccesful
Proxy requested wrong authentication method %02x
Proxy failed to accept request
Proxy error: general failure
Proxy error: connection not allowed
Proxy error: network unreachable
Proxy error: host unreachable
Proxy error: connection refused
Proxy error: TTL expired
Proxy error: protocol error
Proxy error: address type not supported
Proxy error: unknown
Error: malformed proxy response
Error reading from proxy
SOCKS5 connected %s
%u.%u.%u.%u
%x:%x:%x:%x:%x:%x:%x:%x
Cannot connect to %s: unsupported network
ConnectSocketDirectly: Setting socket to non-blocking failed, error %s
connection to %s timeout
select() for %s failed: %s
getsockopt() for %s failed: %s
connect() to %s failed after select(): %s
connect() to %s failed: %s
0.0.0.0:0
CInv::CInv(string, uint256) : unknown type '%s'
CInv::GetCommand() : type=%d unknown type
%s %s
CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE
ERROR
filtered block
tx lock request
tx lock vote
mn winner
mn scan error
mn budget vote
mn budget proposal
mn budget finalized
mn budget finalized vote
mn quorum
mn announce
mn ping
bool CPubKey::Derive(CPubKey&, ChainCode&, unsigned int, const ChainCode&) const
void CExtPubKey::Encode(unsigned char*) const
ECCVerifyHandle::ECCVerifyHandle()
ECCVerifyHandle::~ECCVerifyHandle()
pubkey.cpp
(nChild >> 31) == 0
size() == COMPRESSED_PUBLIC_KEY_SIZE
secp256k1_context_verify == nullptr
secp256k1_context_verify != nullptr
N5boost3_bi6bind_tIvPFvP10CSchedulerNS_8functionIFvvEEElENS0_5list3INS0_5valueIS3_EENSA_IS6_EENSA_IlEEEEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::condition_variable::~condition_variable()
CScheduler::~CScheduler()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
boost::condition_variable::condition_variable()
boost::detail::interruption_checker::interruption_checker(pthread_mutex_t*, pthread_cond_t*)
boost::detail::interruption_checker::~interruption_checker()
boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*)
void boost::condition_variable::notify_all()
void boost::pthread::pthread_mutex_scoped_lock::unlock()
void boost::condition_variable::notify_one()
scheduler.cpp
nThreadsServicingQueue == 0
CScriptNum CScriptNum::operator-() const
CScriptNum& CScriptNum::operator+=(const int64_t&)
CScriptNum& CScriptNum::operator-=(const int64_t&)
bool EvalScript(std::vector<std::vector<unsigned char> >&, const CScript&, unsigned int, const BaseSignatureChecker&, ScriptError*)
bool VerifyScript(const CScript&, const CScript&, unsigned int, const BaseSignatureChecker&, ScriptError*)
15scriptnum_error
27TransactionSignatureChecker
script number overflow
non-minimally encoded script number
./script/script.h
m_value != std::numeric_limits<int64_t>::min()
popstack() : stack empty
rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) || (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs)
rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) || (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs)
script/interpreter.cpp
!"invalid opcode"
!stackCopy.empty()
OP_PUSHDATA2
OP_PUSHDATA4
OP_RESERVED
OP_NOP
OP_VER
OP_IF
OP_NOTIF
OP_VERIF
OP_VERNOTIF
OP_ELSE
OP_ENDIF
OP_VERIFY
OP_RETURN
OP_TOALTSTACK
OP_FROMALTSTACK
OP_2DROP
OP_2DUP
OP_3DUP
OP_2OVER
OP_2ROT
OP_2SWAP
OP_IFDUP
OP_DEPTH
OP_DROP
OP_DUP
OP_NIP
OP_OVER
OP_PICK
OP_ROLL
OP_ROT
OP_SWAP
OP_TUCK
OP_CAT
OP_SUBSTR
OP_LEFT
OP_RIGHT
OP_SIZE
OP_INVERT
OP_AND
OP_OR
OP_XOR
OP_EQUAL
OP_EQUALVERIFY
OP_RESERVED1
OP_RESERVED2
OP_1ADD
OP_1SUB
OP_2MUL
OP_2DIV
OP_NEGATE
OP_ABS
OP_NOT
OP_0NOTEQUAL
OP_ADD
OP_SUB
OP_MUL
OP_DIV
OP_MOD
OP_LSHIFT
OP_RSHIFT
OP_BOOLAND
OP_BOOLOR
OP_NUMEQUAL
OP_NUMEQUALVERIFY
OP_NUMNOTEQUAL
OP_LESSTHAN
OP_GREATERTHAN
OP_LESSTHANOREQUAL
OP_GREATERTHANOREQUAL
OP_MIN
OP_MAX
OP_WITHIN
OP_RIPEMD160
OP_SHA1
OP_SHA256
OP_HASH160
OP_HASH256
OP_CODESEPARATOR
OP_CHECKSIG
OP_CHECKSIGVERIFY
OP_CHECKMULTISIG
OP_CHECKMULTISIGVERIFY
OP_NOP1
OP_NOP2
OP_NOP3
OP_NOP4
OP_NOP5
OP_NOP6
OP_NOP7
OP_NOP8
OP_NOP9
OP_NOP10
OP_ZEROCOINMINT
OP_ZEROCOINSPEND
OP_INVALIDOPCODE
OP_PUSHDATA1
[error]
void boost::mutex::unlock()
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
CScript CombineMultisig(const CScript&, const CTransaction&, unsigned int, const std::vector<std::vector<unsigned char> >&, const std::vector<std::vector<unsigned char> >&, const std::vector<std::vector<unsigned char> >&)
bool SignSignature(const CKeyStore&, const CScript&, CMutableTransaction&, unsigned int, int)
bool SignSignature(const CKeyStore&, const CTransaction&, CMutableTransaction&, unsigned int, int)
script/sign.cpp
vSolutions.size() > 1
*** solver solver failed 
*** null data 
*** Sign1 failed 
*** solver failed to sign 
*** solver no case met 
nIn < txTo.vin.size()
txin.prevout.n < txFrom.vout.size()
static opcodetype CScript::EncodeOP_N(int)
T boost::detail::variant::forced_return() [with T = void]
T boost::detail::variant::forced_return() [with T = bool]
nonstandard
pubkeyhash
scripthash
nulldata
n >= 0 && n <= 16
TQNKHEB?<9630-*'$!
unknown error
No error
Script failed an OP_VERIFY operation
Script failed an OP_EQUALVERIFY operation
Script failed an OP_CHECKMULTISIGVERIFY operation
Script failed an OP_CHECKSIGVERIFY operation
Script failed an OP_NUMEQUALVERIFY operation
Script is too big
Push value size limit exceeded
Operation limit exceeded
Stack size limit exceeded
Signature count negative or greater than pubkey count
Pubkey count negative or limit exceeded
Opcode missing or not understood
Attempted to use a disabled opcode
Operation not valid with the current stack size
Operation not valid with the current altstack size
OP_RETURN was encountered
Invalid OP_IF construction
Negative locktime
Locktime requirement not satisfied
Signature hash type missing or not understood
Non-canonical DER signature
Data push larger than necessary
Only non-push operators allowed in signatures
Non-canonical signature: S value is unnecessarily high
Dummy CHECKMULTISIG argument must be zero
NOPx reserved for soft-fork upgrades
Public key is neither compressed or uncompressed
Script evaluated without error but finished with a false/empty top stack element
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
void boost::mutex::unlock()
boost::mutex::~mutex()
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
boost::unordered::detail::table<Types>::bucket_pointer boost::unordered::detail::table<Types>::get_bucket(std::size_t) const [with Types = boost::unordered::detail::map<std::allocator<std::pair<const uint256, CBlockIndex*> >, uint256, CBlockIndex*, BlockHasher, std::equal_to<uint256> >; boost::unordered::detail::table<Types>::bucket_pointer = boost::unordered::detail::ptr_bucket*; std::size_t = long unsigned int]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
ProcessSpork
GetSporkValue
LoadSporksFromDB
SPORK_2_SWIFTTX
SPORK_3_SWIFTTX_BLOCK_FILTERING
SPORK_5_MAX_VALUE
SPORK_7_MASTERNODE_SCANNING
SPORK_8_MASTERNODE_PAYMENT_ENFORCEMENT
SPORK_9_MASTERNODE_BUDGET_ENFORCEMENT
SPORK_10_MASTERNODE_PAY_UPDATED_NODES
SPORK_13_ENABLE_SUPERBLOCKS
SPORK_14_NEW_PROTOCOL_ENFORCEMENT
SPORK_15_NEW_PROTOCOL_ENFORCEMENT_2
SPORK_16_ZEROCOIN_MAINTENANCE_MODE
CMasternodePayments::Sign - ERROR: Invalid masternodeprivkey: '%s'
CMasternodePayments::Sign - Sign message failed
CMasternodePayments::Sign - Verify message failed
CSporkManager::SetPrivKey - Successfully initialized as spork signer
ReprocessBlocks - %s
%s : Invalid Signature
%s : Unknown Spork %d
%s : no previous value for %s found in database
%s : loaded spork %s with value %d : %s
%s : loaded spork %s with value %d
%s : seen %s block %d 
%s : got updated spork %s block %d 
%s : new %s ID %d Time %d bestHeight %d
array
bool
JSON value is not an object as expected
JSON value is not an object or array as expected
JSON value is not a boolean as expected
JSON value is not a string as expected
JSON value is not an integer as expected
JSON integer out of range
JSON value is not an array as expected
JSON value is not a number as expected
JSON double out of range
\u0000
\u0001
\u0002
\u0003
\u0004
\u0005
\u0006
\u0007
\u000b
\u000e
\u000f
\u0010
\u0011
\u0012
\u0013
\u0014
\u0015
\u0016
\u0017
\u0018
\u0019
\u001a
\u001b
\u001c
\u001d
\u001e
\u001f
\u007f
cannot convert to uint256, bignum longer than 256 bits
Invalid parameters for accumulator
Accumulator is not initialized
Wrong denomination for coin. Expected coins of denomination: 
. Instead, got a coin of denomination: 
Wrong denomination for coin
Coin not valid
Coin is not valid
VerifyWitness: failed verify temp does not equal a
VerifyWitness: failed verify pubcoins not equal
void boost::mutex::unlock()
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
validate
Params are not initialized
denom does not exist
Denomination does not exist
%s: ERROR: PublicCoin::validate value is too low: %s
%s: ERROR: PublicCoin::validate value is too high, max: %s, received: %s
%s: ERROR: PublicCoin::validate value is not prime. Value: %s, Iterations: %d
Serial not valid
Unable to mint a new Zerocoin (too many attempts)
Accumulator witness does not verify
Coinspend failed to sign signature hash
CoinSpend:
 version=
 signatureHash=
 spendtype=
Serial longer than 256 bits
COMMITMENT_EQUALITY_PROOF
Both commitments must contain the same value
Groups are not structured correctly.
Invalid serial range
Invalid commitment to coin range
SoK Verify() :: sprime in pos %d not in valid range
SoK Verify() :: sprime invalid range.
Security level must be at least 80 bits.
Security level not supported.
Modulus size is too small for this security level.
Prime length is too short
Unable to find prime in Shawe-Taylor algorithm
Unable to generate random prime (too many tests)
Unable to generate a prime modulus for the group
Invalid index for group generation
ggen
Unable to find a generator, too many attempts
Group parameters are not valid
Too many attempts to generate Schnorr group.
Modulus must be at least 1023 bits
COIN_COMMITMENT_GROUP
ACCUMULATOR_INTERNAL_COMMITMENT_GROUP
ACCUMULATOR_QRN_COMMITMENT_GROUPG
ACCUMULATOR_QRN_COMMITMENT_GROUPH
const CBaseChainParams& BaseParams()
void SelectBaseParams(CBaseChainParams::Network)
chainparamsbase.cpp
pCurrentBaseParams
%d.%d.%d.%d
Giant Coin
v1.4.2.0-08d7573
2020-12-30 01:34:22 +0200
GetRandBytes
void GetRandBytes(unsigned char*, int)
%s: OpenSSL RAND_bytes() failed with error: %s
random.cpp
DeleteAuthCookie
-rpccookiefile
Unable to open cookie authentication file %s for writing
Generated RPC authentication cookie %s
%s: Unable to remove random auth cookie file: %s
__cookie__
.cookie
10uint_error
uint32_t uint256::GetCompact(bool) const
Converting vector of wrong size to base_uint
Division by zero
%02x
uint256.cpp
(nCompact & ~0x007fffff) == 0
nSize < 256
N5boost9iterators6detail20iterator_facade_baseINS_15program_options6detail27common_config_file_iteratorEKNS3_12basic_optionIcEENS0_21forward_traversal_tagERS8_lLb0ELb0EEE
N5boost9iterators15iterator_facadeINS_15program_options6detail27common_config_file_iteratorEKNS2_12basic_optionIcEENS0_21forward_traversal_tagERS7_lEE
N5boost12eof_iteratorINS_15program_options6detail27common_config_file_iteratorENS1_12basic_optionIcEEEE
N5boost15program_options6detail12null_deleterE
N5boost6detail14do_heap_deleteINS_19thread_specific_ptrISt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS9_ESaIS9_EEE11delete_dataEEE
N5boost15program_options6detail27common_config_file_iteratorE
N5boost6detail20tss_cleanup_functionE
N5boost15program_options6detail26basic_config_file_iteratorIcEE
N5boost19thread_specific_ptrISt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS7_ESaIS7_EEE11delete_dataE
N5boost6detail18sp_counted_impl_pdIPNS_19thread_specific_ptrISt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS9_ESaIS9_EEE11delete_dataENS0_14do_heap_deleteISF_EEEE
N5boost6detail18sp_counted_impl_pdIPSiNS_15program_options6detail12null_deleterEEE
typename boost::detail::sp_member_access<T>::type boost::shared_ptr<T>::operator->() const [with T = boost::filesystem::filesystem_error::m_imp; typename boost::detail::sp_member_access<T>::type = boost::filesystem::filesystem_error::m_imp*]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = std::basic_istream<char>; typename boost::detail::sp_dereference<T>::type = std::basic_istream<char>&]
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
void boost::mutex::unlock()
void DebugPrintInit()
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
util.cpp
LC_ALL
HOME
.giant
debug.log
fileout == NULL
mutexDebugLog == NULL
-conf
-mnconf
-pid
EXCEPTION: %s       
%s       
%s in %s       
UNKNOWN EXCEPTION       
%s in %s       
************************
runCommand error: system(%s) returned %d
%d.%08d
void boost::mutex::unlock()
boost::mutex::~mutex()
void LockedPageManagerBase<Locker>::UnlockRange(void*, size_t) [with Locker = MemoryPageLocker; size_t = long unsigned int]
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
abcdefghijklmnopqrstuvwxyz234567
Input length should be a multiple of 4
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
 .,;-_/:?@()
 .,;-_?@
%Y-%b-%d %H:%M:%S%F %z
%H:%M
%H:%M:%S
not-a-date-time
-infinity
+infinity
after
before
last
fifth
fourth
third
second
first
%Y-%m-%d
%Y%m%d
N5boost9date_time10date_facetINS_9gregorian4dateEcSt19ostreambuf_iteratorIcSt11char_traitsIcEEEE
N5boost9date_time10time_facetINS_10posix_time5ptimeEcSt19ostreambuf_iteratorIcSt11char_traitsIcEEEE
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
tm unable to handle 
+infinity date value
a special date value
-infinity date value
not-a-date-time value
%dd %02dh:%02dm:%02ds
%02dh:%02dm:%02ds
%02dm:%02ds
25CZMQNotificationInterface
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
bool CZMQNotificationInterface::Initialize()
zmq: Shutdown notification interface
   Shutdown notifier %s at %s
zmq: Error: %s, errno=%s
zmq: Initialize notification interface
zmq/zmqnotificationinterface.cpp
!pcontext
Unable to initialize context
  Notifier %s ready (address = %s)
  Notifier %s failed (address = %s)
pubhashblock
pubhashtx
pubhashtxlock
pubrawblock
pubrawtx
pubrawtxlock
-zmq
27CZMQAbstractPublishNotifier
28CZMQPublishHashBlockNotifier
34CZMQPublishHashTransactionNotifier
38CZMQPublishHashTransactionLockNotifier
27CZMQPublishRawBlockNotifier
33CZMQPublishRawTransactionNotifier
37CZMQPublishRawTransactionLockNotifier
typename boost::detail::sp_dereference<T>::type boost::shared_ptr<T>::operator*() const [with T = boost::exception_detail::error_info_base; typename boost::detail::sp_dereference<T>::type = boost::exception_detail::error_info_base&]
virtual boost::shared_ptr<boost::exception_detail::error_info_base> boost::exception_detail::error_info_container_impl::get(const boost::exception_detail::type_info_&) const
bool CZMQAbstractPublishNotifier::SendMessage(const char*, const void*, size_t)
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
virtual void CZMQAbstractPublishNotifier::Shutdown()
virtual bool CZMQAbstractPublishNotifier::Initialize(void*)
virtual void boost::exception_detail::error_info_container_impl::set(const boost::shared_ptr<boost::exception_detail::error_info_base>&, const boost::exception_detail::type_info_&)
Unable to initialize ZMQ msg
Unable to send ZMQ msg
zmq/zmqpublishnotifier.cpp
psocket
Close socket at address %s
zmq: Publish hashtx %s
hashtx
zmq: Publish hashtxlock %s
hashtxlock
zmq: Publish hashblock %s
hashblock
!psocket
Failed to create socket
Failed to bind address
zmq: Reusing socket for address %s
zmq: Publish rawtx %s
rawtx
zmq: Publish rawblock %s
rawblock
zmq: Publish rawtxlock %s
rawtxlock
20CZMQAbstractNotifier
virtual CZMQAbstractNotifier::~CZMQAbstractNotifier()
zmq/zmqabstractnotifier.cpp
p09Y
|6*)
g&3g
#"! '&%$+*)(/.-,32107654;:98?>=<CBA@GFEDKJIHONMLSRQPWVUT[ZYX_^]\cba`gfedkjihonmlsrqpwvut{zyx
'&%$#"! /.-,+*)(76543210?>=<;:98GFEDCBA@ONMLKJIHWVUTSRQP_^]\[ZYXgfedcba`onmlkjihwvutsrqp
~}|{zyx
1|MM
/nAAg}
%`EE
](uu
VQQ4
bb?TA?Ak**
FF^!
(`x(xH00
6HZ6Z~$$
XX.hr.rF44-lw-wA66
vvau
I4}}{
C:yy
4{OO
>uKK
X/wwuE
BB0@P0Pp  
5L_5_y&&/
9\K9Ke..W=
+d}+}O22
kk<PD<Dl((yU
*iCC
;rII
 gGG
\\$pl$lT88
R!ssQ5
!|c!c]>>
W&qq
'ti'iS::
++3DU3Uw""
--"xf"fZ<<
PPzQ
F={{
mm:XN:Nb,,
1|MM
/nAA
%`EE
](uu
bbSTA?Ak**?
FFe!
^`x(xH00(n
	HZ6Z~$$66
XXthr.rF44.lw-wA66-
vvMu
I4}}
^^q&
C:yy
rrK3y
4{OO
ffU"
xxDJ
>uKK
X/ww
BBc@P0Pp  0
L_5_y&&5
\K9Ke..9=
d}+}O22+
TT~v
PD<Dl((<U
ttN("
HHlk7
*iCC
;rII
 gGG
\\rpl$lT88$
R!ss
|c!c]>>!7|
W&qq
jj_G
Xti'iS::'N
DU3Uw""3
xf"fZ<<"*
PPxQ
ZZw<3
F={{
XN:Nb,,:
%`E#
b*?TA?Ak*
0(`x(xH07
$6HZ6Z~$
X4.hr.rF46-lw-wA6
I4}R{
B 0@P0Pp 
&5L_5_y&
.9\K9Ke.
2+d}+}O2
k(<PD<Dl(
\8$pl$lT8W
>!|c!c]>
:'ti'iS:'
+"3DU3Uw"
-<"xf"fZ<
m,:XN:Nb,
m``P
.VV}
%`##
Rhh\
>bbS
**?TA?Ak
cFFe
00(`x(xH77
$$6HZ6Z~
44.hr.rF66-lw-wA
I4RR{
0BBc
  0@P0Pp
<$&&5L_5_y
..9\K9Ke
azzG
22+d}+}O
"DDf
((<PD<Dl
NnnY
(8oo
sJJo
88$pl$lTWW
W>>!|c!c]
K||B
<jj_
q::'ti'iS''
""3DU3Uw
<<"xf"fZ
9#ee
3-{{
,,:XN:Nb
1|MM
/nAA
%`EE
](uu
A?Ak**?T
^!x(xH00(`
Z6Z~$$6H
6G=G
r.rF44.hw-wA66-l
I4}}
C:yy
km~*~
4{OO
>uKK
X/ww
P0Pp  0@.
0_5_y&&5Lq/q
K9Ke..9\
o}+}O22+d
D<Dl((<P
vAM;M
*iCC
bY7Y
;rII
 gGG
l$lT88$p
R!ss
Q5e#e
c!c]>>!||
W&qq
X)i'iS::'t
NH8H
VU3Uw""3D
Zf"fZ<<"x
*` `
F={{
N:Nb,,:X
1|MM
/nAA
%`EE
](uu
?Ak**?TA
(xH00(`x
6Z~$$6HZ
.rF44.hr-wA66-lw
I4}}
C:yy
4{OO
>uKK
X/ww
0Pp  0@P
0<5_y&&5L_/q
O9Ke..9\KW
o2+}O22+d}
n<Dl((<PDy
*iCC
;rII
 gGG
$lT88$pl
R!ss
!c]>>!|c
W&qq
'iS::'ti
3Uw""3DU
"fZ<<"xf
F={{
a:Nb,,:XN
b1|MM
/nAA
%`EE
[](uu
SAk**?TA?
^xH00(`x(
	Z~$$6HZ6
trF44.hr.wA66-lw-
aI4}}
C:yy
~*4{OO
>uKK
X/ww
cPp  0@P0.
_y&&5L_5q
Ke..9\K9
}O22+d}+
Dl((<PD<
n*iCC
;rII
 gGG
rlT88$pl$
R!ss
c]>>!|c!|
BW&qq
XiS::'ti'
Uw""3DU3
fZ<<"xf"
F={{
Nb,,:XN:2
k**?TA?A
H00(`x(x
~$$6HZ6Z
F44.hr.rA66-lw-w
)M[[
!:yy
~*~{OO
z/ww
p  0@P0P
<y&&5L_5_
Oe..9\K9Kj
2O22+d}+}B
nl((<PD<D,
Y7Yt
V2VN
mrII
o%o 
T88$pl$l_WW
e#e%
]>>!|c!c
S::'ti'i
w""3DU3U
Z<<"xf"f
` `\
3={{
ab,,:XN:N
n6{_2
VuM.
v'l)
-'^\
^;m.
qn;V
xFZT
N7leveldb8SnapshotE
N7leveldb2DBE
N7leveldb12SnapshotImplE
N7leveldb6DBImplE
void leveldb::SnapshotList::Delete(const leveldb::SnapshotImpl*)
void leveldb::MemTable::Unref()
void leveldb::DBImpl::TEST_CompactRange(int, const leveldb::Slice*, const leveldb::Slice*)
leveldb::Status leveldb::DBImpl::FinishCompactionOutputFile(leveldb::DBImpl::CompactionState*, leveldb::Iterator*)
leveldb::WriteBatch* leveldb::DBImpl::BuildBatchGroup(leveldb::DBImpl::Writer**)
leveldb::Status leveldb::DBImpl::MakeRoomForWrite(bool)
void leveldb::DBImpl::CleanupCompaction(leveldb::DBImpl::CompactionState*)
void leveldb::VersionSet::SetLastSequence(uint64_t)
leveldb::Status leveldb::DBImpl::OpenCompactionOutputFile(leveldb::DBImpl::CompactionState*)
leveldb::Slice leveldb::ExtractUserKey(const leveldb::Slice&)
leveldb::Status leveldb::DBImpl::RecoverLogFile(uint64_t, bool, bool*, leveldb::VersionEdit*, leveldb::SequenceNumber*)
void leveldb::DBImpl::CompactMemTable()
leveldb::Status leveldb::DBImpl::DoCompactionWork(leveldb::DBImpl::CompactionState*)
void leveldb::DBImpl::BackgroundCompaction()
void leveldb::DBImpl::BackgroundCall()
leveldb::Status leveldb::DBImpl::Recover(leveldb::VersionEdit*, bool*)
static leveldb::Status leveldb::DB::Open(const leveldb::Options&, const string&, leveldb::DB**)
*ZN7leveldb6DBImpl14RecoverLogFileEmbPbPNS_11VersionEditEPmE11LogReporter
./leveldb/db/snapshot.h
s->list_ == this
./leveldb/db/memtable.h
refs_ >= 0
num-files-at-level
stats
                               Compactions
Level  Files Size(MB) Time(sec) Read(MB) Write(MB)
--------------------------------------------------
%3d %8d %8.0f %9.0f %8.0f %9.0f
approximate-memory-usage
(ignoring error) 
%s%s: dropping %d bytes; %s
Ignoring error %s
leveldb/db/db_impl.cc
level >= 0
level + 1 < config::kNumLevels
compact != NULL
compact->outfile != NULL
compact->builder != NULL
output_number != 0
Generated table #%llu@%d: %lld keys, %lld bytes
!writers_.empty()
result != NULL
WriteBatchInternal::Count(result) == 0
Current memtable full; waiting...
Too many L0 files; waiting...
versions_->PrevLogNumber() == 0
compact->outfile == NULL
./leveldb/db/version_set.h
s >= last_sequence_
compact->builder == NULL
Compacted %d@%d + %d@%d files => %lld bytes
Level-0 table #%llu: started
Level-0 table #%llu: %lld bytes %s
./leveldb/db/dbformat.h
internal_key.size() >= 8
Recovering log #%llu
log record too small
logfile_ == NULL
log_ == NULL
mem_ == NULL
Reusing old log %s 
Delete type=%d #%lld
imm_ != NULL
Deleting DB during memtable compaction
Compacting %d@%d + %d@%d files
versions_->NumLevelFiles(compact->compaction->level()) > 0
Deleting DB during compaction
compacted to: %s
(begin)
(end)
Manual compaction at level-%d from %s .. %s; will stop at %s
c->num_input_files(0) == 1
Moved #%lld to level-%d %lld bytes %s: %s
Compaction error: %s
bg_compaction_scheduled_
db_lock_ == NULL
does not exist (create_if_missing is false)
exists (error_if_exists is true)
%d missing files; e.g.
impl->mem_ != NULL
virtual leveldb::Slice leveldb::{anonymous}::DBIter::value() const
virtual leveldb::Slice leveldb::{anonymous}::DBIter::key() const
leveldb::Slice leveldb::ExtractUserKey(const leveldb::Slice&)
void leveldb::{anonymous}::DBIter::FindNextUserEntry(bool, std::__cxx11::string*)
virtual void leveldb::{anonymous}::DBIter::Next()
void leveldb::{anonymous}::DBIter::FindPrevUserEntry()
virtual void leveldb::{anonymous}::DBIter::Prev()
*N7leveldb12_GLOBAL__N_16DBIterE
leveldb/db/db_iter.cc
iter_->Valid()
direction_ == kForward
corrupted internal key in DBIter
direction_ == kReverse
std::__cxx11::string leveldb::TempFileName(const string&, uint64_t)
std::__cxx11::string leveldb::LogFileName(const string&, uint64_t)
std::__cxx11::string leveldb::TableFileName(const string&, uint64_t)
std::__cxx11::string leveldb::SSTTableFileName(const string&, uint64_t)
std::__cxx11::string leveldb::DescriptorFileName(const string&, uint64_t)
leveldb::Status leveldb::SetCurrentFile(leveldb::Env*, const string&, uint64_t)
void leveldb::Slice::remove_prefix(size_t)
leveldb/db/filename.cc
number > 0
CURRENT
LOG.old
MANIFEST-
.dbtmp
/CURRENT
/LOG.old
/LOCK
/LOG
/%06llu.%s
dbtmp
/MANIFEST-%06llu
contents.starts_with(dbname + "/")
./leveldb/include/leveldb/slice.h
n <= size()
N7leveldb3log6Reader8ReporterE
void leveldb::Slice::remove_prefix(size_t)
bad record length
checksum mismatch
partial record without end(1)
partial record without end(2)
missing start of fragmented record(1)
missing start of fragmented record(2)
error in middle of record
unknown record type %u
leveldb::Status leveldb::log::Writer::EmitPhysicalRecord(leveldb::log::RecordType, const char*, size_t)
leveldb::Status leveldb::log::Writer::AddRecord(const leveldb::Slice&)
leveldb/db/log_writer.cc
n <= 0xffff
block_offset_ + kHeaderSize + n <= kBlockSize
leftover >= 0
kBlockSize - block_offset_ - kHeaderSize >= 0
N7leveldb16MemTableIteratorE
void leveldb::SkipList<Key, Comparator>::Iterator::Next() [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
const Key& leveldb::SkipList<Key, Comparator>::Iterator::key() const [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
leveldb::SkipList<Key, Comparator>::Node* leveldb::SkipList<Key, Comparator>::Node::Next(int) [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
leveldb::MemTable::~MemTable()
void leveldb::SkipList<Key, Comparator>::Insert(const Key&) [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
char* leveldb::Arena::Allocate(size_t)
void leveldb::MemTable::Add(leveldb::SequenceNumber, leveldb::ValueType, const leveldb::Slice&, const leveldb::Slice&)
leveldb::SkipList<Key, Comparator>::Node* leveldb::SkipList<Key, Comparator>::FindLessThan(const Key&) const [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
void leveldb::SkipList<Key, Comparator>::Iterator::Prev() [with Key = const char*; Comparator = leveldb::MemTable::KeyComparator]
n >= 0
./leveldb/db/skiplist.h
x == NULL || !Equal(key, x->key)
x == head_ || compare_(x->key, key) < 0
leveldb/db/memtable.cc
refs_ == 0
./leveldb/util/arena.h
bytes > 0
p + val_size == buf + encoded_len
leveldb::Status leveldb::TableCache::FindTable(uint64_t, uint64_t, leveldb::Cache::Handle**)
leveldb/db/table_cache.cc
table == NULL
leveldb::Slice leveldb::InternalKey::Encode() const
!rep_.empty()
VersionEdit {
  Comparator: 
  LogNumber: 
  PrevLogNumber: 
  NextFile: 
  LastSeq: 
  CompactPointer: 
  DeleteFile: 
  AddFile: 
 .. 
compaction pointer
comparator name
new-file entry
previous log number
deleted file
log number
last sequence number
next file number
unknown tag
invalid tag
VersionEdit
N7leveldb7Version20LevelFileNumIteratorE
virtual void leveldb::Version::LevelFileNumIterator::Next()
virtual void leveldb::Version::LevelFileNumIterator::Prev()
virtual leveldb::Slice leveldb::Version::LevelFileNumIterator::key() const
leveldb::Slice leveldb::InternalKey::Encode() const
virtual leveldb::Slice leveldb::Version::LevelFileNumIterator::value() const
leveldb::Slice leveldb::ExtractUserKey(const leveldb::Slice&)
leveldb::Version::~Version()
void leveldb::Version::Unref()
leveldb::VersionSet::~VersionSet()
void leveldb::VersionSet::AppendVersion(leveldb::Version*)
bool leveldb::VersionSet::ReuseManifest(const string&, const string&)
int leveldb::VersionSet::NumLevelFiles(int) const
int64_t leveldb::VersionSet::NumLevelBytes(int) const
void leveldb::VersionSet::GetRange(const std::vector<leveldb::FileMetaData*>&, leveldb::InternalKey*, leveldb::InternalKey*)
leveldb::Iterator* leveldb::VersionSet::MakeInputIterator(leveldb::Compaction*)
void leveldb::VersionSet::Builder::MaybeAddFile(leveldb::Version*, int, leveldb::FileMetaData*)
void leveldb::Version::GetOverlappingInputs(int, const leveldb::InternalKey*, const leveldb::InternalKey*, std::vector<leveldb::FileMetaData*>*)
leveldb::Compaction* leveldb::VersionSet::PickCompaction()
leveldb::Status leveldb::VersionSet::LogAndApply(leveldb::VersionEdit*, leveldb::port::Mutex*)
*ZN7leveldb10VersionSet7RecoverEPbE11LogReporter
vset_->icmp_.Compare((*files)[files->size()-1]->largest, f->smallest) < 0
overlapping ranges in same level %s vs. %s
leveldb/db/version_set.cc
FileReader invoked with unexpected value
f->refs > 0
this != &vset_->dummy_versions_
refs_ >= 1
--- level 
 ---
dummy_versions_.next_ == &dummy_versions_
v->refs_ == 0
v != current_
descriptor_file_ == NULL
descriptor_log_ == NULL
Reuse MANIFEST: %s
Reusing MANIFEST %s
level < config::kNumLevels
files[ %d %d %d %d %d %d %d ]
!inputs.empty()
num <= space
Expanding@%d %d+%d (%ld+%ld bytes) to %d+%d (%ld+%ld bytes)
level+1 < config::kNumLevels
!c->inputs_[0].empty()
CURRENT file does not end with newline
 does not match existing comparator 
no meta-nextfile entry in descriptor
no meta-lognumber entry in descriptor
no last-sequence-number entry in descriptor
edit->log_number_ >= log_number_
edit->log_number_ < next_file_number_
MANIFEST write: %s
corrupted key for 
N7leveldb10WriteBatch7HandlerE
static void leveldb::WriteBatchInternal::SetContents(leveldb::WriteBatch*, const leveldb::Slice&)
static void leveldb::WriteBatchInternal::Append(leveldb::WriteBatch*, const leveldb::WriteBatch*)
*N7leveldb12_GLOBAL__N_116MemTableInserterE
malformed WriteBatch (too small)
bad WriteBatch Put
bad WriteBatch Delete
unknown WriteBatch tag
WriteBatch has wrong count
leveldb/db/write_batch.cc
contents.size() >= kHeader
src->rep_.size() >= kHeader
N7leveldb8IteratorE
virtual leveldb::Slice leveldb::{anonymous}::EmptyIterator::value() const
virtual leveldb::Slice leveldb::{anonymous}::EmptyIterator::key() const
virtual void leveldb::{anonymous}::EmptyIterator::Prev()
virtual void leveldb::{anonymous}::EmptyIterator::Next()
void leveldb::Iterator::RegisterCleanup(leveldb::Iterator::CleanupFunction, void*, void*)
*N7leveldb12_GLOBAL__N_113EmptyIteratorE
leveldb/table/iterator.cc
func != NULL
leveldb::Slice leveldb::IteratorWrapper::key() const
virtual leveldb::Slice leveldb::{anonymous}::MergingIterator::key() const
virtual leveldb::Slice leveldb::{anonymous}::MergingIterator::value() const
leveldb::Slice leveldb::IteratorWrapper::value() const
leveldb::Status leveldb::IteratorWrapper::status() const
void leveldb::IteratorWrapper::SeekToFirst()
void leveldb::IteratorWrapper::SeekToLast()
void leveldb::IteratorWrapper::Seek(const leveldb::Slice&)
virtual void leveldb::{anonymous}::MergingIterator::Next()
void leveldb::IteratorWrapper::Next()
virtual void leveldb::{anonymous}::MergingIterator::Prev()
void leveldb::IteratorWrapper::Prev()
leveldb::Iterator* leveldb::NewMergingIterator(const leveldb::Comparator*, leveldb::Iterator**, int)
*N7leveldb12_GLOBAL__N_115MergingIteratorE
./leveldb/table/iterator_wrapper.h
leveldb/table/merger.cc
iter_
leveldb::TableBuilder::~TableBuilder()
void leveldb::TableBuilder::WriteBlock(leveldb::BlockBuilder*, leveldb::BlockHandle*)
void leveldb::TableBuilder::Flush()
void leveldb::TableBuilder::Add(const leveldb::Slice&, const leveldb::Slice&)
leveldb::Status leveldb::TableBuilder::Finish()
void leveldb::TableBuilder::Abandon()
leveldb/table/table_builder.cc
rep_->closed
changing comparator while building table
ok()
!r->closed
!r->pending_index_entry
r->options.comparator->Compare(key, Slice(r->last_key)) > 0
r->data_block.empty()
filter.
file is too short to be an sstable
virtual leveldb::Slice leveldb::{anonymous}::TwoLevelIterator::key() const
virtual leveldb::Slice leveldb::{anonymous}::TwoLevelIterator::value() const
leveldb::Status leveldb::IteratorWrapper::status() const
leveldb::Slice leveldb::IteratorWrapper::value() const
void leveldb::IteratorWrapper::Prev()
virtual void leveldb::{anonymous}::TwoLevelIterator::Prev()
void leveldb::IteratorWrapper::SeekToLast()
void leveldb::IteratorWrapper::Next()
virtual void leveldb::{anonymous}::TwoLevelIterator::Next()
void leveldb::IteratorWrapper::SeekToFirst()
void leveldb::IteratorWrapper::Seek(const leveldb::Slice&)
*N7leveldb12_GLOBAL__N_116TwoLevelIteratorE
leveldb/table/two_level_iterator.cc
char* leveldb::Arena::AllocateAligned(size_t)
leveldb/util/arena.cc
(reinterpret_cast<uintptr_t>(result) & (align-1)) == 0
*N7leveldb12_GLOBAL__N_117BloomFilterPolicyE
?leveldb.BuiltinBloomFilter2
N7leveldb5CacheE
void leveldb::{anonymous}::LRUCache::Unref(leveldb::{anonymous}::LRUHandle*)
bool leveldb::{anonymous}::LRUCache::FinishErase(leveldb::{anonymous}::LRUHandle*)
leveldb::{anonymous}::LRUCache::~LRUCache()
void leveldb::{anonymous}::LRUCache::Prune()
void leveldb::{anonymous}::HandleTable::Resize()
leveldb::Cache::Handle* leveldb::{anonymous}::LRUCache::Insert(const leveldb::Slice&, uint32_t, void*, size_t, void (*)(const leveldb::Slice&, void*))
*N7leveldb12_GLOBAL__N_115ShardedLRUCacheE
leveldb/util/cache.cc
e->refs > 0
!e->in_cache
e->in_cache
in_use_.next == &in_use_
e->refs == 1
erased
elems_ == count
old->refs == 1
void leveldb::Slice::remove_prefix(size_t)
N7leveldb10ComparatorE
char leveldb::Slice::operator[](size_t) const
virtual void leveldb::{anonymous}::BytewiseComparatorImpl::FindShortestSeparator(std::__cxx11::string*, const leveldb::Slice&) const
*N7leveldb12_GLOBAL__N_122BytewiseComparatorImplE
leveldb.BytewiseComparator
n < size()
leveldb/util/comparator.cc
Compare(*start, limit) < 0
TestCRCBuffer
')uB
*	5|z
lEd/
6 PQ
pCRF
Yg:a
JZJ{.
#FLR
_QS}
RoOs
+ulsX
b,uZ
.bs"
f.N%H
%$LM
t![R
|;,	=
0F`8
zC`G;
(]2Q
ig,o
u{)l
qR5FE%
]JldN
	4x=
:'No)b
W~Y`
#tDq
30!]^JV
49fN
5T&w&
1"{K
+g@#I
mwa!
FCZ&
,c\E
bwiO'
]bn"
`<C$Y
`tun%
gAY:
A@qVc"
!S{a!J
(N7leveldb3EnvE
N7leveldb14SequentialFileE
N7leveldb16RandomAccessFileE
N7leveldb12WritableFileE
N7leveldb6LoggerE
N7leveldb8FileLockE
N7leveldb10EnvWrapperE
NewAppendableFile
N7leveldb11PosixLoggerE
virtual void leveldb::PosixLogger::Logv(const char*, va_list)
static void leveldb::EnvPosixTestHelper::SetReadOnlyFDLimit(int)
static void leveldb::EnvPosixTestHelper::SetReadOnlyMMapLimit(int)
*N7leveldb12_GLOBAL__N_119PosixSequentialFileE
*N7leveldb12_GLOBAL__N_121PosixRandomAccessFileE
*N7leveldb12_GLOBAL__N_121PosixMmapReadableFileE
*N7leveldb12_GLOBAL__N_117PosixWritableFileE
*N7leveldb12_GLOBAL__N_113PosixFileLockE
*N7leveldb12_GLOBAL__N_18PosixEnvE
%04d/%02d/%02d-%02d:%02d:%02d.%06d %llx 
./leveldb/util/posix_logger.h
p <= limit
Destroying Env::Default()
pthread %s: %s
start thread
wait
unlock
create thread
signal
TEST_TMPDIR
/tmp/leveldbtest-%d
leveldb/util/env_posix.cc
default_env == NULL
mutex_init
cvar_init
lock 
already held by process
N7leveldb12FilterPolicyE
\x%02x
leveldb::Status::Status(leveldb::Status::Code, const leveldb::Slice&, const leveldb::Slice&)
leveldb/util/status.cc
code != kOk
IO error: 
Invalid argument: 
Not implemented: 
NotFound: 
Corruption: 
Unknown code(%d): 
init mutex
destroy mutex
init cv
destroy cv
once
leveldb::Status leveldb::BuildTable(const string&, leveldb::Env*, const leveldb::Options&, leveldb::TableCache*, leveldb::Iterator*, leveldb::FileMetaData*)
leveldb/db/builder.cc
meta->file_size > 0
N7leveldb21InternalKeyComparatorE
N7leveldb20InternalFilterPolicyE
uint64_t leveldb::PackSequenceAndType(uint64_t, leveldb::ValueType)
leveldb::Slice leveldb::ExtractUserKey(const leveldb::Slice&)
virtual void leveldb::InternalKeyComparator::FindShortestSeparator(std::__cxx11::string*, const leveldb::Slice&) const
virtual void leveldb::InternalKeyComparator::FindShortSuccessor(std::__cxx11::string*) const
leveldb.InternalKeyComparator
leveldb/db/dbformat.cc
t <= kValueTypeForSeek
seq <= kMaxSequenceNumber
this->Compare(*start, tmp) < 0
this->Compare(tmp, limit) < 0
this->Compare(*key, tmp) < 0
' @ %llu : %d
(bad)
leveldb::BlockBuilder::BlockBuilder(const leveldb::Options*)
void leveldb::BlockBuilder::Add(const leveldb::Slice&, const leveldb::Slice&)
char leveldb::Slice::operator[](size_t) const
leveldb/table/block_builder.cc
options->block_restart_interval >= 1
!finished_
counter_ <= options_->block_restart_interval
buffer_.empty() || options_->comparator->Compare(key, last_key_piece) > 0
Slice(last_key_) == key
N7leveldb5Block4IterE
virtual leveldb::Slice leveldb::Block::Iter::key() const
virtual leveldb::Slice leveldb::Block::Iter::value() const
virtual void leveldb::Block::Iter::Next()
uint32_t leveldb::Block::Iter::GetRestartPoint(uint32_t)
virtual void leveldb::Block::Iter::Prev()
index < num_restarts_
bad entry in block
leveldb/table/block.cc
bad block contents
void leveldb::FilterBlockBuilder::StartBlock(uint64_t)
leveldb/table/filter_block.cc
filter_index >= filter_offsets_.size()
void leveldb::BlockHandle::EncodeTo(std::__cxx11::string*) const
void leveldb::Footer::EncodeTo(std::__cxx11::string*) const
leveldb/table/format.cc
offset_ != ~static_cast<uint64_t>(0)
size_ != ~static_cast<uint64_t>(0)
bad block handle
dst->size() == original_size + kEncodedLength
not an sstable (bad magic number)
truncated block read
block checksum mismatch
corrupted compressed block contents
bad block type
void leveldb::{anonymous}::FileState::Unref()
*N7leveldb12_GLOBAL__N_118SequentialFileImplE
*N7leveldb12_GLOBAL__N_120RandomAccessFileImplE
*N7leveldb12_GLOBAL__N_116WritableFileImplE
*N7leveldb12_GLOBAL__N_110NoOpLoggerE
*N7leveldb12_GLOBAL__N_111InMemoryEnvE
/test
pos_ > file_->Size()
Offset greater than file size.
leveldb/helpers/memenv/memenv.cc
File not found
[memenv]
PO|?`
$P3pbiI
CW?z*Ua
zUAg
_;p\X
^uHP/
G7LD(9
;qZ7
 ~R`
<XX 
A}`UO=
G8o^
L^&<
6gs^
d+zW
An$,
Oc7*
OeMs
Ce}?
|t'(#o
]%m 
?d^#
Yaj/E
S"y2>}
%g5O$
61&0s
O\Hc
v4^fr
[pt=
WyRz]hnp6?
kT{%<
~5[I
92*Lr
~e&_V@t
\.?0
AnzY<
g=U=
@k5"
Tp.ho7Rqc
qPb;
jE<$
&v2t
D>gL
"\,g
%6sgD
swO)
"Rl(`
]%+L
oeFU
h.W7
Ie4@
F"9.F
rxDLw
?Ef>$
X3b[
1k)jU
(J~}-M
D8|G
:	xk
	zdj
SXqJ~
b(BvMP
`PoS@
VA46yd
)\l<
iiiZ
gk`'_
b+!7
MFGL
\k6h
UdesRsK
;8`&
fT1M
gJ%n$
44`o
RWO?
n{m4
DZ'E
(&"N
iqva
vEd8
/X9$
Y(t<
n~wL
3>.W
-[v4](
Z|Eqye
<+bh
XH:#
:`&/H
wnk	
:oRCv
2[Kk
gD~o
kBF|f
!QU7
>B.7
c5^4
X)gr!
t]yR
vo9B
pHua
s{*Nw
>#Fg
'H*5,
e\/m
aqyCe 
]~I.
w!K|
:@ixgP`c
bm+U-
~~Ch&
9#GT
VkAM
LER0mn
QG=:a
VY2-V/
j8xP
IyWy|
QlCqk
y}Q(
Umq#
8=p@:
bt~z
4)'_
5<Df[
Kp	*b
v:ZC{}k7]
Jrlq
7"5nJ_
-:GJA
.,QM
M4}?Jd
a0Hj`
UeP6
^cS>a
*267
9}#q
P;s#
oTchNu
RfESR x{B
Fzbhp/
k*..v
$B{Db
\6"n
:|CD
]'[Jr(
m Tt
eOp2k
9st7
QM'ai
Ctd1
2Hvn
E'8m(
9iH~
:/9&
jTF6>YC
r7#,
@%_S
k#E]*dH
d:\Bcdf
bb!!
mR@!
C`K=
KQ< 
y.sC"
N,U9
dD8C
kD|i
sT|/').4
,3NmZ
l]\PF
t2Ny
[a\t
6tMO
{M'r
{=LR
}1QW:
=m*8X
Nw}@
=y98
 o-m
*"\#
?.CN
GmzA
MF%C
9*/\z
0R{>
:1+g
?"'r
t1K<
{"\N
 p/r
DK1u
l@z*_
]>;iJ
6L9H
~Jh T
*x^R
MHPa
(IzH
^m?V
x)vX
al|e
469!
G!IxC
 $IH
.mCox
}pqD
Ama$x
p~:"<
jSX YC
_)4v
(NX~
)4B;eqd
% ,|
r%7dJ
;#_?
["&&
RvN+
SLi)
/"&c
5!>x
SBybw
6v%&
^I_a
|hil
ra_b
6nYQM
\]+{
kOH?
\!O2
DXKD
#{Hs
`g@+
Y|2V
H}jh:}hs
g1w)p
1N#{7!
e8i>m]
'	7$
"f;U
&?m1=I3
-I*~
vv.Q
s'jV-h3
s-:w
s%C4
'%Xy
XS(w
6dI?
,1;){
JiRi
tjAx
{vTm
 qqU{/
wsmN
-U=Q
O3,\
LE]#
8}Hr
))&4
:v?M
-R"l
:38>
WGVD
TaU+
eJ!*QS
r|fu
 '3G>
)F8r"+7k
]B!U
:E:i
,Y/w-
6E+,
S9I'
7~7]q?
7	-F[
!y*K
!bte(
:A>7t
[y"]
D@47
^cO)
Gj#t
Xv9O
;T}:
&co#
\p!r
yG.Ct
DHQi
Co#wF
?F|09V
*\,e
@o/E
}'D],
`jKN
I:wp
s*{d!
]pf>
y%+}Hb
/W'(
H7Pa
1`op
F2W8
Ebn[
F:e,
#d?K
@09S
{I&UP
<24T6
USdaG
y(w`
dR2/p
^8F7Q6
jcAA<
?KH)
zh,#
8:D8
&A1M
"//|
"?	f 
&=iI
N01R1
7asZ
o92z
m.GP
rnw`
T|/d
;6#B
1@V&
4)$|
rv-S
zjEFp
Hwwy
)5uC
~mr6
T"UK
c\l.
V na>
*g5Q
C!~;
Iu;}
ajZ3
H@0G_
[0)%
m@w(
I2`2
+sNV
=	At
e73C
>@a[
*zsd
99K:
%d$>I/c
TFP:
UG`v
Ac%i
?gA)NM
uffphL
	P@E
8@m^
LMKW
Rd%*cv
@3Z3
feQK
`m2_
Cb(2
^6`<
-GgQ{
4}l8=
:Vg3
*c{-
;	>)
BWSy
Y Go
i_~*
sPWS
F[2.swTTx
e~eE
	P?C
qlqL	
#0DN
:R:3?P
,~3y'
Laq2
-]S|
tFKe
'><,
xa##
SRQn
..-!
cVS,
6k5D\
8=MbR
DxCU
_MW*
c9D#Df
|q*;%
4Xu0>
B!-z)
?eaOmM
hcUw
6:h97SW
'AQ#
SOM5
O'WZ
'j1z
6P6UZ
vWIvfG
_0A`d
$Z\{
gEyd
@9TW*
<,o!
pZ>U
-J}3
|Vm4
9CR"
{D4jC
igo"FuOQ
.6x 	
cwz>
]kvic\
aNYr
$#\#\
>`^2
TlThS
pVXYJ
uo].
o~@H
UDs @p
FYh~
1:	G
CK='*]N
:o%xj
rX,9
/6@.
`{3f;
"`0f
y	x}
k	f&3]
Uc`4c/e
c<b!
*x!K
:Mb1
b6=LeI8YM
DK9'
zQHi
;HvY1
'T=-
9B!pU
!9sh6
zj_9
NuMb
\':Z
iu6N.
F'Z+
M	%Z
{ziG
:).= 
9U2%
d@m2N
_N|Z
TVZh
?S"p
}[Wm
yBI/G
&k^)
oMa(#w
7VaS
~E!"	
XchU
1 Je
tYPG
x"-e
|	BUd
X)+q
;'0u
C_sS
%h-:
&`6}N~
WuBK
U%]p-
3Y}E
JMxw
6zfT
O=]2
A#'9sU.
p>CJ
.>-d
s2RRH
Ve&b
)?K-
@Lj!r7
A?*8
0GU^6X
@<jb)*U
%m^i
:@vw5!Bb
^4bL
Ud-g
X+]m~
je9$
i554
	~"5A
I [4
Gg3Ux
DG$Ba
Lg-1
wu%/
3C[F
{qqo
D"7	
x>[x:
Vrl\w
2D(^v
Xj!I
w9{p<W*
|~#s
/xp-
d XI
|)+p
 eH`
lfM[Fi
Dcb 
.:^>
V6?nEc
9=)e
F345
z)g2
[8c=
0s,,
J.{"S
OW,>4g
"eFv
9j#B
wsIE
y:?>|B
TZ:4
[1jD
<#<!
JxPK
~'^K[u
~v,-
Hx23
13+:
]"%}qB
~cb)%i
)lVC
AMYT
<*M1g
T2M~
y/bI
/"VF
S~G	
^+R&e'H
CT}S
"PG:
MuK2
Z~&q
<~)D
ZdyRw
#_lE
$H8[)
jVtS
(H7^{
9S+?E+
rNf=
fB3h
u8IP
C:9D
:@W^
G'rW
V-$[M
+O ,a
E=%	"
4Wft?
k9=F
0,T}
Kb9hC
,	#r&
@LZ 
3+US
yr	_
EKeX
rV [Y
ssA1
X>kz
xhs4
,eY&
-^1-
VhF B
q+2[
@'}2
3'4.
aDOu6
;8PFR
JY|(n(W
`vX9
	`VD
~-b^8
wmY[
YAC-z
m%UH
C	>2}
S482_
*SoWBU
xt$^
p`R$
@JT2
T~CE;
OU:z
_Dzl
^}YA
z&R%
n7qI
%JC5..X?
d[z=t
0=Q$
CSYC-h
_#	<A}
.2E!g
bPy!
Zu1O
p"3#
MJcS7-:LG
4 m! 
v@t 
6v,x
Tm:B`
Mcl_
EmDh9]
Z%#>A
Zf7(F
NF_	v
sF22
sA^E)
?[z%
t#x3
#R;fr
vC*DB
@X/[]u
efgJ
(Tlg
<\@{
POTg
fOR]
'aco19L
vW uSE
2/@r
	T%}
4W*a
Mm4k
;'N7
Hg(^
}x;r
tE=^
@S`Y81qb
5-dB
VDJ%
UyJ'
LxfCP
Sk p
t	L.
T(fT
n#[o.
r~H=
19O]
*K"o
]K;r_
NMn#
\N>uAV
R>!W
<cfp
"$Qd*
Xp!<A
	}6u
o Pmf
0''F
=?'/
T81;
9;Pw
1RF^
jz#*
-{W7 
m?OUX
2/D&#'
TmVG
.e&Q&
BH/~R
]3yF
opG'o
UU|OW
ifp(:
$Zut
->)P1
+[BL
{69I@
}KOlR
I88|
/LkUSui
`9u D}
D!CG;}
u<[t$
4&Ax
J0$0
__I3
G0"rl
fb+t
2|YGCD
pu&K K@
7Smy
+CFV
.=7=
V{	S`SGU
wV>m
:z~A
3eKn
}	}Vx#
l:~V
gyfb
h5qz&,
RVdC
;>-{
XGFy
(>`R
3d]J
Yt-hK
>2N+
_7_uF
=&M7
0Yh}B
	(*h{
w[SV\
6wRI
 RE_
}kj"=
647+
me|ii
d+N^
gII}+;
L8~h
!;#t
70%cJ|
5ICZ<
ti|0F
/i`	
eEP	1
!|T@
?ur<RYg
TEk	
~U>mt!
zW;Z
9bEk
	ol3
ImFk
|&yHB
lbp<
f-YW~
5|@u
 u6U
ux+x
LjyUA
7-WB
volJ
$@x>>
]G\Fi
U5A,	
KJhZh
s@q5
ajn	
dN+N=
F<33
sG9N
7;{?aAg
j^Rb
L-5x
-(L	
qecf
&P#g
]WNG
A+fW
@dM3!N.
2bj1Q
X3l&
ax`gC
	*\0K
}L{[
nv%2
o0S8
Y3U	
jt|*
n,9e
1Iw4
\ONU
'4zS
Dh!Z
L4&U:@v
c_9X
&R I
{R41
'U&O
>@{Q
I_^D
I+,{n(
H P\]
p*Q!
T;p^
c~\V
H`?-
[Z|6
!Pp)y
."3+}]]
|_.D
G7z0
f><j
F_j'$
a itO
h8rg
mn&M
tZ1t
nJEH
9Ud'|	My
 z+)
bYRq3
JRxz
eMDU
?g_>
YO!v=
#kJ/
G]fi
IF3C
|W2?
6|@aT
yjWh
DX##-
<d2AwP
T2;!
ed_/
 \.@
E;&8D6
v) Z`
R-&%
[libsecp256k1] internal consistency check failed: %s
[libsecp256k1] illegal argument: %s
!secp256k1_fe_is_zero(&ge->x)
Invalid flags
pubkey != NULL
input != NULL
outputlen != NULL
*outputlen >= ((flags & SECP256K1_FLAGS_BIT_COMPRESSION) ? 33 : 65)
output != NULL
(flags & SECP256K1_FLAGS_TYPE_MASK) == SECP256K1_FLAGS_TYPE_COMPRESSION
sig != NULL
input64 != NULL
output64 != NULL
sigin != NULL
secp256k1_ecmult_context_is_built(&ctx->ecmult_ctx)
msg32 != NULL
secp256k1_ecmult_gen_context_is_built(&ctx->ecmult_gen_ctx)
signature != NULL
seckey != NULL
tweak != NULL
pubnonce != NULL
n >= 1
pubnonces != NULL
recid >= 0 && recid <= 3
recid != NULL
*N5boost6system12_GLOBAL__N_122generic_error_categoryE
*N5boost6system12_GLOBAL__N_121system_error_categoryE
N5boost6system14error_categoryE
generic
system
Unknown error
N5boost6detail17sp_counted_impl_pINS_10filesystem16filesystem_error5m_impEEE
boost::filesystem::current_path
boost::filesystem::remove
boost::filesystem::status
boost::filesystem::create_directory
boost::filesystem::create_directories
boost::filesystem::permissions
boost::filesystem::directory_iterator::operator++
boost::filesystem::directory_iterator::construct
boost::filesystem::read_symlink
boost::filesystem::canonical
boost::filesystem::last_write_time
boost::filesystem::hard_link_count
boost::filesystem::resize_file
boost::filesystem::is_empty
boost::filesystem::space
boost::filesystem::file_size
/tmp
TMPDIR
TEMP
TEMPDIR
boost::filesystem::temp_directory_path
boost::filesystem::remove_all
boost::filesystem::equivalent
boost::filesystem::copy_file
boost::filesystem::create_symlink
boost::filesystem::copy_directory
boost::filesystem::copy
boost::filesystem::create_hard_link
boost::filesystem::create_directory_symlink
boost::filesystem::rename
boost::filesystem::weakly_canonical
boost::filesystem::relative
N5boost15program_options5errorE
N5boost15program_options25error_with_no_option_nameE
N5boost15program_options14unknown_optionE
N5boost15program_options14invalid_syntaxE
N5boost15program_options26invalid_config_file_syntaxE
N5boost16exception_detail19error_info_injectorINS_15program_options5errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options5errorEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options14unknown_optionEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options14unknown_optionEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options26invalid_config_file_syntaxEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options26invalid_config_file_syntaxEEEEE
unrecognised option '%canonical_option%'
invalid_line
options '
' and '
*' will both match the same arguments from the configuration file
NSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE
N5boost15program_options22error_with_option_nameE
N5boost15program_options15multiple_valuesE
N5boost15program_options20multiple_occurrencesE
N5boost15program_options16ambiguous_optionE
N5boost15program_options16validation_errorE
N5boost15program_options20invalid_option_valueE
N5boost15program_options18invalid_bool_valueE
N5boost3any11placeholderE
N5boost15program_options14value_semanticE
N5boost15program_options29value_semantic_codecvt_helperIcEE
N5boost15program_options29value_semantic_codecvt_helperIwEE
N5boost15program_options13untyped_valueE
N5boost15program_options16typed_value_baseE
N5boost15program_options11typed_valueIbcEE
N5boost16exception_detail19error_info_injectorINS_15program_options20multiple_occurrencesEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options20multiple_occurrencesEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options15multiple_valuesEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options15multiple_valuesEEEEE
N5boost3any6holderIbEE
N5boost16exception_detail19error_info_injectorINS_15program_options18invalid_bool_valueEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options18invalid_bool_valueEEEEE
N5boost3any6holderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE
N5boost3any6holderINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options16validation_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16validation_errorEEEEE
option '%canonical_option%' cannot be specified more than once
error_with_option_name::m_option_style can only be one of [0, allow_dash_for_short, allow_slash_for_short, allow_long_disguise or allow_long]
the argument ('%value%') for option '%canonical_option%' is invalid. Valid choices are 'on|off', 'yes|no', '1|0' and 'true|false'
option '%canonical_option%' only takes a single argument
option '%canonical_option%' is not valid
the argument ('%value%') for option '%canonical_option%' is invalid
option '%canonical_option%' requires at least one argument
original_token
canonical_option
option '%canonical_option%'
argument ('%value%')
prefix
%prefix%
<unrepresentable unicode string>
 and matches 
'%prefix%
and 
different versions of 
N5boost16exception_detail19error_info_injectorISt11logic_errorEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt11logic_errorEEEE
character conversion failed
N5boost15program_options33too_many_positional_options_errorE
N5boost15program_options26invalid_command_line_styleE
N5boost15program_options27invalid_command_line_syntaxE
N5boost16exception_detail19error_info_injectorINS_15program_options26invalid_command_line_styleEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options26invalid_command_line_styleEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options33too_many_positional_options_errorEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options33too_many_positional_options_errorEEEEE
N5boost16exception_detail19error_info_injectorINS_15program_options27invalid_command_line_syntaxEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options27invalid_command_line_syntaxEEEEE
N5boost3_bi6bind_tISt6vectorINS_15program_options12basic_optionIcEESaIS5_EENS_4_mfi3mf1IS7_NS3_6detail7cmdlineERS2_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISH_EEEENS0_5list2INS0_5valueIPSB_EENS_3argILi1EEEEEEE
the required argument for option '%canonical_option%' is missing
unknown command line syntax error for '%s'
the argument for option '%canonical_option%' should follow immediately after the equal sign
the options configuration file contains an invalid line '%invalid_line%'
the unabbreviated option '%canonical_option%' does not take any arguments
the abbreviated option '%canonical_option%' does not take any arguments
the unabbreviated option '%canonical_option%' is not valid
boost::program_options misconfiguration: choose one or other of 'command_line_style::short_allow_next' (whitespace separated arguments) or 'command_line_style::short_allow_adjacent' ('=' separated arguments) for short options.
boost::program_options misconfiguration: choose one or other of 'command_line_style::long_allow_next' (whitespace separated arguments) or 'command_line_style::long_allow_adjacent' ('=' separated arguments) for long options.
boost::program_options misconfiguration: choose one or other of 'command_line_style::allow_slash_for_short' (slashes) or 'command_line_style::allow_dash_for_short' (dashes) for short options.
too many positional options have been specified on the command line
N5boost15program_options18option_descriptionE
N5boost16exception_detail19error_info_injectorINS_15program_options16ambiguous_optionEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options16ambiguous_optionEEEEE
N5boost6detail17sp_counted_impl_pIKNS_15program_options14value_semanticEEE
N5boost6detail17sp_counted_impl_pINS_15program_options18option_descriptionEEE
N5boost6detail17sp_counted_impl_pINS_15program_options19options_descriptionEEE
option '%canonical_option%' is ambiguous
 [ --
Only one tab per paragraph is allowed in the options description
N5boost15program_options6detail18utf8_codecvt_facetE
N5boost23enable_shared_from_thisINS_6detail16thread_data_baseEEE
N5boost6detail16thread_data_baseE
N5boost6detail26externally_launched_threadE
N5boost16exception_detail19error_info_injectorINS_12bad_weak_ptrEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_12bad_weak_ptrEEEEE
N5boost6detail17sp_counted_impl_pINS0_16thread_data_baseEEE
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_alloc_]
boost::exception_ptr boost::exception_detail::get_static_exception_object() [with Exception = boost::exception_detail::bad_exception_]
./boost/exception/detail/exception_ptr.hpp
tr1::bad_weak_ptr
/proc/cpuinfo
physical id
core id
Db::Db
Db::close
Db::compact
Db::cursor
Db::del
Db::exists
Db::fd
Db::get
Db::get_dbname
Db::get_open_flags
Db::join
Db::key_range
Db::open
Db::pget
Db::put
Db::rename
Db::remove
Db::truncate
Db::stat
Db::stat_print
Db::sync
Db::upgrade
Db::verify
Db::set_bt_compare
Db::get_bt_minkey
Db::set_bt_minkey
Db::set_bt_prefix
Db::set_dup_compare
Db::get_encrypt_flags
Db::set_encrypt
Db::get_flags
Db::set_flags
Db::set_h_compare
Db::get_h_ffactor
Db::set_h_ffactor
Db::set_h_hash
Db::get_h_nelem
Db::set_h_nelem
Db::get_lorder
Db::set_lorder
Db::get_pagesize
Db::set_pagesize
Db::set_partition_dirs
Db::get_partition_dirs
Db::get_partition_keys
Db::get_priority
Db::set_priority
Db::get_re_delim
Db::set_re_delim
Db::get_re_len
Db::set_re_len
Db::get_re_pad
Db::set_re_pad
Db::get_re_source
Db::set_re_source
Db::sort_multiple
Db::get_q_extentsize
Db::set_q_extentsize
Db::get_cachesize
Db::set_cachesize
Db::get_create_dir
Db::set_create_dir
Dbc::close
Dbc::cmp
Dbc::count
Dbc::del
Dbc::dup
Dbc::get
Dbc::pget
Dbc::put
Dbc::get_priority
Dbc::set_priority
DbEnv::feedback_callback
DbEnv::paniccall_callback
DbEnv::event_func_callback
DbEnv::app_dispatch_callback
DbEnv::isalive_callback
DbEnv::rep_send_callback
DbEnv::thread_id_callback
DbEnv::thread_id_string_callback
DbEnv::DbEnv
DbEnv::close
DbEnv::dbremove
DbEnv::dbrename
DbEnv::failchk
DbEnv::fileid_reset
DbEnv::get_home
DbEnv::get_open_flags
DbEnv::get_data_dirs
DbEnv::get_thread_count
DbEnv::set_thread_count
DbEnv::lock_detect
DbEnv::lock_get
DbEnv::lock_id
DbEnv::lock_id_free
DbEnv::lock_put
DbEnv::lock_stat
DbEnv::lock_stat_print
DbEnv::lock_vec
DbEnv::log_archive
DbEnv::log_cursor
DbEnv::log_file
DbEnv::log_flush
DbEnv::log_get_config
DbEnv::log_put
DbEnv::log_set_config
DbEnv::log_stat
DbEnv::log_stat_print
DbEnv::lsn_reset
DbMpoolFile::f_create
DbEnv::memp_register
DbEnv::memp_stat
DbEnv::memp_stat_print
DbEnv::memp_sync
DbEnv::memp_trickle
DbEnv::open
DbEnv::remove
DbEnv::stream_error
DbEnv::stream_message
DbEnv::set_data_dir
DbEnv::get_encrypt_flags
DbEnv::set_encrypt
DbEnv::get_intermediate_dir_mode
DbEnv::set_intermediate_dir_mode
DbEnv::get_lg_bsize
DbEnv::set_lg_bsize
DbEnv::get_lg_dir
DbEnv::set_lg_dir
DbEnv::get_lg_filemode
DbEnv::set_lg_filemode
DbEnv::get_lg_max
DbEnv::set_lg_max
DbEnv::get_lg_regionmax
DbEnv::set_lg_regionmax
DbEnv::get_lk_conflicts
DbEnv::set_lk_conflicts
DbEnv::get_lk_detect
DbEnv::set_lk_detect
DbEnv::get_lk_max_lockers
DbEnv::set_lk_max_lockers
DbEnv::get_lk_max_locks
DbEnv::set_lk_max_locks
DbEnv::get_lk_max_objects
DbEnv::set_lk_max_objects
DbEnv::get_lk_partitions
DbEnv::set_lk_partitions
DbEnv::get_mp_max_openfd
DbEnv::set_mp_max_openfd
DbEnv::get_mp_max_write
DbEnv::set_mp_max_write
DbEnv::get_mp_mmapsize
DbEnv::set_mp_mmapsize
DbEnv::get_mp_pagesize
DbEnv::set_mp_pagesize
DbEnv::get_mp_tablesize
DbEnv::set_mp_tablesize
DbEnv::get_tmp_dir
DbEnv::set_tmp_dir
DbEnv::get_tx_max
DbEnv::set_tx_max
DbEnv::stat_print
DbEnv::get_cachesize
DbEnv::set_cachesize
DbEnv::get_cache_max
DbEnv::set_cache_max
DbEnv::get_create_dir
DbEnv::set_create_dir
DbEnv::get_flags
DbEnv::set_flags
DbEnv::set_rpc_server
DbEnv::get_shm_key
DbEnv::set_shm_key
DbEnv::set_app_dispatch
DbEnv::set_isalive
DbEnv::get_tx_timestamp
DbEnv::set_tx_timestamp
DbEnv::get_verbose
DbEnv::set_verbose
DbEnv::mutex_alloc
DbEnv::mutex_free
DbEnv::mutex_get_align
DbEnv::mutex_get_increment
DbEnv::mutex_get_max
DbEnv::mutex_get_tas_spins
DbEnv::mutex_lock
DbEnv::mutex_set_align
DbEnv::mutex_set_increment
DbEnv::mutex_set_max
DbEnv::mutex_set_tas_spins
DbEnv::mutex_stat
DbEnv::mutex_stat_print
DbEnv::mutex_unlock
DbEnv::set_thread_id
DbEnv::set_thread_id_string
DbEnv::add_data_dir
DbEnv::cdsgroup_begin
DbEnv::txn_begin
DbEnv::txn_checkpoint
DbEnv::txn_recover
DbEnv::txn_stat
DbEnv::txn_stat_print
DbEnv::rep_set_transport
DbEnv::rep_elect
DbEnv::rep_flush
DbEnv::rep_get_config
DbEnv::rep_get_request
DbEnv::rep_set_request
DbEnv::rep_process_message
DbEnv::rep_set_config
DbEnv::rep_start
DbEnv::rep_stat
DbEnv::rep_stat_print
DbEnv::rep_sync
DbEnv::rep_get_clockskew
DbEnv::rep_set_clockskew
DbEnv::rep_get_limit
DbEnv::rep_set_limit
DbEnv::rep_get_nsites
DbEnv::rep_set_nsites
DbEnv::rep_get_priority
DbEnv::rep_set_priority
DbEnv::rep_get_timeout
DbEnv::rep_set_timeout
DbEnv::repmgr_add_remote_site
DbEnv::repmgr_get_ack_policy
DbEnv::repmgr_set_ack_policy
DbEnv::repmgr_set_local_site
DbEnv::repmgr_site_list
DbEnv::repmgr_start
DbEnv::repmgr_stat
DbEnv::repmgr_stat_print
DbEnv::get_timeout
DbEnv::set_timeout
5DbEnv
Dbt not large enough for available data
22DbRunRecoveryException
24DbRepHandleDeadException
17DbMemoryException
25DbLockNotGrantedException
19DbDeadlockException
11DbException
DbMpoolFile::close
DbMpoolFile::get
DbMpoolFile::open
DbMpoolFile::put
DbMpoolFile::get_clear_len
DbMpoolFile::set_clear_len
DbMpoolFile::get_fileid
DbMpoolFile::set_fileid
DbMpoolFile::get_flags
DbMpoolFile::set_flags
DbMpoolFile::get_ftype
DbMpoolFile::set_ftype
DbMpoolFile::get_last_pgno
DbMpoolFile::get_lsn_offset
DbMpoolFile::set_lsn_offset
DbMpoolFile::get_maxsize
DbMpoolFile::set_maxsize
DbMpoolFile::get_pgcookie
DbMpoolFile::set_pgcookie
DbMpoolFile::get_priority
DbMpoolFile::set_priority
DbMpoolFile::sync
11DbMpoolFile
DbTxn::abort
DbTxn::commit
DbTxn::discard
DbTxn::get_name
DbTxn::prepare
DbTxn::set_name
DbTxn::set_timeout
5DbTxn
Metadata page %lu cannot be read
Page %lu: Incomplete metadata page
Page %lu: metadata page corrupted
Page %lu: could not check metadata page
Page %lu: pgno incorrectly set to %lu
Page %lu: bad magic number %lu
Page %lu: unsupported DB version %lu; extraneous errors may result
Page %lu: bad page size %lu
Page %lu: bad page type %lu
Page %lu: bad meta-data flags value %#lx
Page %lu: bad page number %lu
Page %lu: invalid prev_pgno %lu
Page %lu: invalid next_pgno %lu
Page %lu: too many entries: %lu
Page %lu: bad btree level %lu
Page %lu: btree leaf page has incorrect level %lu
Page %lu: nonzero level %lu in non-btree database
__db_vrfy_meta
Page %lu: invalid magic number
Page %lu: magic number does not match database type
Page %lu: unsupported database version %lu; extraneous errors may result
Page %lu: invalid pagesize %lu
Page %lu: nonempty free list on subdatabase metadata page
Page %lu: nonsensical free list pgno %lu
Page %lu: last_pgno is not correct: %lu != %lu
Subdatabase entry of invalid size
Page %lu: DB->h_internal field is NULL
%$sniglet^&
Page %lu: incorrect hash function for database
Page %lu: database metapage of bad type %lu
Page %lu: beyond the end of the file, metadata page has last page as %lu
Page %lu: old-style duplicate page
Page %lu: unknown page type %lu
Subdatabase entry not page-number size
Subdatabase entry references invalid page %lu
Subdatabase entry references page %lu of invalid type %lu
__db_vrfy_structure
Page %lu: invalid next_pgno %lu on free list page
Page %lu: page %lu encountered a second time on free list
Page %lu: non-invalid page %lu on free list
Page %lu: overflow refcount %lu, referenced %lu times
Page %lu: unreferenced page
Page %lu: totally zeroed page
DB->verify
DB_SALVAGE requires a an output handle
DB_ORDERCHKONLY requires a database name
Page %lu: entries listing %lu overlaps data
Page %lu: bad offset %lu at page index %lu
Page %lu: unaligned offset %lu at page index %lu
Page %lu: item %lu of unrecognizable type
Page %lu: item %lu extends past page boundary
Page %lu: sorted duplicate set in unsorted-dup database
Page %lu: unsorted duplicate set in sorted-dup database
duplicate page
Page %lu: %s is of inappropriate type %lu
Page %lu: duplicate page of inappropriate type %lu
__OTHER__
__bam_vrfy_inp
Page %lu: duplicated item %lu
Page %lu: item %lu marked deleted
Page %lu: duplicate page referenced by internal btree page at item %lu
Page %lu: duplicate page referenced by recno page at item %lu
Page %lu: impossible tlen %lu, item %lu
Page %lu: offpage item %lu has bad pgno %lu
Page %lu: item %lu of invalid type %lu
Page %lu: gap between items at offset %lu
Page %lu: offset %lu unaligned
Page %lu: overlapping items at offset %lu
Page %lu: bad HOFFSET %lu, appears to be %lu
Page %lu: nonsensical bt_minkey value %lu on metadata page
Page %lu: nonsensical root page %lu on metadata page
Page %lu: Btree metadata page has both duplicates and multiple databases
Page %lu: Btree metadata page illegally has both recnums and dups
Page %lu: metadata page has renumber flag set but is not recno
Page %lu: Btree metadata page illegally has both recnums and compression
Page %lu: Btree metadata page illegally has both unsorted duplicates%s
Page %lu: recno metadata page specifies duplicates
Page %lu: re_len of %lu in non-fixed-length database
__ram_vrfy_leaf
Page %lu: Recno database has dups
Page %lu: nonsensical type for item %lu
__bam_vrfy_itemorder
Page %lu: error %lu in fetching overflow item %lu
Page %lu: out-of-order key at entry %lu
Page %lu: non-dup dup key at entry %lu
Page %lu: database with no duplicates has duplicated keys
__bam_vrfy
__ram_vrfy_inp
Page %lu: bad offset %lu at index %lu
Page %lu: RINTERNAL structure at offset %lu referenced twice
Page %lu: item order check unsafe: skipping
Page %lu: unexpected page type %lu found in leaf chain (expected %lu)
Page %lu: incorrect next_pgno %lu found in leaf chain (should be %lu)
Page %lu: incorrect prev_pgno %lu found in leaf chain (should be %lu)
Page %lu: recno leaf page non-recno tree
Page %lu: non-recno leaf page in recno tree
Page %lu: duplicates in non-dup btree
btree or recno page
Page %lu: btree or recno page is of inappropriate type %lu
__bam_vrfy_subtree
Page %lu: recno page returned bad re_len %lu
Page %lu: record count incorrect: actual %lu, in record %lu
Page %lu: recno level incorrect: got %lu, expected %lu
Page %lu: overflow page %lu referenced more than twice from internal page
Page %lu: item %lu has incorrect record count of %lu, should be %lu
Page %lu: Btree level incorrect: got %lu, expected %lu
Page %lu: internal page is empty and should not be
__bam_vrfy_treeorder
Page %lu: first item on page sorted greater than parent entry
Page %lu: first item on page had comparison error
Page %lu: last item on page sorted greater than parent entry
Page %lu: last item on page had comparison error
Page %lu: bad record count: has %lu records, claims %lu
Page %lu: linked twice
Page %lu: unterminated leaf chain
Page %lu: btree metadata page observed twice
Page %lu: btree metadata page has no root
Page %lu: recno database has bad re_len %lu
Page %lu: duplicate tree referenced from metadata page
Page %lu: btree root of incorrect type %lu on metadata page
UNKNOWN_KEY
UNKNOWN_DATA
__bam_salvage
__bam_salvage_walkdupint
rename: database %s exists
DB->open
Closing a primary DB while a secondary DB has active cursors is unsafe
__db.
%s%x.%x
%.*s%x.%x
%.*s%s%s
DB->cursor
DB->put
Both cursors must be initialized before calling DBC->cmp.
DBCursor->cmp mismatched off page duplicate cursor pointers.
__dbc_count
Write attempted on read-only cursor
__dbc_idup
Duplicate data items are not supported with sorted data
__dbc_get
DBC->put
index not configured to support duplicates
Put results in a non-unique secondary key in an 
Attempt to execute cascading delete in a foreign index failed
Foreign database application callback
Attempt to overwrite item in foreign database with nullified value failed
<963TQNKHEB?'$!
Unknown error: %d
Successful return: 0
DB_FOREIGN_CONFLICT: A foreign database constraint has been violated
DB_BUFFER_SMALL: User memory too small for return value
DB_VERSION_MISMATCH: Database environment version mismatch
DB_VERIFY_BAD: Database verification failed
DB_SECONDARY_BAD: Secondary index inconsistent with primary
DB_RUNRECOVERY: Fatal error, run database recovery
DB_REP_UNAVAIL: Unable to elect a master
DB_REP_NOTPERM: Permanent log record not written
DB_REP_NEWSITE: A new site has entered the system
DB_REP_LOCKOUT: Waiting for replication recovery to complete
DB_REP_LEASE_EXPIRED: Replication leases have expired
DB_REP_JOIN_FAILURE: Unable to join replication group
DB_REP_ISPERM: Permanent record written
DB_REP_IGNORE: Replication record/operation ignored
DB_REP_HOLDELECTION: Need to hold an election
DB_REP_HANDLE_DEAD: Handle is no longer valid
DB_REP_DUPMASTER: A second master site appeared
DB_PAGE_NOTFOUND: Requested page not found
DB_OLDVERSION: Database requires a version upgrade
DB_NOTFOUND: No matching key/data pair found
DB_NOSERVER_ID: Identifier unrecognized at server
DB_NOSERVER_HOME: Home unrecognized at server
DB_NOSERVER: Fatal error, no RPC server
DB_LOG_BUFFER_FULL: In-memory log buffer is full
DB_LOCK_NOTGRANTED: Lock not granted
DB_LOCK_DEADLOCK: Locker killed to resolve a deadlock
DB_KEYEXIST: Key/data pair already exists
DB_KEYEMPTY: Non-existent key/data pair
DB_DONOTINDEX: Secondary index callback returns null
PANIC
combination 
illegal flag %sspecified to %s
%s: DB_READ_COMMITTED, DB_READ_UNCOMMITTED and DB_RMW require locking
unable to create/retrieve page %lu
page %lu: illegal page type or format
PANIC: fatal region error detected; run recovery
%s: Unknown flag: %#x
%s: Unexpected database type: %s
%s: Unexpected code path error
%s%sprevious transaction deadlock return not resolved
DB environment not configured for transactions
Transaction not specified for a transactional database
CDS groups can only be used in a CDS environment
Transaction specified for a non-transactional database
Operation forbidden while secondary index is being created
Transaction and database from different environments
Transaction that opened the DB handle is still active
%lu larger than database's maximum record length %lu
Record length error
%s: replacement length %lu differs from replaced length %lu
Log sequence error: page LSN %lu %lu; previous LSN %lu %lu
%s: attempt to modify a read-only database
%s: file limited to %lu pages
Thread/process %s failed: %s
Bulk and partial operations cannot be combined on %s DBT
DB_THREAD mandates memory allocation flag on %s DBT
DB->get
DB_READ_COMMITTED
%s is not supported with DB_CONSUME or DB_CONSUME_WAIT
DB_MULTIPLE requires DB_DBT_USERMEM be set
DB_MULTIPLE does not support DB_DBT_PARTIAL
aligned, at least page size and multiples of 1KB
DB_MULTIPLE buffers must be 
DB->close
open DB and DBcursor handles must be closed
replication recovery unrolled committed transactions;
DB->exists
DB->fd
Database does not have a valid file handle
DB->join
At least one secondary cursor must be specified to DB->join
All secondary cursors must share the same transaction
DB->key_range
DB->pget
DB->pget may only be used on secondary indices
DB_MULTIPLE and DB_MULTIPLE_KEY may not be used on secondary indices
primary key
DB_GET_BOTH on a secondary index requires a primary key
DB->compact
Secondary indices may not be used as foreign databases
Foreign databases may not be configured with duplicates
Renumbering recno databases may not be used as foreign databases
The associating database must be a secondary index.
 function needs to be configured
When specifying a delete action of nullify, a callback%s
 callback function cannot be configured
When not specifying a delete action of nullify, a%s
DB->sync
Closing already-closed cursor
DBcursor->cmp
DBcursor->cmp both cursors must refer to the same database.
DBcursor->count
Cursor position must be set before performing this operation
DBcursor->del
DBC->del
DBcursor->dup
DBcursor->get
DB_READ_UNCOMMITTED is not supported with DB_CONSUME or DB_CONSUME_WAIT
DB_MULTIPLE/DB_MULTIPLE_KEY require DB_DBT_USERMEM be set
DB_MULTIPLE/DB_MULTIPLE_KEY do not support DB_DBT_PARTIAL
DB_MULTIPLE/DB_MULTIPLE_KEY buffers must be 
DB_GET_BOTH
DB_GET_BOTH_RANGE
DBcursor->pget may only be used on secondary indices
DBcursor->pget
%s requires both a secondary and a primary key
DBcursor->put
DBcursor->put forbidden on secondary indices
key DBT
DB_AUTO_COMMIT may not be specified along with a transaction handle
DB_AUTO_COMMIT may not be specified in non-transactional environment
Databases may not become secondary indices while cursors are open
Secondary index handles may not be re-associated
Secondary indices may not be used as primary databases
Primary databases may not be configured with duplicates
Renumbering recno databases may not be used as primary databases
The primary and secondary must be opened in the same environment
The DB_THREAD setting must be the same for primary and secondary
Callback function may be NULL only when database handles are read-only
DB->associate
DB->del
DB->del with DB_MULTIPLE(_KEY) requires multiple key records
locking
DB_UNKNOWN type specified with DB_CREATE or DB_TRUNCATE
unknown type: %lu
database environment not yet opened
environment did not include a memory pool
environment not created using DB_THREAD
DB_MULTIVERSION illegal without a transaction specified
DB_MULTIVERSION illegal with queue databases
DB_TRUNCATE illegal with %s specified
Queue databases must be one-per-file
files containing multiple databases may only be opened read-only
DB->put forbidden on secondary indices
DB->put: DB_MULTIPLE(_KEY) can only be combined with DB_OVERWRITE_DUP
DB->put with DB_MULTIPLE(_KEY) requires a bulk key buffer
DB->put with DB_MULTIPLE requires a bulk data buffer
a partial put in the presence of duplicates requires a cursor operation
unnamed
%s%s%s
DBC->get
DB_DBT_PARTIAL may not be set on key during join_get
Allocation failed for join key, len = %lu
%s page %lu is on free list with type %lu
Database environment not configured for encryption
DB_NOT_DURABLE
DB->set_flags
DB->get_type
DB->get_multiple
DB->get_dbname
DB->get_byteswapped
Directory %s not in environment list.
DB->set_pagesize
page sizes may not be smaller than %lu
page sizes may not be larger than %lu
page sizes must be a power-of-2
DB->set_cachesize
DB->set_alloc
DB->get_encrypt_flags
DB->get_cachesize
DB->get_alloc
DB->set_encrypt
DB->set_lorder
db_create
call implies an access method which is inconsistent with previous calls
DB->set_dup_compare
DB->set_append_recno
DB->get_open_flags
%s: Invalid type %d specified
Partitioned databases may not be in memory.
DB_CREATE must be specified to create databases.
DBTYPE of unknown without existing file
Partitioned databases may not be included with multiple databases.
__db_dbopen
%s: metadata page checksum error
__db_meta_setup: %s: unexpected file type or format
Invalid subdatabase type %d specified
0123456789abcdef
overflow: total len: %4lu page: %4lu
duplicate: page: %4lu
len: %3lu
 data: 
%#.2x
	magic: %#lx
	version: %lu
	pagesize: %lu
	type: %lu
	metaflags %#lx
	keys: %lu	records: %lu
	nparts: %lu
	free list: %lu
Unable to retrieve free-list page: %lu: %s
%s%lu
	last_pgno: %lu
	flags: %#lx
	uid: 
       D
btree metadata
overflow
recno leaf
btree leaf
recno internal
btree internal
hash metadata
hash unsorted
queue metadata
ILLEGAL PAGE TYPE: page: %lu type: %lu
 LSN [%lu][%lu]:
 level %lu
 records: %lu
	minkey: %lu
	re_len: %#lx re_pad: %#lx
	root: %lu
	max_bucket: %lu
	high_mask: %#lx
	low_mask:  %#lx
	ffactor: %lu
	nelem: %lu
	h_charkey: %#lx
	spare points: 
%lu 
	first_recno: %lu
	cur_recno: %lu
	re_len: %#lx re_pad: %lu
	rec_page: %lu
	page_ext: %lu
[%03lu] %4lu 
%sprev: %4lu next: %4lu
%sref cnt: %4lu 
%sentries: %4lu
 offset: %4lu
ILLEGAL PAGE OFFSET: indx: %lu of %lu
%4lu [offpage dups]
Duplicates:
ILLEGAL HASH PAGE TYPE: %lu
count: %4lu 
pgno: %4lu type: %lu 
ILLEGAL BINTERNAL TYPE: %lu
entries %4lu pgno %4lu
ILLEGAL DUPLICATE/LBTREE/LRECNO TYPE: %lu
ILLEGAL PAGE TYPE: %lu
page %lu: %s:
UNKNOWN LOCK MODE
Not granted
Exclusive/write
Wait for event
Intent exclusive/write
Intent shared/read
Intent to read/write
Read uncommitted
Was written
Shared/read
\%c%c
%c%c
VERSION=3
format=print
format=bytevalue
database=
type=btree
recnum=1
DB->get_flags
DB->get_bt_minkey
bt_minkey=%lu
type=hash
DB->get_h_ffactor
DB->get_h_nelem
h_nelem=%lu
type=queue
re_len=%lu
DB->get_re_len
DB->get_re_pad
DB->get_q_extentsize
extentsize=%lu
type=recno
re_pad=%#x
__db_prheader
chksum=1
duplicates=1
dupsort=1
compressed=1
db_pagesize=%lu
nparts=%lu
HEADER=END
keys=1
h_ffactor=%lu
renumber=1
DATA=END
DB->dump
UNKNOWN TYPE
recno
In-memory DB structure:
%s: %#lx
bt_meta: %lu bt_root: %lu
bt_minkey: %lu
bt_compare: %#lx bt_prefix: %#lx
bt_compress: %#lx bt_decompress: %#lx
bt_lpgno: %lu
re_pad: %#lx re_delim: %#lx re_len: %lu re_source: %s
re_modified: %d re_eof: %d re_last: %lu
meta_pgno: %lu
h_ffactor: %lu
h_nelem: %lu
h_hash: %#lx
q_meta: %lu
q_root: %lu
re_pad: %#lx re_len: %lu
rec_page: %lu
page_ext: %lu
multiple-databases
sorted duplicates
btree:recnum
recno:fixed-length
recno:renumber
compressed
checksumming
created by compensating transaction
database created
encompassing file created
dbm/ndbm error
variable length
discard cached pages
encrypted
fixed-length records
in-memory
file is being renamed
changes not logged
open called
pad value
default page size
read-only
read-uncommitted
Btree record numbers
opened for recovery
renumber
no reverse splits
secondary
load on open
subdatabases
needswap
transactional
verifier
Remove on temporary files invalid
__db_subdb_remove
DB_ENV->dbremove
DB->remove
Rename on temporary files invalid
DB_ENV->dbrename
DB->rename
DB->sort_multiple
!Set
%#lx	%s
Associated dbp
Associated txn
Internal
Default locker ID
Locker
%s	%s
Off-page duplicate cursor
Referenced page
Root
%lu	%s
Page number
Page index
Lock mode
	Flags
DB->stat
%.24s	Local time
DB handle information:
Page size
Append recno
%sSet	%s
Feedback
Dup compare
App private
DbEnv
Thread mutex
File
Database
Open flags
	File ID
Cursor adjust ID
Meta pgno
Locker ID
Handle lock
Associate lock
RPC remote ID
%.24s	Replication handle timestamp
Secondary callback
Primary handle
api internal
Btree/Recno internal
Hash internal
Queue internal
File naming information
DB handle cursors:
Active queue:
Join queue:
Free queue:
DB->stat_print
DBC_ACTIVE
DBC_DONTLOCK
DBC_MULTIPLE
DBC_MULTIPLE_KEY
DBC_OPD
DBC_OWN_LID
DBC_READ_COMMITTED
DBC_READ_UNCOMMITTED
DBC_RECOVER
DBC_RMW
DBC_TRANSIENT
DBC_WAS_READ_COMMITTED
DBC_WRITECURSOR
DBC_WRITER
DB_AM_CHKSUM
DB_AM_COMPENSATE
DB_AM_CREATED
DB_AM_CREATED_MSTR
DB_AM_DBM_ERROR
DB_AM_DELIMITER
DB_AM_DISCARD
DB_AM_DUP
DB_AM_DUPSORT
DB_AM_ENCRYPT
DB_AM_FIXEDLEN
DB_AM_INMEM
DB_AM_IN_RENAME
DB_AM_NOT_DURABLE
DB_AM_OPEN_CALLED
DB_AM_PAD
DB_AM_PGDEF
DB_AM_RDONLY
DB_AM_READ_UNCOMMITTED
DB_AM_RECNUM
DB_AM_RECOVER
DB_AM_RENUMBER
DB_AM_REVSPLITOFF
DB_AM_SECONDARY
DB_AM_SNAPSHOT
DB_AM_SUBDB
DB_AM_SWAP
DB_AM_TXN
DB_AM_VERIFYING
DB->truncate
DB->truncate forbidden on secondary indices
DB->truncate not permitted with active cursors
%s: file size not a multiple of the pagesize
%s: unsupported btree version: %lu
Attempt to upgrade an encrypted database without providing a password.
%s: unsupported hash version: %lu
%s: unsupported queue version: %lu
%s: DB->upgrade only supported on native byte-order systems
%s: unrecognized file type
DB->upgrade
Logging region out of memory; you may need to increase its size
Freeing log information for process: %s, (ref %lu)
__dbreg_register_recover
No DBP
LOG FNAME list:
File name mutex
Fid max
%ld	%s
Log buffer size
ID	Name		Type	Pgno	Pid	Txnid	Flags	DBP-info
%ld	%-8s%s%-8s%s	%lu	%lu	%lx	%lx	%s (%d %lx %lx)
LOG region list of free IDs.
Free id stack is empty.
Free id array size
Number of ids on the free stack
DB handle FNAME contents:
log ID
create txn
DB_FNAME_DURABLE
DB_FNAME_NOTLOGGED
Region allocations: %lu allocations, %lu failures, %lu frees, %lu longest
Allocations by power-of-two sizes:
%3dKB	%lu
Thread died in Berkeley DB library
is_alive method specified but no thread region allocated
thread table must be allocated when the database environment is created
unable to allocate a thread status block
Unable to allocate thread control block
DB_ENV->failchk
DB_ENV->failchk requires DB_ENV->is_alive be configured
%s/%s
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Berkeley DB was not configured for RPC support
library build did not include support for cryptography
%s: method not permitted when environment specified
after
before
%s: method not permitted %s handle's open method
DB_ENV->set_app_dispatch
DB_ENV->get_home
DB_ENV->set_alloc
DB_ENV->set_flags
DB_ENV->set_flags: direct I/O either not configured or not supported
DB_ENV->set_flags: DB_CDB_ALLDB
DB_ENV->set_flags: DB_PANIC_ENVIRONMENT
Environment panic set
DB_ENV->set_flags: DB_REGION_INIT
DB_TXN_NOSYNC and DB_TXN_WRITE_NOSYNC may not be used with DB_LOG_IN_MEMORY
DB_ENV->add_data_dir
DB_ENV->set_intermediate_dir_mode
DB_ENV->set_intermediate_dir_mode: illegal mode "%s"
DB_ENV->set_thread_count
DB_ENV->set_shm_key
<unspecified>
memory pool
logging
%s interface requires an environment configured for the %s subsystem
BDBXXXXX
temporary open: %s
File handles still open at environment close
Open file handle: %s
Berkeley DB 4.8.30: (April  9, 2010)
DB_HOME
Database handles still open at environment close
Open database handle: %s%s%s
DB_ENV->remove
DB_ENV->close
DB_ENV->get_open_flags
The DB_RECOVER flag was not specified, and recovery is needed
DB_ENV->open
Berkeley DB library does not support DB_REGISTER on this system
registration requires transaction support
Berkeley DB library does not support replication on this system
replication requires locking support
replication requires transaction support
recovery requires the create flag
recovery requires transaction support
DB_FAILCHK requires DB_ENV->is_alive be configured
DB_FAILCHK requires DB_ENV->set_thread_count be configured
Recovery function for LSN %lu %lu failed
Log file corrupt at LSN: [%lu][%lu]
backward
forward
Invalid recovery timestamp %s; earliest time is %s
Last log record not found
First log record not found
Invalid checkpoint record at [%ld][%ld]
Checkpoint LSN record [%ld][%ld] not found
Recovery starting from [%lu][%lu]
Recovery complete at %.24s
Recovery checkpoint
Maximum transaction ID
%s %lx %s [%lu][%lu]
Recovery function for LSN %lu %lu failed on %s pass
Unknown version %lu
no room remaining for additional REGIONs
region memory was not correctly aligned
process-private
__db.001
%s: unable to read system-memory information
%s: existing environment not created in system memory
Program version %d.%d doesn't match environment version %d.%d
Build signature doesn't match environment
configured environment flags incompatible with existing environment
unable to create new master region array
%s: unable to write out public environment ID
unable to join the environment
%s: unable to find environment
environment reference count went negative
__db.%03d
__db
__dbq.
__dbp.
__db.register
__db.rep
%lu: register environment
%lu: creating %s
%24lu
%lu: adding self to registry
X                      0
%02u: EMPTY
DB_REGISTER limits processes to one open DB_ENV handle per environment
%02u: %s: FAILED
%02u: %s: LOCKED
%lu: recovery required
%lu: performing failchk
%lu: locking slot %02u at offset %lu
%lu: recovery completed, unlocking
%s: exclusive file unlock
file-handle.file name
file-handle.mutex
file-handle.reference count
file-handle.file descriptor
file-handle.page number
file-handle.page size
file-handle.page offset
file-handle.seek count
file-handle.read count
file-handle.write count
	file-handle.flags
%luM	%s (%lu)
%luM	%s
 (%d%%)
 (%d%% %s)
%luGB
%s%luMB
%s%luKB
%s%luB
Environment
Mpool
Mutex
Transaction
Invalid
Lock
%s REGINFO information:
Region type
Region ID
Region name
Region address
Region primary address
Region maximum allocation
Region allocated
	Region flags
blocked and dead
blocked
DB_ENV->stat_print
Default database environment information:
Magic number
Panic value
%d.%d.%d	Environment version
Btree version
Hash version
Lock version
Log version
Queue version
Sequence version
Txn version
%.24s	Creation time
Environment ID
Primary region allocation and reference count mutex
References
DB_ENV handle mutex
Errcall
Errfile
Errpfx
Msgfile
Msgcall
AppDispatch
Event
Free
Panic
Malloc
Realloc
IsAlive
ThreadId
ThreadIdString
Log dir
Tmp dir
Data dir
%s	Data dir
Intermediate directory mode
Shared memory key
Password
RPC client
RPC client ID
Api1 internal
Api2 internal
	Verbose flags
Mutex align
Mutex cnt
Mutex inc
Mutex tas spins
Lock conflicts
Lock modes
Lock detect
Lock max
Lock max lockers
Lock max objects
Lock partitions
Lock timeout
Log bsize
Log file mode
Log region max
Log size
Cache GB
Cache B
Cache max GB
Cache max B
Cache mmap size
Cache max open fd
Cache max write
Cache number
Cache max write sleep
Txn max
Txn timestamp
Txn timeout
Thread count
Registry
Registry offset
	Public environment flags
DB_ENV
ENV handle mutex
Home
	Open flags
Mode
Pid cache
Lockfhp
Internal recovery table
Number of recovery table slots
External recovery table
Thread hash buckets
Thread hash table
Mutex initial count
Mutex initial max
ENV list of DB handles mutex
DB reference count
MT mutex
Crypto handle
Lock handle
Log handle
Cache handle
Mutex handle
Replication handle
Txn handle
User copy
Test abort
Test check
Test copy
	Private environment flags
Primary
Per region database environment information:
%s Region:
Segment ID
Size
	Initialization flags
Region slots
	Replication flags
%.24s	Operation timestamp
%.24s	Replication timestamp
Thread tracking information
Thread blocks allocated
Thread allocation threshold
Thread status blocks:
	process/thread %s: %s
		pins: %lu
Environment file handle information
REGION_CREATE
REGION_CREATE_OK
REGION_JOIN_OK
DB_FH_NOSYNC
DB_FH_OPENED
DB_FH_UNLINK
DB_REGENV_REPLOCKED
ENV_CDB
ENV_DBLOCAL
ENV_LOCKDOWN
ENV_NO_OUTPUT_SET
ENV_OPEN_CALLED
ENV_PRIVATE
ENV_RECOVER_FATAL
ENV_REF_COUNTED
ENV_SYSTEM_MEM
ENV_THREAD
DB_CREATE
DB_FORCE
DB_INIT_CDB
DB_INIT_LOCK
DB_INIT_LOG
DB_INIT_MPOOL
DB_INIT_REP
DB_INIT_TXN
DB_LOCKDOWN
DB_NOMMAP
DB_PRIVATE
DB_RDONLY
DB_RECOVER
DB_RECOVER_FATAL
DB_SYSTEM_MEM
DB_THREAD
DB_TRUNCATE
DB_TXN_NOSYNC
DB_USE_ENVIRON
DB_USE_ENVIRON_ROOT
DB_ENV_AUTO_COMMIT
DB_ENV_CDB_ALLDB
DB_ENV_DIRECT_DB
DB_ENV_DSYNC_DB
DB_ENV_MULTIVERSION
DB_ENV_NOLOCKING
DB_ENV_NOMMAP
DB_ENV_NOPANIC
DB_ENV_OVERWRITE
DB_ENV_REGION_INIT
DB_ENV_RPCCLIENT
DB_ENV_RPCCLIENT_GIVEN
DB_ENV_TIME_NOTGRANTED
DB_ENV_TXN_NOSYNC
DB_ENV_TXN_NOWAIT
DB_ENV_TXN_SNAPSHOT
DB_ENV_TXN_WRITE_NOSYNC
DB_ENV_YIELDCPU
DB_VERB_DEADLOCK
DB_VERB_FILEOPS
DB_VERB_FILEOPS_ALL
DB_VERB_RECOVERY
DB_VERB_REGISTER
DB_VERB_REPLICATION
DB_VERB_REP_ELECT
DB_VERB_REP_LEASE
DB_VERB_REP_MISC
DB_VERB_REP_MSGS
DB_VERB_REP_SYNC
DB_VERB_REP_TEST
DB_VERB_REPMGR_CONNFAIL
DB_VERB_REPMGR_MISC
DB_VERB_WAITSFOR
fop_read_meta: %s: unexpected file type or format
__fop_file_setup:  Retry limit (%d) exceeded
Transactional create on replication client disallowed
rename: file %s exists
mac derivation key magic value
Unencrypted checksum with a supplied encryption key
Encrypted checksum: no encryption key specified
ignoring log file: %s
log record size mismatch
log record checksum mismatch
Ignoring log file: %s historic byte order
Ignoring log file: %s: magic number %lx, not %lx
Unacceptable log file %s: unsupported log version %lu
Skipping log file %s: historic log version %lu
log.
Invalid log file: %s
unable to allocate log region memory
Finding last valid log LSN: file: %lu offset %lu
Warning: truncating to point beyond end of log
In-memory log buffer is full (an active transaction spans the buffer)
log file auto-remove
no absolute path for the current directory
DB_ENV->log_archive: bad log record
DB_ENV->log_archive: unable to read log record
__log_archive
DB_ENV->log_archive
file %s has LSN %lu/%lu, past end of log at %lu/%lu
Commonly caused by moving a database from one database environment
to another without clearing the database LSNs, or by removing all of
the log files from a database environment
Logging not currently permitted
DIAGNOSTIC
DB_ENV->log_printf
__log_name failed
DB_LOGC->get: %s
DB_LOGC->get: LSN: %lu/%lu: read
DB_LOGC->get
DB_LOGC->get: LSN %lu/%lu: invalid log record header
DB_ENV->log_cursor
DB_LOGC->close
DB_LOGC->get: unset cursor
DB_LOGC->version
__logc_get_int
DB_LOGC->get: LSN: %lu/%lu: short read
Encountered zero length records while traversing backwards
DB_LOGC->get: log record LSN %lu/%lu: checksum mismatch
DB_LOGC->get: catastrophic recovery may be required
DB_LOGC->get: invalid LSN: %lu/%lu
DB_ENV->get_lg_bsize
DB_ENV->set_lg_bsize
DB_ENV->get_lg_filemode
DB_ENV->set_lg_filemode
DB_ENV->get_lg_max
DB_ENV->get_lg_regionmax
DB_ENV->set_lg_regionmax
log region size must be >= %d
DB_ENV->log_get_config
DB_ENV->log_set_config
DB_ENV->log_set_config: direct I/O either not configured or not supported
DB_ENV->log_set_config: DB_LOG_IN_MEMORY
in-memory log buffer must be larger than the log file size
DB_ENV->set_lg_max
DB_ENV->log_newfh: %lu
Short read while restoring log
DB_ENV->log_flush: LSN of %lu/%lu past current end-of-log of %lu/%lu
from another environment
have been removed or incompatible database files imported
Database environment corrupt; the wrong log files may
%s %s %s
to modify a replicated environment
Non-replication DB_ENV handle attempting
DB_ENV->log_put: record larger than maximum file size (%lu > %lu)
DB_ENV->log_put
DB_ENV->log_put is illegal on replication clients
DB_ENV->log_flush
log.%010d
%s: log file unreadable
%s: log file open failed
log.%05d
DB_ENV->log_file
DB_ENV->log_file is illegal with in-memory logs
DB_ENV->log_file: name buffer is too short
DB_ENV->log_stat
Default logging region information:
Log magic number
Log version number
Log record cache size
%#o	Log file mode
%luMb	Current log file size
%luKb	Current log file size
%lu	Current log file size
Records entered into the log
Log bytes written
Log bytes written since last checkpoint
Total log file I/O writes
Total log file I/O writes due to overflow
Total log file flushes
Total log file I/O reads
Current log file number
Current log file offset
On-disk log file number
On-disk log file offset
Maximum commits in a log flush
Minimum commits in a log flush
Log region size
The number of region locks that required waiting
DB_LOG handle information:
DB_LOG handle mutex
Log file name
Log file handle
LOG handle information:
LOG region mutex
File name list mutex
persist.magic
persist.version
persist.log_size
%#lo
log file permissions mode
current file offset LSN
%lu/%lu	%s
first buffer byte LSN
current buffer offset
current file write offset
length of last record
log flush in progress
Log flush mutex
last sync LSN
cached checkpoint LSN
log buffer size
log file size
next log file size
transactions waiting to commit
LSN of first commit
DB_ENV->log_stat_print
DBLOG_RECOVER
DBLOG_FORCE_OPEN
DBLOG_AUTOREMOVE
DBLOG_DIRECT
DBLOG_DSYNC
DBLOG_INMEMORY
DBLOG_OPENFILES
DBLOG_ZERO
%s: dirty flag set for readonly file page
DB_MPOOLFILE->get
%s: page %lu: reference count overflow
memp_fget
DB_MPOOLFILE->get_priority: unknown priority value: %d
DB_MPOOLFILE->set_flags
DB_MPOOLFILE->set_priority: unknown priority value: %d
get_fileid: file ID not set
DB_MPOOLFILE->set_clear_len
DB_MPOOLFILE->set_fileid
DB_MPOOLFILE->set_ftype
DB_MPOOLFILE->set_lsn_offset
DB_MPOOLFILE->set_pgcookie
DB_ENV->memp_fcreate
DB_ENV->memp_fcreate: method not permitted when replication is configured
%s: clear length, page size or LSN location changed
Cannot open DURABLE and NOT DURABLE handles in the same file
DB_MPOOLFILE->open
DB_MPOOLFILE->open: page sizes must be a power-of-2
DB_MPOOLFILE->open: clear length larger than page size
DB_MPOOLFILE->open: temporary files can't be readonly
DB_MPOOLFILE->open: DB_MULTIVERSION requires transactions
%s: close: %lu blocks left pinned
DB_MPOOLFILE->close
%s: page %lu: unpinned page returned
__memp_fput: pinned buffer not found for thread %s
DB_MPOOLFILE->put
%s: error releasing a read-only page
%s: error getting a page for writing
DB_ENV->get_cachesize
individual cache size too large: maximum is 10TB
DB_ENV->memp_set_config
DB_ENV->memp_get_config
DB_ENV->get_mp_max_openfd
DB_ENV->set_mp_max_openfd
DB_ENV->get_mp_max_write
DB_ENV->get_mp_max_mmapsize
DB_ENV->set_mp_max_mmapsize
DB_ENV->get_mp_max_pagesize
DB_ENV->set_mp_pagesize
DB_ENV->get_mp_max_tablesize
DB_ENV->set_mp_tablesize
Truncate beyond the end of file
%s: non-transactional update to a multiversion file
__db.freezer.%lu.%lu.%luK
__memp_bh_freeze
__memp_bh_thaw
Unable to allocate memory for mpool region
DB_ENV->memp_register
method not permitted when replication is configured
DB_ENV->memp_register: 
cannot resize to %lu cache regions: maximum is %lu
cannot remove the last cache
DB_ENV->get_mp_max_ncache
DB_ENV->set_cache_max
File #%d: %s
Reference count
Block count
Last page number
Original last page number
Maximum page number
Priority
Page's LSN offset
Page's clear length
%5lu, %lu, 
%5lu, #%d, 
%2lu, %lu/%lu
 (@%lu/%lu)
, %#08lx, %lu
readonly
read/write
MPOOL structure:
MPOOL region mutex
Maximum checkpoint LSN
Hash table entries
Hash table last-checked
Hash table LRU count
Put counter
DB_MPOOL handle information:
DB_MPOOL handle mutex
Underlying cache regions
DB_MPOOLFILE structures:
MPOOLFILE structures:
File #%lu: %s: per-process, %s
Pinned block reference count
Clear length
File type
LSN offset
Max gbytes
Max bytes
Cache priority
mmap address
mmap length
File handle
Cache #%d:
BH hash table (%lu hash slots)
bucket #: priority, I/O wait, [mutex]
	pageno, file, ref, LSN, address, priority, flags
bucket %lu: %lu (%lu dirty)
(MVCC %lu/%lu/%lu) 
 next:	
DB_ENV->memp_stat
Default cache region information:
Total cache size
Number of caches
Maximum number of caches
Pool individual cache size
Maximum memory-mapped file size
Maximum open file descriptors
Maximum sequential buffer writes
Sleep after writing maximum sequential buffers
Requested pages mapped into the process' address space
Requested pages found in the cache
Requested pages not found in the cache
Pages created in the cache
Pages read into the cache
Pages written from the cache to the backing file
Clean pages forced from the cache
Dirty pages forced from the cache
Dirty pages written by trickle-sync thread
Current total page count
Current clean page count
Current dirty page count
Number of hash buckets used for page location
Assumed page size used
Total number of times hash chains searched for a page
The longest hash chain searched for a page
Total number of hash chain entries checked for page
The number of hash bucket locks that required waiting
The maximum number of times any hash bucket lock was waited for
The number of buffers frozen
The number of buffers thawed
The number of frozen buffers freed
The number of page allocations
The number of hash buckets examined during allocations
The maximum number of hash buckets examined for an allocation
The number of pages examined during allocations
The max number of pages examined for an allocation
Threads waited on page I/O
The number of times a sync is interrupted
Pool File: %s
DB_ENV->memp_stat_print
callpgin
dirty
discard
freed
frozen
trash
thawed
MP_CAN_MMAP
MP_DIRECT
MP_EXTENT
deadfile
file written
no backing file
unlink on close
not durable
MP_TEMP
DB_MPOOL_NOFILE
DB_MPOOL_UNLINK
%s: unable to flush page: %lu
memp_sync
DB_MPOOLFILE->sync
%s: unable to flush
memp_trickle
DB_ENV->memp_trickle: %d: percent must be between 1 and 100
malloc: %lu
user-specified malloc function returned NULL
realloc: %lu
User-specified realloc function returned NULL
clock_gettime
fileops: directory list %s
stat: %s
acquire
release
fileops: flock %s %s offset %lu
fcntl
fileops: flush %s
fsync
%s: buffer too small to hold environment variable %s
fileops: close %s
fcntl(F_SETFD)
fileops: mmap %s
mmap
mlock
no base system shared memory ID specified
shmget: key: %ld: shared system memory region already exists
shmget: key: %ld: unable to create shared system memory region
shmat: id %d: unable to attach to shared system memory region
shmctl/SHM_LOCK: id %d: unable to lock down shared memory region
shmdt
shmctl: id %d: unable to delete system shared memory region
munmap
fileops: munmap
fileops: open %s
__os_open
fileops: rename %s to %s
rename %s %s
fileops: read %s: %lu bytes
read: %#lx, %lu
fileops: write %s: %lu bytes
write: %#lx, %lu
fileops: read %s: %lu bytes at offset %lu
fileops: write %s: %lu bytes at offset %lu
fileops: seek %s to %lu
seek: %lu: (%lu * %lu) + %lu
fileops: stat %s
fstat
TempFolder
/var/tmp
/usr/tmp
fileops: truncate %s to %lu
ftruncate: %lu
fileops: unlink %s
unlink: %s
select
A partitioned database can not be in a multiple databases file
Partition open failed to allocate %d bytes
__dbp.%s.%03d
Cannot specify callback and range keys.
DB->set_partition
Must specify at least 2 partitions.
Must specify either keys or a callback.
May not specify both keys and a callback.
DB->set_partition_dirs
Directory not in environment list %s
__partc_get
Partitioning may only specified on BTREE and HASH databases.
Partitioning specified on a non-partitioned database.
Incompatible partitioning specified.
Partition callback not specified.
Record numbers are not supported in partitioned databases.
Zero paritions specified.
Number of partitions does not match.
Hash database must specify a partition callback.
Partitioning only supported on BTREE nad HASH.
No range keys found.
Keys found and callback set.
Partition key 0 is not empty.
Partition key %d does not match
committed
aborted
operation not permitted during recovery
transaction has active cursors
not a restored transaction
Prepare disallowed on child transactions
transaction already prepared
transaction already %s
Unable to allocate memory for transaction name
DB_TXN->set_timeout
Unable to allocate transaction recycle buffer
Unable to allocate memory for transaction detail
Unable to allocate a transaction handle
txn_begin
Child transaction snapshot setting must match parent
DB_TXN->abort: in-memory log undo failed
DB_TXN->abort: log undo failed for LSN: %lu %lu
DB_TXN->commit
DB_TXN->prepare: log_write failed
Child transaction is active
txn_checkpoint: failed to flush the buffer cache
txn_checkpoint: log failed at LSN [%ld %ld]
txn_checkpoint
Transaction has in memory logs
Aborting txn %#lx: %s
Transaction abort failed
DB_ENV->get_tx_max
DB_ENV->set_tx_max
DB_ENV->set_tx_timestamp
txnid %lx commit record found, already on commit list
Transaction not in list %x
transaction not in list %lx
Invalid checkpoint record at [%lu][%lu]
No log records
operation not permitted while in recovery
DB_ENV->txn_recover
Unable to allocate memory for the transaction region
unable to discard txn %#lx
unable to abort transaction %#lx
Error: closing the transaction region with active transactions
txn_id_set
Current ID value %lu below minimum
Maximum ID value %lu below minimum
DB_ENV->txn_stat
No checkpoint LSN
File/offset for last checkpoint LSN
unknown state
prepared
running
Default transaction region information:
0	No checkpoint timestamp
%.24s	Checkpoint timestamp
%#lx	Last transaction ID allocated
Maximum number of active transactions configured
Active transactions
Maximum active transactions
Number of transactions begun
Number of transactions aborted
Number of transactions committed
Snapshot transactions
Maximum snapshot transactions
Number of transactions restored
Transaction region size
Active transactions:
	%lx: %s; pid/thread %s; begin LSN: file/offset %lu/%lu
; parent: %lx
; read LSN: %lu/%lu
; mvcc refcount: %lu
; "%s"
	GID:
%#lx 
DB_TXNMGR handle information:
DB_TXNMGR mutex
Number of transactions discarded
DB_TXNREGION handle information:
DB_TXNREGION region mutex
Maximum number of active txns
Last transaction ID allocated
Current maximum unused ID
checkpoint mutex
Last checkpoint LSN
%.24s	Last checkpoint timestamp
DB_ENV->txn_stat_print
TXN_IN_RECOVERY
unable to initialize mutex
pthread lock failed
pthread readlock failed
pthread unlock failed
unable to destroy cond
unable to destroy mutex
__bamc_compress_iget
Existing data sorts differently from put data
__bamc_compress_iput
__bamc_compress_ibulk_del
__bamc_search
DbCursor.close
__bamc_get
__bamc_put
Not enough room in parent: %s: page %lu
DB->set_re_pad
DB->set_re_len
DB->set_re_delim
DB->set_bt_prefix
DB->set_bt_compare
DB->set_re_source
DB->set_bt_minkey
minimum bt_minkey value is 2
DB->set_bt_compress
compression cannot be used with DB_RECNUM
compression cannot be used with DB_DUP without DB_DUPSORT
to enable compression you need to supply both function arguments
DB_RECNUM cannot be used with compression
DB_DUP cannot be used with compression without DB_DUPSORT
%s: btree version %lu requires a version upgrade
open method type is Btree, database type is Recno
%s: DB_DUP specified to open method but not set in database
%s: DB_RECNUM specified to open method but not set in database
%s: DB_FIXEDLEN specified to open method but not set in database
%s: DB_RENUMBER specified to open method but not set in database
%s: multiple databases specified but not supported by file
%s: duplicate sort specified but not supported in database
%s: compresssion specified to open method but not set in database
open method type is Recno, database type is Btree
prefix comparison may not be specified for default comparison routine
bt_minkey value of %lu too high for page size of %lu
cursor adjustment after delete failed
illegal record number size
illegal record number of 0
__ramc_get
%s: write failed to backing file
Too many btree levels: %d
Overflow size
Recno
Order
	Internal Flags
Unrecognized byte order
Little-endian
Big-endian
Number of unique keys in the tree
Number of records in the tree
Default Btree/Recno database information:
%lx	Btree magic number
%lu	Btree version number
%s	Byte order
Minimum keys per-page
Fixed-length record size
%#x	Fixed-length record pad
Underlying database page size
Overflow key/data size
Number of levels in the tree
Number of data items in the tree
Number of tree internal pages
Number of bytes free in tree internal pages
Number of tree leaf pages
Number of bytes free in tree leaf pages
Number of tree duplicate pages
Number of bytes free in tree duplicate pages
Number of tree overflow pages
Number of bytes free in tree overflow pages
Number of empty pages
Number of pages on the free list
C_DELETED
C_RECNUM
C_RENUMBER
record-numbers
fixed-length
Unknown record format, page %lu, indx 0
Compact cannot handle zero length key
__hamc_get
H_NOMORE returned to __hamc_get
__hamc_put
__ham_add_dup
DB->set_h_nelem
DB->set_h_hash
DB->set_h_ffactor
DB->set_h_compare
%s: Invalid hash meta page %lu
%s: hash version %lu requires a version upgrade
%s: multiple databases specified but not supported in file
%s: duplicate sort function specified but not set in database
%04X, 
key1: %s, key2: %s, len: %lu
curroffset %lu
indexes: 
Attempt to return a deleted item
Invalid flag in __ham_curadj_recover
Cannot replicate prepared transactions from master running release 4.2.
Bucket traversing
Bucket locked
Duplicate set offset
Current duplicate length
Total duplicate set length
Bytes needed for add
Page on which we can insert
__ham_traverse
Default Hash database information:
%lx	Hash magic number
%lu	Hash version number
Number of pages in the database
Specified fill factor
Number of keys in the database
Number of data items in the database
Number of hash buckets
Number of bytes free on bucket pages
Number of overflow pages
Number of bytes free in overflow pages
Number of bucket overflow pages
Number of bytes free in bucket overflow pages
Number of duplicate pages
Number of bytes free in duplicate pages
H_CONTINUE
H_DELETED
H_DUPONLY
H_EXPAND
H_ISDUP
H_NEXT_NODUP
H_NOMORE
H_OK
Page %lu: database has custom hash function; reverify with DB_NOORDERCHK set
Page %lu: Impossible max_bucket %lu on meta page
Page %lu: incorrect high_mask %lu, should be %lu
Page %lu: incorrect low_mask %lu, should be %lu
Page %lu: suspiciously high nelem of %lu
Page %lu: spares array entry %d is invalid
__ham_vrfy
Page %lu: item %lu is out of order or nonsensical
Page %lu: entries array collided with data
Page %lu: hash key stored as duplicate item %lu
Page %lu: duplicate item %lu has bad length
Page %lu: duplicate item %lu has two different lengths
Page %lu: offpage item %lu has bad page number
Page %lu: item %lu has bad type
Page %lu: item %lu hashes incorrectly
Page %lu: Hash meta page referenced twice
Page %lu: impossible first page in bucket %lu
Page %lu: first page in hash bucket %lu has a prev_pgno
Page %lu: hash page referenced twice
Page %lu: duplicates present in non-duplicate database
Page %lu: unsorted dups in sorted-dup database
Page %lu: hash page has bad next_pgno
Page %lu: hash page has bad prev_pgno
Page %lu: hash bucket %lu maps to non-hash page
Page %lu: non-empty page in unused hash bucket %lu
Page %lu: above max_bucket referenced
__qamc_get
%s: data offset plus length larger than record size of %lu
%s%c__dbq.%s.%d
Queue does not support multiple databases per file
DB->set_extentsize
Extent size must be at least 1
Record size of %lu too large for page size of %lu
Extent size may not be specified for in-memory queue database
Multiversion queue databases are not supported
__qam_open: %s: unexpected file type or format
%s: queue version %lu requires a version upgrade
%s: unsupported qam version: %lu
Default Queue database information:
%lx	Queue magic number
%lu	Queue version number
Underlying database extent size
Number of records in the database
Number of database pages
Number of bytes free in database pages
%lu	First undeleted record
%lu	Next available record number
Page %lu: queue databases must be one-per-file
Page %lu: queue record length %lu too high for page size and recs/page
Page %lu: database contains multiple Queue metadata pages
__dbq.%s.
Warning: %d extra extent files found
Page %lu: queue record %lu extends past end of page
Page %lu: queue record %lu has bad flags (%#lx)
Page %lu: queue database has no meta page
Page %lu: queue database page of incorrect type %lu
library build did not include support for replication
library build did not include support for the Replication Manager
Page %lu: overflow page has zero reference count
Page %lu: overflow page of invalid type %lu
Page %lu: first page in overflow chain has a prev_pgno %lu
Page %lu: encountered too many times in overflow traversal
Page %lu: overflow page linked twice from leaf or data page
Page %lu: bad next_pgno %lu on overflow page
Page %lu: bad prev_pgno %lu on overflow page (should be %lu)
Page %lu: overflow item incomplete
%s: Lock is no longer valid
Locker is not valid
object entries
No space for lock object storage
DB_LOCK->lock_put
Locker does not exist
DB_ENV->lock_get: invalid lock mode %lu
lock entries
Unexpected lock status: %d
DB_ENV->lock_get
Not a child transaction
Invalid lock operation: %d
DB_ENV->lock_vec
lock_downgrade
%lu lockers
warning: unable to abort locker %lx
Aborting locker %lx
DB_ENV->lock_detect
DB_ENV->lock_detect: unknown deadlock detection mode specified
locker has write locks
Freeing read locks for locker %#lx: %s
lock_id_set
locker entries
DB_ENV->lock_id
DB_ENV->lock_id_free
Unknown locker id: %lx
Locker still has locks
Freeing locker with locks
(%lx %lx %lx %lx %lx)
%14s.%-10s
%-25s
DB_ENV->get_lk_conflicts
DB_ENV->set_lk_conflicts
DB_ENV->get_lk_detect
DB_ENV->set_lk_detect
DB_ENV->set_lk_detect: unknown deadlock detection mode specified
DB_ENV->set_lk_detect: incompatible deadlock detector mode
DB_ENV->get_lk_maxlocks
DB_ENV->set_lk_max_locks
DB_ENV->get_lk_max_lockers
DB_ENV->set_lk_max_lockers
DB_ENV->get_lk_max_objects
DB_ENV->set_lk_max_objects
DB_ENV->get_lk_partitions
DB_ENV->set_lk_partitions
DB_ENV->get_env_timeout
DB_ENV->get_timeout
DB_ENV->set_env_timeout
DB_ENV->set_timeout
unable to allocate memory for the lock table
lock_open: incompatible deadlock detector mode
DB_ENV->lock_stat
IREAD
IWRITE
READ
READ_UNCOMMITTED
WRITE
WAS_WRITE
WAIT
ABORT
FREE
HELD
PENDING
%8lx %-10s %4lu %-7s 
(%lx %lx %lx %lx %lx) 
%14s:%-10s
%-25s 
%-7s %7lu
0x%lx 
Lock region parameters:
Lock region region mutex
locker table size
object table size
obj_off
locker_off
need_dd
%m-%d-%H:%M:%S
next_timeout: %s.%09lu
next_timeout: %lu.%09lu
Lock conflict matrix:
%lu	
Locks grouped by lockers:
----------------- Object ---------------
%-8s %-10s%-4s %-7s %s
%8lx dd=%2ld locks held %-4d write locks %-4d pid/thread %s
expires %s.%09lu
expires %lu.%09lu
 lk timeout %lu
 lk expires %s.%09lu
 lk expires %lu.%09lu
Locks grouped by object:
Default locking region information:
Last allocated locker ID
%#lx	Current maximum unused locker ID
Number of lock modes
Maximum number of locks possible
Maximum number of lockers possible
Maximum number of lock objects possible
Number of lock object partitions
Number of current locks
Maximum number of locks at any one time
Maximum number of locks in any one bucket
Maximum number of locks stolen by for an empty partition
Maximum number of locks stolen for any one partition
Number of current lockers
Maximum number of lockers at any one time
Number of current lock objects
Maximum number of lock objects at any one time
Maximum number of lock objects in any one bucket
Maximum number of objects stolen by for an empty partition
Maximum number of objects stolen for any one partition
Total number of locks requested
Total number of locks released
Total number of locks upgraded
Total number of locks downgraded
Lock requests not available due to conflicts, for which we waited
Lock requests not available due to conflicts, for which we did not wait
Number of deadlocks
Lock timeout value
Number of locks that have timed out
Transaction timeout value
Number of transactions that have timed out
The size of the lock region
The number of partition locks that required waiting
The maximum number of times any partition lock was waited for
The number of object queue operations that required waiting
The number of locker allocations that required waiting
Maximum hash bucket length
DB_ENV->lock_stat_print
Lock table is out of available %s
unable to allocate memory for mutex; resize mutex region
Freeing mutex for process: %s
DB_ENV->mutex_alloc
DB_ENV->set_mutex_align
DB_ENV->mutex_set_align: alignment value must be a non-zero power-of-two
DB_ENV->set_mutex_increment
DB_ENV->set_mutex_max
Unable to allocate memory for the mutex region
Unable to allocate memory for mutexes from the region
Unable to acquire/release a mutex; check configuration
Unable to acquire/release a shared latch; check configuration
`]ZWTQNKHEB?<9630-*'$!
unknown mutex type
application allocated
db handle
env dblist
env handle
env region
logical lock
log filename
log flush
log handle
log region
mpoolfile handle
mpool buffer
mpool filehandle
mpool file bucket
mpool handle
mpool hash bucket
mpool region
mutex region
mutex test
replication manager
replication checkpoint
replication database
replication event
replication region
twister
txn active list
transaction checkpoint
txn commit
txn mvcc
txn region
atomic emulation
DB_ENV->mutex_stat
[!Set]
%luM
/%luM
 %d%% 
 rd 
!Own]
%lu	%s 
Default mutex region information:
Mutex region size
Mutex alignment
Mutex test-and-set spins
Mutex total count
Mutex free count
Mutex in-use count
Mutex maximum in-use count
Mutex counts
%d	Unallocated
DB_MUTEXREGION structure:
DB_MUTEXREGION region mutex
Size of the aligned mutex
Next free mutex
mutex	wait/nowait, pct wait, holder, flags
%5lu	
, %s
DB_ENV->mutex_stat_print
logical
self-block
Encrypted environment: library build did not include cryptography support
unsupported byte order, only big and little-endian supported
CDS groups do not support %s
set_name
prepare
abort
CDS group has active cursors
cdsgroup_begin
checksum error: page %lu: catastrophic recovery required
Attempting to add application-specific record with invalid type %lu
Attempting to add internal record with invalid type %lu
__db_dispatch
Illegal application-specific record type %lu in log
Illegal record type %lu in log
Checksum failure requires catastrophic recovery
Cannot replicate prepared transactions from master running release 4.2 
__env_fileid_reset: %s: unexpected file type or format
DB_ENV->fileid_reset
DB_ENV->lsn_reset
DB_CONFIG
line %d: %s: incorrect name-value pair
mutex_set_align
mutex_set_increment
mutex_set_max
mutex_set_tas_spins
rep_set_clockskew
rep_set_config
db_rep_conf_bulk
db_rep_conf_delayclient
db_rep_conf_lease
db_rep_conf_noautoinit
db_rep_conf_nowait
db_repmgr_conf_2site_strict
rep_set_limit
rep_set_nsites
rep_set_priority
rep_set_request
rep_set_timeout
db_rep_ack_timeout
db_rep_checkpoint_delay
db_rep_connection_retry
db_rep_election_timeout
db_rep_election_retry
db_rep_full_election_timeout
db_rep_heartbeat_monitor
db_rep_heartbeat_send
db_rep_lease_timeout
repmgr_set_ack_policy
db_repmgr_acks_all
db_repmgr_acks_all_peers
db_repmgr_acks_none
db_repmgr_acks_one
db_repmgr_acks_one_peer
db_repmgr_acks_quorum
set_cachesize
set_data_dir
db_data_dir
set_create_dir
set_intermediate_dir
db_auto_commit
db_cdb_alldb
db_direct_db
db_dsync_db
db_multiversion
db_nolocking
db_nommap
db_nopanic
db_overwrite
db_region_init
db_txn_nosync
db_txn_nowait
db_txn_snapshot
db_txn_write_nosync
db_yieldcpu
db_log_inmemory
db_direct_log
db_dsync_log
db_log_autoremove
set_log_config
db_log_auto_remove
db_log_direct
db_log_dsync
db_log_in_memory
db_log_zero
set_lg_dir
db_log_dir
db_lock_default
db_lock_expire
db_lock_maxlocks
db_lock_maxwrite
db_lock_minlocks
db_lock_minwrite
db_lock_oldest
db_lock_random
db_lock_youngest
set_lock_timeout
set_mp_max_write
set_mp_mmapsize
set_region_init
set_reg_timeout
set_tas_spins
set_tmp_dir
db_tmp_dir
set_txn_timeout
set_verbose
db_verb_deadlock
db_verb_fileops
db_verb_fileops_all
db_verb_recovery
db_verb_register
db_verb_replication
db_verb_rep_elect
db_verb_rep_lease
db_verb_rep_misc
db_verb_rep_msgs
db_verb_rep_sync
db_verb_rep_test
db_verb_repmgr_connfail
db_verb_repmgr_misc
db_verb_waitsfor
unrecognized name-value pair: %s
unable to allocate space from the buffer cache
pgout
pgin
%s: %s failed for page %lu
%s: write failed for page %lu
unable to create temporary backing file
fileops: mkdir %s
%s: %s: %s
%s: %s: Invalid numeric argument
%s: Invalid numeric argument
%s: %s: Less than minimum value (%ld)
%s: Less than minimum value (%ld)
%s: %s: Greater than maximum value (%ld)
%s: Greater than maximum value (%ld)
%s: %s: Less than minimum value (%lu)
%s: Less than minimum value (%lu)
%s: %s: Greater than maximum value (%lu)
%s: Greater than maximum value (%lu)
cryptlib.c
dynamic
%s(%d): OpenSSL internal error, assertion failed: %s
pointer != NULL
<<ERROR>>
ex_data
x509
x509_info
x509_pkey
x509_crl
x509_req
evp_pkey
x509_store
ssl_ctx
ssl_cert
ssl_session
ssl_sess_cert
ssl_method
rand
rand2
debug_malloc
gethostbyname
getservbyname
readdir
RSA_blinding
debug_malloc2
dynlock
ecdsa
ecdh
ec_pre_comp
store
comp
fips
fips2
mem.c
compiler: -I. -I.. -I../include  -DOPENSSL_THREADS -D_REENTRANT -pipe -O2 -I/home/ubuntu/build/giant/depends/aarch64-linux-gnu/include -fPIC -Wa,--noexecstack -DTERMIO -O3 -Wall
not available
OpenSSL 1.0.1k 8 Jan 2015
built on: date not available
platform: linux-generic64
OPENSSLDIR: "/home/ubuntu/build/giant/depends/aarch64-linux-gnu/etc/openssl"
vRQ>
8STs
LwH'
SHA-256 part of OpenSSL 1.0.1k 8 Jan 2015
p09Y
AES part of OpenSSL 1.0.1k 8 Jan 2015
aes(partial)
`P00
ggV}++
Lj&&lZ66~A??
h\44Q
bS11*?
Fe##
Ni''
Xt,,4.
RRvM;;
R{))
^q//
@`  
rK99
MMfU33
PPxD<<%
pH88
Bc!! 0
DD.9
~~zG==
]]2+
Df""T~**;
dV22tN::
Hl$$
nY77
xxJo%%\r..8$
tt>!
pp|B>>q
aaj_55
UUPx((
Zw--
0`P0
g+V}+
&Lj&6lZ6?~A?
4h\4
1bS1
#Fe#
'Ni'
,Xt,
R;vM;
)R{)
/^q/
 @` 
9rK9J
M3fU3
P<xD<
8pH8
!Bc!
~=zG=d
"Df"*T~*
2dV2:tN:
$Hl$\
7nY7m
x%Jo%.\r.
p>|B>
a5j_5W
U(Px(
-Zw-
T00`P
++V}
&&Lj66lZ??~A
O44h\
s11bS
R##Fe
&''Ni
,,Xt
6-nn
;;vM
))R{
>//^q
,  @`
99rKJJ
33fU
<<xD
88pH
u!!Bc
==zGdd
2+ss
""Df**T~
;22dV::tN
$$Hl\\
C77nYmm
%%Jo..\r
>!KK
>>|B
55j_WW
"3ii
((Px
--Zw
P00`
}++V
=j&&LZ66lA??~
\44h
S11b?
e##F^
i''N
t,,X.
M;;va
}{))R>
q//^
`  @
gK99r
U33f
D<<x
!H88p
c!!B0
G==z
f""D~**T
V22dN::t
l$$H
Y77n
o%%Jr..\$
B>>|
_55j
x((Pz
)w--Z
QPeA~S
0 Umv
-!tX
SbEwd
hHpX
Uf*(
+2Hp
rZlN
9-6'
\h!T[
.6$:g
KwZi
[4)C
F~Tb
#?*1
_[o=
>4$8,@
p\lHtW
A~Se
`3SbE
+HpXhE
pZlNr
-6'9
T6$:.
 wZiK
*"<C
[4~C
~TbF
	xYn
?*1#
fNt7
$8,4
lHt\
QSeA~
!tX)i
XhHp
NrZl
='9-6d
:.6$
aiKwZ
;fD4~
[v)C
cB@"
_jbF~T
11#?*0
,4$8_@
I<(A
t\lHBW
~SeA
!tI)i
k>X'
`3QbE
pXhH
C@gw
lNrZ
6'9-
T[$:.6
ZiKw
;f[4~
_TbF~
	x&n
*1#?
h8,4$
2Ht\l
lpHP
}buf_str.c
bio_lib.c
bss_mem.c
memory buffer
Stack part of OpenSSL 1.0.1k 8 Jan 2015
stack.c
err.c
int_thread_get (err.c)
int_err_get (err.c)
lib(%lu)
func(%lu)
reason(%lu)
error:%08lX:%s:%s:%s
system lib
BN lib
RSA lib
DH lib
EVP lib
BUF lib
OBJ lib
PEM lib
DSA lib
X509 lib
ASN1 lib
CONF lib
CRYPTO lib
EC lib
SSL lib
BIO lib
PKCS7 lib
X509V3 lib
PKCS12 lib
RAND lib
DSO lib
ENGINE lib
OCSP lib
TS lib
nested asn1 error
bad asn1 object header
bad get asn1 object call
expecting an asn1 sequence
asn1 length mismatch
missing asn1 eos
fatal
malloc failure
called a function you should not call
passed a null parameter
internal error
called a function that was disabled at compile-time
fopen
connect
socket
ioctlsocket
bind
listen
accept
opendir
fread
unknown library
system library
bignum routines
rsa routines
Diffie-Hellman routines
digital envelope routines
memory buffer routines
object identifier routines
PEM routines
dsa routines
x509 certificate routines
asn1 encoding routines
configuration file routines
common libcrypto routines
elliptic curve routines
SSL routines
BIO routines
PKCS7 routines
X509 V3 routines
PKCS12 routines
random number generator
DSO support routines
time stamp routines
engine routines
OCSP routines
FIPS routines
CMS routines
HMAC routines
EVP part of OpenSSL 1.0.1k 8 Jan 2015
evp_enc.c
bl <= (int)sizeof(ctx->buf)
b <= sizeof ctx->buf
b <= sizeof ctx->final
ctx->cipher->block_size == 1 || ctx->cipher->block_size == 8 || ctx->cipher->block_size == 16
EVP_CIPHER_CTX_iv_length(ctx) <= (int)sizeof(ctx->iv)
nkey <= EVP_MAX_KEY_LENGTH
evp_key.c
niv <= EVP_MAX_IV_LENGTH
e_aes.c
bio_b64.c
ctx->buf_len >= ctx->buf_off
ctx->buf_off+i < (int)sizeof(ctx->buf)
ctx->buf_off < (int)sizeof(ctx->buf)
ctx->buf_len <= (int)sizeof(ctx->buf)
i <= n
ctx->buf_off <= (int)sizeof(ctx->buf)
ctx->tmp_len <= 3
base64 encoding
l <= sizeof(c->iv)
evp_lib.c
j <= sizeof(c->iv)
a_object.c
<INVALID>
ASN.1 part of OpenSSL 1.0.1k 8 Jan 2015
asn1_lib.c
 offset=
address=
evp_asn1.c
Auto configuration failed
ui_lib.c
Enter 
 characters
You must type in 
ui_openssl.c
Verifying - %s
Verify failure
/dev/tty
OpenSSL default user interface
[%02d:%02d:%02d] 
%5lu file=%s, line=%d, 
thread=%lu, 
number=%d, address=%08lX
 thread=%lu, file=%s, line=%d, info="
mem_dbg.c
%ld bytes leaked in %d chunks
ex_data.c
Ag*g*
g+g+
*obj_dat.c
.%lu
UNDEF
undefined
rsadsi
RSA Data Security, Inc.
pkcs
RSA Data Security, Inc. PKCS
rsaEncryption
RSA-MD2
md2WithRSAEncryption
RSA-MD5
md5WithRSAEncryption
PBE-MD2-DES
pbeWithMD2AndDES-CBC
PBE-MD5-DES
pbeWithMD5AndDES-CBC
X500
directory services (X.500)
X509
commonName
countryName
localityName
stateOrProvinceName
organizationName
organizationalUnitName
pkcs7
pkcs7-data
pkcs7-signedData
pkcs7-envelopedData
pkcs7-signedAndEnvelopedData
pkcs7-digestData
pkcs7-encryptedData
pkcs3
dhKeyAgreement
DES-ECB
des-ecb
DES-CFB
des-cfb
DES-CBC
des-cbc
DES-EDE
des-ede
DES-EDE3
des-ede3
IDEA-CBC
idea-cbc
IDEA-CFB
idea-cfb
IDEA-ECB
idea-ecb
RC2-CBC
rc2-cbc
RC2-ECB
rc2-ecb
RC2-CFB
rc2-cfb
RC2-OFB
rc2-ofb
RSA-SHA
shaWithRSAEncryption
DES-EDE-CBC
des-ede-cbc
DES-EDE3-CBC
des-ede3-cbc
DES-OFB
des-ofb
IDEA-OFB
idea-ofb
pkcs9
emailAddress
unstructuredName
contentType
messageDigest
signingTime
countersignature
challengePassword
unstructuredAddress
extendedCertificateAttributes
Netscape
Netscape Communications Corp.
nsCertExt
Netscape Certificate Extension
nsDataType
Netscape Data Type
DES-EDE-CFB
des-ede-cfb
DES-EDE3-CFB
des-ede3-cfb
DES-EDE-OFB
des-ede-ofb
DES-EDE3-OFB
des-ede3-ofb
sha1
RSA-SHA1
sha1WithRSAEncryption
DSA-SHA
dsaWithSHA
DSA-old
dsaEncryption-old
PBE-SHA1-RC2-64
pbeWithSHA1AndRC2-CBC
PBKDF2
DSA-SHA1-old
dsaWithSHA1-old
nsCertType
Netscape Cert Type
nsBaseUrl
Netscape Base Url
nsRevocationUrl
Netscape Revocation Url
nsCaRevocationUrl
Netscape CA Revocation Url
nsRenewalUrl
Netscape Renewal Url
nsCaPolicyUrl
Netscape CA Policy Url
nsSslServerName
Netscape SSL Server Name
nsComment
Netscape Comment
nsCertSequence
Netscape Certificate Sequence
DESX-CBC
desx-cbc
id-ce
subjectKeyIdentifier
X509v3 Subject Key Identifier
keyUsage
X509v3 Key Usage
privateKeyUsagePeriod
X509v3 Private Key Usage Period
subjectAltName
X509v3 Subject Alternative Name
issuerAltName
X509v3 Issuer Alternative Name
basicConstraints
X509v3 Basic Constraints
crlNumber
X509v3 CRL Number
certificatePolicies
X509v3 Certificate Policies
authorityKeyIdentifier
X509v3 Authority Key Identifier
BF-CBC
bf-cbc
BF-ECB
bf-ecb
BF-CFB
bf-cfb
BF-OFB
bf-ofb
MDC2
mdc2
RSA-MDC2
mdc2WithRSA
RC4-40
rc4-40
RC2-40-CBC
rc2-40-cbc
givenName
surname
initials
crlDistributionPoints
X509v3 CRL Distribution Points
RSA-NP-MD5
md5WithRSA
serialNumber
title
description
CAST5-CBC
cast5-cbc
CAST5-ECB
cast5-ecb
CAST5-CFB
cast5-cfb
CAST5-OFB
cast5-ofb
pbeWithMD5AndCast5CBC
DSA-SHA1
dsaWithSHA1
MD5-SHA1
md5-sha1
RSA-SHA1-2
sha1WithRSA
dsaEncryption
RIPEMD160
ripemd160
RSA-RIPEMD160
ripemd160WithRSA
RC5-CBC
rc5-cbc
RC5-ECB
rc5-ecb
RC5-CFB
rc5-cfb
RC5-OFB
rc5-ofb
run length compression
ZLIB
zlib compression
extendedKeyUsage
X509v3 Extended Key Usage
PKIX
id-kp
serverAuth
TLS Web Server Authentication
clientAuth
TLS Web Client Authentication
codeSigning
Code Signing
emailProtection
E-mail Protection
timeStamping
Time Stamping
msCodeInd
Microsoft Individual Code Signing
msCodeCom
Microsoft Commercial Code Signing
msCTLSign
Microsoft Trust List Signing
msSGC
Microsoft Server Gated Crypto
msEFS
Microsoft Encrypted File System
nsSGC
Netscape Server Gated Crypto
deltaCRL
X509v3 Delta CRL Indicator
CRLReason
X509v3 CRL Reason Code
invalidityDate
Invalidity Date
SXNetID
Strong Extranet ID
PBE-SHA1-RC4-128
pbeWithSHA1And128BitRC4
PBE-SHA1-RC4-40
pbeWithSHA1And40BitRC4
PBE-SHA1-3DES
pbeWithSHA1And3-KeyTripleDES-CBC
PBE-SHA1-2DES
pbeWithSHA1And2-KeyTripleDES-CBC
PBE-SHA1-RC2-128
pbeWithSHA1And128BitRC2-CBC
PBE-SHA1-RC2-40
pbeWithSHA1And40BitRC2-CBC
keyBag
pkcs8ShroudedKeyBag
certBag
crlBag
secretBag
safeContentsBag
friendlyName
localKeyID
x509Certificate
sdsiCertificate
x509Crl
PBES2
PBMAC1
hmacWithSHA1
id-qt-cps
Policy Qualifier CPS
id-qt-unotice
Policy Qualifier User Notice
RC2-64-CBC
rc2-64-cbc
SMIME-CAPS
S/MIME Capabilities
PBE-MD2-RC2-64
pbeWithMD2AndRC2-CBC
PBE-MD5-RC2-64
pbeWithMD5AndRC2-CBC
PBE-SHA1-DES
pbeWithSHA1AndDES-CBC
msExtReq
Microsoft Extension Request
extReq
Extension Request
dnQualifier
id-pe
id-ad
authorityInfoAccess
Authority Information Access
OCSP
caIssuers
CA Issuers
OCSPSigning
OCSP Signing
member-body
ISO Member Body
ISO-US
ISO US Member Body
X9-57
X9.57
X9cm
X9.57 CM ?
pkcs1
pkcs5
SMIME
S/MIME
id-smime-mod
id-smime-ct
id-smime-aa
id-smime-alg
id-smime-cd
id-smime-spq
id-smime-cti
id-smime-mod-cms
id-smime-mod-ess
id-smime-mod-oid
id-smime-mod-msg-v3
id-smime-mod-ets-eSignature-88
id-smime-mod-ets-eSignature-97
id-smime-mod-ets-eSigPolicy-88
id-smime-mod-ets-eSigPolicy-97
id-smime-ct-receipt
id-smime-ct-authData
id-smime-ct-publishCert
id-smime-ct-TSTInfo
id-smime-ct-TDTInfo
id-smime-ct-contentInfo
id-smime-ct-DVCSRequestData
id-smime-ct-DVCSResponseData
id-smime-aa-receiptRequest
id-smime-aa-securityLabel
id-smime-aa-mlExpandHistory
id-smime-aa-contentHint
id-smime-aa-msgSigDigest
id-smime-aa-encapContentType
id-smime-aa-contentIdentifier
id-smime-aa-macValue
id-smime-aa-equivalentLabels
id-smime-aa-contentReference
id-smime-aa-encrypKeyPref
id-smime-aa-signingCertificate
id-smime-aa-smimeEncryptCerts
id-smime-aa-timeStampToken
id-smime-aa-ets-sigPolicyId
id-smime-aa-ets-commitmentType
id-smime-aa-ets-signerLocation
id-smime-aa-ets-signerAttr
id-smime-aa-ets-otherSigCert
id-smime-aa-ets-contentTimestamp
id-smime-aa-ets-CertificateRefs
id-smime-aa-ets-RevocationRefs
id-smime-aa-ets-certValues
id-smime-aa-ets-revocationValues
id-smime-aa-ets-escTimeStamp
id-smime-aa-ets-certCRLTimestamp
id-smime-aa-ets-archiveTimeStamp
id-smime-aa-signatureType
id-smime-aa-dvcs-dvc
id-smime-alg-ESDHwith3DES
id-smime-alg-ESDHwithRC2
id-smime-alg-3DESwrap
id-smime-alg-RC2wrap
id-smime-alg-ESDH
id-smime-alg-CMS3DESwrap
id-smime-alg-CMSRC2wrap
id-smime-cd-ldap
id-smime-spq-ets-sqt-uri
id-smime-spq-ets-sqt-unotice
id-smime-cti-ets-proofOfOrigin
id-smime-cti-ets-proofOfReceipt
id-smime-cti-ets-proofOfDelivery
id-smime-cti-ets-proofOfSender
id-smime-cti-ets-proofOfApproval
id-smime-cti-ets-proofOfCreation
id-pkix-mod
id-qt
id-it
id-pkip
id-alg
id-cmc
id-on
id-pda
id-aca
id-qcs
id-cct
id-pkix1-explicit-88
id-pkix1-implicit-88
id-pkix1-explicit-93
id-pkix1-implicit-93
id-mod-crmf
id-mod-cmc
id-mod-kea-profile-88
id-mod-kea-profile-93
id-mod-cmp
id-mod-qualified-cert-88
id-mod-qualified-cert-93
id-mod-attribute-cert
id-mod-timestamp-protocol
id-mod-ocsp
id-mod-dvcs
id-mod-cmp2000
biometricInfo
Biometric Info
qcStatements
ac-auditEntity
ac-targeting
aaControls
sbgp-ipAddrBlock
sbgp-autonomousSysNum
sbgp-routerIdentifier
textNotice
ipsecEndSystem
IPSec End System
ipsecTunnel
IPSec Tunnel
ipsecUser
IPSec User
DVCS
dvcs
id-it-caProtEncCert
id-it-signKeyPairTypes
id-it-encKeyPairTypes
id-it-preferredSymmAlg
id-it-caKeyUpdateInfo
id-it-currentCRL
id-it-unsupportedOIDs
id-it-subscriptionRequest
id-it-subscriptionResponse
id-it-keyPairParamReq
id-it-keyPairParamRep
id-it-revPassphrase
id-it-implicitConfirm
id-it-confirmWaitTime
id-it-origPKIMessage
id-regCtrl
id-regInfo
id-regCtrl-regToken
id-regCtrl-authenticator
id-regCtrl-pkiPublicationInfo
id-regCtrl-pkiArchiveOptions
id-regCtrl-oldCertID
id-regCtrl-protocolEncrKey
id-regInfo-utf8Pairs
id-regInfo-certReq
id-alg-des40
id-alg-noSignature
id-alg-dh-sig-hmac-sha1
id-alg-dh-pop
id-cmc-statusInfo
id-cmc-identification
id-cmc-identityProof
id-cmc-dataReturn
id-cmc-transactionId
id-cmc-senderNonce
id-cmc-recipientNonce
id-cmc-addExtensions
id-cmc-encryptedPOP
id-cmc-decryptedPOP
id-cmc-lraPOPWitness
id-cmc-getCert
id-cmc-getCRL
id-cmc-revokeRequest
id-cmc-regInfo
id-cmc-responseInfo
id-cmc-queryPending
id-cmc-popLinkRandom
id-cmc-popLinkWitness
id-cmc-confirmCertAcceptance
id-on-personalData
id-pda-dateOfBirth
id-pda-placeOfBirth
id-pda-gender
id-pda-countryOfCitizenship
id-pda-countryOfResidence
id-aca-authenticationInfo
id-aca-accessIdentity
id-aca-chargingIdentity
id-aca-group
id-aca-role
id-qcs-pkixQCSyntax-v1
id-cct-crs
id-cct-PKIData
id-cct-PKIResponse
ad_timestamping
AD Time Stamping
AD_DVCS
ad dvcs
basicOCSPResponse
Basic OCSP Response
OCSP Nonce
CrlID
OCSP CRL ID
acceptableResponses
Acceptable OCSP Responses
noCheck
OCSP No Check
archiveCutoff
OCSP Archive Cutoff
serviceLocator
OCSP Service Locator
extendedStatus
Extended OCSP Status
trustRoot
Trust Root
rsaSignature
X500algorithms
directory services - algorithms
IANA
iana
Directory
mgmt
Management
experimental
Experimental
Private
security
Security
snmpv2
SNMPv2
Mail
enterprises
Enterprises
dcobject
dcObject
domainComponent
domain
Domain
selected-attribute-types
Selected Attribute Types
clearance
RSA-MD4
md4WithRSAEncryption
ac-proxying
subjectInfoAccess
Subject Information Access
id-aca-encAttrs
role
policyConstraints
X509v3 Policy Constraints
targetInformation
X509v3 AC Targeting
noRevAvail
X509v3 No Revocation Available
ansi-X9-62
ANSI X9.62
prime-field
characteristic-two-field
id-ecPublicKey
prime192v1
prime192v2
prime192v3
prime239v1
prime239v2
prime239v3
prime256v1
ecdsa-with-SHA1
CSPName
Microsoft CSP Name
AES-128-ECB
aes-128-ecb
AES-128-CBC
aes-128-cbc
AES-128-OFB
aes-128-ofb
AES-128-CFB
aes-128-cfb
AES-192-ECB
aes-192-ecb
AES-192-CBC
aes-192-cbc
AES-192-OFB
aes-192-ofb
AES-192-CFB
aes-192-cfb
AES-256-ECB
aes-256-ecb
AES-256-CBC
aes-256-cbc
AES-256-OFB
aes-256-ofb
AES-256-CFB
aes-256-cfb
holdInstructionCode
Hold Instruction Code
holdInstructionNone
Hold Instruction None
holdInstructionCallIssuer
Hold Instruction Call Issuer
holdInstructionReject
Hold Instruction Reject
pilot
pilotAttributeType
pilotAttributeSyntax
pilotObjectClass
pilotGroups
iA5StringSyntax
caseIgnoreIA5StringSyntax
pilotObject
pilotPerson
document
room
documentSeries
rFC822localPart
dNSDomain
domainRelatedObject
friendlyCountry
simpleSecurityObject
pilotOrganization
pilotDSA
qualityLabelledData
userId
textEncodedORAddress
rfc822Mailbox
favouriteDrink
roomNumber
photo
userClass
host
manager
documentIdentifier
documentTitle
documentVersion
documentAuthor
documentLocation
homeTelephoneNumber
secretary
otherMailbox
lastModifiedTime
lastModifiedBy
aRecord
pilotAttributeType27
mXRecord
nSRecord
sOARecord
cNAMERecord
associatedDomain
associatedName
homePostalAddress
personalTitle
mobileTelephoneNumber
pagerTelephoneNumber
friendlyCountryName
organizationalStatus
janetMailbox
mailPreferenceOption
buildingName
dSAQuality
singleLevelQuality
subtreeMinimumQuality
subtreeMaximumQuality
personalSignature
dITRedirect
audio
documentPublisher
x500UniqueIdentifier
mime-mhs
MIME MHS
mime-mhs-headings
mime-mhs-bodies
id-hex-partial-message
id-hex-multipart-message
generationQualifier
pseudonym
id-set
Secure Electronic Transactions
set-ctype
content types
set-msgExt
message extensions
set-attr
set-policy
set-certExt
certificate extensions
set-brand
setct-PANData
setct-PANToken
setct-PANOnly
setct-OIData
setct-PI
setct-PIData
setct-PIDataUnsigned
setct-HODInput
setct-AuthResBaggage
setct-AuthRevReqBaggage
setct-AuthRevResBaggage
setct-CapTokenSeq
setct-PInitResData
setct-PI-TBS
setct-PResData
setct-AuthReqTBS
setct-AuthResTBS
setct-AuthResTBSX
setct-AuthTokenTBS
setct-CapTokenData
setct-CapTokenTBS
setct-AcqCardCodeMsg
setct-AuthRevReqTBS
setct-AuthRevResData
setct-AuthRevResTBS
setct-CapReqTBS
setct-CapReqTBSX
setct-CapResData
setct-CapRevReqTBS
setct-CapRevReqTBSX
setct-CapRevResData
setct-CredReqTBS
setct-CredReqTBSX
setct-CredResData
setct-CredRevReqTBS
setct-CredRevReqTBSX
setct-CredRevResData
setct-PCertReqData
setct-PCertResTBS
setct-BatchAdminReqData
setct-BatchAdminResData
setct-CardCInitResTBS
setct-MeAqCInitResTBS
setct-RegFormResTBS
setct-CertReqData
setct-CertReqTBS
setct-CertResData
setct-CertInqReqTBS
setct-ErrorTBS
setct-PIDualSignedTBE
setct-PIUnsignedTBE
setct-AuthReqTBE
setct-AuthResTBE
setct-AuthResTBEX
setct-AuthTokenTBE
setct-CapTokenTBE
setct-CapTokenTBEX
setct-AcqCardCodeMsgTBE
setct-AuthRevReqTBE
setct-AuthRevResTBE
setct-AuthRevResTBEB
setct-CapReqTBE
setct-CapReqTBEX
setct-CapResTBE
setct-CapRevReqTBE
setct-CapRevReqTBEX
setct-CapRevResTBE
setct-CredReqTBE
setct-CredReqTBEX
setct-CredResTBE
setct-CredRevReqTBE
setct-CredRevReqTBEX
setct-CredRevResTBE
setct-BatchAdminReqTBE
setct-BatchAdminResTBE
setct-RegFormReqTBE
setct-CertReqTBE
setct-CertReqTBEX
setct-CertResTBE
setct-CRLNotificationTBS
setct-CRLNotificationResTBS
setct-BCIDistributionTBS
setext-genCrypt
generic cryptogram
setext-miAuth
merchant initiated auth
setext-pinSecure
setext-pinAny
setext-track2
setext-cv
additional verification
set-policy-root
setCext-hashedRoot
setCext-certType
setCext-merchData
setCext-cCertRequired
setCext-tunneling
setCext-setExt
setCext-setQualf
setCext-PGWYcapabilities
setCext-TokenIdentifier
setCext-Track2Data
setCext-TokenType
setCext-IssuerCapabilities
setAttr-Cert
setAttr-PGWYcap
payment gateway capabilities
setAttr-TokenType
setAttr-IssCap
issuer capabilities
set-rootKeyThumb
set-addPolicy
setAttr-Token-EMV
setAttr-Token-B0Prime
setAttr-IssCap-CVM
setAttr-IssCap-T2
setAttr-IssCap-Sig
setAttr-GenCryptgrm
generate cryptogram
setAttr-T2Enc
encrypted track 2
setAttr-T2cleartxt
cleartext track 2
setAttr-TokICCsig
ICC or token signature
setAttr-SecDevSig
secure device signature
set-brand-IATA-ATA
set-brand-Diners
set-brand-AmericanExpress
set-brand-JCB
set-brand-Visa
set-brand-MasterCard
set-brand-Novus
DES-CDMF
des-cdmf
rsaOAEPEncryptionSET
ITU-T
itu-t
JOINT-ISO-ITU-T
joint-iso-itu-t
international-organizations
International Organizations
msSmartcardLogin
Microsoft Smartcardlogin
msUPN
Microsoft Universal Principal Name
AES-128-CFB1
aes-128-cfb1
AES-192-CFB1
aes-192-cfb1
AES-256-CFB1
aes-256-cfb1
AES-128-CFB8
aes-128-cfb8
AES-192-CFB8
aes-192-cfb8
AES-256-CFB8
aes-256-cfb8
DES-CFB1
des-cfb1
DES-CFB8
des-cfb8
DES-EDE3-CFB1
des-ede3-cfb1
DES-EDE3-CFB8
des-ede3-cfb8
street
streetAddress
postalCode
id-ppl
proxyCertInfo
Proxy Certificate Information
id-ppl-anyLanguage
Any language
id-ppl-inheritAll
Inherit all
nameConstraints
X509v3 Name Constraints
id-ppl-independent
Independent
RSA-SHA256
sha256WithRSAEncryption
RSA-SHA384
sha384WithRSAEncryption
RSA-SHA512
sha512WithRSAEncryption
RSA-SHA224
sha224WithRSAEncryption
sha256
sha384
sha512
sha224
identified-organization
certicom-arc
wap-wsg
id-characteristic-two-basis
onBasis
tpBasis
ppBasis
c2pnb163v1
c2pnb163v2
c2pnb163v3
c2pnb176v1
c2tnb191v1
c2tnb191v2
c2tnb191v3
c2onb191v4
c2onb191v5
c2pnb208w1
c2tnb239v1
c2tnb239v2
c2tnb239v3
c2onb239v4
c2onb239v5
c2pnb272w1
c2pnb304w1
c2tnb359v1
c2pnb368w1
c2tnb431r1
secp112r1
secp112r2
secp128r1
secp128r2
secp160k1
secp160r1
secp160r2
secp192k1
secp224k1
secp224r1
secp256k1
secp384r1
secp521r1
sect113r1
sect113r2
sect131r1
sect131r2
sect163k1
sect163r1
sect163r2
sect193r1
sect193r2
sect233k1
sect233r1
sect239k1
sect283k1
sect283r1
sect409k1
sect409r1
sect571k1
sect571r1
wap-wsg-idm-ecid-wtls1
wap-wsg-idm-ecid-wtls3
wap-wsg-idm-ecid-wtls4
wap-wsg-idm-ecid-wtls5
wap-wsg-idm-ecid-wtls6
wap-wsg-idm-ecid-wtls7
wap-wsg-idm-ecid-wtls8
wap-wsg-idm-ecid-wtls9
wap-wsg-idm-ecid-wtls10
wap-wsg-idm-ecid-wtls11
wap-wsg-idm-ecid-wtls12
anyPolicy
X509v3 Any Policy
policyMappings
X509v3 Policy Mappings
inhibitAnyPolicy
X509v3 Inhibit Any Policy
Oakley-EC2N-3
ipsec3
Oakley-EC2N-4
ipsec4
CAMELLIA-128-CBC
camellia-128-cbc
CAMELLIA-192-CBC
camellia-192-cbc
CAMELLIA-256-CBC
camellia-256-cbc
CAMELLIA-128-ECB
camellia-128-ecb
CAMELLIA-192-ECB
camellia-192-ecb
CAMELLIA-256-ECB
camellia-256-ecb
CAMELLIA-128-CFB
camellia-128-cfb
CAMELLIA-192-CFB
camellia-192-cfb
CAMELLIA-256-CFB
camellia-256-cfb
CAMELLIA-128-CFB1
camellia-128-cfb1
CAMELLIA-192-CFB1
camellia-192-cfb1
CAMELLIA-256-CFB1
camellia-256-cfb1
CAMELLIA-128-CFB8
camellia-128-cfb8
CAMELLIA-192-CFB8
camellia-192-cfb8
CAMELLIA-256-CFB8
camellia-256-cfb8
CAMELLIA-128-OFB
camellia-128-ofb
CAMELLIA-192-OFB
camellia-192-ofb
CAMELLIA-256-OFB
camellia-256-ofb
subjectDirectoryAttributes
X509v3 Subject Directory Attributes
issuingDistributionPoint
X509v3 Issuing Distrubution Point
certificateIssuer
X509v3 Certificate Issuer
KISA
kisa
SEED-ECB
seed-ecb
SEED-CBC
seed-cbc
SEED-OFB
seed-ofb
SEED-CFB
seed-cfb
HMAC-MD5
hmac-md5
HMAC-SHA1
hmac-sha1
id-PasswordBasedMAC
password based MAC
id-DHBasedMac
Diffie-Hellman based MAC
id-it-suppLangTags
caRepository
CA Repository
id-smime-ct-compressedData
id-ct-asciiTextWithCRLF
id-aes128-wrap
id-aes192-wrap
id-aes256-wrap
ecdsa-with-Recommended
ecdsa-with-Specified
ecdsa-with-SHA224
ecdsa-with-SHA256
ecdsa-with-SHA384
ecdsa-with-SHA512
hmacWithMD5
hmacWithSHA224
hmacWithSHA256
hmacWithSHA384
hmacWithSHA512
dsa_with_SHA224
dsa_with_SHA256
whirlpool
cryptopro
cryptocom
id-GostR3411-94-with-GostR3410-2001
GOST R 34.11-94 with GOST R 34.10-2001
id-GostR3411-94-with-GostR3410-94
GOST R 34.11-94 with GOST R 34.10-94
md_gost94
GOST R 34.11-94
id-HMACGostR3411-94
HMAC GOST 34.11-94
gost2001
GOST R 34.10-2001
gost94
GOST R 34.10-94
gost89
GOST 28147-89
gost89-cnt
gost-mac
GOST 28147-89 MAC
prf-gostr3411-94
GOST R 34.11-94 PRF
id-GostR3410-2001DH
GOST R 34.10-2001 DH
id-GostR3410-94DH
GOST R 34.10-94 DH
id-Gost28147-89-CryptoPro-KeyMeshing
id-Gost28147-89-None-KeyMeshing
id-GostR3411-94-TestParamSet
id-GostR3411-94-CryptoProParamSet
id-Gost28147-89-TestParamSet
id-Gost28147-89-CryptoPro-A-ParamSet
id-Gost28147-89-CryptoPro-B-ParamSet
id-Gost28147-89-CryptoPro-C-ParamSet
id-Gost28147-89-CryptoPro-D-ParamSet
id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet
id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet
id-Gost28147-89-CryptoPro-RIC-1-ParamSet
id-GostR3410-94-TestParamSet
id-GostR3410-94-CryptoPro-A-ParamSet
id-GostR3410-94-CryptoPro-B-ParamSet
id-GostR3410-94-CryptoPro-C-ParamSet
id-GostR3410-94-CryptoPro-D-ParamSet
id-GostR3410-94-CryptoPro-XchA-ParamSet
id-GostR3410-94-CryptoPro-XchB-ParamSet
id-GostR3410-94-CryptoPro-XchC-ParamSet
id-GostR3410-2001-TestParamSet
id-GostR3410-2001-CryptoPro-A-ParamSet
id-GostR3410-2001-CryptoPro-B-ParamSet
id-GostR3410-2001-CryptoPro-C-ParamSet
id-GostR3410-2001-CryptoPro-XchA-ParamSet
id-GostR3410-2001-CryptoPro-XchB-ParamSet
id-GostR3410-94-a
id-GostR3410-94-aBis
id-GostR3410-94-b
id-GostR3410-94-bBis
id-Gost28147-89-cc
GOST 28147-89 Cryptocom ParamSet
gost94cc
GOST 34.10-94 Cryptocom
gost2001cc
GOST 34.10-2001 Cryptocom
id-GostR3411-94-with-GostR3410-94-cc
GOST R 34.11-94 with GOST R 34.10-94 Cryptocom
id-GostR3411-94-with-GostR3410-2001-cc
GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom
id-GostR3410-2001-ParamSet-cc
GOST R 3410-2001 Parameter Set Cryptocom
HMAC
hmac
LocalKeySet
Microsoft Local Key set
freshestCRL
X509v3 Freshest CRL
id-on-permanentIdentifier
Permanent Identifier
searchGuide
businessCategory
postalAddress
postOfficeBox
physicalDeliveryOfficeName
telephoneNumber
telexNumber
teletexTerminalIdentifier
facsimileTelephoneNumber
x121Address
internationaliSDNNumber
registeredAddress
destinationIndicator
preferredDeliveryMethod
presentationAddress
supportedApplicationContext
member
owner
roleOccupant
seeAlso
userPassword
userCertificate
cACertificate
authorityRevocationList
certificateRevocationList
crossCertificatePair
enhancedSearchGuide
protocolInformation
distinguishedName
uniqueMember
houseIdentifier
supportedAlgorithms
deltaRevocationList
dmdName
id-alg-PWRI-KEK
CMAC
cmac
id-aes128-GCM
aes-128-gcm
id-aes128-CCM
aes-128-ccm
id-aes128-wrap-pad
id-aes192-GCM
aes-192-gcm
id-aes192-CCM
aes-192-ccm
id-aes192-wrap-pad
id-aes256-GCM
aes-256-gcm
id-aes256-CCM
aes-256-ccm
id-aes256-wrap-pad
AES-128-CTR
aes-128-ctr
AES-192-CTR
aes-192-ctr
AES-256-CTR
aes-256-ctr
id-camellia128-wrap
id-camellia192-wrap
id-camellia256-wrap
anyExtendedKeyUsage
Any Extended Key Usage
MGF1
mgf1
RSASSA-PSS
rsassaPss
AES-128-XTS
aes-128-xts
AES-256-XTS
aes-256-xts
RC4-HMAC-MD5
rc4-hmac-md5
AES-128-CBC-HMAC-SHA1
aes-128-cbc-hmac-sha1
AES-192-CBC-HMAC-SHA1
aes-192-cbc-hmac-sha1
AES-256-CBC-HMAC-SHA1
aes-256-cbc-hmac-sha1
RSAES-OAEP
rsaesOaep
obj_lib.c
SHA1 part of OpenSSL 1.0.1k 8 Jan 2015
D7q/;M
+Yo,
&\8!
* qW
LwH'
L*~e
DlSHA-512 part of OpenSSL 1.0.1k 8 Jan 2015
|6*)
g&3g
gcm128.c
Big Number part of OpenSSL 1.0.1k 8 Jan 2015
bn_lib.c
0123456789ABCDEF
bn_print.c
%019lu
bn(%d,%d)
rsa_sign.c
signature has problems, re-make with post SSLeay045
rsa_crpt.c
eng_init.c
tb_cipher.c
eng_dyn.c
v_check
bind_engine
Dynamic engine loading support
SO_PATH
Specifies the path to the new ENGINE shared library
NO_VCHECK
Specifies to continue even if version checking fails (boolean)
Specifies an ENGINE id name for loading
LIST_ADD
Whether to add a loaded ENGINE to the internal list (0=no,1=yes,2=mandatory)
DIR_LOAD
Specifies whether to load from 'DIR_ADD' directories (0=no,1=yes,2=mandatory)
DIR_ADD
Adds a directory from which ENGINEs can be loaded
Load up the ENGINE specified by other settings
buffer.c
bss_file.c
fopen('
FILE pointer
b_print.c
0123456789ABCDEF
0123456789abcdef
<NULL>
doapr()
lhash part of OpenSSL 1.0.1k 8 Jan 2015
lhash.c
RAND part of OpenSSL 1.0.1k 8 Jan 2015
md_rand.c
....................
You need to read the OpenSSL FAQ, http://www.openssl.org/support/faq.html
/var/run/egd-pool
/dev/egd-pool
/etc/egd-pool
/etc/entropy
/dev/urandom
/dev/random
/dev/srandom
%lu:%s:%s:%d:%s
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
?456789:;<=
 !"#$%&'()*+,-./0123
ctx->length <= (int)sizeof(ctx->enc_data)
encode.c
n < (int)sizeof(ctx->enc_data)
digest.c
ctx->digest->md_size <= EVP_MAX_MD_SIZE
aes iv setup failed
aes key setup failed
asn1 lib
bad block length
bad decrypt
bad key length
bn decode error
bn pubkey error
buffer too small
camellia key setup failed
cipher parameter error
command not supported
ctrl not implemented
ctrl operation not implemented
data not multiple of block length
different key types
different parameters
disabled for fips
encode error
error loading section
error setting fips mode
evp pbe cipherinit error
expecting an rsa key
expecting a dh key
expecting a dsa key
expecting a ecdsa key
expecting a ec key
fips mode not supported
initialization error
input not initialized
invalid digest
invalid fips mode
invalid key length
invalid operation
iv too large
keygen failure
message digest is null
method not supported
missing parameters
no cipher set
no default digest
no digest set
no dsa parameters
no key set
no operation set
no sign function configured
no verify function configured
operation not supported for this keytype
operaton not initialized
pkcs8 unknown broken type
private key decode error
private key encode error
public key not rsa
unknown cipher
unknown digest
unknown option
unknown pbe algorithm
unsuported number of rounds
unsupported algorithm
unsupported cipher
unsupported keylength
unsupported key derivation function
unsupported key size
unsupported prf
unsupported private key algorithm
unsupported salt type
wrong final block length
wrong public key type
AESNI_INIT_KEY
AESNI_XTS_CIPHER
AES_INIT_KEY
AES_XTS
AES_XTS_CIPHER
ALG_MODULE_INIT
CAMELLIA_INIT_KEY
CMAC_INIT
D2I_PKEY
DO_SIGVER_INIT
DSAPKEY2PKCS8
DSA_PKEY2PKCS8
ECDSA_PKEY2PKCS8
ECKEY_PKEY2PKCS8
EVP_CipherInit_ex
EVP_CIPHER_CTX_copy
EVP_CIPHER_CTX_ctrl
EVP_CIPHER_CTX_set_key_length
EVP_DecryptFinal_ex
EVP_DigestInit_ex
EVP_EncryptFinal_ex
EVP_MD_CTX_copy_ex
EVP_MD_size
EVP_OpenInit
EVP_PBE_alg_add
EVP_PBE_alg_add_type
EVP_PBE_CipherInit
EVP_PKCS82PKEY
EVP_PKCS82PKEY_BROKEN
EVP_PKEY2PKCS8_broken
EVP_PKEY_copy_parameters
EVP_PKEY_CTX_ctrl
EVP_PKEY_CTX_ctrl_str
EVP_PKEY_CTX_dup
EVP_PKEY_decrypt
EVP_PKEY_decrypt_init
EVP_PKEY_decrypt_old
EVP_PKEY_derive
EVP_PKEY_derive_init
EVP_PKEY_derive_set_peer
EVP_PKEY_encrypt
EVP_PKEY_encrypt_init
EVP_PKEY_encrypt_old
EVP_PKEY_get1_DH
EVP_PKEY_get1_DSA
EVP_PKEY_GET1_ECDSA
EVP_PKEY_get1_EC_KEY
EVP_PKEY_get1_RSA
EVP_PKEY_keygen
EVP_PKEY_keygen_init
EVP_PKEY_new
EVP_PKEY_paramgen
EVP_PKEY_paramgen_init
EVP_PKEY_sign
EVP_PKEY_sign_init
EVP_PKEY_verify
EVP_PKEY_verify_init
EVP_PKEY_verify_recover
EVP_PKEY_verify_recover_init
EVP_RIJNDAEL
EVP_SignFinal
EVP_VerifyFinal
FIPS_CIPHERINIT
FIPS_CIPHER_CTX_COPY
FIPS_CIPHER_CTX_CTRL
FIPS_CIPHER_CTX_SET_KEY_LENGTH
FIPS_DIGESTINIT
FIPS_MD_CTX_COPY
HMAC_Init_ex
INT_CTX_NEW
PKCS5_PBE_keyivgen
PKCS5_v2_PBE_keyivgen
PKCS5_V2_PBKDF2_KEYIVGEN
PKCS8_set_broken
PKEY_SET_TYPE
RC2_MAGIC_TO_METH
RC5_CTRL
evp_pbe.c
TYPE=
p5_crpt.c
EVP_CIPHER_key_length(cipher) <= (int)sizeof(md_tmp)
EVP_CIPHER_iv_length(cipher) <= 16
p5_crpt2.c
keylen <= sizeof key
pmeth_lib.c
a_int.c
X509_SIG
tasn_new.c
tasn_enc.c
tasn_dec.c
, Type=
Field=
Type=
tasn_utl.c
ASN1_SET_ANY
ASN1_SEQUENCE_ANY
ASN1_OCTET_STRING_NDEF
ASN1_FBOOLEAN
ASN1_TBOOLEAN
ASN1_BOOLEAN
DIRECTORYSTRING
DISPLAYTEXT
ASN1_PRINTABLE
ASN1_SEQUENCE
ASN1_ANY
ASN1_BMPSTRING
ASN1_UNIVERSALSTRING
ASN1_VISIBLESTRING
ASN1_GENERALIZEDTIME
ASN1_UTCTIME
ASN1_GENERALSTRING
ASN1_IA5STRING
ASN1_T61STRING
ASN1_PRINTABLESTRING
ASN1_UTF8STRING
ASN1_OBJECT
ASN1_NULL
ASN1_OCTET_STRING
ASN1_BIT_STRING
ASN1_ENUMERATED
ASN1_INTEGER
adding object
asn1 parse error
asn1 sig parse error
aux error
bad class
bad object header
bad password read
bad tag
bmpstring is wrong length
bn lib
boolean is wrong length
cipher has no object identifier
context not initialised
data is wrong
decoding error
depth exceeded
digest and key type not supported
error getting time
error parsing set element
error setting cipher params
expecting an integer
expecting an object
expecting a boolean
expecting a time
explicit length mismatch
explicit tag not constructed
field missing
first num too large
header too long
illegal bitstring format
illegal boolean
illegal characters
illegal format
illegal hex
illegal implicit tag
illegal integer
illegal nested tagging
illegal null
illegal null value
illegal object
illegal optional any
illegal options on item template
illegal tagged any
illegal time value
integer not ascii format
integer too large for long
invalid bit string bits left
invalid bmpstring length
invalid digit
invalid mime type
invalid modifier
invalid number
invalid object encoding
invalid separator
invalid time format
invalid universalstring length
invalid utf8string
length error
list error
mime no content type
mime parse error
mime sig parse error
missing eoc
missing second number
missing value
mstring not universal
mstring wrong tag
nested asn1 string
non hex characters
not enough data
no content type
no matching choice type
no multipart body failure
no multipart boundary
no sig content type
null is wrong length
object not ascii format
odd number of chars
private key header missing
second number too large
sequence length mismatch
sequence not constructed
sequence or set needs config
short line
sig invalid mime type
streaming not supported
string too long
string too short
tag value too high
the asn1 object identifier is not known for this md
time not ascii format
too long
type not constructed
type not primitive
unable to decode rsa key
unable to decode rsa private key
unexpected eoc
universalstring is wrong length
unknown format
unknown message digest algorithm
unknown object type
unknown public key type
unknown signature algorithm
unsupported any defined by type
unsupported encryption algorithm
unsupported public key type
unsupported type
wrong type
a2d_ASN1_OBJECT
a2i_ASN1_ENUMERATED
a2i_ASN1_INTEGER
a2i_ASN1_STRING
APPEND_EXP
ASN1_BIT_STRING_set_bit
ASN1_CB
ASN1_CHECK_TLEN
ASN1_COLLATE_PRIMITIVE
ASN1_COLLECT
ASN1_D2I_EX_PRIMITIVE
ASN1_d2i_fp
ASN1_D2I_READ_BIO
ASN1_digest
ASN1_DO_ADB
ASN1_dup
ASN1_ENUMERATED_set
ASN1_ENUMERATED_to_BN
ASN1_EX_C2I
ASN1_FIND_END
ASN1_GENERALIZEDTIME_adj
ASN1_GENERALIZEDTIME_set
ASN1_generate_v3
ASN1_get_object
ASN1_HEADER_NEW
ASN1_i2d_bio
ASN1_i2d_fp
ASN1_INTEGER_set
ASN1_INTEGER_to_BN
ASN1_item_d2i_fp
ASN1_item_dup
ASN1_ITEM_EX_COMBINE_NEW
ASN1_ITEM_EX_D2I
ASN1_item_i2d_bio
ASN1_item_i2d_fp
ASN1_item_pack
ASN1_item_sign
ASN1_item_sign_ctx
ASN1_item_unpack
ASN1_item_verify
ASN1_mbstring_ncopy
ASN1_OBJECT_new
ASN1_OUTPUT_DATA
ASN1_pack_string
ASN1_PCTX_new
ASN1_PKCS5_PBE_SET
ASN1_seq_pack
ASN1_seq_unpack
ASN1_sign
ASN1_STR2TYPE
ASN1_STRING_set
ASN1_STRING_TABLE_add
ASN1_STRING_type_new
ASN1_TEMPLATE_EX_D2I
ASN1_TEMPLATE_NEW
ASN1_TEMPLATE_NOEXP_D2I
ASN1_TIME_adj
ASN1_TIME_set
ASN1_TYPE_get_int_octetstring
ASN1_TYPE_get_octetstring
ASN1_unpack_string
ASN1_UTCTIME_adj
ASN1_UTCTIME_set
ASN1_verify
B64_READ_ASN1
B64_WRITE_ASN1
BIO_new_NDEF
BITSTR_CB
BN_to_ASN1_ENUMERATED
BN_to_ASN1_INTEGER
c2i_ASN1_BIT_STRING
c2i_ASN1_INTEGER
c2i_ASN1_OBJECT
COLLECT_DATA
D2I_ASN1_BIT_STRING
d2i_ASN1_BOOLEAN
d2i_ASN1_bytes
D2I_ASN1_GENERALIZEDTIME
D2I_ASN1_HEADER
D2I_ASN1_INTEGER
d2i_ASN1_OBJECT
d2i_ASN1_SET
d2i_ASN1_type_bytes
d2i_ASN1_UINTEGER
D2I_ASN1_UTCTIME
d2i_AutoPrivateKey
d2i_Netscape_RSA
D2I_NETSCAPE_RSA_2
d2i_PrivateKey
d2i_PublicKey
d2i_RSA_NET
D2I_RSA_NET_2
D2I_X509
D2I_X509_CINF
d2i_X509_PKEY
i2d_ASN1_bio_stream
i2d_ASN1_SET
I2D_ASN1_TIME
i2d_DSA_PUBKEY
i2d_EC_PUBKEY
i2d_PrivateKey
i2d_PublicKey
i2d_RSA_NET
i2d_RSA_PUBKEY
LONG_C2I
OID_MODULE_INIT
PARSE_TAGGING
PKCS5_pbe2_set_iv
PKCS5_pbe_set
PKCS5_pbe_set0_algor
PKCS5_pbkdf2_set
SMIME_read_ASN1
SMIME_text
X509_CINF_NEW
X509_CRL_add0_revoked
X509_INFO_new
X509_NAME_ENCODE
X509_NAME_EX_D2I
X509_NAME_EX_NEW
X509_NEW
X509_PKEY_new
a_bytes.c
p5_pbe.c
PBEPARAM
salt
p5_pbev2.c
PBKDF2PARAM
keylength
PBE2PARAM
keyfunc
bad base64 decode
bad end line
bad iv chars
bad magic number
bad version number
bio write failure
cipher is null
error converting private key
expecting private key blob
expecting public key blob
inconsistent header
keyblob header parse error
keyblob too short
not dek info
not encrypted
not proc type
no start line
problems getting password
public key no rsa
pvk data too short
pvk too short
read key
short header
unsupported encryption
unsupported key components
B2I_DSS
b2i_PVK_bio
B2I_RSA
CHECK_BITLEN_DSA
CHECK_BITLEN_RSA
d2i_PKCS8PrivateKey_bio
d2i_PKCS8PrivateKey_fp
DO_B2I
DO_B2I_BIO
DO_BLOB_HEADER
DO_PK8PKEY
DO_PK8PKEY_FP
DO_PVK_BODY
DO_PVK_HEADER
I2B_PVK
i2b_PVK_bio
LOAD_IV
PEM_ASN1_read
PEM_ASN1_read_bio
PEM_ASN1_write
PEM_ASN1_write_bio
PEM_def_callback
PEM_do_header
PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
PEM_get_EVP_CIPHER_INFO
PEM_PK8PKEY
PEM_read
PEM_read_bio
PEM_read_bio_Parameters
PEM_READ_BIO_PRIVATEKEY
PEM_READ_PRIVATEKEY
PEM_SealFinal
PEM_SealInit
PEM_SignFinal
PEM_write
PEM_write_bio
PEM_WRITE_PRIVATEKEY
PEM_X509_INFO_read
PEM_X509_INFO_read_bio
PEM_X509_INFO_write_bio
bad x509 filetype
base64 decode error
cant check dh key
cert already in hash table
err asn1 lib
invalid directory
invalid field name
invalid trust
key type mismatch
key values mismatch
loading cert dir
loading defaults
no cert set for us to verify
public key decode error
public key encode error
should retry
unable to find parameters in chain
unable to get certs public key
unknown key type
unknown nid
unknown purpose id
unknown trust id
wrong lookup type
ADD_CERT_DIR
BY_FILE_CTRL
CHECK_POLICY
DIR_CTRL
GET_CERT_BY_SUBJECT
NETSCAPE_SPKI_b64_decode
NETSCAPE_SPKI_b64_encode
X509at_add1_attr
X509v3_add_ext
X509_ATTRIBUTE_create_by_NID
X509_ATTRIBUTE_create_by_OBJ
X509_ATTRIBUTE_create_by_txt
X509_ATTRIBUTE_get0_data
X509_ATTRIBUTE_set1_data
X509_check_private_key
X509_CRL_print_fp
X509_EXTENSION_create_by_NID
X509_EXTENSION_create_by_OBJ
X509_get_pubkey_parameters
X509_load_cert_crl_file
X509_load_cert_file
X509_load_crl_file
X509_NAME_add_entry
X509_NAME_ENTRY_create_by_NID
X509_NAME_ENTRY_create_by_txt
X509_NAME_ENTRY_set_object
X509_NAME_oneline
X509_NAME_print
X509_print_ex_fp
X509_PUBKEY_get
X509_PUBKEY_set
X509_REQ_check_private_key
X509_REQ_print_ex
X509_REQ_print_fp
X509_REQ_to_X509
X509_STORE_add_cert
X509_STORE_add_crl
X509_STORE_CTX_get1_issuer
X509_STORE_CTX_init
X509_STORE_CTX_new
X509_STORE_CTX_purpose_inherit
X509_to_X509_REQ
X509_TRUST_add
X509_TRUST_set
X509_verify_cert
bad ip address
bad object
bn dec2bn error
bn to asn1 integer error
dirname error
distpoint already set
duplicate zone id
error converting zone
error creating extension
error in extension
expected a section name
extension exists
extension name error
extension not found
extension setting not supported
extension value error
illegal empty extension
illegal hex digit
incorrect policy syntax tag
invalid multiple rdns
invalid asnumber
invalid asrange
invalid boolean string
invalid extension string
invalid inheritance
invalid ipaddress
invalid name
invalid null argument
invalid null name
invalid null value
invalid numbers
invalid object identifier
invalid option
invalid policy identifier
invalid proxy policy setting
invalid purpose
invalid safi
invalid section
invalid syntax
issuer decode error
need organization and numbers
no config database
no issuer certificate
no issuer details
no policy identifier
no proxy cert policy language defined
no public key
no subject details
odd number of digits
operation not defined
othername error
policy language already defined
policy path length
policy path length already defined
policy syntax not currently supported
policy when proxy language requires no policy
section not found
unable to get issuer details
unable to get issuer keyid
unknown bit string argument
unknown extension
unknown extension name
unsupported option
user too long
A2I_GENERAL_NAME
ASIDENTIFIERCHOICE_CANONIZE
ASIDENTIFIERCHOICE_IS_CANONICAL
COPY_EMAIL
COPY_ISSUER
DO_DIRNAME
DO_EXT_CONF
DO_EXT_I2D
DO_EXT_NCONF
DO_I2V_NAME_CONSTRAINTS
GNAMES_FROM_SECTNAME
hex_to_string
i2s_ASN1_ENUMERATED
I2S_ASN1_IA5STRING
i2s_ASN1_INTEGER
I2V_AUTHORITY_INFO_ACCESS
NOTICE_SECTION
NREF_NOS
POLICY_SECTION
PROCESS_PCI_VALUE
R2I_CERTPOL
R2I_PCI
S2I_ASN1_IA5STRING
s2i_ASN1_INTEGER
s2i_ASN1_OCTET_STRING
S2I_ASN1_SKEY_ID
S2I_SKEY_ID
SET_DIST_POINT_NAME
string_to_hex
SXNET_add_id_asc
SXNET_add_id_INTEGER
SXNET_add_id_ulong
SXNET_get_id_asc
SXNET_get_id_ulong
V2I_ASIDENTIFIERS
v2i_ASN1_BIT_STRING
V2I_AUTHORITY_INFO_ACCESS
V2I_AUTHORITY_KEYID
V2I_BASIC_CONSTRAINTS
V2I_CRLD
V2I_EXTENDED_KEY_USAGE
v2i_GENERAL_NAMES
v2i_GENERAL_NAME_ex
V2I_IDP
V2I_IPADDRBLOCKS
V2I_ISSUER_ALT
V2I_NAME_CONSTRAINTS
V2I_POLICY_CONSTRAINTS
V2I_POLICY_MAPPINGS
V2I_SUBJECT_ALT
V3_ADDR_VALIDATE_PATH_INTERNAL
V3_GENERIC_EXTENSION
X509V3_add1_i2d
X509V3_add_value
X509V3_EXT_add
X509V3_EXT_add_alias
X509V3_EXT_conf
X509V3_EXT_i2d
X509V3_EXT_nconf
X509V3_get_section
X509V3_get_string
X509V3_get_value_bool
X509V3_parse_list
X509_PURPOSE_add
X509_PURPOSE_set
error loading dso
list cannot be null
missing close square bracket
missing equal sign
missing finish function
missing init function
module initialization error
no close brace
no conf
no conf or environment variable
no section
no such file
no value
unable to create new section
unknown module name
variable has no value
CONF_dump_fp
CONF_load
CONF_load_bio
CONF_load_fp
CONF_modules_load
CONF_parse_list
DEF_LOAD
DEF_LOAD_BIO
MODULE_INIT
MODULE_LOAD_DSO
MODULE_RUN
NCONF_dump_bio
NCONF_dump_fp
NCONF_get_number
NCONF_get_number_e
NCONF_get_section
NCONF_get_string
NCONF_load
NCONF_load_bio
NCONF_load_fp
NCONF_new
STR_COPY
openssl_conf
OPENSSL_init
OPENSSL_finish
conf_mod.c
, path=
module=
%-8d
, retcode=
, value=
OPENSSL_CONF
openssl.cnf
certificate verify error
cipher not initialized
content and data present
ctrl error
decrypted key is wrong length
decrypt error
digest failure
encryption ctrl failure
encryption not supported for this key type
error adding recipient
error setting cipher
invalid null pointer
invalid signed data type
missing ceripend info
no content
no matching digest type found
no recipient matches certificate
no recipient matches key
no signatures on data
no signers
operation not supported on this type
pkcs7 add signature error
pkcs7 add signer error
pkcs7 datafinal
pkcs7 datafinal error
pkcs7 datasign
pkcs7 parse error
pkcs7 sig parse error
private key does not match certificate
signature failure
signer certificate not found
signing ctrl failure
signing not supported for this key type
smime text error
unable to find certificate
unable to find mem bio
unable to find message digest
unknown digest type
unknown operation
unsupported cipher type
unsupported content type
wrong content type
wrong pkcs7 type
B64_READ_PKCS7
B64_WRITE_PKCS7
DO_PKCS7_SIGNED_ATTRIB
i2d_PKCS7_bio_stream
PKCS7_add0_attrib_signing_time
PKCS7_add_attrib_smimecap
PKCS7_add_certificate
PKCS7_add_crl
PKCS7_add_recipient_info
PKCS7_add_signature
PKCS7_add_signer
PKCS7_BIO_ADD_DIGEST
PKCS7_COPY_EXISTING_DIGEST
PKCS7_ctrl
PKCS7_dataDecode
PKCS7_dataFinal
PKCS7_dataInit
PKCS7_DATASIGN
PKCS7_dataVerify
PKCS7_decrypt
PKCS7_DECRYPT_RINFO
PKCS7_ENCODE_RINFO
PKCS7_encrypt
PKCS7_final
PKCS7_FIND_DIGEST
PKCS7_get0_signers
PKCS7_RECIP_INFO_set
PKCS7_set_cipher
PKCS7_set_content
PKCS7_set_digest
PKCS7_set_type
PKCS7_sign
PKCS7_signatureVerify
PKCS7_SIGNER_INFO_set
PKCS7_SIGNER_INFO_sign
PKCS7_sign_add_signer
PKCS7_simple_smimecap
PKCS7_verify
SMIME_read_PKCS7
p12_crpt.c
p12_key.c
p12_utl.c
cant pack structure
content type not data
encrypt error
error setting encrypted data type
invalid null pkcs12 pointer
iv gen error
key gen error
mac absent
mac generation error
mac setup error
mac string set error
mac verify error
mac verify failure
pkcs12 algor cipherinit error
pkcs12 cipherfinal error
pkcs12 pbe crypt error
unknown digest algorithm
unsupported pkcs12 mode
PARSE_BAG
PARSE_BAGS
PKCS12_ADD_FRIENDLYNAME
PKCS12_add_friendlyname_asc
PKCS12_add_friendlyname_uni
PKCS12_add_localkeyid
PKCS12_create
PKCS12_gen_mac
PKCS12_init
PKCS12_item_decrypt_d2i
PKCS12_item_i2d_encrypt
PKCS12_item_pack_safebag
PKCS12_key_gen_asc
PKCS12_key_gen_uni
PKCS12_MAKE_KEYBAG
PKCS12_MAKE_SHKEYBAG
PKCS12_newpass
PKCS12_pack_p7data
PKCS12_pack_p7encdata
PKCS12_parse
PKCS12_pbe_crypt
PKCS12_PBE_keyivgen
PKCS12_setup_mac
PKCS12_set_mac
PKCS12_unpack_authsafes
PKCS12_unpack_p7data
PKCS12_verify_mac
PKCS8_add_keyusage
PKCS8_encrypt
bad data
digest err
error in nextupdate field
error in thisupdate field
error parsing url
missing ocspsigning usage
nextupdate before thisupdate
not basic response
no certificates in chain
no response data
no revoked time
request not signed
response contains no revocation data
root ca not trusted
server read error
server response error
server response parse error
server write error
status expired
status not yet valid
status too old
unknown message digest
unsupported requestorname type
ASN1_STRING_encode
D2I_OCSP_NONCE
OCSP_basic_add1_status
OCSP_basic_sign
OCSP_basic_verify
OCSP_cert_id_new
OCSP_CHECK_DELEGATED
OCSP_CHECK_IDS
OCSP_CHECK_ISSUER
OCSP_check_validity
OCSP_MATCH_ISSUERID
OCSP_parse_url
OCSP_request_sign
OCSP_request_verify
OCSP_response_get1_basic
OCSP_sendreq_bio
OCSP_sendreq_nbio
PARSE_HTTP_LINE1
REQUEST_VERIFY
common ok and cancel characters
index too large
index too small
no result buffer
result too large
result too small
unknown control command
GENERAL_ALLOCATE_BOOLEAN
GENERAL_ALLOCATE_PROMPT
GENERAL_ALLOCATE_STRING
UI_ctrl
UI_dup_error_string
UI_dup_info_string
UI_dup_input_boolean
UI_dup_input_string
UI_dup_verify_string
UI_get0_result
UI_new_method
UI_set_result
add signer error
certificate already present
certificate has no keyid
cipher initialisation error
cipher parameter initialisation error
cms datafinal error
cms lib
contentidentifier mismatch
content not found
content type mismatch
content type not compressed data
content type not enveloped data
content type not signed data
content verify error
digest error
error getting public key
error reading messagedigest attribute
error setting key
error setting recipientinfo
invalid encrypted key length
invalid key encryption parameter
md bio init error
messagedigest attribute wrong length
messagedigest wrong length
msgsigdigest error
msgsigdigest verification failure
msgsigdigest wrong length
need one signer
not a signed receipt
not encrypted data
not kek
not key transport
not pwri
no cipher
no key
no key or cert
no matching digest
no matching recipient
no matching signature
no msgsigdigest
no password
no private key
no receipt request
receipt decode error
recipient error
signfinal error
store init error
type not digested data
type not encrypted data
unable to finalize context
unknown digest algorihm
unknown id
unsupported compression algorithm
unsupported kek algorithm
unsupported key encryption algorithm
unsupported recipient type
unsupported recpientinfo type
unwrap error
unwrap failure
verification failure
wrap error
CHECK_CONTENT
CMS_add0_cert
CMS_add0_recipient_key
CMS_add0_recipient_password
CMS_add1_ReceiptRequest
CMS_add1_recipient_cert
CMS_add1_signer
CMS_ADD1_SIGNINGTIME
CMS_compress
cms_CompressedData_create
cms_CompressedData_init_bio
CMS_COPY_CONTENT
CMS_COPY_MESSAGEDIGEST
CMS_data
CMS_dataFinal
CMS_dataInit
CMS_decrypt
CMS_decrypt_set1_key
CMS_decrypt_set1_password
CMS_decrypt_set1_pkey
cms_DigestAlgorithm_find_ctx
cms_DigestAlgorithm_init_bio
cms_DigestedData_do_final
CMS_digest_verify
cms_encode_Receipt
CMS_encrypt
cms_EncryptedContent_init_bio
CMS_EncryptedData_decrypt
CMS_EncryptedData_encrypt
CMS_EncryptedData_set1_key
CMS_EnvelopedData_create
cms_EnvelopedData_init_bio
CMS_ENVELOPED_DATA_INIT
CMS_final
CMS_GET0_CERTIFICATE_CHOICES
CMS_get0_content
CMS_GET0_ECONTENT_TYPE
cms_get0_enveloped
CMS_GET0_REVOCATION_CHOICES
CMS_GET0_SIGNED
cms_msgSigDigest_add1
CMS_ReceiptRequest_create0
cms_Receipt_verify
CMS_RecipientInfo_decrypt
CMS_RECIPIENTINFO_KEKRI_DECRYPT
CMS_RECIPIENTINFO_KEKRI_ENCRYPT
CMS_RecipientInfo_kekri_get0_id
CMS_RecipientInfo_kekri_id_cmp
CMS_RecipientInfo_ktri_cert_cmp
CMS_RECIPIENTINFO_KTRI_DECRYPT
CMS_RECIPIENTINFO_KTRI_ENCRYPT
CMS_RecipientInfo_ktri_get0_algs
CMS_RecipientInfo_ktri_get0_signer_id
cms_RecipientInfo_pwri_crypt
CMS_RecipientInfo_set0_key
CMS_RecipientInfo_set0_password
CMS_RecipientInfo_set0_pkey
cms_set1_SignerIdentifier
CMS_set_detached
CMS_sign
CMS_SIGNED_DATA_INIT
CMS_SIGNERINFO_CONTENT_SIGN
CMS_SignerInfo_sign
CMS_SignerInfo_verify
CMS_SIGNERINFO_VERIFY_CERT
CMS_SignerInfo_verify_content
CMS_sign_receipt
CMS_stream
CMS_uncompress
CMS_verify
bad pkcs7 type
bad type
could not set engine
could not set time
d2i ts resp int failed
detached content
ess add signing cert error
ess signing certificate error
invalid signer certificate purpose
message imprint mismatch
nonce mismatch
nonce not returned
no time stamp token
pkcs7 add signed attr error
pkcs7 to ts tst info failed
policy mismatch
response setup error
there must be one signer
time syscall error
token not present
token present
tsa name mismatch
tsa untrusted
tst info setup error
ts datasign
unacceptable policy
unsupported md algorithm
unsupported version
d2i_TS_RESP
DEF_SERIAL_CB
DEF_TIME_CB
ESS_ADD_SIGNING_CERT
ESS_CERT_ID_NEW_INIT
ESS_SIGNING_CERT_NEW_INIT
INT_TS_RESP_VERIFY_TOKEN
PKCS7_to_TS_TST_INFO
TS_ACCURACY_set_micros
TS_ACCURACY_set_millis
TS_ACCURACY_set_seconds
TS_CHECK_IMPRINTS
TS_CHECK_NONCES
TS_CHECK_POLICY
TS_CHECK_SIGNING_CERTS
TS_CHECK_STATUS_INFO
TS_COMPUTE_IMPRINT
TS_CONF_set_default_engine
TS_GET_STATUS_TEXT
TS_MSG_IMPRINT_set_algo
TS_REQ_set_msg_imprint
TS_REQ_set_nonce
TS_REQ_set_policy_id
TS_RESP_create_response
TS_RESP_CREATE_TST_INFO
TS_RESP_CTX_add_failure_info
TS_RESP_CTX_add_md
TS_RESP_CTX_add_policy
TS_RESP_CTX_new
TS_RESP_CTX_set_accuracy
TS_RESP_CTX_set_certs
TS_RESP_CTX_set_def_policy
TS_RESP_CTX_set_signer_cert
TS_RESP_CTX_set_status_info
TS_RESP_GET_POLICY
TS_RESP_SET_GENTIME_WITH_PRECISION
TS_RESP_set_status_info
TS_RESP_set_tst_info
TS_RESP_SIGN
TS_RESP_verify_signature
TS_RESP_verify_token
TS_TST_INFO_set_accuracy
TS_TST_INFO_set_msg_imprint
TS_TST_INFO_set_nonce
TS_TST_INFO_set_policy_id
TS_TST_INFO_set_serial
TS_TST_INFO_set_time
TS_TST_INFO_set_tsa
TS_VERIFY
TS_VERIFY_CERT
TS_VERIFY_CTX_new
hexkey
no dynlock create callback
CRYPTO_get_ex_new_index
CRYPTO_get_new_dynlockid
CRYPTO_get_new_lockid
CRYPTO_set_ex_data
DEF_ADD_INDEX
DEF_GET_CLASS
FIPS_mode_set
INT_DUP_EX_DATA
INT_FREE_EX_DATA
INT_NEW_EX_DATA
o_names.c
OBJ_add_object
OBJ_create
OBJ_dup
OBJ_NAME_new_index
OBJ_nid2ln
OBJ_nid2obj
OBJ_nid2sn
obj_xref.c
j <= (int)sizeof(ctx->key)
hmac.c
len>=0 && len<=(int)sizeof(ctx->key)
hm_pmeth.c
bn_add.c
bn_ctx.c
bn_blind.c
bn_gcd.c
arg2 lt arg3
bad reciprocal
bignum too long
called with even modulus
div by zero
encoding error
expand on static bignum data
input not reduced
invalid length
invalid range
not a square
not initialized
no inverse
no solution
p is not prime
too many iterations
too many temporary variables
BNRAND
BN_BLINDING_convert_ex
BN_BLINDING_create_param
BN_BLINDING_invert_ex
BN_BLINDING_new
BN_BLINDING_update
BN_bn2dec
BN_bn2hex
BN_CTX_get
BN_CTX_new
BN_CTX_start
BN_div
BN_div_no_branch
BN_div_recp
BN_exp
bn_expand2
BN_EXPAND_INTERNAL
BN_GF2m_mod
BN_GF2m_mod_exp
BN_GF2m_mod_mul
BN_GF2m_mod_solve_quad
BN_GF2m_mod_solve_quad_arr
BN_GF2m_mod_sqr
BN_GF2m_mod_sqrt
BN_mod_exp2_mont
BN_mod_exp_mont
BN_mod_exp_mont_consttime
BN_mod_exp_mont_word
BN_mod_exp_recp
BN_mod_exp_simple
BN_mod_inverse
BN_mod_inverse_no_branch
BN_mod_lshift_quick
BN_mod_mul_reciprocal
BN_mod_sqrt
BN_mpi2bn
BN_new
BN_rand
BN_rand_range
BN_usub
asn1 error
asn1 unknown field
bignum out of range
coordinates out of range
d2i ecpkparameters failure
discriminant is zero
ec group new by name failure
field too large
gf2m not supported
group2pkparameters failure
i2d ecpkparameters failure
incompatible objects
invalid argument
invalid compressed point
invalid compression bit
invalid curve
invalid digest type
invalid encoding
invalid field
invalid form
invalid group order
invalid pentanomial basis
invalid private key
invalid trinomial basis
keys not set
missing private key
not a NIST prime
not a supported NIST prime
not implemented
no field mod
no parameters set
passed null parameter
pkparameters2group failure
point at infinity
point is not on curve
slot full
undefined generator
undefined order
unknown group
unknown order
unsupported field
wrong curve parameters
wrong order
BN_TO_FELEM
COMPUTE_WNAF
d2i_ECParameters
d2i_ECPKParameters
d2i_ECPrivateKey
DO_EC_KEY_PRINT
ECKEY_PARAM2TYPE
ECKEY_PARAM_DECODE
ECKEY_PRIV_DECODE
ECKEY_PRIV_ENCODE
ECKEY_PUB_DECODE
ECKEY_PUB_ENCODE
ECKEY_TYPE2PARAM
ECParameters_print
ECParameters_print_fp
ECPKParameters_print
ECPKParameters_print_fp
ECP_NIST_MOD_192
ECP_NIST_MOD_224
ECP_NIST_MOD_256
ECP_NIST_MOD_521
EC_ASN1_GROUP2CURVE
EC_ASN1_GROUP2FIELDID
EC_ASN1_GROUP2PARAMETERS
EC_ASN1_GROUP2PKPARAMETERS
EC_ASN1_PARAMETERS2GROUP
EC_ASN1_PKPARAMETERS2GROUP
EC_EX_DATA_set_data
EC_GF2M_MONTGOMERY_POINT_MULTIPLY
ec_GF2m_simple_group_check_discriminant
ec_GF2m_simple_group_set_curve
ec_GF2m_simple_oct2point
ec_GF2m_simple_point2oct
ec_GF2m_simple_point_get_affine_coordinates
ec_GF2m_simple_point_set_affine_coordinates
ec_GF2m_simple_set_compressed_coordinates
ec_GFp_mont_field_decode
ec_GFp_mont_field_encode
ec_GFp_mont_field_mul
ec_GFp_mont_field_set_to_one
ec_GFp_mont_field_sqr
ec_GFp_mont_group_set_curve
EC_GFP_MONT_GROUP_SET_CURVE_GFP
ec_GFp_nistp224_group_set_curve
ec_GFp_nistp224_points_mul
ec_GFp_nistp224_point_get_affine_coordinates
ec_GFp_nistp256_group_set_curve
ec_GFp_nistp256_points_mul
ec_GFp_nistp256_point_get_affine_coordinates
ec_GFp_nistp521_group_set_curve
ec_GFp_nistp521_points_mul
ec_GFp_nistp521_point_get_affine_coordinates
ec_GFp_nist_field_mul
ec_GFp_nist_field_sqr
ec_GFp_nist_group_set_curve
ec_GFp_simple_group_check_discriminant
ec_GFp_simple_group_set_curve
EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
EC_GFP_SIMPLE_GROUP_SET_GENERATOR
ec_GFp_simple_make_affine
ec_GFp_simple_oct2point
ec_GFp_simple_point2oct
ec_GFp_simple_points_make_affine
ec_GFp_simple_point_get_affine_coordinates
EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
ec_GFp_simple_point_set_affine_coordinates
EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
ec_GFp_simple_set_compressed_coordinates
EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
EC_GROUP_check
EC_GROUP_check_discriminant
EC_GROUP_copy
EC_GROUP_get0_generator
EC_GROUP_get_cofactor
EC_GROUP_get_curve_GF2m
EC_GROUP_get_curve_GFp
EC_GROUP_get_degree
EC_GROUP_get_order
EC_GROUP_get_pentanomial_basis
EC_GROUP_get_trinomial_basis
EC_GROUP_new
EC_GROUP_new_by_curve_name
EC_GROUP_NEW_FROM_DATA
EC_GROUP_precompute_mult
EC_GROUP_set_curve_GF2m
EC_GROUP_set_curve_GFp
EC_GROUP_SET_EXTRA_DATA
EC_GROUP_set_generator
EC_KEY_check_key
EC_KEY_copy
EC_KEY_generate_key
EC_KEY_new
EC_KEY_print
EC_KEY_print_fp
EC_KEY_set_public_key_affine_coordinates
EC_POINTs_make_affine
EC_POINT_add
EC_POINT_cmp
EC_POINT_copy
EC_POINT_dbl
EC_POINT_get_affine_coordinates_GF2m
EC_POINT_get_affine_coordinates_GFp
EC_POINT_get_Jprojective_coordinates_GFp
EC_POINT_invert
EC_POINT_is_at_infinity
EC_POINT_is_on_curve
EC_POINT_make_affine
EC_POINT_mul
EC_POINT_new
EC_POINT_oct2point
EC_POINT_point2oct
EC_POINT_set_affine_coordinates_GF2m
EC_POINT_set_affine_coordinates_GFp
EC_POINT_set_compressed_coordinates_GF2m
EC_POINT_set_compressed_coordinates_GFp
EC_POINT_set_Jprojective_coordinates_GFp
EC_POINT_set_to_infinity
EC_PRE_COMP_DUP
EC_PRE_COMP_NEW
ec_wNAF_mul
ec_wNAF_precompute_mult
i2d_ECParameters
i2d_ECPKParameters
i2d_ECPrivateKey
i2o_ECPublicKey
NISTP224_PRE_COMP_NEW
NISTP256_PRE_COMP_NEW
NISTP521_PRE_COMP_NEW
o2i_ECPublicKey
OLD_EC_PRIV_DECODE
PKEY_EC_CTRL
PKEY_EC_CTRL_STR
PKEY_EC_DERIVE
PKEY_EC_KEYGEN
PKEY_EC_PARAMGEN
PKEY_EC_SIGN
ec_pmeth.c
ec_paramgen_curve
algorithm mismatch
bad e value
bad fixed header decrypt
bad pad byte count
bad signature
block type is not 01
block type is not 02
data greater than mod len
data too large
data too large for key size
data too large for modulus
data too small
data too small for key size
digest too big for rsa key
dmp1 not congruent to d
dmq1 not congruent to d
d e not congruent to 1
first octet invalid
illegal or unsupported padding mode
invalid digest length
invalid header
invalid keybits
invalid message length
invalid mgf1 md
invalid padding
invalid padding mode
invalid pss parameters
invalid pss saltlen
invalid salt length
invalid trailer
invalid x931 digest
iqmp not inverse of q
key size too small
last octet invalid
modulus too large
non fips rsa method
no public exponent
null before block missing
n does not equal p q
oaep decoding error
operation not allowed in fips mode
padding check failed
pkcs decoding error
p not prime
q not prime
rsa operations not supported
salt length check failed
salt length recovery failed
sslv3 rollback attack
unknown algorithm type
unknown mask digest
unknown padding type
unknown pss digest
unsupported mask algorithm
unsupported mask parameter
unsupported signature type
value missing
wrong signature length
CHECK_PADDING_MD
DO_RSA_PRINT
INT_RSA_VERIFY
MEMORY_LOCK
OLD_RSA_PRIV_DECODE
PKEY_RSA_CTRL
PKEY_RSA_CTRL_STR
PKEY_RSA_SIGN
PKEY_RSA_VERIFY
PKEY_RSA_VERIFYRECOVER
RSA_BUILTIN_KEYGEN
RSA_check_key
RSA_EAY_PRIVATE_DECRYPT
RSA_EAY_PRIVATE_ENCRYPT
RSA_EAY_PUBLIC_DECRYPT
RSA_EAY_PUBLIC_ENCRYPT
RSA_generate_key
RSA_generate_key_ex
RSA_ITEM_VERIFY
RSA_memory_lock
RSA_new_method
RSA_NULL
RSA_NULL_MOD_EXP
RSA_NULL_PRIVATE_DECRYPT
RSA_NULL_PRIVATE_ENCRYPT
RSA_NULL_PUBLIC_DECRYPT
RSA_NULL_PUBLIC_ENCRYPT
RSA_padding_add_none
RSA_padding_add_PKCS1_OAEP
RSA_padding_add_PKCS1_PSS
RSA_padding_add_PKCS1_PSS_mgf1
RSA_padding_add_PKCS1_type_1
RSA_padding_add_PKCS1_type_2
RSA_padding_add_SSLv23
RSA_padding_add_X931
RSA_padding_check_none
RSA_padding_check_PKCS1_OAEP
RSA_padding_check_PKCS1_type_1
RSA_padding_check_PKCS1_type_2
RSA_padding_check_SSLv23
RSA_padding_check_X931
RSA_print
RSA_print_fp
RSA_private_decrypt
RSA_private_encrypt
RSA_PRIV_DECODE
RSA_PRIV_ENCODE
RSA_public_decrypt
RSA_public_encrypt
RSA_PUB_DECODE
RSA_setup_blinding
RSA_sign
RSA_sign_ASN1_OCTET_STRING
RSA_verify
RSA_verify_ASN1_OCTET_STRING
RSA_verify_PKCS1_PSS
RSA_verify_PKCS1_PSS_mgf1
rsa_pmeth.c
rsa_padding_mode
sslv23
oeap
oaep
x931
rsa_pss_saltlen
rsa_keygen_bits
rsa_keygen_pubexp
bad q value
bn error
need new setup values
non fips dsa method
parameter encoding error
d2i_DSA_SIG
DO_DSA_PRINT
DSAparams_print
DSAparams_print_fp
DSA_do_sign
DSA_do_verify
DSA_generate_key
DSA_generate_parameters_ex
DSA_new_method
DSA_PARAM_DECODE
DSA_print_fp
DSA_PRIV_DECODE
DSA_PRIV_ENCODE
DSA_PUB_DECODE
DSA_PUB_ENCODE
DSA_sign
DSA_sign_setup
DSA_SIG_new
DSA_SIG_PRINT
DSA_verify
i2d_DSA_SIG
OLD_DSA_PRIV_DECODE
PKEY_DSA_CTRL
PKEY_DSA_KEYGEN
SIG_CB
dsa_paramgen_bits
dsa_paramgen_q_bits
dsa_paramgen_md
dsa_pmeth.c
ECDSA part of OpenSSL 1.0.1k 8 Jan 2015
ecs_lib.c
ecs_ossl.c
OpenSSL ECDSA method
err ec lib
non fips method
random number generation failed
signature malloc failed
ECDSA_CHECK
ECDSA_DATA_NEW_METHOD
ECDSA_do_sign
ECDSA_do_verify
ECDSA_sign_setup
bad generator
invalid public key
no private value
COMPUTE_KEY
DHparams_print_fp
DH_BUILTIN_GENPARAMS
DH_compute_key
DH_generate_key
DH_generate_parameters_ex
DH_new_method
DH_PARAM_DECODE
DH_PRIV_DECODE
DH_PRIV_ENCODE
DH_PUB_DECODE
DH_PUB_ENCODE
DO_DH_PRINT
GENERATE_KEY
GENERATE_PARAMETERS
PKEY_DH_DERIVE
PKEY_DH_KEYGEN
dh_pmeth.c
dh_paramgen_prime_len
dh_paramgen_generator
KDF failed
point arithmetic failure
ECDH_CHECK
ECDH_compute_key
ECDH_DATA_new_method
control command failed
dso already loaded
empty file structure
filename too big
cleanup method function failed
incorrect file syntax
could not load the shared library
name translation failed
no filename
no file specification
a null shared library handle was used
set filename failed
the meth_data stack is corrupt
could not bind to the requested symbol name
could not unload the shared library
functionality not supported
BEOS_BIND_FUNC
BEOS_BIND_VAR
BEOS_LOAD
BEOS_NAME_CONVERTER
BEOS_UNLOAD
DLFCN_BIND_FUNC
DLFCN_BIND_VAR
DLFCN_LOAD
DLFCN_MERGER
DLFCN_NAME_CONVERTER
DLFCN_UNLOAD
DL_BIND_FUNC
DL_BIND_VAR
DL_LOAD
DL_MERGER
DL_NAME_CONVERTER
DL_UNLOAD
DSO_bind_func
DSO_bind_var
DSO_convert_filename
DSO_ctrl
DSO_free
DSO_get_filename
DSO_get_loaded_filename
DSO_global_lookup
DSO_load
DSO_merge
DSO_new_method
DSO_pathbyaddr
DSO_set_filename
DSO_set_name_converter
DSO_up_ref
GLOBAL_LOOKUP_FUNC
PATHBYADDR
VMS_BIND_SYM
VMS_LOAD
VMS_MERGER
VMS_UNLOAD
WIN32_BIND_FUNC
WIN32_BIND_VAR
WIN32_GLOBALLOOKUP
WIN32_GLOBALLOOKUP_FUNC
WIN32_JOINER
WIN32_LOAD
WIN32_MERGER
WIN32_NAME_CONVERTER
WIN32_PATHBYADDR
WIN32_SPLITTER
WIN32_UNLOAD
dso_lib.c
already loaded
argument is not a number
cmd not executable
command takes input
command takes no input
conflicting engine id
ctrl command not implemented
dh not implemented
dsa not implemented
DSO failure
dso not found
engines section error
engine configuration error
engine is not in the list
engine section error
failed loading private key
failed loading public key
finish failed
could not obtain hardware handle
'id' or 'name' missing
init failed
internal list error
invalid cmd name
invalid cmd number
invalid init value
invalid string
not loaded
no control function
no index
no load function
no reference
no such engine
no unload function
provide parameters
rsa not implemented
unimplemented cipher
unimplemented digest
unimplemented public key method
version incompatibility
DYNAMIC_CTRL
DYNAMIC_GET_DATA_CTX
DYNAMIC_LOAD
DYNAMIC_SET_DATA_CTX
ENGINE_add
ENGINE_by_id
ENGINE_cmd_is_executable
ENGINE_ctrl
ENGINE_ctrl_cmd
ENGINE_ctrl_cmd_string
ENGINE_finish
ENGINE_FREE_UTIL
ENGINE_get_cipher
ENGINE_GET_DEFAULT_TYPE
ENGINE_get_digest
ENGINE_get_next
ENGINE_get_pkey_asn1_meth
ENGINE_get_pkey_meth
ENGINE_get_prev
ENGINE_init
ENGINE_LIST_ADD
ENGINE_LIST_REMOVE
ENGINE_load_private_key
ENGINE_load_public_key
ENGINE_load_ssl_client_cert
ENGINE_new
ENGINE_remove
ENGINE_set_default_string
ENGINE_SET_DEFAULT_TYPE
ENGINE_set_id
ENGINE_set_name
ENGINE_TABLE_REGISTER
ENGINE_UNLOAD_KEY
ENGINE_UNLOCKED_FINISH
ENGINE_up_ref
INT_CTRL_HELPER
INT_ENGINE_CONFIGURE
INT_ENGINE_MODULE_INIT
LOG_MESSAGE
eng_lib.c
eng_list.c
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/lib/engines
OPENSSL_ENGINES
eng_ctrl.c
eng_table.c
ECDH
ECDSA
RAND
CIPHERS
DIGESTS
PKEY
PKEY_CRYPTO
PKEY_ASN1
eng_fat.c
str=
tb_digest.c
tb_pkmeth.c
tb_asnmth.c
eng_cnf.c
engine_id
soft_load
dynamic_path
EMPTY
default_algorithms
, name=
section=
engines
BUF_memdup
BUF_MEM_grow
BUF_MEM_grow_clean
BUF_MEM_new
BUF_strdup
BUF_strndup
accept error
bad fopen mode
bad hostname lookup
broken pipe
connect error
EOF on memory BIO
error setting nbio
error setting nbio on accepted socket
error setting nbio on accept socket
gethostbyname addr is not af inet
invalid ip address
in use
keepalive
nbio connect error
no accept port specified
no hostname specified
no port defined
no port specified
null parameter
tag mismatch
unable to bind socket
unable to create socket
unable to listen socket
uninitialized
unsupported method
write to read only BIO
WSAStartup
ACPT_STATE
BIO_accept
BIO_BER_GET_HEADER
BIO_callback_ctrl
BIO_ctrl
BIO_gethostbyname
BIO_gets
BIO_get_accept_socket
BIO_get_host_ip
BIO_get_port
BIO_MAKE_PAIR
BIO_new
BIO_new_file
BIO_new_mem_buf
BIO_nread
BIO_nread0
BIO_nwrite
BIO_nwrite0
BIO_puts
BIO_read
BIO_sock_init
BIO_write
BUFFER_CTRL
CONN_CTRL
CONN_STATE
DGRAM_SCTP_READ
FILE_CTRL
FILE_READ
LINEBUFFER_CTRL
MEM_READ
MEM_WRITE
SSL_new
WSASTARTUP
dual ec drbg disabled
error initialising drbg
error instantiating drbg
no fips random method set
PRNG not seeded
RAND_get_rand_method
RAND_init_fips
SSLEAY_RAND_BYTES
evp_cnf.c
fips_mode
name=
alg_section
p_lib.c
Public Key
%s algorithm "%s" unsupported
Private Key
pmeth_gn.c
a_bitstr.c
a_d2i_fp.c
a_i2d_fp.c
X509_ALGORS
X509_ALGOR
X509_ATTRIBUTE
value.set
value.single
cert_info
sig_alg
X509_CINF
issuer
validity
subject
issuerUID
subjectUID
X509_CERT_PAIR
reverse
X509_CERT_AUX
other
x_crl.c
X509_CRL
X509_CRL_INFO
lastUpdate
nextUpdate
revoked
X509_REVOKED
revocationDate
ameth_lib.c
X509_EXTENSIONS
Extension
X509_EXTENSION
critical
asn_pack.c
asn_moid.c
oid_section
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/etc/openssl/private
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/etc/openssl
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/etc/openssl/certs
/home/ubuntu/build/giant/depends/aarch64-linux-gnu/etc/openssl/cert.pem
SSL_CERT_DIR
SSL_CERT_FILE
x509_cmp.c
0123456789ABCDEF
NO X509_NAME
x509_obj.c
v3_lib.c
0123456789ABCDEF
v3_utl.c
TRUE
FALSE
,value:
,name:
section:
GENERAL_NAMES
GeneralNames
GENERAL_NAME
d.otherName
d.rfc822Name
d.dNSName
d.x400Address
d.directoryName
d.ediPartyName
d.uniformResourceIdentifier
d.iPAddress
d.registeredID
EDIPARTYNAME
nameAssigner
partyName
OTHERNAME
type_id
v3_alt.c
<unsupported>
othername
X400Name
EdiPartyName
email
DirName
<invalid>
IP Address
Registered ID
othername:<unsupported>
X400Name:<unsupported>
EdiPartyName:<unsupported>
email:%s
DNS:%s
URI:%s
DirName: 
IP Address:%d.%d.%d.%d
IP Address:<invalid>
value=
dirName
otherName
copy
v3_skey.c
always
v3_akey.c
Not Before: 
Not After: 
PKEY_USAGE_PERIOD
notBefore
notAfter
Unspecified
unspecified
Key Compromise
keyCompromise
CA Compromise
CACompromise
Affiliation Changed
affiliationChanged
Superseded
superseded
Cessation Of Operation
cessationOfOperation
Certificate Hold
certificateHold
Remove From CRL
removeFromCRL
Privilege Withdrawn
privilegeWithdrawn
AA Compromise
AACompromise
%*sVersion: %ld (0x%lX)
%*sZone: %s, User: 
v3_sxnet.c
SXNET
SXNETID
zone
user
%*sCPS: %s
%*sUser Notice:
%*sOrganization: %s
%*sNumber%s: 
%*sExplicit Text: %s
%*sUnknown Qualifier: 
%*sPolicy: 
v3_cpols.c
ia5org
policyIdentifier
userNotice
explicitText
organization
noticeNumbers
Critical
Non Critical
%*s%s
%*sNo Qualifiers
NOTICEREF
noticenos
USERNOTICE
noticeref
exptext
POLICYQUALINFO
pqualid
d.cpsuri
d.usernotice
d.other
POLICYINFO
policyid
qualifiers
CERTIFICATEPOLICIES
%*s%s:
<EMPTY>
%*sFull Name:
%*sRelative Name:
%*sOnly User Certificates
%*sOnly CA Certificates
%*sIndirect CRL
Only Some Reasons
%*sOnly Attribute Certificates
%*s<EMPTY>
Reasons
%*sCRL Issuer:
fullname
v3_crld.c
relativename
CRLissuer
onlyuser
onlyCA
onlyAA
indirectCRL
onlysomereasons
ISSUING_DIST_POINT
distpoint
onlyattr
CRL_DIST_POINTS
CRLDistributionPoints
DIST_POINT_NAME
name.fullname
name.relativename
Unused
unused
v3_purp.c
SSL client
sslclient
SSL server
sslserver
Netscape SSL server
nssslserver
S/MIME signing
smimesign
S/MIME encryption
smimeencrypt
CRL signing
crlsign
Any Purpose
OCSP helper
ocsphelper
Time Stamp signing
timestampsign
v3_info.c
AUTHORITY_INFO_ACCESS
ACCESS_DESCRIPTION
location
%*scrlUrl: 
%*scrlNum: 
%*scrlTime: 
v3_ocsp.c
%*sIssuer: 
AUTHORITY_KEYID
v3_pmaps.c
POLICY_MAPPINGS
POLICY_MAPPING
issuerDomainPolicy
subjectDomainPolicy
Require Explicit Policy
Inhibit Policy Mapping
v3_pcons.c
requireExplicitPolicy
inhibitPolicyMapping
POLICY_CONSTRAINTS
%*s%s:
%d.%d.%d.%d/%d.%d.%d.%d
Permitted
Excluded
permitted
excluded
v3_ncons.c
NAME_CONSTRAINTS
permittedSubtrees
excludedSubtrees
GENERAL_SUBTREE
minimum
maximum
PROXY_CERT_INFO_EXTENSION
pcPathLengthConstraint
proxyPolicy
PROXY_POLICY
policyLanguage
language
v3_pci.c
pathlen
hex:
file:
text:
%*sPath Length Constraint: 
infinite
%*sPolicy Language: 
%*sPolicy Text: %s
pcy_cache.c
pcy_data.c
CONF part of OpenSSL 1.0.1k 8 Jan 2015
conf_lib.c
 name=
group=
conf_api.c
vv == NULL
CONF_def part of OpenSSL 1.0.1k 8 Jan 2015
[%s] %s=%s
[[%s]]
conf_def.c
line 
WIN32
OpenSSL default
PKCS7_ATTR_VERIFY
PKCS7_ATTRIBUTES
PKCS7_ATTR_SIGN
PKCS7_DIGEST
contents
PKCS7_ENCRYPT
enc_data
PKCS7_SIGN_ENVELOPE
recipientinfo
md_algs
cert
signer_info
PKCS7_ENC_CONTENT
content_type
PKCS7_RECIP_INFO
issuer_and_serial
key_enc_algor
enc_key
PKCS7_ENVELOPE
PKCS7_ISSUER_AND_SERIAL
PKCS7_SIGNER_INFO
digest_alg
auth_attr
digest_enc_alg
enc_digest
unauth_attr
PKCS7_SIGNED
PKCS7
d.data
d.sign
d.enveloped
d.signed_and_enveloped
d.digest
d.encrypted
pk7_lib.c
pk7_doit.c
pk7_attr.c
p12_add.c
PKCS12_AUTHSAFES
PKCS12_SAFEBAGS
PKCS12_SAFEBAG
attrib
value.keybag
value.shkeybag
value.safes
value.bag
value.other
PKCS12_BAGS
value.x509cert
value.x509crl
value.sdsicert
PKCS12_MAC_DATA
dinfo
PKCS12
authsafes
p12_decr.c
p12_p8e.c
OCSP_SERVICELOC
locator
OCSP_CRLID
crlUrl
crlNum
crlTime
OCSP_BASICRESP
tbsResponseData
signatureAlgorithm
OCSP_RESPDATA
responderId
producedAt
responses
responseExtensions
OCSP_SINGLERESP
certId
certStatus
thisUpdate
singleExtensions
OCSP_CERTSTATUS
value.good
value.revoked
value.unknown
OCSP_REVOKEDINFO
revocationTime
revocationReason
OCSP_RESPID
value.byName
value.byKey
OCSP_RESPONSE
responseStatus
responseBytes
OCSP_RESPBYTES
responseType
OCSP_REQUEST
tbsRequest
optionalSignature
OCSP_REQINFO
requestorName
requestList
requestExtensions
OCSP_ONEREQ
reqCert
singleRequestExtensions
OCSP_CERTID
hashAlgorithm
issuerNameHash
issuerKeyHash
OCSP_SIGNATURE
cms_env.c
cms_enc.c
cms_pwri.c
cmac.c
OpenSSL CMAC method
hm_ameth.c
OpenSSL HMAC method
bn_div.c
bn_exp.c
bn_mod.c
bn_rand.c
bn_recp.c
bn_mont.c
EC part of OpenSSL 1.0.1k 8 Jan 2015
ec_lib.c
ec_mult.c
9[#l
bmNP
GXqN
Ut]<E
b]jY
<4E87
+5I 
VggjeK uO5n
FV|FgUV
|I6?
t+c)
8A6j
)TpH
0Z@q
(ZdOt
(q-B
u+,@	M
b-w#
oMinghuaQu
tfjgvmfv
]&g''}
f&dy
Vg3LE
bV}TS
UUUUUUUUUUUUUU<o(
F$R-
MinghuaQu
xUN'
q~!/
UUUUUUUUUUUa
(wMww
C q'O
(fS{ggRcjh
&@'kd
Rbg.E
^3)2
MinghuaQu
HT%+
{|WM
$&nN
)Urz
9IGv
y!=	LK
MBb!
u;{Gk
`dub`D
`yNT
4`x/
&>1;y
$XI(6
Yb6N4
uw&]
{*eU
K4K 
X!;3; 
6qo~
L7~*
MinghuaQuw
aybSr
Q/xtJ2
xzxv
Nm^\
MinghuaQu
kV!DA
zj{&
sao5
(0'yX
A2VPD
9C#U
)E\\*=
E[3M
iFjt
s(Fdi
(U1h
#Q7z
;L8,
MinghuaQu
MinghuaQu
MinghuaQuS
MinghuaQu)
p+"	Hr9
3Wk1^
*0fT
m>gh
"o;o
|<C!FReQ
h2Wl
'pQ 
&)j<
XW=?'
ihD5
"cs73KI
`kM=
9)jx
'>f,
a5<p
T*8U
U)l:T^8rv
&,o]
A2VPD
9C#U
)E\\*=
r$0I
ec_curve.c
SECG/WTLS curve over a 112 bit prime field
SECG curve over a 112 bit prime field
SECG curve over a 128 bit prime field
SECG curve over a 160 bit prime field
SECG/WTLS curve over a 160 bit prime field
SECG curve over a 192 bit prime field
SECG curve over a 224 bit prime field
NIST/SECG curve over a 224 bit prime field
SECG curve over a 256 bit prime field
NIST/SECG curve over a 384 bit prime field
NIST/SECG curve over a 521 bit prime field
NIST/X9.62/SECG curve over a 192 bit prime field
X9.62 curve over a 192 bit prime field
X9.62 curve over a 239 bit prime field
X9.62/SECG curve over a 256 bit prime field
SECG curve over a 113 bit binary field
SECG/WTLS curve over a 131 bit binary field
SECG curve over a 131 bit binary field
NIST/SECG/WTLS curve over a 163 bit binary field
SECG curve over a 163 bit binary field
NIST/SECG curve over a 163 bit binary field
SECG curve over a 193 bit binary field
NIST/SECG/WTLS curve over a 233 bit binary field
SECG curve over a 239 bit binary field
NIST/SECG curve over a 283 bit binary field
NIST/SECG curve over a 409 bit binary field
NIST/SECG curve over a 571 bit binary field
X9.62 curve over a 163 bit binary field
X9.62 curve over a 176 bit binary field
X9.62 curve over a 191 bit binary field
X9.62 curve over a 208 bit binary field
X9.62 curve over a 239 bit binary field
X9.62 curve over a 272 bit binary field
X9.62 curve over a 304 bit binary field
X9.62 curve over a 359 bit binary field
X9.62 curve over a 368 bit binary field
X9.62 curve over a 431 bit binary field
WTLS curve over a 113 bit binary field
WTLS curve over a 112 bit prime field
WTLS curve over a 160 bit prime field
WTLS curvs over a 224 bit prime field
	IPSec/IKE/Oakley curve #3 over a 155 bit binary field.
	Not suitable for ECDSA.
	Questionable extension field!
	IPSec/IKE/Oakley curve #4 over a 185 bit binary field.
	Not suitable for ECDSA.
	Questionable extension field!
ec_asn1.c
EC_PRIVATEKEY
publicKey
ECPKPARAMETERS
value.named_curve
value.parameters
value.implicitlyCA
ECPARAMETERS
fieldID
cofactor
X9_62_CURVE
X9_62_FIELDID
fieldType
p.prime
p.char_two
p.other
X9_62_CHARACTERISTIC_TWO
p.onBasis
p.tpBasis
p.ppBasis
X9_62_PENTANOMIAL
ec_key.c
ec_ameth.c
Private-Key
%s: (%d bit)
priv:
pub: 
ECDSA-Parameters
Public-Key
OpenSSL EC algorithm
eck_prn.c
ASN1 OID: %s
Field Type: %s
Basis Type: %s
Polynomial:
A:   
Prime:
B:   
Generator (compressed):
Order: 
Generator (uncompressed):
Generator (hybrid):
Cofactor: 
Seed:
%02x%s
ec_oct.c
rsa_gen.c
RSA part of OpenSSL 1.0.1k 8 Jan 2015
rsa_lib.c
rsa_saos.c
rsa_pss.c
rsa_x931.c
RSA_PSS_PARAMS
maskGenAlgorithm
saltLength
trailerField
dmp1
dmq1
iqmp
rsa_ameth.c
 (INVALID PSS PARAMETERS)
Hash Algorithm: 
sha1 (default)
Mask Algorithm: 
 with 
INVALID
mgf1 with sha1 (default)
Salt Length: 0x
14 (default)
Trailer Field: 0x
BC (default)
publicExponent:
modulus:
Exponent:
Modulus:
Private-Key: (%d bit)
Public-Key: (%d bit)
privateExponent:
prime1:
prime2:
exponent1:
exponent2:
coefficient:
OpenSSL RSA method
DSA part of OpenSSL 1.0.1k 8 Jan 2015
dsa_lib.c
dsa_asn1.c
pub_key
priv_key
DSA_SIG
dsa_sign.c
dsa_ossl.c
OpenSSL DSA method
dsa_ameth.c
DSA-Parameters
P:   
Q:   
G:   
r:   
s:   
ECDSA_SIG
dh_gen.c
dh_key.c
OpenSSL DH Method
Diffie-Hellman part of OpenSSL 1.0.1k 8 Jan 2015
dh_lib.c
dh_ameth.c
PKCS#3 DH Private-Key
private-key:
public-key:
prime:
generator:
recommended-private-length: %d bits
PKCS#3 DH Public-Key
PKCS#3 DH Parameters
OpenSSL PKCS#3 DH method
ECDH part of OpenSSL 1.0.1k 8 Jan 2015
ech_lib.c
ech_ossl.c
OpenSSL ECDH method
NULL shared library method
p_sign.c
p_verify.c
bio_enc.c
evp_pkey.c
pmeth_fn.c
m_sigver.c
a_time.c
ASN1_TIME
a_set.c
a_dup.c
a_enum.c
a_sign.c
a_digest.c
a_verify.c
0123456789ABCDEF
\%02X
\W%08lX
\U%04lX
a_strex.c
X509_VAL
x_pubkey.c
X509_PUBKEY
public_key
req_info
X509_REQ_INFO
attributes
BIGNUM
x_long.c
ZLONG
LONG
x_name.c
X509_NAME
X509_NAME_INTERNAL
X509_NAME_ENTRIES
RDNS
X509_NAME_ENTRY
NETSCAPE_SPKI
spkac
sig_algor
NETSCAPE_SPKAC
challenge
d2i_pr.c
i2d_pr.c
        Subject OCSP hash: 
t_x509.c
%02X
        Public key OCSP hash: 
    Signature Algorithm: 
 GMT
%s %2d %02d:%02d:%02d%.*s %d%s
Bad time value
%s %2d %02d:%02d:%02d %d%s
 (Negative)
Certificate:
    Data:
%8sVersion: %lu (0x%lx)
        Serial Number:
 %s%lu (%s0x%lx)
%12s%s
%02x%c
        Issuer:%c
        Validity
            Not Before: 
            Not After : 
        Subject:%c
        Subject Public Key Info:
%12sPublic Key Algorithm: 
%12sUnable to load Public Key
X509v3 extensions
%*sTrusted Uses:
%*sNo Trusted Uses.
%*sRejected Uses:
%*sNo Rejected Uses.
%*sAlias: %s
%*sKey Id: 
%s%02X
%s 0
%s %s%lu (%s0x%lx)
tasn_prn.c
SEQUENCE
%*s%s OF %s {
<ABSENT>
NULL
BOOL ABSENT
%s (%s)
 (%ld unused bits)
ERROR: selector [%d] invalid
%*s}
Unprocessed type %d
:EXTERNAL TYPE %s
f_int.c
f_string.c
asn1_gen.c
Char=
tag=
ASCII
UTF8
BITLIST
string=
BOOL
BOOLEAN
INTEGER
ENUM
ENUMERATED
OBJECT
UTCTIME
GENERALIZEDTIME
GENTIME
OCTETSTRING
BITSTR
BITSTRING
UNIVERSALSTRING
UNIV
IA5STRING
UTF8String
BMPSTRING
VISIBLESTRING
VISIBLE
PRINTABLESTRING
PRINTABLE
T61STRING
TELETEXSTRING
GeneralString
GENSTR
NUMERIC
NUMERICSTRING
EXPLICIT
IMPLICIT
OCTWRAP
SEQWRAP
SETWRAP
BITWRAP
FORM
FORMAT
%-18s
(unknown)
cons: 
prim: 
Error in encoding
%5ld:
d=%-2d hl=%ld l=%4ld 
d=%-2d hl=%ld l=inf  
priv [ %d ] 
cont [ %d ]
appl [ %d ]
<ASN1 %d>
length is greater than %ld
:BAD OBJECT
Bad boolean
[HEX DUMP]:
BAD INTEGER
BAD ENUMERATED
BIT STRING
OCTET STRING
OBJECT DESCRIPTOR
EXTERNAL
REAL
<ASN1 11>
UTF8STRING
<ASN1 13>
<ASN1 14>
<ASN1 15>
VIDEOTEXSTRING
GRAPHICSTRING
GENERALSTRING
<ASN1 29>
PKCS8_PRIV_KEY_INFO
pkeyalg
pkey
x509_req.c
X.509 part of OpenSSL 1.0.1k 8 Jan 2015
x509_vfy.c
OPENSSL_ALLOW_PROXY_CERTS
x509name.c
x509_v3.c
x509_att.c
x509_lu.c
x509_trs.c
compatible
SSL Client
SSL Server
S/MIME email
Object Signer
OCSP responder
OCSP request
TSA server
x509_vpm.c
smime_sign
ssl_client
ssl_server
v3_bcons.c
BASIC_CONSTRAINTS
v3_bitst.c
Digital Signature
digitalSignature
Non Repudiation
nonRepudiation
Key Encipherment
keyEncipherment
Data Encipherment
dataEncipherment
Key Agreement
keyAgreement
Certificate Sign
keyCertSign
CRL Sign
cRLSign
Encipher Only
encipherOnly
Decipher Only
decipherOnly
client
server
Object Signing
objsign
reserved
SSL CA
sslCA
S/MIME CA
emailCA
Object Signing CA
objCA
DER:
ASN1:
v3_conf.c
,section=
critical,
v3_extku.c
EXTENDED_KEY_USAGE
v3_ia5.c
%s:%s
%*s<Not Supported>
%*s<Parse Error>
%*s%s
pcy_tree.c
cms_lib.c
CMS_Receipt
signedContentIdentifier
originatorSignatureValue
CMS_ReceiptRequest
receiptsFrom
receiptsTo
CMS_ReceiptsFrom
d.allOrFirstTier
d.receiptList
CMS_Attributes_Verify
CMS_ATTRIBUTES
CMS_Attributes_Sign
CMS_ContentInfo
d.signedData
d.envelopedData
d.digestedData
d.encryptedData
d.authenticatedData
d.compressedData
CMS_CompressedData
compressionAlgorithm
encapContentInfo
CMS_AuthenticatedData
originatorInfo
recipientInfos
macAlgorithm
digestAlgorithm
authAttrs
unauthAttrs
CMS_EncryptedData
encryptedContentInfo
unprotectedAttrs
CMS_DigestedData
CMS_EnvelopedData
CMS_RecipientInfo
d.ktri
d.kari
d.kekri
d.pwri
d.ori
CMS_OtherRecipientInfo
oriType
oriValue
CMS_PasswordRecipientInfo
keyDerivationAlgorithm
keyEncryptionAlgorithm
encryptedKey
CMS_KEKRecipientInfo
kekid
CMS_KEKIdentifier
keyIdentifier
CMS_KeyAgreeRecipientInfo
originator
recipientEncryptedKeys
CMS_OriginatorIdentifierOrKey
d.issuerAndSerialNumber
d.subjectKeyIdentifier
d.originatorKey
CMS_OriginatorPublicKey
CMS_RecipientEncryptedKey
CMS_KeyAgreeRecipientIdentifier
d.rKeyId
CMS_RecipientKeyIdentifier
CMS_OtherKeyAttribute
keyAttrId
keyAttr
CMS_KeyTransRecipientInfo
CMS_EncryptedContentInfo
contentEncryptionAlgorithm
encryptedContent
CMS_OriginatorInfo
certificates
crls
CMS_SignedData
digestAlgorithms
signerInfos
CMS_RevocationInfoChoice
d.crl
CMS_OtherRevocationInfoFormat
otherRevInfoFormat
otherRevInfo
CMS_SignerInfo
signedAttrs
unsignedAttrs
CMS_EncapsulatedContentInfo
eContentType
eContent
CMS_SignerIdentifier
CMS_CertificateChoices
d.certificate
d.extendedCertificate
d.v1AttrCert
d.v2AttrCert
CMS_OtherCertificateFormat
otherCertFormat
otherCert
CMS_IssuerAndSerialNumber
cms_io.c
cms_sd.c
cms_dd.c
MD5 part of OpenSSL 1.0.1k 8 Jan 2015
	#	%	+	/	5	C	I	M	O	U	Y	_	k	q	w	
 ' ) - 3 G M Q _ c e i w } 
!5!A!I!O!Y![!_!s!}!
"!"%"+"1"9"K"O"c"g"s"u"
#'#)#/#3#5#E#Q#S#Y#c#k#
$)$=$A$C$M$_$g$k$y$}$
%'%1%=%C%K%O%s%
&'&)&5&;&?&K&S&Y&e&i&o&{&
'5'7'M'S'U'_'k'm's'w'
(!(1(=(?(I(Q([(](a(g(u(
)!)#)?)G)])e)i)o)u)
*%*/*O*U*_*e*k*m*s*
+'+1+3+=+?+K+O+U+i+m+o+{+
,#,/,5,9,A,W,Y,i,w,
-;-C-I-M-a-e-q-
.%.-.3.7.9.?.W.[.o.y.
/'/)/A/E/K/M/Q/W/o/u/}/
0#0)070;0U0Y0[0g0q0y0}0
1!1'1-191C1E1K1]1a1g1m1s1
2)252Y2]2c2k2o2u2w2{2
3%3+3/353A3G3[3_3g3k3s3y3
474E4U4W4c4i4m4
5-535;5A5Q5e5o5q5w5{5}5
6#6165676;6M6O6S6Y6a6k6m6
7?7E7I7O7]7a7u7
8!83858A8G8K8S8W8_8e8o8q8}8
9#9%9)9/9=9A9M9[9k9y9}9
:':+:1:K:Q:[:c:g:m:y:
;!;#;-;9;E;S;Y;_;q;{;
<)<5<C<O<S<[<e<k<q<
=!=-=3=7=?=C=o=s=u=y={=
>#>)>/>3>A>W>c>e>w>
?7?;?=?A?Y?_?e?g?y?}?
@!@%@+@1@?@C@E@]@a@g@m@
A!A3A5A;A?AYAeAkAwA{A
B#B)B/BCBSBUB[BaBsB}B
C%C'C3C7C9COCWCiC
D#D)D;D?DEDKDQDSDYDeDoD
E+E1EAEIESEUEaEwE}E
Ebn_exp2.c
ec_print.c
ec2_smpl.c
ec2_mult.c
ecp_oct.c
ec2_oct.c
rsa_eay.c
Eric Young's PKCS#1 RSA
rsa_pk1.c
rsa_ssl.c
rsa_none.c
rsa_oaep.c
%04x - 
%s%04x - <SPACES/NULS>
a_utctm.c
%02d%02d%02d%02d%02d%02dZ
a_gentm.c
%04d%02d%02d%02d%02d%02dZ
'()+,-./:=?
a_mbstr.c
minsize=
maxsize=
a_bool.c
bio_ndef.c
asn_mime.c
content-type
multipart/signed
boundary
application/x-pkcs7-signature
application/pkcs7-signature
type: 
application/x-pkcs7-mime
application/pkcs7-mime
Content-Type: text/plain
-----BEGIN %s-----
-----END %s-----
application/x-pkcs7-
application/pkcs7-
smime.p7m
signed-receipt
certs-only
signed-data
enveloped-data
compressed-data
smime.p7z
MIME-Version: 1.0%s
Content-Type: multipart/signed;
 protocol="%ssignature";
 micalg="
sha-256
sha-384
sha-512
gostr3411-94
"; boundary="----%s"%s%s
This is an S/MIME signed message%s%s
------%s%s
%s------%s%s
Content-Type: %ssignature;
 name="smime.p7s"%s
Content-Transfer-Encoding: base64%s
Content-Disposition: attachment;
 filename="smime.p7s"%s%s
%s------%s--%s%s
 name="%s"%s
Content-Transfer-Encoding: base64%s%s
 filename="%s"%s
Content-Type: %smime;
 smime-type=%s;
MASK:
nombstr
pkix
utf8only
a_strnid.c
0123456789ABCDEF
PEM part of OpenSSL 1.0.1k 8 Jan 2015
Enter PEM pass phrase:
pem_lib.c
phrase is too short, needs to be at least %d chars
MIC-CLEAR
MIC-ONLY
ENCRYPTED
BAD-TYPE
Proc-Type: 4,
DEK-Info: 
Proc-Type: 
-----BEGIN 
-----
-----END 
enc->iv_len <= (int)sizeof(iv)
strlen(objstr)+23+2*enc->iv_len+13 <= sizeof buf
Expecting: 
ANY PRIVATE KEY
ENCRYPTED PRIVATE KEY
PRIVATE KEY
X509 CERTIFICATE
NEW CERTIFICATE REQUEST
CERTIFICATE REQUEST
TRUSTED CERTIFICATE
PKCS #7 SIGNED DATA
pem_oth.c
pcy_node.c
bn_sqrt.c
bn_gf2m.c
ecp_mont.c
ecp_nist.c
bf_buff.c
bio_asn1.c
ctx->buflen <= ctx->bufsize
asn1
ecp_smpl.c
http://[fe80:
%s#%s
<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:%s xmlns:u="%s"></u:%s></s:Body></s:Envelope>
<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:%s xmlns:u="%s">
></s:Body></s:Envelope>
/var/run/minissdpd.sock
rootdevice
Connected
urn:schemas-upnp-org:service:WANCommonInterfaceConfig:
ssdp:all
urn:schemas-upnp-org:device:InternetGatewayDevice:1
urn:schemas-upnp-org:service:WANIPConnection:1
urn:schemas-upnp-org:service:WANPPPConnection:1
upnp:rootdevice
GetTotalBytesSent
NewTotalBytesSent
GetTotalBytesReceived
NewTotalBytesReceived
GetTotalPacketsSent
NewTotalPacketsSent
GetTotalPacketsReceived
NewTotalPacketsReceived
GetStatusInfo
NewUptime
NewConnectionStatus
NewLastConnectionError
errorCode
GetConnectionTypeInfo
NewConnectionType
GetCommonLinkProperties
NewLayer1DownstreamMaxBitRate
NewLayer1UpstreamMaxBitRate
GetExternalIPAddress
NewExternalIPAddress
libminiupnpc
NewRemoteHost
NewExternalPort
NewProtocol
NewInternalPort
NewInternalClient
NewEnabled
NewPortMappingDescription
NewLeaseDuration
AddPortMapping
AddAnyPortMapping
NewReservedPort
DeletePortMapping
NewStartPort
NewEndPort
NewManage
DeletePortMappingRange
NewPortMappingIndex
GetGenericPortMappingEntry
GetPortMappingNumberOfEntries
NewPortMappingNumberOfEntries
GetSpecificPortMappingEntry
NewNumberOfPorts
GetListOfPortMappings
GetFirewallStatus
FirewallEnabled
InboundPinholeAllowed
RemoteHost
RemotePort
Protocol
InternalPort
InternalClient
GetOutboundPinholeTimeout
OutboundPinholeTimeout
empty
LeaseTime
AddPinhole
UniqueID
NewLeaseTime
UpdatePinhole
DeletePinhole
CheckPinholeWorking
IsWorking
GetPinholePackets
PinholePackets
UnknownError
Success
Miniupnpc Invalid Arguments
Miniupnpc Invalid response
Miniupnpc Socket error
Miniupnpc Memory allocation error
Invalid Action
Invalid Args
Action Failed
Action not authorized
PinholeSpaceExhausted
FirewallDisabled
InboundPinholeNotAllowed
NoSuchEntry
ProtocolNotSupported
InternalPortWildcardingNotAllowed
ProtocolWildcardingNotAllowed
WildcardNotPermittedInSrcIP
NoPacketSent
SpecifiedArrayIndexInvalid
NoSuchEntryInArray
WildCardNotPermittedInSrcIP
WildCardNotPermittedInExtPort
ConflictInMappingEntry
SamePortValuesRequired
OnlyPermanentLeasesSupported
RemoteHostOnlySupportsWildcard
ExternalPortOnlySupportsWildcard
Miniupnpc Unknown Error
getaddrinfo() error : %s
setsockopt
getsockopt
PortMappingEntry
NewDescription
M-SEARCH * HTTP/1.1
HOST: %s:1900
ST: %s
MAN: "ssdp:discover"
MX: %u
socket(unix)
setsockopt SO_RCVTIMEO unix
setsockopt SO_SNDTIMEO unix
minissdpc.c: write()
minissdpc.c: read()
FF05::C
239.255.255.250
FF02::C
setsockopt(SO_REUSEADDR,...)
setsockopt(IPV6_MULTICAST_HOPS,...)
setsockopt(IP_MULTICAST_TTL,...)
setsockopt IPV6_MULTICAST_IF
setsockopt IP_MULTICAST_IF
1900
getaddrinfo: %s
sendto
[FF05::C]
[FF02::C]
content-length
transfer-encoding
chunked
getsockname
getnameinfo() failed : %s
GET %s HTTP/%s
Host: %s:%d
Connection: Close
User-Agent: aarch64-linux-gnu, UPnP/1.1, MiniUPnPc/2.0.20180203
<![CDATA[
service
urn:schemas-upnp-org:service:WANIPv6FirewallControl:
urn:schemas-upnp-org:service:WANIPConnection:
urn:schemas-upnp-org:service:WANPPPConnection:
URLBase
presentationURL
serviceType
controlURL
eventSubURL
SCPDURL
:%hu
POST %s HTTP/%s
Host: %s%s
User-Agent: aarch64-linux-gnu, UPnP/1.1, MiniUPnPc/2.0.20180203
Content-Length: %d
Content-Type: text/xml
SOAPAction: "%s"
Connection: Close
Cache-Control: no-cache
Pragma: no-cache
NewPortListing
recv
poll
evbuffer_run_callbacks
evbuffer_file_segment_materialize
evbuffer_chain_align
advance_last_with_data
PRESERVE_PINNED
evbuffer_write_iovec
evbuffer_chain_pin_
evbuffer_copyout_from
evbuffer_read_setup_vecs_
evbuffer_ptr_set
evbuffer_ptr_memcmp
evbuffer_file_segment_add_cleanup_cb
evbuffer_file_segment_free
evbuffer_decref_and_unlock_
evbuffer_chain_free
COPY_CHAIN
PREPEND_CHAIN
RESTORE_PINNED
ZERO_CHAIN
evbuffer_chain_unpin_
evbuffer_drain
evbuffer_readln
evbuffer_write_sendfile
evbuffer_pullup
evbuffer_free_trailing_empty_chains
evbuffer_chain_insert
evbuffer_add
evbuffer_prepend
APPEND_CHAIN
evbuffer_remove_buffer
evbuffer_expand_fast_
evbuffer_expand_singlechain
evbuffer_reserve_space
APPEND_CHAIN_MULTICAST
evthread_is_debug_lock_held_((buffer)->lock)
%s:%d: Assertion %s failed in %s
%s: mmap(%d, %d, %zu) failed
!(chain->flags & EVBUFFER_IMMUTABLE)
!(chain->flags & EVBUFFER_MEM_PINNED_ANY)
evthread_is_debug_lock_held_((buf)->lock)
evthread_is_debug_lock_held_((src)->lock)
CHAIN_PINNED_R(*pinned)
pinned == src->last_with_datap
(chain->flags & flag) == 0
chain || datlen==0
datlen+pos_in_chain <= chain->off
EV_SIZE_MAX - left >= position
seg->refcnt > 0
refcnt == 0
%s: munmap failed
buffer->refcnt > 0
chain->refcnt > 0
info->source != NULL
info->parent != NULL
evthread_is_debug_lock_held_((dst)->lock)
(chain->flags & flag) != 0
remaining == 0
chain && remaining <= chain->off
%s: out of memory
remaining >= 0
evbuffer_chains_all_empty(*ch)
buf->last_with_datap == &buf->first
buf->first == NULL
chain->misalign >= 0 && (ev_uint64_t)chain->misalign <= EVBUFFER_CHAIN_MAX
datlen <= tmp->buffer_len
chain != *src->last_with_datap
n >= 2
chain == *buf->last_with_datap
chain == buf->first
chain->off == 0
datlen >= avail
*chainp == chain
CHAIN_SPACE_LEN(result) >= datlen
size<0 || (size_t)vec[0].iov_len >= (size_t)size
bufferevent_decref_and_unlock_
bufev_private->refcnt > 0
bufferevent.c
UNLOCK_CALLBACKS requires DEFER_CALLBACKS
bev_group_random_element_
bufferevent_set_rate_limit
bufferevent_rate_limit_group_free
bufferevent_decrement_read_limit
bufferevent_decrement_write_limit
bufferevent_rate_limit_group_get_totals
! LIST_EMPTY(&group->members)
bufferevent_ratelim.c
event_initialized(&rlim->refill_bucket_event)
0 == g->n_members
bevp->rate_limiting && bevp->rate_limiting->cfg
grp != NULL
be_socket_setfd
be_socket_destruct
bufferevent_socket_set_conn_address
bufev->be_ops == &bufferevent_ops_socket
bufferevent_sock.c
addrlen <= sizeof(bev_p->conn_address)
event_queue_remove_active
event_queue_remove_active_later
event_queue_remove_timeout
evthread_notify_base
gettime
event_base_get_method
event_assign
event_set
event_pending
event_remove_timer_nolock_
event_remove_timer
event_del_nolock_
event_queue_remove_inserted
event_del_
event_callback_activate_nolock_
event_queue_insert_active
event_active_nolock_
event_finalize_impl_
event_active
event_queue_insert_active_later
event_active_later_nolock_
event_callback_cancel_nolock_
event_base_init_common_timeout
event_add_nolock_
event_queue_insert_inserted
event_queue_insert_timeout
insert_common_timeout_inorder
event_reinit
event_add
event_callback_to_event
event_base_free_
event_base_priority_init
event_process_active_single_queue
event_persist_closure
event_base_loop
timeout_next
event_queue_make_later_events_active
event_base_new_with_config
event_init
event_base_del_virtual_
event_base_assert_ok_nolock_
evthread_is_debug_lock_held_((base)->th_base_lock)
event.c
%s: %p not on queue %x
Error reading from eventfd
 Read
 Write
 EOF
 Signal
 Timeout
 [Internal]
 [NextTime]
  %p [%s %d, priority=%d]%s%s%s%s%s active%s%s
 Persist
 Internal
  %p [%s %d]%s%s%s%s%s%s
 Timeout=%ld.%06d
%s: %p(fd %d) not on queue %x
%s: EV_SIGNAL is not compatible with EV_READ, EV_WRITE or EV_CLOSED
r == 0
%s: event has no event_base set.
evthread_is_debug_lock_held_((ev->ev_base)->th_base_lock)
!(ev->ev_flags & ~EVLIST_ALL)
evcb->evcb_pri < base->nactivequeues
2.1.8-stable
is_common_timeout(&ctl->duration, base)
%s: Too many common timeouts already in use; we only support %d per event_base
%s: realloc
%s: calloc
is_common_timeout(result, base)
%s: %p(fd %d) already inserted
%s: %p(fd %d) already on timeout
is_same_common_timeout(&e->ev_timeout, &ev->ev_timeout)
%s: could not reinitialize event mechanism
(evcb->evcb_flags & EVLIST_INIT)
%s: no base to free
TAILQ_EMPTY(&base->activequeues[i])
min_heap_empty_(&base->timeheap)
activeq != NULL
ev != NULL
is_same_common_timeout(&ev->ev_timeout, &ev->ev_io_timeout)
(evcb->evcb_flags & EVLIST_FINALIZING)
%s: reentrant invocation.  Only one event_base_loop can run on each event_base at once.
tv->tv_sec >= 0
tv->tv_usec >= 0
EVENT_PRECISE_TIMER
EVENT_NO%s
%s: no event mechanism available
libevent using: %s
%s: Unable to make base notifiable.
EVENT_SHOW_METHOD
%s: Unable to construct event_base
Inserted events:
Active events:
base->virtual_event_count > 0
ev->ev_flags & EVLIST_TIMEOUT
evutil_timercmp(&p_ev->ev_timeout, &ev->ev_timeout, <=)
ev->ev_timeout_pos.min_heap_idx == i
elm1 != elm2
nextp == elm1->ev_timeout_pos.ev_next_with_common_timeout.tqe_prev
nextp == (&ctl->events)->tqh_last
evutil_timercmp(&last->ev_timeout, &ev->ev_timeout, <=)
is_common_timeout(&ev->ev_timeout,base)
COMMON_TIMEOUT_IDX(&ev->ev_timeout) == i
*nextp == elm1
nextp == elm1->evcb_active_next.tqe_prev
nextp == (&base->activequeues[i])->tqh_last
(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE
evcb->evcb_pri == i
(evcb->evcb_flags & (EVLIST_ACTIVE|EVLIST_ACTIVE_LATER)) == EVLIST_ACTIVE_LATER
count == base->event_count_active
evmap_signal_check_integrity_fn
evmap_io_check_integrity_fn
evmap_io_reinit_iter_fn
event_changelist_assert_ok_foreach_iter_fn
event_changelist_get_or_construct
evmap_io_add_
evmap_io_del_
event_changelist_remove_all_
event_changelist_assert_ok
evmap.c
nextp == elm1->ev_.ev_signal.ev_signal_next.le_prev
ev->ev_flags & EVLIST_INSERTED
ev->ev_fd == signum
(ev->ev_events & EV_SIGNAL)
!(ev->ev_events & (EV_READ|EV_WRITE|EV_CLOSED))
nextp == elm1->ev_.ev_io.ev_io_next.le_prev
ev->ev_fd == fd
!(ev->ev_events & EV_SIGNAL)
(ev->ev_events & (EV_READ|EV_WRITE|EV_CLOSED))
n_read == io_info->nread
n_write == io_info->nwrite
n_close == io_info->nclose
c->fd == fd
changelist->n_changes <= changelist->changes_size
change->fd == fd
fd == ev->ev_fd
Too many events reading or writing on fd %d
nread >= 0
nwrite >= 0
nclose >= 0
fdinfo->idxplus1 == i + 1
changelist->changes_size >= changelist->n_changes
c->fd >= 0
f->idxplus1 == i + 1
evthread_debug_lock_mark_unlocked
debug_lock_free
evthread_debug_lock_mark_locked
debug_lock_lock
debug_cond_wait
evthread_setup_global_lock_
DEBUG_LOCK_SIG == lock->signature
evthread.c
mode & (EVTHREAD_READ|EVTHREAD_WRITE)
(mode & (EVTHREAD_READ|EVTHREAD_WRITE)) == 0
lock->held_by == me
lock->count >= 0
lock->count == 0
locktype == lock->locktype
lock->count == 1
Trying to disable lock functions after they have been set up will probaby not work.
Can't change lock callbacks once they have been initialized.
Trying to disable condition functions after they have been set up will probaby not work.
Can't change condition callbacks once they have been initialized.
evthread_is_debug_lock_held_(lock_)
lock_ == NULL
lock_ != NULL
enable_locks && evthread_lock_debugging_enabled_
lock->locktype == locktype
evutil_read_file_
evutil_new_addrinfo_
evutil_check_interfaces
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~
evutil_make_internal_pipe_
fcntl(%d, F_SETFL)
fcntl(%d, F_SETFD)
1.2.3.4
content_out
evutil.c
len_out
fcntl(%d, F_GETFL)
fcntl(%d, F_GETFD)
hints
Request canceled
address family for nodename not supported
temporary failure in name resolution
invalid value for ai_flags
non-recoverable failure in name resolution
ai_family not supported
memory allocation failure
no address associated with nodename
nodename nor servname provided, or not known
servname not supported for ai_socktype
ai_socktype not supported
system error
::%d.%d.%d.%d
::%x:%d.%d.%d.%d
%s:%d
[%s]:%d
<addr with socktype %d>
%u.%u.%u.%u%c
sctp
Unable to call getifaddrs()
18.244.0.188
2001:4860:b002::68
%s: pipe
/proc/sys/kernel/random/uuid
arc4rand_lock
Couldn't allocate %s
%s, %02d %s %4d %02d:%02d:%02d GMT
warn
[%s] %s
select_del
select_add
malloc
(events & EV_SIGNAL) == 0
select.c
poll_add
poll_del
realloc
poll.c
idx->idxplus1 == pop->nfds + 1
epoll_apply_one_change
epoll_dispatch
epoll_create
EVENT_EPOLL_USE_CHANGELIST
epoll_ctl(timerfd)
timerfd_create
op == 0
epoll.c
Epoll MOD(%d) on %d retried as ADD; that failed too
Epoll ADD(%d) on %d retried as MOD; that failed too
Epoll %s(%d) on fd %d failed. Old events were %d; read change was %d (%s); write change was %d (%s); close change was %d (%s)
timerfd_settime
epoll_wait
res <= epollop->nevents
epoll
epoll (with changelist)
evsig_handler
evsig_cb
evsig_init_
evsig_add
evsig_del
%s: received signal %d, but have no base configured
%s: recv
%s: socketpair
sigaction
evsignal >= 0 && evsignal < NSIG
signal.c
Added a signal to event base %p with signals already added to event_base %p.  Only one can have signals at a time with the %s backend.  The base with the most recently added signal or the most recent event_base_loop() call gets preference; do not rely on this behavior in future Libevent versions.
evsig_base_lock
evhttp_add_header_internal
scheme_ok
evhttp_htmlescape
evhttp_connection_set_local_address
evhttp_connection_set_local_port
evhttp_connection_reset_
evhttp_request_dispatch
evhttp_connection_set_base
evhttp_write_connectioncb
evhttp_response_code_
evhttp_decode_uri
evhttp_uridecode
evhttp_bind_socket_with_handle
evhttp_new_object
evhttp_set_cb
evhttp_connection_base_bufferevent_new
evhttp_connection_connect_
evhttp_connection_fail_
evhttp_error_cb
evhttp_make_request
evhttp_send
evhttp_get_body_length
evhttp_read_header
evhttp_request_new
evhttp_associate_new_request_with_connection
evhttp_get_request
evhttp_send_done
evhttp_uri_parse_with_flags
parse_authority
evhttp_parse_response_line
evhttp_read_cb
evhttp_request_get_host
evhttp_parse_query_impl
evhttp_uri_set_scheme
evhttp_uri_set_userinfo
evhttp_uri_set_host
evhttp_uri_set_path
evhttp_uri_set_query
evhttp_uri_set_fragment
!$&'()*+,;=
%s: strdup
getaddrinfo
getaddrinfo: %s
eos >= s
http.c
getnameinfo failed
getnameinfo failed: %s
&amp;
&gt;
&quot;
&#039;
&lt;
%s: html_replace overflow
%s: malloc(%lu)
evcon->state == EVCON_DISCONNECTED
!err && "drain output"
!err && "drain input"
Proxy-Connection
keep-alive
Connection
Expect
100-continue
PATCH
CONNECT
TRACE
OPTIONS
DELETE
%s %s HTTP/%d.%d
Content-Length
HTTP/%d.%d %d %s
Date
Transfer-Encoding
%s: %s
evcon->state == EVCON_IDLE
evcon->base == NULL
req != NULL
evcon->state == EVCON_WRITING
Unknown Status Class
%%%02X
%s: listen
text/html; charset=ISO-8859-1
%s: calloc failed
%s: strdup failed
%s: bufferevent_socket_new failed
!(evcon->flags & EVHTTP_CON_INCOMING)
%s: connection to "%s" failed
evcon->http_server == NULL
req->evcon == NULL
!(req->flags & EVHTTP_REQ_OWN_CONNECTION)
text/html
TAILQ_FIRST(&evcon->requests) == req
<HTML><HEAD>
<TITLE>%d %s</TITLE>
</HEAD><BODY>
<H1>%s</H1>
</BODY></HTML>
Close
%s: we got no content length, but the server wants to keep the connection open: %s.
HTTP/%d.%d 100 Continue
%s: bad header on %d
%s: evbuffer_new
%s: cannot get connection on %d
req->flags & EVHTTP_REQ_OWN_CONNECTION
eos >= cp
%s: malloc
HTTP/%d.%d%c
https
%s: illegal connection state %d
Host
Not Found
<html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL %s was not found on this server.</p></body></html>
%s: mm_malloc
%s: strdup()
Informational
Redirection
Client Error
Server Error
Internal Server Error
Not Implemented
Bad Gateway
Service Unavailable
Gateway Time-out
HTTP Version not supported
Bad Request
Unauthorized
Payment Required
Forbidden
Method Not Allowed
Not Acceptable
Proxy Authentication Required
Request Time-out
Conflict
Gone
Length Required
Precondition Failed
Request Entity Too Large
Request-URI Too Large
Unsupported Media Type
Requested range not satisfiable
Expectation Failed
Multiple Choices
Moved Permanently
Found
See Other
Not Modified
Use Proxy
Temporary Redirect
Created
Accepted
Non-Authoritative Information
No Content
Reset Content
Partial Content
Continue
Switching Protocols
listener_read_cb
listener.c
Error from accept() call
inproc
src/zmq.cpp
buf_
%s (%s:%d)
__fd
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
draft
src/polling_util.hpp
int zmq_send(void*, const void*, size_t, int)
int zmq_recv(void*, void*, size_t, int)
src/socket_poller.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
rc == 0
Assertion failed: %s (%s:%d)
%s (%s:%d)
vector::_M_realloc_insert
src/clock.cpp
%s (%s:%d)
src/mutex.hpp
%s (%s:%d)
src/ctx.cpp
_sockets.empty ()
Assertion failed: %s (%s:%d)
cmd.type == command_t::done
ZMQbg/
vector::reserve
vector::_M_default_append
vector::_M_fill_insert
vector::_M_realloc_insert
src/epoll.cpp
%s (%s:%d)
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
vector::_M_realloc_insert
N3zmq7epoll_tE
N3zmq20worker_poller_base_tE
Operation cannot be accomplished in current state
The protocol is not compatible with the socket type
Context was terminated
No thread available
Host unreachable
src/io_thread.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
%s (%s:%d)
false
Assertion failed: %s (%s:%d)
_poller
_mailbox_handle
N3zmq11io_thread_tE
N3zmq13i_poll_eventsE
src/ip.cpp
%s (%s:%d)
src/mutex.hpp
%s (%s:%d)
src/mailbox.cpp
Assertion failed: %s (%s:%d)
src/yqueue.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/ypipe.hpp
N3zmq9mailbox_tE
N3zmq7ypipe_tINS_9command_tELi16EEE
N3zmq12ypipe_base_tINS_9command_tEEE
N3zmq9i_mailboxE
Identity
Routing-Id
src/msg.cpp
NULL != data_
Assertion failed: %s (%s:%d)
NULL != content_
data_ != NULL || size_ == 0
_u.zclmsg.content->ffn
check ()
false
metadata_ != NULL
_u.base.metadata == NULL
refs_ >= 0
void zmq::msg_t::set_metadata(zmq::metadata_t*)
src/object.cpp
false
Assertion failed: %s (%s:%d)
N3zmq8object_tE
vector::_M_realloc_insert
src/own.cpp
!_owner
Assertion failed: %s (%s:%d)
!_terminating
_term_acks > 0
_owned.empty ()
N3zmq5own_tE
src/blob.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/mutex.hpp
%s (%s:%d)
src/dbuffer.hpp
xvalue.check ()
Assertion failed: %s (%s:%d)
_back->check ()
_front->check ()
src/pipe.cpp
written
!_peer
!_sink
rc == 0
msg.flags () & msg_t::more
_out_pipe
pipe_
_state == active || _state == delimiter_received || _state == term_req_sent1
_sink
_state == term_ack_sent || _state == term_req_sent2
false
_state == active || _state == waiting_for_delimiter
src/yqueue.hpp
src/ypipe.hpp
N3zmq7ypipe_tINS_5msg_tELi256EEE
N3zmq16ypipe_conflate_tINS_5msg_tEEE
N3zmq12ypipe_base_tINS_5msg_tEEE
N3zmq6pipe_tE
N3zmq12array_item_tILi3EEE
N3zmq12array_item_tILi2EEE
N3zmq12array_item_tILi1EEE
src/poller_base.cpp
get_load () == 0
Assertion failed: %s (%s:%d)
false
get_load () > 0
N3zmq13poller_base_tE
src/msg.hpp
%s (%s:%d)
PAUSE
RESUME
TERMINATE
STATISTICS
E: invalid command sent to proxy
src/proxy.cpp
false
Assertion failed: %s (%s:%d)
src/reaper.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
_mailbox.valid ()
Assertion failed: %s (%s:%d)
%s (%s:%d)
false
N3zmq8reaper_tE
src/signaler.cpp
%s (%s:%d)
rc == 1
Assertion failed: %s (%s:%d)
pfd.revents & POLLIN
dummy == 1
src/mutex.hpp
%s (%s:%d)
inproc
src/socket_base.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
_mailbox
Assertion failed: %s (%s:%d)
_destroyed
uri_ != NULL
_thread_safe
epgm
norm
false
_reaper_signaler
errno == EAGAIN
options.recv_routing_id
_out_pipes.empty ()
it != end
!it->second.active
erased
vector::_M_realloc_insert
N3zmq21routing_socket_base_tE
N3zmq13socket_base_tE
N3zmq12array_item_tILi0EEE
N3zmq13i_pipe_eventsE
src/blob.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/stream.cpp
pipe_
Assertion failed: %s (%s:%d)
!_current_out
%s (%s:%d)
pipe != NULL
(_prefetched_msg.flags () & msg_t::more) == 0
!has_out_pipe (routing_id)
N3zmq8stream_tE
src/msg.hpp
%s (%s:%d)
src/sub.cpp
optval_
virtual int zmq::sub_t::xsetsockopt(int, const void*, size_t)
N3zmq5sub_tE
src/tcp_address.cpp
sa_ && sa_len_ > 0
Assertion failed: %s (%s:%d)
tcp://[
tcp://
_address_mask != -1 && ss_ != NULL && ss_len_ >= static_cast<socklen_t> (sizeof (struct sockaddr))
ss_len_ == sizeof (struct sockaddr_in6)
ss_len_ == sizeof (struct sockaddr_in)
src/tcp_listener.cpp
_s == retired_fd
Assertion failed: %s (%s:%d)
!_handle
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
io_thread
%s (%s:%d)
_s != retired_fd
N3zmq14tcp_listener_tE
src/thread.cpp
%s (%s:%d)
N3zmq13udp_address_tE
src/blob.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/xpub.cpp
pipe_
Assertion failed: %s (%s:%d)
%s (%s:%d)
src/generic_mtrie_impl.hpp
_live_nodes == 0
_live_nodes > 0
_count > 1
new_min == new_max
new_min >= _min && new_min < _min + _count
node
new_max - new_min + 1 > 1
new_min > _min || new_max < _min + _count - 1
new_min >= _min
new_max <= _min + _count - 1
new_max - new_min + 1 < _count
N3zmq6xpub_tE
src/xsub.cpp
%s (%s:%d)
pipe_
Assertion failed: %s (%s:%d)
data_
static void zmq::xsub_t::send_subscription(unsigned char*, size_t, void*)
N3zmq6xsub_tE
src/zmq_utils.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
char_nbr == size_ * 5 / 4
byte_nbr == strlen (string_) * 4 / 5
char* zmq_z85_encode(char*, const uint8_t*, size_t)
uint8_t* zmq_z85_decode(uint8_t*, const char*)
inproc
src/client.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq8client_tE
src/dealer.cpp
pipe_
Assertion failed: %s (%s:%d)
%s (%s:%d)
N3zmq8dealer_tE
src/dgram.cpp
!_pipe
Assertion failed: %s (%s:%d)
pipe_
%s (%s:%d)
N3zmq7dgram_tE
src/dish.cpp
%s (%s:%d)
pipe_
Assertion failed: %s (%s:%d)
JOIN
LEAVE
N3zmq14dish_session_tE
N3zmq6dish_tE
src/dist.cpp
_pipes.empty ()
Assertion failed: %s (%s:%d)
%s (%s:%d)
vector::_M_realloc_insert
src/fq.cpp
_pipes.empty ()
Assertion failed: %s (%s:%d)
%s (%s:%d)
!_more
vector::_M_realloc_insert
src/gather.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq8gather_tE
src/io_object.cpp
io_thread_
Assertion failed: %s (%s:%d)
!_poller
_poller
false
N3zmq11io_object_tE
src/ip_resolver.cpp
0 == "unsupported address family"
resolved == true
res != NULL
Assertion failed: %s (%s:%d)
(size_t) res->ai_addrlen <= sizeof (*ip_addr_)
%s (%s:%d)
ifa != NULL
static zmq::ip_addr_t zmq::ip_addr_t::any(int)
int zmq::ip_resolver_t::resolve(zmq::ip_addr_t*, const char*)
N3zmq13ip_resolver_tE
src/ipc_address.cpp
sa_ && sa_len_ > 0
Assertion failed: %s (%s:%d)
ipc://
TMPDIR
TEMPDIR
tmpXXXXXX
/socket
src/ipc_listener.cpp
s == retired_fd
Assertion failed: %s (%s:%d)
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
io_thread
%s (%s:%d)
s != retired_fd
N3zmq14ipc_listener_tE
src/lb.cpp
_pipes.empty ()
Assertion failed: %s (%s:%d)
%s (%s:%d)
vector::_M_realloc_insert
src/mutex.hpp
%s (%s:%d)
src/condition_variable.hpp
src/mailbox_safe.cpp
Assertion failed: %s (%s:%d)
src/yqueue.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
vector::_M_realloc_insert
src/ypipe.hpp
N3zmq14mailbox_safe_tE
src/generic_mtrie_impl.hpp
_next.node
Assertion failed: %s (%s:%d)
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
erased == 1
_count > 0
_live_nodes == 0
_live_nodes > 1
i < _count
src/pair.cpp
!_pipe
Assertion failed: %s (%s:%d)
pipe_ != NULL
%s (%s:%d)
N3zmq6pair_tE
src/pub.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq5pub_tE
src/pull.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq6pull_tE
src/push.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq6push_tE
src/radio.cpp
pipe_
Assertion failed: %s (%s:%d)
JOIN
LEAVE
%s (%s:%d)
vector::_M_realloc_insert
N3zmq15radio_session_tE
N3zmq7radio_tE
src/radix_tree.cpp
i < edgecount ()
Assertion failed: %s (%s:%d)
new_data
data
i == size
j == current_node.prefix_length ()
edge_idx < 2
outgoing_edges == 0
*buffer
src/rep.cpp
%s (%s:%d)
N3zmq5rep_tE
src/req.cpp
request_id_copy
Assertion failed: %s (%s:%d)
%s (%s:%d)
_reply_pipe
N3zmq13req_session_tE
N3zmq5req_tE
src/blob.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/router.cpp
_anonymous_pipes.empty ()
Assertion failed: %s (%s:%d)
pipe_
%s (%s:%d)
!_current_out
pipe != NULL
!has_out_pipe (routing_id)
N3zmq8router_tE
src/scatter.cpp
pipe_
Assertion failed: %s (%s:%d)
N3zmq9scatter_tE
src/server.cpp
_out_pipes.empty ()
Assertion failed: %s (%s:%d)
pipe_
it != _out_pipes.end ()
!it->second.active
%s (%s:%d)
pipe != NULL
N3zmq8server_tE
inproc
src/session_base.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
!_pipe
Assertion failed: %s (%s:%d)
!_zap_pipe
!is_terminating ()
pipe_
%s (%s:%d)
_pipe != NULL
pipe_ == _pipe || pipe_ == _zap_pipe || _terminating_pipes.count (pipe_) == 1
_terminating_pipes.count (pipe_) == 1
false
inproc://zeromq.zap.01
peer.options.type == ZMQ_REP || peer.options.type == ZMQ_ROUTER || peer.options.type == ZMQ_SERVER
engine_ != NULL
!_engine
reason_ == stream_engine_t::connection_error || reason_ == stream_engine_t::timeout_error || reason_ == stream_engine_t::protocol_error
!_pending
!_has_linger_timer
id_ == linger_timer_id
_pipe
epgm
norm
_active
io_thread
options.type == ZMQ_DISH || options.type == ZMQ_RADIO || options.type == ZMQ_DGRAM
N3zmq14session_base_tE
inproc
src/socks_connecter.cpp
_addr
Assertion failed: %s (%s:%d)
_addr->protocol == protocol_name::tcp
_s == retired_fd
_status != unplugged && _status != waiting_for_reconnect_time
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
_status == waiting_for_proxy_connection || _status == sending_greeting || _status == sending_request
_greeting_encoder.has_pending_data ()
_request_encoder.has_pending_data ()
_status == waiting_for_reconnect_time
id_ == reconnect_timer_id
_proxy_addr->resolved.tcp_addr != NULL
%s (%s:%d)
_s != retired_fd
N3zmq17socks_connecter_tE
src/stream_engine.cpp
%s (%s:%d)
!_plugged
Assertion failed: %s (%s:%d)
!_session
session_
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
_metadata == NULL
_plugged
!_io_error
_decoder
processed <= _insize
_handshaking
n > 0
_input_stopped
_session != NULL
_decoder != NULL
_greeting_bytes_read < _greeting_size
_options.mechanism == ZMQ_NULL || _options.mechanism == ZMQ_PLAIN || _options.mechanism == ZMQ_CURVE || _options.mechanism == ZMQ_GSSAPI
NULL
PLAIN
GSSAPI
CURVE
rc == 0
buffer_size == header_size
NULL
PLAIN
_mechanism != NULL
_session
!_has_handshake_timer
Peer-Address
__fd
false
PING
PONG
PING
PONG
SUBSCRIBE
CANCEL
virtual void zmq::stream_engine_t::timer_event(int)
N3zmq15stream_engine_tE
N3zmq8i_engineE
src/tcp.cpp
%s (%s:%d)
inproc
src/tcp_connecter.cpp
_addr
Assertion failed: %s (%s:%d)
_addr->protocol == protocol_name::tcp
!_connect_timer_started
!_reconnect_timer_started
!_handle
_s == retired_fd
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
id_ == reconnect_timer_id || id_ == connect_timer_id
_addr->resolved.tcp_addr != NULL
%s (%s:%d)
_s != retired_fd
N3zmq15tcp_connecter_tE
inproc
src/udp_engine.cpp
!_plugged
Assertion failed: %s (%s:%d)
%s (%s:%d)
address_
send_ || recv_
!_session
session_
iface >= -1
_plugged
in_address.ss_family == AF_INET
N3zmq12udp_engine_tE
src/decoder_allocators.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/v1_decoder.cpp
%s (%s:%d)
rc == 0
src/decoder.hpp
size_ <= _to_read
Assertion failed: %s (%s:%d)
int zmq::v1_decoder_t::one_byte_size_ready(const unsigned char*)
int zmq::v1_decoder_t::eight_byte_size_ready(const unsigned char*)
N3zmq12v1_decoder_tE
N3zmq14decoder_base_tINS_12v1_decoder_tENS_18c_single_allocatorEEE
N3zmq9i_decoderE
src/v2_decoder.cpp
%s (%s:%d)
rc == 0
src/decoder.hpp
size_ <= _to_read
Assertion failed: %s (%s:%d)
int zmq::v2_decoder_t::size_ready(uint64_t, const unsigned char*)
N3zmq12v2_decoder_tE
N3zmq14decoder_base_tINS_12v2_decoder_tENS_31shared_message_memory_allocatorEEE
src/encoder.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
%s (%s:%d)
in_progress () == NULL
Assertion failed: %s (%s:%d)
N3zmq12v1_encoder_tE
N3zmq14encoder_base_tINS_12v1_encoder_tEEE
N3zmq9i_encoderE
src/encoder.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
%s (%s:%d)
in_progress () == NULL
Assertion failed: %s (%s:%d)
N3zmq12v2_encoder_tE
N3zmq14encoder_base_tINS_12v2_encoder_tEEE
src/decoder_allocators.cpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
hint_
Assertion failed: %s (%s:%d)
inproc
src/ipc_connecter.cpp
addr
Assertion failed: %s (%s:%d)
addr->protocol == protocol_name::ipc
!timer_started
!handle_valid
s == retired_fd
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
id_ == reconnect_timer_id
s != retired_fd
%s (%s:%d)
N3zmq15ipc_connecter_tE
src/blob.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
src/mechanism.cpp
%s (%s:%d)
User-Id
PAIR
DEALER
ROUTER
PULL
PUSH
XPUB
XSUB
STREAM
SERVER
CLIENT
RADIO
DISH
GATHER
SCATTER
DGRAM
socket_type_ >= 0 && socket_type_ < (int) names_count
Assertion failed: %s (%s:%d)
name_len <= UCHAR_MAX
total_len <= ptr_capacity_
value_len_ <= 0x7FFFFFFF
Socket-Type
Identity
N3zmq11mechanism_tE
ERROR
READY
src/null_mechanism.cpp
rc == 0
Assertion failed: %s (%s:%d)
%s (%s:%d)
NULL
N3zmq16null_mechanism_tE
N3zmq16mechanism_base_tE
WELCOME
WELCOME
INITIATE
READY
^RROR
src/plain_client.cpp
%s (%s:%d)
username.length () <= UCHAR_MAX
Assertion failed: %s (%s:%d)
password.length () <= UCHAR_MAX
N3zmq14plain_client_tE
WELCOME
WELCOME
INITIATE
READY
^RROR
src/plain_server.cpp
zap_required ()
Assertion failed: %s (%s:%d)
%s (%s:%d)
status_code.length () == static_cast<size_t> (expected_status_code_len)
rc == 0
PLAIN
N3zmq14plain_server_tE
src/raw_decoder.cpp
%s (%s:%d)
N3zmq13raw_decoder_tE
src/encoder.hpp
FATAL ERROR: OUT OF MEMORY (%s:%d)
FATAL ERROR: OUT OF MEMORY
%s (%s:%d)
in_progress () == NULL
Assertion failed: %s (%s:%d)
N3zmq13raw_encoder_tE
N3zmq14encoder_base_tINS_13raw_encoder_tEEE
src/socks.cpp
_bytes_read < 2
Assertion failed: %s (%s:%d)
message_ready ()
hostname_.size () <= UINT8_MAX
req_.hostname.size () <= UINT8_MAX
atyp == 0x01 || atyp == 0x03 || atyp == 0x04
src/msg.hpp
%s (%s:%d)
src/zap_client.cpp
state == waiting_for_zap_reply
Assertion failed: %s (%s:%d)
N3zmq29zap_client_common_handshake_tE
N3zmq12zap_client_tE
0123456789abcdefghijklmnopqrstuvwxyz
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
__gmpn_mod_1 (((n)->_mp_d), (mp_size_t) ((n)->_mp_size), (mp_limb_t) primes[nprimes]) == 0
pprime_p.c
gmp: overflow in mpz type
%<MJ
$P3bO
d0[f
yB6{
UUUUUUUU
%<Mj
(M{W
'[H/
{YXV
hry6
q@5f
#<Z6
33333333
b7^]
$P3bO
W[[o
.v1x
Loo0
3<g}
-/RPA
yB6{
Cyo!-
ZEQh]
D#Fz
nNK|
`:*+^l
rvqZ*s
3'bN
q<S;
x$<V;
O@ 0
)u~(
Szjj0'a(
^D(+o
'RPA
Xi[d
o'gg
bV'3
bW(g
v)<r
*e]	
2{]Nu
|K'	
Aw%|
P*T%K
1%3U
=wINl
TiB~c
(M{W
D/mY
~ln	
vt$L
)037Q
e$.A3Q
HW$s
,$Z8
#m9?6
@uQ=
.#)8
Y2KEi
Yp9NG
B;cFe
x"RPA
DY["d>,
H"'&
+"gg
P""\
a	R}I
"R=p
P\c[
&y7:#VJ
Va@38
*LiP
dPM!
NOI+
_F!@H0U
'frID
a}4u
9JL&k !
$P3bO
QK(?mB
'[H/
3Pe>V
]|Dm
a v b
y 3U
>$m 5
~w` s
20Vs
.Z )
j~=wq
G ^l
fA K,
A%75 V
N,/ 
/# }P
 ;0v
;_bq
powtab_mem_ptr < powtab_mem + ((un) + 2 * 64)
get_str.c
powtab_mem_ptr < powtab_mem + ((un) + 64)
set_str.c
qxn == 0
tdiv_qr.c
n2p[qn] >= cy2
rn == dn
np[1] == n1
sbpi1_div_q.c
cy == 0
sbpi1_divappr_q.c
mu_div_qr.c
cx >= cy
mu_divappr_q.c
enb >= windowsize
sec_powm.c
%d: 
GNU MP assertion failed: %s
GNU MP: Cannot allocate memory (size=%lu)
GNU MP: Cannot reallocate memory (old_size=%lu new_size=%lu)
 !"#
 !"#
 !"#
$%&'()*+,-./0123456789:;<=
#Eoq
%OQ{
/1[}
nl == 0
mul_fft.c
(n & (K2 - 1)) == 0
nprime2 < n
__gmpn_fft_next_size (pl, k) == pl
nprime < pl
ap[0] > 0
gcdext_lehmer.c
bp[0] > 0
2 * n > rn
redc_n.c
d|e	a
O#z"
gOco
"gtZ
cZZ7
P{bX
B#{oe
7BA(
)o-s
}tM|9
N}t5
/EhP
N)+x{
DFwV.zu
fov>
wdch
G,]&\
9<7v.+
*Lr1
S0G- .
P>\.
wik*
LT>D?
<8}c
*z2P
xMGx
$"PS`M
D<F+
qMvCO
a6v$^7
|	Ic
']% K
u(pO
>VER
a	[P
nF'5
|3z=
[;>V
&[?tw
zZ(?
e&3p
jwN9__gnu_cxx24__concurrence_lock_errorE
N9__gnu_cxx26__concurrence_unlock_errorE
__gnu_cxx::__concurrence_lock_error
__gnu_cxx::__concurrence_unlock_error
N10__cxxabiv123__fundamental_type_infoE
PKDs
PKDi
PKDf
PKDd
PKDe
PKDn
PKDh
N10__cxxabiv117__class_type_infoE
N10__cxxabiv120__si_class_type_infoE
deleted virtual method called
pure virtual method called
(anonymous namespace)
string literal
decltype(auto)
[abi:
{default arg#
JArray
auto:
vtable for 
VTT for 
construction vtable for 
-in-
typeinfo for 
typeinfo name for 
typeinfo fn for 
non-virtual thunk to 
virtual thunk to 
covariant return thunk to 
java Class for 
guard variable for 
TLS init function for 
TLS wrapper function for 
reference temporary #
hidden alias for 
transaction clone for 
non-transaction clone for 
_Sat 
_Fract
_Accum
operator
operator 
new 
java resource 
decltype (
{parm#
this
global constructors keyed to 
global destructors keyed to 
{lambda(
{unnamed type#
 [clone 
 restrict
 volatile
 const
 transaction_safe
 noexcept
 throw
complex 
imaginary 
 __vector(
(...
_GLOBAL_
std::allocator
allocator
std::basic_string
basic_string
std::string
std::basic_string<char, std::char_traits<char>, std::allocator<char> >
std::istream
std::basic_istream<char, std::char_traits<char> >
basic_istream
std::ostream
std::basic_ostream<char, std::char_traits<char> >
basic_ostream
std::iostream
std::basic_iostream<char, std::char_traits<char> >
basic_iostream
alignof 
const_cast
delete[] 
dynamic_cast
delete 
operator"" 
new[]
reinterpret_cast
sizeof...
static_cast
sizeof 
throw
throw 
signed char
char
byte
double
long double
float
__float128
unsigned char
unsigned int
unsigned
long
unsigned long
__int128
unsigned __int128
unsigned short
void
wchar_t
long long
unsigned long long
decimal32
decimal64
decimal128
half
char16_t
char32_t
decltype(nullptr)
St20bad_array_new_length
std::bad_array_new_length
St9exception
St13bad_exception
N10__cxxabiv115__forced_unwindE
N10__cxxabiv119__foreign_exceptionE
std::bad_exception
std::exception
N10__cxxabiv120__function_type_infoE
St9type_info
N10__cxxabiv119__pointer_type_infoE
St10bad_typeid
std::bad_typeid
N10__cxxabiv121__vmi_class_type_infoE
N10__cxxabiv117__pbase_type_infoE
St8bad_cast
std::bad_cast
terminate called recursively
terminate called after throwing an instance of '
terminate called without an active exception
  what():  
St9bad_alloc
std::bad_alloc
NSt6locale5facetE
locale::_S_normalize_category category not found
locale::_Impl::_M_replace_facet
St11logic_error
St12domain_error
St16invalid_argument
St12length_error
St12out_of_range
St13runtime_error
St11range_error
St14overflow_error
St15underflow_error
St7codecvtIcc11__mbstate_tE
St7codecvtIwc11__mbstate_tE
locale::facet::_S_create_c_locale name not valid
locale::facet::_S_lc_ctype_c_locale duplocale error
locale::facet::_S_lc_ctype_c_locale newlocale error
LC_CTYPE
LC_NUMERIC
LC_TIME
LC_COLLATE
LC_MONETARY
LC_MESSAGES
LC_PAPER
LC_NAME
LC_ADDRESS
LC_TELEPHONE
LC_MEASUREMENT
LC_IDENTIFICATION
POSIX
LANG
locale::locale null not valid
St18__moneypunct_cacheIcLb1EE
St18__moneypunct_cacheIcLb0EE
St18__moneypunct_cacheIwLb1EE
St18__moneypunct_cacheIwLb0EE
St16__numpunct_cacheIcE
St16__numpunct_cacheIwE
NSt6thread6_StateE
Enable multithreading to use std::thread
St9basic_iosIcSt11char_traitsIcEE
St9basic_iosIwSt11char_traitsIwEE
basic_ios::clear
St8ios_base
ios_base::_M_grow_words allocation failed
ios_base::_M_grow_words is not valid
St10money_base
St13messages_base
St9time_base
NSt7__cxx117collateIcEE
NSt7__cxx1114collate_bynameIcEE
NSt7__cxx118numpunctIcEE
NSt7__cxx1115numpunct_bynameIcEE
NSt7__cxx1110moneypunctIcLb1EEE
NSt7__cxx1110moneypunctIcLb0EEE
NSt7__cxx118messagesIcEE
NSt7__cxx1117moneypunct_bynameIcLb0EEE
NSt7__cxx1117moneypunct_bynameIcLb1EEE
NSt7__cxx119money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEEE
NSt7__cxx119money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEEE
NSt7__cxx118time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEEE
NSt7__cxx1115time_get_bynameIcSt19istreambuf_iteratorIcSt11char_traitsIcEEEE
NSt7__cxx1115messages_bynameIcEE
%m/%d/%y
%H:%M
%.*Lf
NSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE
NSt7__cxx1119basic_istringstreamIcSt11char_traitsIcESaIcEEE
NSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE
NSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE
NSt7__cxx1115basic_stringbufIwSt11char_traitsIwESaIwEEE
NSt7__cxx1119basic_istringstreamIwSt11char_traitsIwESaIwEEE
NSt7__cxx1119basic_ostringstreamIwSt11char_traitsIwESaIwEEE
NSt7__cxx1118basic_stringstreamIwSt11char_traitsIwESaIwEEE
St10ctype_base
St12codecvt_base
St7collateIwE
St14collate_bynameIwE
St21__ctype_abstract_baseIwE
St8numpunctIwE
St15numpunct_bynameIwE
St7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE
St7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE
St17__timepunct_cacheIwE
St11__timepunctIwE
St10moneypunctIwLb1EE
St10moneypunctIwLb0EE
St8messagesIwE
St23__codecvt_abstract_baseIwc11__mbstate_tE
St14codecvt_bynameIwc11__mbstate_tE
St17moneypunct_bynameIwLb0EE
St17moneypunct_bynameIwLb1EE
St9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE
St9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE
St8time_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE
St15time_put_bynameIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE
St8time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE
St15time_get_bynameIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE
St15messages_bynameIwE
St15basic_streambufIcSt11char_traitsIcEE
St15basic_streambufIwSt11char_traitsIwEE
St23__codecvt_abstract_baseIDsc11__mbstate_tE
St7codecvtIDsc11__mbstate_tE
St23__codecvt_abstract_baseIDic11__mbstate_tE
St7codecvtIDic11__mbstate_tE
St19__codecvt_utf8_baseIDsE
St20__codecvt_utf16_baseIDsE
St25__codecvt_utf8_utf16_baseIDsE
St19__codecvt_utf8_baseIDiE
St20__codecvt_utf16_baseIDiE
St25__codecvt_utf8_utf16_baseIDiE
St19__codecvt_utf8_baseIwE
St20__codecvt_utf16_baseIwE
St25__codecvt_utf8_utf16_baseIwE
NSt3_V214error_categoryE
St12system_error
*N12_GLOBAL__N_121system_error_categoryE
*N12_GLOBAL__N_122generic_error_categoryE
St5ctypeIcE
St5ctypeIwE
St12ctype_bynameIwE
NSt6locale5facet6__shimE
uninitialized __any_string
cannot create shim for unknown locale::facet
*NSt13__facet_shims12_GLOBAL__N_112collate_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_112collate_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113messages_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113messages_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113numpunct_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113numpunct_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113time_get_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113time_get_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_114money_get_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_114money_get_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_114money_put_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_114money_put_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIcLb0EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIcLb1EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIwLb0EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIwLb1EEE
basic_string::copy
basic_string::compare
basic_string::assign
basic_string::insert
string::string
St12future_error
NSt13__future_base12_Result_baseE
future
Broken promise
Future already retrieved
Promise already satisfied
No associated state
*N12_GLOBAL__N_121future_error_categoryE
St17bad_function_call
bad_function_call
N9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEE
N9__gnu_cxx18stdio_sync_filebufIwSt11char_traitsIwEEE
N9__gnu_cxx13stdio_filebufIcSt11char_traitsIcEEE
N9__gnu_cxx13stdio_filebufIwSt11char_traitsIwEEE
St13basic_ostreamIwSt11char_traitsIwEE
St13basic_istreamIwSt11char_traitsIwEE
basic_string::_S_construct null not valid
basic_string::_S_create
basic_string::resize
St7collateIcE
St14collate_bynameIcE
St8numpunctIcE
St15numpunct_bynameIcE
St7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE
St7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
St17__timepunct_cacheIcE
St11__timepunctIcE
St10moneypunctIcLb1EE
St10moneypunctIcLb0EE
St8messagesIcE
St23__codecvt_abstract_baseIcc11__mbstate_tE
St14codecvt_bynameIcc11__mbstate_tE
St17moneypunct_bynameIcLb0EE
St17moneypunct_bynameIcLb1EE
St9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE
St9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
St8time_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
St15time_put_bynameIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE
St8time_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE
St15time_get_bynameIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE
St15messages_bynameIcE
St21__ctype_abstract_baseIcE
*NSt13__facet_shims12_GLOBAL__N_112collate_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_112collate_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113messages_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113messages_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113numpunct_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113numpunct_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_113time_get_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_113time_get_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_114money_get_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_114money_get_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_114money_put_shimIcEE
*NSt13__facet_shims12_GLOBAL__N_114money_put_shimIwEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIcLb0EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIcLb1EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIwLb0EEE
*NSt13__facet_shims12_GLOBAL__N_115moneypunct_shimIwLb1EEE
St12ctype_bynameIcE
space
cntrl
upper
lower
alpha
punct
xdigit
alnum
graph
blank
St14basic_iostreamIwSt11char_traitsIwEE
NSt8ios_base7failureB5cxx11E
St13__ios_failure
St19__iosfail_type_info
iostream
iostream error
*N12_GLOBAL__N_117io_error_categoryE
NSt7__cxx117collateIwEE
NSt7__cxx1114collate_bynameIwEE
NSt7__cxx118numpunctIwEE
NSt7__cxx1115numpunct_bynameIwEE
NSt7__cxx1110moneypunctIwLb1EEE
NSt7__cxx1110moneypunctIwLb0EEE
NSt7__cxx118messagesIwEE
NSt7__cxx1117moneypunct_bynameIwLb0EEE
NSt7__cxx1117moneypunct_bynameIwLb1EEE
NSt7__cxx119money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEEE
NSt7__cxx119money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEEE
NSt7__cxx118time_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEEE
NSt7__cxx1115time_get_bynameIwSt19istreambuf_iteratorIwSt11char_traitsIwEEEE
NSt7__cxx1115messages_bynameIwEE
St13basic_filebufIcSt11char_traitsIcEE
St14basic_ifstreamIcSt11char_traitsIcEE
St14basic_ofstreamIcSt11char_traitsIcEE
St13basic_fstreamIcSt11char_traitsIcEE
St13basic_filebufIwSt11char_traitsIwEE
St14basic_ifstreamIwSt11char_traitsIwEE
St14basic_ofstreamIwSt11char_traitsIwEE
St13basic_fstreamIwSt11char_traitsIwEE
basic_filebuf::_M_convert_to_external conversion error
basic_filebuf::xsgetn error reading the file
basic_filebuf::underflow codecvt::max_length() is not valid
basic_filebuf::underflow invalid byte sequence in file
basic_filebuf::underflow incomplete character in file
basic_filebuf::underflow error reading the file
mt19937
random_device::random_device(const std::string&)
N10__cxxabiv129__pointer_to_member_type_infoE
N9__gnu_cxx20recursive_init_errorE
-+xX0123456789abcdef0123456789ABCDEF
-+xX0123456789abcdefABCDEF
-0123456789
AKST
NSt8ios_base7failureE
Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
January
February
March
April
June
July
August
September
October
November
December
0123456789
not enough space for format expansion (Please submit full bug report at https://gcc.gnu.org/bugs/):
    
zPLR
	D(|
	D(|
	D(|
	D(|
	4(p
	4(p
	<0|
@o@ y
                    
0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#
TSRH
KLFA
IBJGQ$%&'()*+,-./0123456789:;<=M
 !"#O
GCC: (Ubuntu/Linaro 8.4.0-1ubuntu1~18.04) 8.4.0
giantd.dbg
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.tbss
.init_array
.fini_array
.data.rel.ro
.dynamic
.got
.data
.bss
.comment
.gnu_debuglink
